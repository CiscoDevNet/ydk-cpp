
#include <sstream>
#include <iostream>
#include <ydk/entity_util.hpp>
#include "bundle_info.hpp"
#include "generated_entity_lookup.hpp"
#include "Cisco_NX_OS_device_0.hpp"
#include "Cisco_NX_OS_device_15.hpp"
#include "Cisco_NX_OS_device_1.hpp"
#include "Cisco_NX_OS_device_2.hpp"
#include "Cisco_NX_OS_device_18.hpp"
#include "Cisco_NX_OS_device_33.hpp"
#include "Cisco_NX_OS_device_7.hpp"
#include "Cisco_NX_OS_device_23.hpp"
#include "Cisco_NX_OS_device_19.hpp"
#include "Cisco_NX_OS_device_41.hpp"
#include "Cisco_NX_OS_device_21.hpp"
#include "Cisco_NX_OS_device_24.hpp"
#include "Cisco_NX_OS_device_31.hpp"
#include "Cisco_NX_OS_device_36.hpp"
#include "Cisco_NX_OS_device_28.hpp"
#include "Cisco_NX_OS_device_35.hpp"
#include "Cisco_NX_OS_device_14.hpp"
#include "Cisco_NX_OS_device_8.hpp"
#include "Cisco_NX_OS_device_39.hpp"
#include "Cisco_NX_OS_device_43.hpp"
#include "Cisco_NX_OS_device_17.hpp"
#include "Cisco_NX_OS_device_3.hpp"
#include "Cisco_NX_OS_device_5.hpp"
#include "Cisco_NX_OS_device_4.hpp"
#include "Cisco_NX_OS_device_20.hpp"
#include "Cisco_NX_OS_device_6.hpp"
#include "Cisco_NX_OS_device_42.hpp"
#include "Cisco_NX_OS_device_30.hpp"
#include "Cisco_NX_OS_device_34.hpp"
#include "Cisco_NX_OS_device_32.hpp"
#include "Cisco_NX_OS_device_37.hpp"
#include "Cisco_NX_OS_device_45.hpp"
#include "Cisco_NX_OS_device_22.hpp"
#include "Cisco_NX_OS_device_25.hpp"
#include "Cisco_NX_OS_device_11.hpp"
#include "Cisco_NX_OS_device_27.hpp"
#include "Cisco_NX_OS_device_46.hpp"
#include "Cisco_NX_OS_device_40.hpp"
#include "Cisco_NX_OS_device_38.hpp"
#include "Cisco_NX_OS_device_44.hpp"

using namespace ydk;

namespace cisco_nx_os {
namespace Cisco_NX_OS_device {

Inactive::Inactive()
     : Identity("http://cisco.com/ns/yang/cisco-nx-os-device", "Cisco-NX-OS-device", "Cisco-NX-OS-device:inactive")
{

}

Inactive::~Inactive()
{
}

System::System()
    :
    currenttime{YType::str, "currentTime"},
    systemuptime{YType::str, "systemUpTime"},
    serial{YType::str, "serial"},
    name{YType::str, "name"}
        ,
    bgp_items(std::make_shared<System::BgpItems>())
    , sfw_items(std::make_shared<System::SfwItems>())
    , capabilities_items(std::make_shared<System::CapabilitiesItems>())
    , clock_items(std::make_shared<System::ClockItems>())
    , time_items(std::make_shared<System::TimeItems>())
    , ntpq_items(std::make_shared<System::NtpqItems>())
    , acct_items(std::make_shared<System::AcctItems>())
    , retry_items(std::make_shared<System::RetryItems>())
    , span_items(std::make_shared<System::SpanItems>())
    , dhcp_items(std::make_shared<System::DhcpItems>())
    , dns_items(std::make_shared<System::DnsItems>())
    , decommission_items(std::make_shared<System::DecommissionItems>())
    , inb_items(std::make_shared<System::InbItems>())
    , ext_items(std::make_shared<System::ExtItems>())
    , br_items(std::make_shared<System::BrItems>())
    , mac_items(std::make_shared<System::MacItems>())
    , cdp_items(std::make_shared<System::CdpItems>())
    , lldp_items(std::make_shared<System::LldpItems>())
    , mcp_items(std::make_shared<System::McpItems>())
    , vpc_items(std::make_shared<System::VpcItems>())
    , epns_items(std::make_shared<System::EpnsItems>())
    , gold_items(std::make_shared<System::GoldItems>())
    , igmp_items(std::make_shared<System::IgmpItems>())
    , ctrlrfwstatuscont_items(std::make_shared<System::CtrlrfwstatuscontItems>())
    , fwstatuscont_items(std::make_shared<System::FwstatuscontItems>())
    , catfwstatuscont_items(std::make_shared<System::CatfwstatuscontItems>())
    , isis_items(std::make_shared<System::IsisItems>())
    , lacp_items(std::make_shared<System::LacpItems>())
    , mgmt_items(std::make_shared<System::MgmtItems>())
    , snmp_items(std::make_shared<System::SnmpItems>())
    , syslogacct_items(std::make_shared<System::SyslogacctItems>())
    , syslog_items(std::make_shared<System::SyslogItems>())
    , mts_items(std::make_shared<System::MtsItems>())
    , nat_items(std::make_shared<System::NatItems>())
    , odcreq_items(std::make_shared<System::OdcreqItems>())
    , odcresp_items(std::make_shared<System::OdcrespItems>())
    , ospf_items(std::make_shared<System::OspfItems>())
    , evpn_items(std::make_shared<System::EvpnItems>())
    , userext_items(std::make_shared<System::UserextItems>())
    , mockroot_items(std::make_shared<System::MockrootItems>())
    , stp_items(std::make_shared<System::StpItems>())
    , bdtable_items(std::make_shared<System::BdTableItems>())
    , globalconftable_items(std::make_shared<System::GlobalConfTableItems>())
    , intftable_items(std::make_shared<System::IntfTableItems>())
    , mactable_items(std::make_shared<System::MacTableItems>())
    , systemtable_items(std::make_shared<System::SystemTableItems>())
    , tunnelintftable_items(std::make_shared<System::TunnelIntfTableItems>())
    , vlantable_items(std::make_shared<System::VlanTableItems>())
    , vpcdomtable_items(std::make_shared<System::VpcDomTableItems>())
    , vrftable_items(std::make_shared<System::VrfTableItems>())
    , acl_items(std::make_shared<System::AclItems>())
    , actrl_items(std::make_shared<System::ActrlItems>())
    , actrlcapprov_items(std::make_shared<System::ActrlcapprovItems>())
    , analytics_items(std::make_shared<System::AnalyticsItems>())
    , hwtelemetry_items(std::make_shared<System::HwtelemetryItems>())
    , copp_items(std::make_shared<System::CoppItems>())
    , glean_items(std::make_shared<System::GleanItems>())
    , hmm_items(std::make_shared<System::HmmItems>())
    , icam_items(std::make_shared<System::IcamItems>())
    , ipqos_items(std::make_shared<System::IpqosItems>())
    , monitor_items(std::make_shared<System::MonitorItems>())
    , flow_items(std::make_shared<System::FlowItems>())
    , ngoam_items(std::make_shared<System::NgoamItems>())
    , nxapi_items(std::make_shared<System::NxapiItems>())
    , poe_items(std::make_shared<System::PoeItems>())
    , qosm_items(std::make_shared<System::QosmItems>())
    , sisf_items(std::make_shared<System::SisfItems>())
    , tm_items(std::make_shared<System::TmItems>())
    , track_items(std::make_shared<System::TrackItems>())
    , udld_items(std::make_shared<System::UdldItems>())
    , acllog_items(std::make_shared<System::AcllogItems>())
    , bd_items(std::make_shared<System::BdItems>())
    , templatetable_items(std::make_shared<System::TemplateTableItems>())
    , fc_items(std::make_shared<System::FcItems>())
    , fcoe_items(std::make_shared<System::FcoeItems>())
    , npv_items(std::make_shared<System::NpvItems>())
    , vsanmgr_items(std::make_shared<System::VsanmgrItems>())
    , fm_items(std::make_shared<System::FmItems>())
    , fset_items(std::make_shared<System::FsetItems>())
    , install_items(std::make_shared<System::InstallItems>())
    , intf_items(std::make_shared<System::IntfItems>())
    , ipv4_items(std::make_shared<System::Ipv4Items>())
    , ipv6_items(std::make_shared<System::Ipv6Items>())
    , l1capprov_items(std::make_shared<System::L1capprovItems>())
    , ethpm_items(std::make_shared<System::EthpmItems>())
    , breakout_items(std::make_shared<System::BreakoutItems>())
    , im_items(std::make_shared<System::ImItems>())
    , pc_items(std::make_shared<System::PcItems>())
    , l2capprov_items(std::make_shared<System::L2capprovItems>())
    , fcpm_items(std::make_shared<System::FcpmItems>())
    , l2fm_items(std::make_shared<System::L2fmItems>())
    , l2rib_items(std::make_shared<System::L2ribItems>())
    , pvlan_items(std::make_shared<System::PvlanItems>())
    , vlanmgr_items(std::make_shared<System::VlanmgrItems>())
    , eps_items(std::make_shared<System::EpsItems>())
    , ctx_items(std::make_shared<System::CtxItems>())
    , inst_items(std::make_shared<System::InstItems>())
    , l3capprov_items(std::make_shared<System::L3capprovItems>())
    , l3vm_items(std::make_shared<System::L3vmItems>())
    , urib_items(std::make_shared<System::UribItems>())
    , u6rib_items(std::make_shared<System::U6ribItems>())
    , uribv4_items(std::make_shared<System::Uribv4Items>())
    , uribv6_items(std::make_shared<System::Uribv6Items>())
    , conng_items(std::make_shared<System::ConngItems>())
    , vdc_items(std::make_shared<System::VdcItems>())
    , procsys_items(std::make_shared<System::ProcsysItems>())
    , proc_items(std::make_shared<System::ProcItems>())
    , regr_items(std::make_shared<System::RegrItems>())
    , rpm_items(std::make_shared<System::RpmItems>())
    , ipsrcif_items(std::make_shared<System::IpSrcIfItems>())
    , swpkgs_items(std::make_shared<System::SwpkgsItems>())
    , sysmgr_items(std::make_shared<System::SysmgrItems>())
    , showversion_items(std::make_shared<System::ShowversionItems>())
    , tcpudp_items(std::make_shared<System::TcpudpItems>())
    , terml_items(std::make_shared<System::TermlItems>())
    , termlog_items(std::make_shared<System::TermlogItems>())
    , test_rule_items(std::make_shared<System::TestRuleItems>())
    , test_rslt__items(std::make_shared<System::TestRsltItems>())
    , tunnel_items(std::make_shared<System::TunnelItems>())
    , vtp_items(std::make_shared<System::VtpItems>())
    , nbm_items(std::make_shared<System::NbmItems>())
    , nbmcc_items(std::make_shared<System::NbmccItems>())
    , nbmflowstable_items(std::make_shared<System::NbmFlowsTableItems>())
    , nbmstats_items(std::make_shared<System::NbmStatsItems>())
    , boot_items(std::make_shared<System::BootItems>())
    , ch_items(std::make_shared<System::ChItems>())
    , extch_items(std::make_shared<System::ExtchItems>())
    , ops_items(std::make_shared<System::OpsItems>())
    , eqptcapacity_items(std::make_shared<System::EqptcapacityItems>())
    , diag_items(std::make_shared<System::DiagItems>())
    , lsnode_items(std::make_shared<System::LsnodeItems>())
    , pltfm_items(std::make_shared<System::PltfmItems>())
    , satm_items(std::make_shared<System::SatmItems>())
    , adjacency_items(std::make_shared<System::AdjacencyItems>())
    , arp_items(std::make_shared<System::ArpItems>())
    , bfd_items(std::make_shared<System::BfdItems>())
    , cfs_items(std::make_shared<System::CfsItems>())
    , hsrp_items(std::make_shared<System::HsrpItems>())
    , icmpv4_items(std::make_shared<System::Icmpv4Items>())
    , icmpv6_items(std::make_shared<System::Icmpv6Items>())
    , igmpsnoop_items(std::make_shared<System::IgmpsnoopItems>())
    , m6rib_items(std::make_shared<System::M6ribItems>())
    , macsec_items(std::make_shared<System::MacsecItems>())
    , mcastfwd_items(std::make_shared<System::McastfwdItems>())
    , mldsnoop_items(std::make_shared<System::MldsnoopItems>())
    , mpls_items(std::make_shared<System::MplsItems>())
    , mplsstatic_items(std::make_shared<System::MplsstaticItems>())
    , labeltable_items(std::make_shared<System::LabeltableItems>())
    , mrib_items(std::make_shared<System::MribItems>())
    , msdp_items(std::make_shared<System::MsdpItems>())
    , nd_items(std::make_shared<System::NdItems>())
    , ngmvpn_items(std::make_shared<System::NgmvpnItems>())
    , pim_items(std::make_shared<System::PimItems>())
    , pim6_items(std::make_shared<System::Pim6Items>())
    , segrt_items(std::make_shared<System::SegrtItems>())
    , vrrp_items(std::make_shared<System::VrrpItems>())
    , vrrpv3_items(std::make_shared<System::Vrrpv3Items>())
    , scrtchpdrt_items(std::make_shared<System::ScrtchpdrtItems>())
    , sectl_items(std::make_shared<System::SectlItems>())
    , caggr_items(std::make_shared<System::CaggrItems>())
    , cphys_items(std::make_shared<System::CphysItems>())
    , action_items(std::make_shared<System::ActionItems>())
    , rtdbgexptssrc_items(std::make_shared<System::RtdbgexpTsSrcItems>())
    , rttracerouteptrsrc_items(std::make_shared<System::RttraceroutepTrSrcItems>())
    , rttracerouteptrdst_items(std::make_shared<System::RttraceroutepTrDstItems>())
    , rtmaintfwinstlsrc_items(std::make_shared<System::RtmaintFwinstlsrcItems>())
{
    bgp_items->parent = this;
    sfw_items->parent = this;
    capabilities_items->parent = this;
    clock_items->parent = this;
    time_items->parent = this;
    ntpq_items->parent = this;
    acct_items->parent = this;
    retry_items->parent = this;
    span_items->parent = this;
    dhcp_items->parent = this;
    dns_items->parent = this;
    decommission_items->parent = this;
    inb_items->parent = this;
    ext_items->parent = this;
    br_items->parent = this;
    mac_items->parent = this;
    cdp_items->parent = this;
    lldp_items->parent = this;
    mcp_items->parent = this;
    vpc_items->parent = this;
    epns_items->parent = this;
    gold_items->parent = this;
    igmp_items->parent = this;
    ctrlrfwstatuscont_items->parent = this;
    fwstatuscont_items->parent = this;
    catfwstatuscont_items->parent = this;
    isis_items->parent = this;
    lacp_items->parent = this;
    mgmt_items->parent = this;
    snmp_items->parent = this;
    syslogacct_items->parent = this;
    syslog_items->parent = this;
    mts_items->parent = this;
    nat_items->parent = this;
    odcreq_items->parent = this;
    odcresp_items->parent = this;
    ospf_items->parent = this;
    evpn_items->parent = this;
    userext_items->parent = this;
    mockroot_items->parent = this;
    stp_items->parent = this;
    bdtable_items->parent = this;
    globalconftable_items->parent = this;
    intftable_items->parent = this;
    mactable_items->parent = this;
    systemtable_items->parent = this;
    tunnelintftable_items->parent = this;
    vlantable_items->parent = this;
    vpcdomtable_items->parent = this;
    vrftable_items->parent = this;
    acl_items->parent = this;
    actrl_items->parent = this;
    actrlcapprov_items->parent = this;
    analytics_items->parent = this;
    hwtelemetry_items->parent = this;
    copp_items->parent = this;
    glean_items->parent = this;
    hmm_items->parent = this;
    icam_items->parent = this;
    ipqos_items->parent = this;
    monitor_items->parent = this;
    flow_items->parent = this;
    ngoam_items->parent = this;
    nxapi_items->parent = this;
    poe_items->parent = this;
    qosm_items->parent = this;
    sisf_items->parent = this;
    tm_items->parent = this;
    track_items->parent = this;
    udld_items->parent = this;
    acllog_items->parent = this;
    bd_items->parent = this;
    templatetable_items->parent = this;
    fc_items->parent = this;
    fcoe_items->parent = this;
    npv_items->parent = this;
    vsanmgr_items->parent = this;
    fm_items->parent = this;
    fset_items->parent = this;
    install_items->parent = this;
    intf_items->parent = this;
    ipv4_items->parent = this;
    ipv6_items->parent = this;
    l1capprov_items->parent = this;
    ethpm_items->parent = this;
    breakout_items->parent = this;
    im_items->parent = this;
    pc_items->parent = this;
    l2capprov_items->parent = this;
    fcpm_items->parent = this;
    l2fm_items->parent = this;
    l2rib_items->parent = this;
    pvlan_items->parent = this;
    vlanmgr_items->parent = this;
    eps_items->parent = this;
    ctx_items->parent = this;
    inst_items->parent = this;
    l3capprov_items->parent = this;
    l3vm_items->parent = this;
    urib_items->parent = this;
    u6rib_items->parent = this;
    uribv4_items->parent = this;
    uribv6_items->parent = this;
    conng_items->parent = this;
    vdc_items->parent = this;
    procsys_items->parent = this;
    proc_items->parent = this;
    regr_items->parent = this;
    rpm_items->parent = this;
    ipsrcif_items->parent = this;
    swpkgs_items->parent = this;
    sysmgr_items->parent = this;
    showversion_items->parent = this;
    tcpudp_items->parent = this;
    terml_items->parent = this;
    termlog_items->parent = this;
    test_rule_items->parent = this;
    test_rslt__items->parent = this;
    tunnel_items->parent = this;
    vtp_items->parent = this;
    nbm_items->parent = this;
    nbmcc_items->parent = this;
    nbmflowstable_items->parent = this;
    nbmstats_items->parent = this;
    boot_items->parent = this;
    ch_items->parent = this;
    extch_items->parent = this;
    ops_items->parent = this;
    eqptcapacity_items->parent = this;
    diag_items->parent = this;
    lsnode_items->parent = this;
    pltfm_items->parent = this;
    satm_items->parent = this;
    adjacency_items->parent = this;
    arp_items->parent = this;
    bfd_items->parent = this;
    cfs_items->parent = this;
    hsrp_items->parent = this;
    icmpv4_items->parent = this;
    icmpv6_items->parent = this;
    igmpsnoop_items->parent = this;
    m6rib_items->parent = this;
    macsec_items->parent = this;
    mcastfwd_items->parent = this;
    mldsnoop_items->parent = this;
    mpls_items->parent = this;
    mplsstatic_items->parent = this;
    labeltable_items->parent = this;
    mrib_items->parent = this;
    msdp_items->parent = this;
    nd_items->parent = this;
    ngmvpn_items->parent = this;
    pim_items->parent = this;
    pim6_items->parent = this;
    segrt_items->parent = this;
    vrrp_items->parent = this;
    vrrpv3_items->parent = this;
    scrtchpdrt_items->parent = this;
    sectl_items->parent = this;
    caggr_items->parent = this;
    cphys_items->parent = this;
    action_items->parent = this;
    rtdbgexptssrc_items->parent = this;
    rttracerouteptrsrc_items->parent = this;
    rttracerouteptrdst_items->parent = this;
    rtmaintfwinstlsrc_items->parent = this;

    yang_name = "System"; yang_parent_name = "Cisco-NX-OS-device"; is_top_level_class = true; has_list_ancestor = false; 
}

System::~System()
{
}

bool System::has_data() const
{
    if (is_presence_container) return true;
    return currenttime.is_set
	|| systemuptime.is_set
	|| serial.is_set
	|| name.is_set
	|| (bgp_items !=  nullptr && bgp_items->has_data())
	|| (sfw_items !=  nullptr && sfw_items->has_data())
	|| (capabilities_items !=  nullptr && capabilities_items->has_data())
	|| (clock_items !=  nullptr && clock_items->has_data())
	|| (time_items !=  nullptr && time_items->has_data())
	|| (ntpq_items !=  nullptr && ntpq_items->has_data())
	|| (acct_items !=  nullptr && acct_items->has_data())
	|| (retry_items !=  nullptr && retry_items->has_data())
	|| (span_items !=  nullptr && span_items->has_data())
	|| (dhcp_items !=  nullptr && dhcp_items->has_data())
	|| (dns_items !=  nullptr && dns_items->has_data())
	|| (decommission_items !=  nullptr && decommission_items->has_data())
	|| (inb_items !=  nullptr && inb_items->has_data())
	|| (ext_items !=  nullptr && ext_items->has_data())
	|| (br_items !=  nullptr && br_items->has_data())
	|| (mac_items !=  nullptr && mac_items->has_data())
	|| (cdp_items !=  nullptr && cdp_items->has_data())
	|| (lldp_items !=  nullptr && lldp_items->has_data())
	|| (mcp_items !=  nullptr && mcp_items->has_data())
	|| (vpc_items !=  nullptr && vpc_items->has_data())
	|| (epns_items !=  nullptr && epns_items->has_data())
	|| (gold_items !=  nullptr && gold_items->has_data())
	|| (igmp_items !=  nullptr && igmp_items->has_data())
	|| (ctrlrfwstatuscont_items !=  nullptr && ctrlrfwstatuscont_items->has_data())
	|| (fwstatuscont_items !=  nullptr && fwstatuscont_items->has_data())
	|| (catfwstatuscont_items !=  nullptr && catfwstatuscont_items->has_data())
	|| (isis_items !=  nullptr && isis_items->has_data())
	|| (lacp_items !=  nullptr && lacp_items->has_data())
	|| (mgmt_items !=  nullptr && mgmt_items->has_data())
	|| (snmp_items !=  nullptr && snmp_items->has_data())
	|| (syslogacct_items !=  nullptr && syslogacct_items->has_data())
	|| (syslog_items !=  nullptr && syslog_items->has_data())
	|| (mts_items !=  nullptr && mts_items->has_data())
	|| (nat_items !=  nullptr && nat_items->has_data())
	|| (odcreq_items !=  nullptr && odcreq_items->has_data())
	|| (odcresp_items !=  nullptr && odcresp_items->has_data())
	|| (ospf_items !=  nullptr && ospf_items->has_data())
	|| (evpn_items !=  nullptr && evpn_items->has_data())
	|| (userext_items !=  nullptr && userext_items->has_data())
	|| (mockroot_items !=  nullptr && mockroot_items->has_data())
	|| (stp_items !=  nullptr && stp_items->has_data())
	|| (bdtable_items !=  nullptr && bdtable_items->has_data())
	|| (globalconftable_items !=  nullptr && globalconftable_items->has_data())
	|| (intftable_items !=  nullptr && intftable_items->has_data())
	|| (mactable_items !=  nullptr && mactable_items->has_data())
	|| (systemtable_items !=  nullptr && systemtable_items->has_data())
	|| (tunnelintftable_items !=  nullptr && tunnelintftable_items->has_data())
	|| (vlantable_items !=  nullptr && vlantable_items->has_data())
	|| (vpcdomtable_items !=  nullptr && vpcdomtable_items->has_data())
	|| (vrftable_items !=  nullptr && vrftable_items->has_data())
	|| (acl_items !=  nullptr && acl_items->has_data())
	|| (actrl_items !=  nullptr && actrl_items->has_data())
	|| (actrlcapprov_items !=  nullptr && actrlcapprov_items->has_data())
	|| (analytics_items !=  nullptr && analytics_items->has_data())
	|| (hwtelemetry_items !=  nullptr && hwtelemetry_items->has_data())
	|| (copp_items !=  nullptr && copp_items->has_data())
	|| (glean_items !=  nullptr && glean_items->has_data())
	|| (hmm_items !=  nullptr && hmm_items->has_data())
	|| (icam_items !=  nullptr && icam_items->has_data())
	|| (ipqos_items !=  nullptr && ipqos_items->has_data())
	|| (monitor_items !=  nullptr && monitor_items->has_data())
	|| (flow_items !=  nullptr && flow_items->has_data())
	|| (ngoam_items !=  nullptr && ngoam_items->has_data())
	|| (nxapi_items !=  nullptr && nxapi_items->has_data())
	|| (poe_items !=  nullptr && poe_items->has_data())
	|| (qosm_items !=  nullptr && qosm_items->has_data())
	|| (sisf_items !=  nullptr && sisf_items->has_data())
	|| (tm_items !=  nullptr && tm_items->has_data())
	|| (track_items !=  nullptr && track_items->has_data())
	|| (udld_items !=  nullptr && udld_items->has_data())
	|| (acllog_items !=  nullptr && acllog_items->has_data())
	|| (bd_items !=  nullptr && bd_items->has_data())
	|| (templatetable_items !=  nullptr && templatetable_items->has_data())
	|| (fc_items !=  nullptr && fc_items->has_data())
	|| (fcoe_items !=  nullptr && fcoe_items->has_data())
	|| (npv_items !=  nullptr && npv_items->has_data())
	|| (vsanmgr_items !=  nullptr && vsanmgr_items->has_data())
	|| (fm_items !=  nullptr && fm_items->has_data())
	|| (fset_items !=  nullptr && fset_items->has_data())
	|| (install_items !=  nullptr && install_items->has_data())
	|| (intf_items !=  nullptr && intf_items->has_data())
	|| (ipv4_items !=  nullptr && ipv4_items->has_data())
	|| (ipv6_items !=  nullptr && ipv6_items->has_data())
	|| (l1capprov_items !=  nullptr && l1capprov_items->has_data())
	|| (ethpm_items !=  nullptr && ethpm_items->has_data())
	|| (breakout_items !=  nullptr && breakout_items->has_data())
	|| (im_items !=  nullptr && im_items->has_data())
	|| (pc_items !=  nullptr && pc_items->has_data())
	|| (l2capprov_items !=  nullptr && l2capprov_items->has_data())
	|| (fcpm_items !=  nullptr && fcpm_items->has_data())
	|| (l2fm_items !=  nullptr && l2fm_items->has_data())
	|| (l2rib_items !=  nullptr && l2rib_items->has_data())
	|| (pvlan_items !=  nullptr && pvlan_items->has_data())
	|| (vlanmgr_items !=  nullptr && vlanmgr_items->has_data())
	|| (eps_items !=  nullptr && eps_items->has_data())
	|| (ctx_items !=  nullptr && ctx_items->has_data())
	|| (inst_items !=  nullptr && inst_items->has_data())
	|| (l3capprov_items !=  nullptr && l3capprov_items->has_data())
	|| (l3vm_items !=  nullptr && l3vm_items->has_data())
	|| (urib_items !=  nullptr && urib_items->has_data())
	|| (u6rib_items !=  nullptr && u6rib_items->has_data())
	|| (uribv4_items !=  nullptr && uribv4_items->has_data())
	|| (uribv6_items !=  nullptr && uribv6_items->has_data())
	|| (conng_items !=  nullptr && conng_items->has_data())
	|| (vdc_items !=  nullptr && vdc_items->has_data())
	|| (procsys_items !=  nullptr && procsys_items->has_data())
	|| (proc_items !=  nullptr && proc_items->has_data())
	|| (regr_items !=  nullptr && regr_items->has_data())
	|| (rpm_items !=  nullptr && rpm_items->has_data())
	|| (ipsrcif_items !=  nullptr && ipsrcif_items->has_data())
	|| (swpkgs_items !=  nullptr && swpkgs_items->has_data())
	|| (sysmgr_items !=  nullptr && sysmgr_items->has_data())
	|| (showversion_items !=  nullptr && showversion_items->has_data())
	|| (tcpudp_items !=  nullptr && tcpudp_items->has_data())
	|| (terml_items !=  nullptr && terml_items->has_data())
	|| (termlog_items !=  nullptr && termlog_items->has_data())
	|| (test_rule_items !=  nullptr && test_rule_items->has_data())
	|| (test_rslt__items !=  nullptr && test_rslt__items->has_data())
	|| (tunnel_items !=  nullptr && tunnel_items->has_data())
	|| (vtp_items !=  nullptr && vtp_items->has_data())
	|| (nbm_items !=  nullptr && nbm_items->has_data())
	|| (nbmcc_items !=  nullptr && nbmcc_items->has_data())
	|| (nbmflowstable_items !=  nullptr && nbmflowstable_items->has_data())
	|| (nbmstats_items !=  nullptr && nbmstats_items->has_data())
	|| (boot_items !=  nullptr && boot_items->has_data())
	|| (ch_items !=  nullptr && ch_items->has_data())
	|| (extch_items !=  nullptr && extch_items->has_data())
	|| (ops_items !=  nullptr && ops_items->has_data())
	|| (eqptcapacity_items !=  nullptr && eqptcapacity_items->has_data())
	|| (diag_items !=  nullptr && diag_items->has_data())
	|| (lsnode_items !=  nullptr && lsnode_items->has_data())
	|| (pltfm_items !=  nullptr && pltfm_items->has_data())
	|| (satm_items !=  nullptr && satm_items->has_data())
	|| (adjacency_items !=  nullptr && adjacency_items->has_data())
	|| (arp_items !=  nullptr && arp_items->has_data())
	|| (bfd_items !=  nullptr && bfd_items->has_data())
	|| (cfs_items !=  nullptr && cfs_items->has_data())
	|| (hsrp_items !=  nullptr && hsrp_items->has_data())
	|| (icmpv4_items !=  nullptr && icmpv4_items->has_data())
	|| (icmpv6_items !=  nullptr && icmpv6_items->has_data())
	|| (igmpsnoop_items !=  nullptr && igmpsnoop_items->has_data())
	|| (m6rib_items !=  nullptr && m6rib_items->has_data())
	|| (macsec_items !=  nullptr && macsec_items->has_data())
	|| (mcastfwd_items !=  nullptr && mcastfwd_items->has_data())
	|| (mldsnoop_items !=  nullptr && mldsnoop_items->has_data())
	|| (mpls_items !=  nullptr && mpls_items->has_data())
	|| (mplsstatic_items !=  nullptr && mplsstatic_items->has_data())
	|| (labeltable_items !=  nullptr && labeltable_items->has_data())
	|| (mrib_items !=  nullptr && mrib_items->has_data())
	|| (msdp_items !=  nullptr && msdp_items->has_data())
	|| (nd_items !=  nullptr && nd_items->has_data())
	|| (ngmvpn_items !=  nullptr && ngmvpn_items->has_data())
	|| (pim_items !=  nullptr && pim_items->has_data())
	|| (pim6_items !=  nullptr && pim6_items->has_data())
	|| (segrt_items !=  nullptr && segrt_items->has_data())
	|| (vrrp_items !=  nullptr && vrrp_items->has_data())
	|| (vrrpv3_items !=  nullptr && vrrpv3_items->has_data())
	|| (scrtchpdrt_items !=  nullptr && scrtchpdrt_items->has_data())
	|| (sectl_items !=  nullptr && sectl_items->has_data())
	|| (caggr_items !=  nullptr && caggr_items->has_data())
	|| (cphys_items !=  nullptr && cphys_items->has_data())
	|| (action_items !=  nullptr && action_items->has_data())
	|| (rtdbgexptssrc_items !=  nullptr && rtdbgexptssrc_items->has_data())
	|| (rttracerouteptrsrc_items !=  nullptr && rttracerouteptrsrc_items->has_data())
	|| (rttracerouteptrdst_items !=  nullptr && rttracerouteptrdst_items->has_data())
	|| (rtmaintfwinstlsrc_items !=  nullptr && rtmaintfwinstlsrc_items->has_data());
}

bool System::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(currenttime.yfilter)
	|| ydk::is_set(systemuptime.yfilter)
	|| ydk::is_set(serial.yfilter)
	|| ydk::is_set(name.yfilter)
	|| (bgp_items !=  nullptr && bgp_items->has_operation())
	|| (sfw_items !=  nullptr && sfw_items->has_operation())
	|| (capabilities_items !=  nullptr && capabilities_items->has_operation())
	|| (clock_items !=  nullptr && clock_items->has_operation())
	|| (time_items !=  nullptr && time_items->has_operation())
	|| (ntpq_items !=  nullptr && ntpq_items->has_operation())
	|| (acct_items !=  nullptr && acct_items->has_operation())
	|| (retry_items !=  nullptr && retry_items->has_operation())
	|| (span_items !=  nullptr && span_items->has_operation())
	|| (dhcp_items !=  nullptr && dhcp_items->has_operation())
	|| (dns_items !=  nullptr && dns_items->has_operation())
	|| (decommission_items !=  nullptr && decommission_items->has_operation())
	|| (inb_items !=  nullptr && inb_items->has_operation())
	|| (ext_items !=  nullptr && ext_items->has_operation())
	|| (br_items !=  nullptr && br_items->has_operation())
	|| (mac_items !=  nullptr && mac_items->has_operation())
	|| (cdp_items !=  nullptr && cdp_items->has_operation())
	|| (lldp_items !=  nullptr && lldp_items->has_operation())
	|| (mcp_items !=  nullptr && mcp_items->has_operation())
	|| (vpc_items !=  nullptr && vpc_items->has_operation())
	|| (epns_items !=  nullptr && epns_items->has_operation())
	|| (gold_items !=  nullptr && gold_items->has_operation())
	|| (igmp_items !=  nullptr && igmp_items->has_operation())
	|| (ctrlrfwstatuscont_items !=  nullptr && ctrlrfwstatuscont_items->has_operation())
	|| (fwstatuscont_items !=  nullptr && fwstatuscont_items->has_operation())
	|| (catfwstatuscont_items !=  nullptr && catfwstatuscont_items->has_operation())
	|| (isis_items !=  nullptr && isis_items->has_operation())
	|| (lacp_items !=  nullptr && lacp_items->has_operation())
	|| (mgmt_items !=  nullptr && mgmt_items->has_operation())
	|| (snmp_items !=  nullptr && snmp_items->has_operation())
	|| (syslogacct_items !=  nullptr && syslogacct_items->has_operation())
	|| (syslog_items !=  nullptr && syslog_items->has_operation())
	|| (mts_items !=  nullptr && mts_items->has_operation())
	|| (nat_items !=  nullptr && nat_items->has_operation())
	|| (odcreq_items !=  nullptr && odcreq_items->has_operation())
	|| (odcresp_items !=  nullptr && odcresp_items->has_operation())
	|| (ospf_items !=  nullptr && ospf_items->has_operation())
	|| (evpn_items !=  nullptr && evpn_items->has_operation())
	|| (userext_items !=  nullptr && userext_items->has_operation())
	|| (mockroot_items !=  nullptr && mockroot_items->has_operation())
	|| (stp_items !=  nullptr && stp_items->has_operation())
	|| (bdtable_items !=  nullptr && bdtable_items->has_operation())
	|| (globalconftable_items !=  nullptr && globalconftable_items->has_operation())
	|| (intftable_items !=  nullptr && intftable_items->has_operation())
	|| (mactable_items !=  nullptr && mactable_items->has_operation())
	|| (systemtable_items !=  nullptr && systemtable_items->has_operation())
	|| (tunnelintftable_items !=  nullptr && tunnelintftable_items->has_operation())
	|| (vlantable_items !=  nullptr && vlantable_items->has_operation())
	|| (vpcdomtable_items !=  nullptr && vpcdomtable_items->has_operation())
	|| (vrftable_items !=  nullptr && vrftable_items->has_operation())
	|| (acl_items !=  nullptr && acl_items->has_operation())
	|| (actrl_items !=  nullptr && actrl_items->has_operation())
	|| (actrlcapprov_items !=  nullptr && actrlcapprov_items->has_operation())
	|| (analytics_items !=  nullptr && analytics_items->has_operation())
	|| (hwtelemetry_items !=  nullptr && hwtelemetry_items->has_operation())
	|| (copp_items !=  nullptr && copp_items->has_operation())
	|| (glean_items !=  nullptr && glean_items->has_operation())
	|| (hmm_items !=  nullptr && hmm_items->has_operation())
	|| (icam_items !=  nullptr && icam_items->has_operation())
	|| (ipqos_items !=  nullptr && ipqos_items->has_operation())
	|| (monitor_items !=  nullptr && monitor_items->has_operation())
	|| (flow_items !=  nullptr && flow_items->has_operation())
	|| (ngoam_items !=  nullptr && ngoam_items->has_operation())
	|| (nxapi_items !=  nullptr && nxapi_items->has_operation())
	|| (poe_items !=  nullptr && poe_items->has_operation())
	|| (qosm_items !=  nullptr && qosm_items->has_operation())
	|| (sisf_items !=  nullptr && sisf_items->has_operation())
	|| (tm_items !=  nullptr && tm_items->has_operation())
	|| (track_items !=  nullptr && track_items->has_operation())
	|| (udld_items !=  nullptr && udld_items->has_operation())
	|| (acllog_items !=  nullptr && acllog_items->has_operation())
	|| (bd_items !=  nullptr && bd_items->has_operation())
	|| (templatetable_items !=  nullptr && templatetable_items->has_operation())
	|| (fc_items !=  nullptr && fc_items->has_operation())
	|| (fcoe_items !=  nullptr && fcoe_items->has_operation())
	|| (npv_items !=  nullptr && npv_items->has_operation())
	|| (vsanmgr_items !=  nullptr && vsanmgr_items->has_operation())
	|| (fm_items !=  nullptr && fm_items->has_operation())
	|| (fset_items !=  nullptr && fset_items->has_operation())
	|| (install_items !=  nullptr && install_items->has_operation())
	|| (intf_items !=  nullptr && intf_items->has_operation())
	|| (ipv4_items !=  nullptr && ipv4_items->has_operation())
	|| (ipv6_items !=  nullptr && ipv6_items->has_operation())
	|| (l1capprov_items !=  nullptr && l1capprov_items->has_operation())
	|| (ethpm_items !=  nullptr && ethpm_items->has_operation())
	|| (breakout_items !=  nullptr && breakout_items->has_operation())
	|| (im_items !=  nullptr && im_items->has_operation())
	|| (pc_items !=  nullptr && pc_items->has_operation())
	|| (l2capprov_items !=  nullptr && l2capprov_items->has_operation())
	|| (fcpm_items !=  nullptr && fcpm_items->has_operation())
	|| (l2fm_items !=  nullptr && l2fm_items->has_operation())
	|| (l2rib_items !=  nullptr && l2rib_items->has_operation())
	|| (pvlan_items !=  nullptr && pvlan_items->has_operation())
	|| (vlanmgr_items !=  nullptr && vlanmgr_items->has_operation())
	|| (eps_items !=  nullptr && eps_items->has_operation())
	|| (ctx_items !=  nullptr && ctx_items->has_operation())
	|| (inst_items !=  nullptr && inst_items->has_operation())
	|| (l3capprov_items !=  nullptr && l3capprov_items->has_operation())
	|| (l3vm_items !=  nullptr && l3vm_items->has_operation())
	|| (urib_items !=  nullptr && urib_items->has_operation())
	|| (u6rib_items !=  nullptr && u6rib_items->has_operation())
	|| (uribv4_items !=  nullptr && uribv4_items->has_operation())
	|| (uribv6_items !=  nullptr && uribv6_items->has_operation())
	|| (conng_items !=  nullptr && conng_items->has_operation())
	|| (vdc_items !=  nullptr && vdc_items->has_operation())
	|| (procsys_items !=  nullptr && procsys_items->has_operation())
	|| (proc_items !=  nullptr && proc_items->has_operation())
	|| (regr_items !=  nullptr && regr_items->has_operation())
	|| (rpm_items !=  nullptr && rpm_items->has_operation())
	|| (ipsrcif_items !=  nullptr && ipsrcif_items->has_operation())
	|| (swpkgs_items !=  nullptr && swpkgs_items->has_operation())
	|| (sysmgr_items !=  nullptr && sysmgr_items->has_operation())
	|| (showversion_items !=  nullptr && showversion_items->has_operation())
	|| (tcpudp_items !=  nullptr && tcpudp_items->has_operation())
	|| (terml_items !=  nullptr && terml_items->has_operation())
	|| (termlog_items !=  nullptr && termlog_items->has_operation())
	|| (test_rule_items !=  nullptr && test_rule_items->has_operation())
	|| (test_rslt__items !=  nullptr && test_rslt__items->has_operation())
	|| (tunnel_items !=  nullptr && tunnel_items->has_operation())
	|| (vtp_items !=  nullptr && vtp_items->has_operation())
	|| (nbm_items !=  nullptr && nbm_items->has_operation())
	|| (nbmcc_items !=  nullptr && nbmcc_items->has_operation())
	|| (nbmflowstable_items !=  nullptr && nbmflowstable_items->has_operation())
	|| (nbmstats_items !=  nullptr && nbmstats_items->has_operation())
	|| (boot_items !=  nullptr && boot_items->has_operation())
	|| (ch_items !=  nullptr && ch_items->has_operation())
	|| (extch_items !=  nullptr && extch_items->has_operation())
	|| (ops_items !=  nullptr && ops_items->has_operation())
	|| (eqptcapacity_items !=  nullptr && eqptcapacity_items->has_operation())
	|| (diag_items !=  nullptr && diag_items->has_operation())
	|| (lsnode_items !=  nullptr && lsnode_items->has_operation())
	|| (pltfm_items !=  nullptr && pltfm_items->has_operation())
	|| (satm_items !=  nullptr && satm_items->has_operation())
	|| (adjacency_items !=  nullptr && adjacency_items->has_operation())
	|| (arp_items !=  nullptr && arp_items->has_operation())
	|| (bfd_items !=  nullptr && bfd_items->has_operation())
	|| (cfs_items !=  nullptr && cfs_items->has_operation())
	|| (hsrp_items !=  nullptr && hsrp_items->has_operation())
	|| (icmpv4_items !=  nullptr && icmpv4_items->has_operation())
	|| (icmpv6_items !=  nullptr && icmpv6_items->has_operation())
	|| (igmpsnoop_items !=  nullptr && igmpsnoop_items->has_operation())
	|| (m6rib_items !=  nullptr && m6rib_items->has_operation())
	|| (macsec_items !=  nullptr && macsec_items->has_operation())
	|| (mcastfwd_items !=  nullptr && mcastfwd_items->has_operation())
	|| (mldsnoop_items !=  nullptr && mldsnoop_items->has_operation())
	|| (mpls_items !=  nullptr && mpls_items->has_operation())
	|| (mplsstatic_items !=  nullptr && mplsstatic_items->has_operation())
	|| (labeltable_items !=  nullptr && labeltable_items->has_operation())
	|| (mrib_items !=  nullptr && mrib_items->has_operation())
	|| (msdp_items !=  nullptr && msdp_items->has_operation())
	|| (nd_items !=  nullptr && nd_items->has_operation())
	|| (ngmvpn_items !=  nullptr && ngmvpn_items->has_operation())
	|| (pim_items !=  nullptr && pim_items->has_operation())
	|| (pim6_items !=  nullptr && pim6_items->has_operation())
	|| (segrt_items !=  nullptr && segrt_items->has_operation())
	|| (vrrp_items !=  nullptr && vrrp_items->has_operation())
	|| (vrrpv3_items !=  nullptr && vrrpv3_items->has_operation())
	|| (scrtchpdrt_items !=  nullptr && scrtchpdrt_items->has_operation())
	|| (sectl_items !=  nullptr && sectl_items->has_operation())
	|| (caggr_items !=  nullptr && caggr_items->has_operation())
	|| (cphys_items !=  nullptr && cphys_items->has_operation())
	|| (action_items !=  nullptr && action_items->has_operation())
	|| (rtdbgexptssrc_items !=  nullptr && rtdbgexptssrc_items->has_operation())
	|| (rttracerouteptrsrc_items !=  nullptr && rttracerouteptrsrc_items->has_operation())
	|| (rttracerouteptrdst_items !=  nullptr && rttracerouteptrdst_items->has_operation())
	|| (rtmaintfwinstlsrc_items !=  nullptr && rtmaintfwinstlsrc_items->has_operation());
}

std::string System::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-NX-OS-device:System";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (currenttime.is_set || is_set(currenttime.yfilter)) leaf_name_data.push_back(currenttime.get_name_leafdata());
    if (systemuptime.is_set || is_set(systemuptime.yfilter)) leaf_name_data.push_back(systemuptime.get_name_leafdata());
    if (serial.is_set || is_set(serial.yfilter)) leaf_name_data.push_back(serial.get_name_leafdata());
    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "bgp-items")
    {
        if(bgp_items == nullptr)
        {
            bgp_items = std::make_shared<System::BgpItems>();
        }
        return bgp_items;
    }

    if(child_yang_name == "sfw-items")
    {
        if(sfw_items == nullptr)
        {
            sfw_items = std::make_shared<System::SfwItems>();
        }
        return sfw_items;
    }

    if(child_yang_name == "capabilities-items")
    {
        if(capabilities_items == nullptr)
        {
            capabilities_items = std::make_shared<System::CapabilitiesItems>();
        }
        return capabilities_items;
    }

    if(child_yang_name == "clock-items")
    {
        if(clock_items == nullptr)
        {
            clock_items = std::make_shared<System::ClockItems>();
        }
        return clock_items;
    }

    if(child_yang_name == "time-items")
    {
        if(time_items == nullptr)
        {
            time_items = std::make_shared<System::TimeItems>();
        }
        return time_items;
    }

    if(child_yang_name == "ntpq-items")
    {
        if(ntpq_items == nullptr)
        {
            ntpq_items = std::make_shared<System::NtpqItems>();
        }
        return ntpq_items;
    }

    if(child_yang_name == "acct-items")
    {
        if(acct_items == nullptr)
        {
            acct_items = std::make_shared<System::AcctItems>();
        }
        return acct_items;
    }

    if(child_yang_name == "retry-items")
    {
        if(retry_items == nullptr)
        {
            retry_items = std::make_shared<System::RetryItems>();
        }
        return retry_items;
    }

    if(child_yang_name == "span-items")
    {
        if(span_items == nullptr)
        {
            span_items = std::make_shared<System::SpanItems>();
        }
        return span_items;
    }

    if(child_yang_name == "dhcp-items")
    {
        if(dhcp_items == nullptr)
        {
            dhcp_items = std::make_shared<System::DhcpItems>();
        }
        return dhcp_items;
    }

    if(child_yang_name == "dns-items")
    {
        if(dns_items == nullptr)
        {
            dns_items = std::make_shared<System::DnsItems>();
        }
        return dns_items;
    }

    if(child_yang_name == "decommission-items")
    {
        if(decommission_items == nullptr)
        {
            decommission_items = std::make_shared<System::DecommissionItems>();
        }
        return decommission_items;
    }

    if(child_yang_name == "inb-items")
    {
        if(inb_items == nullptr)
        {
            inb_items = std::make_shared<System::InbItems>();
        }
        return inb_items;
    }

    if(child_yang_name == "ext-items")
    {
        if(ext_items == nullptr)
        {
            ext_items = std::make_shared<System::ExtItems>();
        }
        return ext_items;
    }

    if(child_yang_name == "br-items")
    {
        if(br_items == nullptr)
        {
            br_items = std::make_shared<System::BrItems>();
        }
        return br_items;
    }

    if(child_yang_name == "mac-items")
    {
        if(mac_items == nullptr)
        {
            mac_items = std::make_shared<System::MacItems>();
        }
        return mac_items;
    }

    if(child_yang_name == "cdp-items")
    {
        if(cdp_items == nullptr)
        {
            cdp_items = std::make_shared<System::CdpItems>();
        }
        return cdp_items;
    }

    if(child_yang_name == "lldp-items")
    {
        if(lldp_items == nullptr)
        {
            lldp_items = std::make_shared<System::LldpItems>();
        }
        return lldp_items;
    }

    if(child_yang_name == "mcp-items")
    {
        if(mcp_items == nullptr)
        {
            mcp_items = std::make_shared<System::McpItems>();
        }
        return mcp_items;
    }

    if(child_yang_name == "vpc-items")
    {
        if(vpc_items == nullptr)
        {
            vpc_items = std::make_shared<System::VpcItems>();
        }
        return vpc_items;
    }

    if(child_yang_name == "epns-items")
    {
        if(epns_items == nullptr)
        {
            epns_items = std::make_shared<System::EpnsItems>();
        }
        return epns_items;
    }

    if(child_yang_name == "gold-items")
    {
        if(gold_items == nullptr)
        {
            gold_items = std::make_shared<System::GoldItems>();
        }
        return gold_items;
    }

    if(child_yang_name == "igmp-items")
    {
        if(igmp_items == nullptr)
        {
            igmp_items = std::make_shared<System::IgmpItems>();
        }
        return igmp_items;
    }

    if(child_yang_name == "ctrlrfwstatuscont-items")
    {
        if(ctrlrfwstatuscont_items == nullptr)
        {
            ctrlrfwstatuscont_items = std::make_shared<System::CtrlrfwstatuscontItems>();
        }
        return ctrlrfwstatuscont_items;
    }

    if(child_yang_name == "fwstatuscont-items")
    {
        if(fwstatuscont_items == nullptr)
        {
            fwstatuscont_items = std::make_shared<System::FwstatuscontItems>();
        }
        return fwstatuscont_items;
    }

    if(child_yang_name == "catfwstatuscont-items")
    {
        if(catfwstatuscont_items == nullptr)
        {
            catfwstatuscont_items = std::make_shared<System::CatfwstatuscontItems>();
        }
        return catfwstatuscont_items;
    }

    if(child_yang_name == "isis-items")
    {
        if(isis_items == nullptr)
        {
            isis_items = std::make_shared<System::IsisItems>();
        }
        return isis_items;
    }

    if(child_yang_name == "lacp-items")
    {
        if(lacp_items == nullptr)
        {
            lacp_items = std::make_shared<System::LacpItems>();
        }
        return lacp_items;
    }

    if(child_yang_name == "mgmt-items")
    {
        if(mgmt_items == nullptr)
        {
            mgmt_items = std::make_shared<System::MgmtItems>();
        }
        return mgmt_items;
    }

    if(child_yang_name == "snmp-items")
    {
        if(snmp_items == nullptr)
        {
            snmp_items = std::make_shared<System::SnmpItems>();
        }
        return snmp_items;
    }

    if(child_yang_name == "syslogacct-items")
    {
        if(syslogacct_items == nullptr)
        {
            syslogacct_items = std::make_shared<System::SyslogacctItems>();
        }
        return syslogacct_items;
    }

    if(child_yang_name == "syslog-items")
    {
        if(syslog_items == nullptr)
        {
            syslog_items = std::make_shared<System::SyslogItems>();
        }
        return syslog_items;
    }

    if(child_yang_name == "mts-items")
    {
        if(mts_items == nullptr)
        {
            mts_items = std::make_shared<System::MtsItems>();
        }
        return mts_items;
    }

    if(child_yang_name == "nat-items")
    {
        if(nat_items == nullptr)
        {
            nat_items = std::make_shared<System::NatItems>();
        }
        return nat_items;
    }

    if(child_yang_name == "odcreq-items")
    {
        if(odcreq_items == nullptr)
        {
            odcreq_items = std::make_shared<System::OdcreqItems>();
        }
        return odcreq_items;
    }

    if(child_yang_name == "odcresp-items")
    {
        if(odcresp_items == nullptr)
        {
            odcresp_items = std::make_shared<System::OdcrespItems>();
        }
        return odcresp_items;
    }

    if(child_yang_name == "ospf-items")
    {
        if(ospf_items == nullptr)
        {
            ospf_items = std::make_shared<System::OspfItems>();
        }
        return ospf_items;
    }

    if(child_yang_name == "evpn-items")
    {
        if(evpn_items == nullptr)
        {
            evpn_items = std::make_shared<System::EvpnItems>();
        }
        return evpn_items;
    }

    if(child_yang_name == "userext-items")
    {
        if(userext_items == nullptr)
        {
            userext_items = std::make_shared<System::UserextItems>();
        }
        return userext_items;
    }

    if(child_yang_name == "mockroot-items")
    {
        if(mockroot_items == nullptr)
        {
            mockroot_items = std::make_shared<System::MockrootItems>();
        }
        return mockroot_items;
    }

    if(child_yang_name == "stp-items")
    {
        if(stp_items == nullptr)
        {
            stp_items = std::make_shared<System::StpItems>();
        }
        return stp_items;
    }

    if(child_yang_name == "bdTable-items")
    {
        if(bdtable_items == nullptr)
        {
            bdtable_items = std::make_shared<System::BdTableItems>();
        }
        return bdtable_items;
    }

    if(child_yang_name == "globalConfTable-items")
    {
        if(globalconftable_items == nullptr)
        {
            globalconftable_items = std::make_shared<System::GlobalConfTableItems>();
        }
        return globalconftable_items;
    }

    if(child_yang_name == "intfTable-items")
    {
        if(intftable_items == nullptr)
        {
            intftable_items = std::make_shared<System::IntfTableItems>();
        }
        return intftable_items;
    }

    if(child_yang_name == "macTable-items")
    {
        if(mactable_items == nullptr)
        {
            mactable_items = std::make_shared<System::MacTableItems>();
        }
        return mactable_items;
    }

    if(child_yang_name == "systemTable-items")
    {
        if(systemtable_items == nullptr)
        {
            systemtable_items = std::make_shared<System::SystemTableItems>();
        }
        return systemtable_items;
    }

    if(child_yang_name == "tunnelIntfTable-items")
    {
        if(tunnelintftable_items == nullptr)
        {
            tunnelintftable_items = std::make_shared<System::TunnelIntfTableItems>();
        }
        return tunnelintftable_items;
    }

    if(child_yang_name == "vlanTable-items")
    {
        if(vlantable_items == nullptr)
        {
            vlantable_items = std::make_shared<System::VlanTableItems>();
        }
        return vlantable_items;
    }

    if(child_yang_name == "vpcDomTable-items")
    {
        if(vpcdomtable_items == nullptr)
        {
            vpcdomtable_items = std::make_shared<System::VpcDomTableItems>();
        }
        return vpcdomtable_items;
    }

    if(child_yang_name == "vrfTable-items")
    {
        if(vrftable_items == nullptr)
        {
            vrftable_items = std::make_shared<System::VrfTableItems>();
        }
        return vrftable_items;
    }

    if(child_yang_name == "acl-items")
    {
        if(acl_items == nullptr)
        {
            acl_items = std::make_shared<System::AclItems>();
        }
        return acl_items;
    }

    if(child_yang_name == "actrl-items")
    {
        if(actrl_items == nullptr)
        {
            actrl_items = std::make_shared<System::ActrlItems>();
        }
        return actrl_items;
    }

    if(child_yang_name == "actrlcapprov-items")
    {
        if(actrlcapprov_items == nullptr)
        {
            actrlcapprov_items = std::make_shared<System::ActrlcapprovItems>();
        }
        return actrlcapprov_items;
    }

    if(child_yang_name == "analytics-items")
    {
        if(analytics_items == nullptr)
        {
            analytics_items = std::make_shared<System::AnalyticsItems>();
        }
        return analytics_items;
    }

    if(child_yang_name == "hwtelemetry-items")
    {
        if(hwtelemetry_items == nullptr)
        {
            hwtelemetry_items = std::make_shared<System::HwtelemetryItems>();
        }
        return hwtelemetry_items;
    }

    if(child_yang_name == "copp-items")
    {
        if(copp_items == nullptr)
        {
            copp_items = std::make_shared<System::CoppItems>();
        }
        return copp_items;
    }

    if(child_yang_name == "glean-items")
    {
        if(glean_items == nullptr)
        {
            glean_items = std::make_shared<System::GleanItems>();
        }
        return glean_items;
    }

    if(child_yang_name == "hmm-items")
    {
        if(hmm_items == nullptr)
        {
            hmm_items = std::make_shared<System::HmmItems>();
        }
        return hmm_items;
    }

    if(child_yang_name == "icam-items")
    {
        if(icam_items == nullptr)
        {
            icam_items = std::make_shared<System::IcamItems>();
        }
        return icam_items;
    }

    if(child_yang_name == "ipqos-items")
    {
        if(ipqos_items == nullptr)
        {
            ipqos_items = std::make_shared<System::IpqosItems>();
        }
        return ipqos_items;
    }

    if(child_yang_name == "monitor-items")
    {
        if(monitor_items == nullptr)
        {
            monitor_items = std::make_shared<System::MonitorItems>();
        }
        return monitor_items;
    }

    if(child_yang_name == "flow-items")
    {
        if(flow_items == nullptr)
        {
            flow_items = std::make_shared<System::FlowItems>();
        }
        return flow_items;
    }

    if(child_yang_name == "ngoam-items")
    {
        if(ngoam_items == nullptr)
        {
            ngoam_items = std::make_shared<System::NgoamItems>();
        }
        return ngoam_items;
    }

    if(child_yang_name == "nxapi-items")
    {
        if(nxapi_items == nullptr)
        {
            nxapi_items = std::make_shared<System::NxapiItems>();
        }
        return nxapi_items;
    }

    if(child_yang_name == "poe-items")
    {
        if(poe_items == nullptr)
        {
            poe_items = std::make_shared<System::PoeItems>();
        }
        return poe_items;
    }

    if(child_yang_name == "qosm-items")
    {
        if(qosm_items == nullptr)
        {
            qosm_items = std::make_shared<System::QosmItems>();
        }
        return qosm_items;
    }

    if(child_yang_name == "sisf-items")
    {
        if(sisf_items == nullptr)
        {
            sisf_items = std::make_shared<System::SisfItems>();
        }
        return sisf_items;
    }

    if(child_yang_name == "tm-items")
    {
        if(tm_items == nullptr)
        {
            tm_items = std::make_shared<System::TmItems>();
        }
        return tm_items;
    }

    if(child_yang_name == "track-items")
    {
        if(track_items == nullptr)
        {
            track_items = std::make_shared<System::TrackItems>();
        }
        return track_items;
    }

    if(child_yang_name == "udld-items")
    {
        if(udld_items == nullptr)
        {
            udld_items = std::make_shared<System::UdldItems>();
        }
        return udld_items;
    }

    if(child_yang_name == "acllog-items")
    {
        if(acllog_items == nullptr)
        {
            acllog_items = std::make_shared<System::AcllogItems>();
        }
        return acllog_items;
    }

    if(child_yang_name == "bd-items")
    {
        if(bd_items == nullptr)
        {
            bd_items = std::make_shared<System::BdItems>();
        }
        return bd_items;
    }

    if(child_yang_name == "templateTable-items")
    {
        if(templatetable_items == nullptr)
        {
            templatetable_items = std::make_shared<System::TemplateTableItems>();
        }
        return templatetable_items;
    }

    if(child_yang_name == "fc-items")
    {
        if(fc_items == nullptr)
        {
            fc_items = std::make_shared<System::FcItems>();
        }
        return fc_items;
    }

    if(child_yang_name == "fcoe-items")
    {
        if(fcoe_items == nullptr)
        {
            fcoe_items = std::make_shared<System::FcoeItems>();
        }
        return fcoe_items;
    }

    if(child_yang_name == "npv-items")
    {
        if(npv_items == nullptr)
        {
            npv_items = std::make_shared<System::NpvItems>();
        }
        return npv_items;
    }

    if(child_yang_name == "vsanmgr-items")
    {
        if(vsanmgr_items == nullptr)
        {
            vsanmgr_items = std::make_shared<System::VsanmgrItems>();
        }
        return vsanmgr_items;
    }

    if(child_yang_name == "fm-items")
    {
        if(fm_items == nullptr)
        {
            fm_items = std::make_shared<System::FmItems>();
        }
        return fm_items;
    }

    if(child_yang_name == "fset-items")
    {
        if(fset_items == nullptr)
        {
            fset_items = std::make_shared<System::FsetItems>();
        }
        return fset_items;
    }

    if(child_yang_name == "install-items")
    {
        if(install_items == nullptr)
        {
            install_items = std::make_shared<System::InstallItems>();
        }
        return install_items;
    }

    if(child_yang_name == "intf-items")
    {
        if(intf_items == nullptr)
        {
            intf_items = std::make_shared<System::IntfItems>();
        }
        return intf_items;
    }

    if(child_yang_name == "ipv4-items")
    {
        if(ipv4_items == nullptr)
        {
            ipv4_items = std::make_shared<System::Ipv4Items>();
        }
        return ipv4_items;
    }

    if(child_yang_name == "ipv6-items")
    {
        if(ipv6_items == nullptr)
        {
            ipv6_items = std::make_shared<System::Ipv6Items>();
        }
        return ipv6_items;
    }

    if(child_yang_name == "l1capprov-items")
    {
        if(l1capprov_items == nullptr)
        {
            l1capprov_items = std::make_shared<System::L1capprovItems>();
        }
        return l1capprov_items;
    }

    if(child_yang_name == "ethpm-items")
    {
        if(ethpm_items == nullptr)
        {
            ethpm_items = std::make_shared<System::EthpmItems>();
        }
        return ethpm_items;
    }

    if(child_yang_name == "breakout-items")
    {
        if(breakout_items == nullptr)
        {
            breakout_items = std::make_shared<System::BreakoutItems>();
        }
        return breakout_items;
    }

    if(child_yang_name == "im-items")
    {
        if(im_items == nullptr)
        {
            im_items = std::make_shared<System::ImItems>();
        }
        return im_items;
    }

    if(child_yang_name == "pc-items")
    {
        if(pc_items == nullptr)
        {
            pc_items = std::make_shared<System::PcItems>();
        }
        return pc_items;
    }

    if(child_yang_name == "l2capprov-items")
    {
        if(l2capprov_items == nullptr)
        {
            l2capprov_items = std::make_shared<System::L2capprovItems>();
        }
        return l2capprov_items;
    }

    if(child_yang_name == "fcpm-items")
    {
        if(fcpm_items == nullptr)
        {
            fcpm_items = std::make_shared<System::FcpmItems>();
        }
        return fcpm_items;
    }

    if(child_yang_name == "l2fm-items")
    {
        if(l2fm_items == nullptr)
        {
            l2fm_items = std::make_shared<System::L2fmItems>();
        }
        return l2fm_items;
    }

    if(child_yang_name == "l2rib-items")
    {
        if(l2rib_items == nullptr)
        {
            l2rib_items = std::make_shared<System::L2ribItems>();
        }
        return l2rib_items;
    }

    if(child_yang_name == "pvlan-items")
    {
        if(pvlan_items == nullptr)
        {
            pvlan_items = std::make_shared<System::PvlanItems>();
        }
        return pvlan_items;
    }

    if(child_yang_name == "vlanmgr-items")
    {
        if(vlanmgr_items == nullptr)
        {
            vlanmgr_items = std::make_shared<System::VlanmgrItems>();
        }
        return vlanmgr_items;
    }

    if(child_yang_name == "eps-items")
    {
        if(eps_items == nullptr)
        {
            eps_items = std::make_shared<System::EpsItems>();
        }
        return eps_items;
    }

    if(child_yang_name == "ctx-items")
    {
        if(ctx_items == nullptr)
        {
            ctx_items = std::make_shared<System::CtxItems>();
        }
        return ctx_items;
    }

    if(child_yang_name == "inst-items")
    {
        if(inst_items == nullptr)
        {
            inst_items = std::make_shared<System::InstItems>();
        }
        return inst_items;
    }

    if(child_yang_name == "l3capprov-items")
    {
        if(l3capprov_items == nullptr)
        {
            l3capprov_items = std::make_shared<System::L3capprovItems>();
        }
        return l3capprov_items;
    }

    if(child_yang_name == "l3vm-items")
    {
        if(l3vm_items == nullptr)
        {
            l3vm_items = std::make_shared<System::L3vmItems>();
        }
        return l3vm_items;
    }

    if(child_yang_name == "urib-items")
    {
        if(urib_items == nullptr)
        {
            urib_items = std::make_shared<System::UribItems>();
        }
        return urib_items;
    }

    if(child_yang_name == "u6rib-items")
    {
        if(u6rib_items == nullptr)
        {
            u6rib_items = std::make_shared<System::U6ribItems>();
        }
        return u6rib_items;
    }

    if(child_yang_name == "uribv4-items")
    {
        if(uribv4_items == nullptr)
        {
            uribv4_items = std::make_shared<System::Uribv4Items>();
        }
        return uribv4_items;
    }

    if(child_yang_name == "uribv6-items")
    {
        if(uribv6_items == nullptr)
        {
            uribv6_items = std::make_shared<System::Uribv6Items>();
        }
        return uribv6_items;
    }

    if(child_yang_name == "conng-items")
    {
        if(conng_items == nullptr)
        {
            conng_items = std::make_shared<System::ConngItems>();
        }
        return conng_items;
    }

    if(child_yang_name == "vdc-items")
    {
        if(vdc_items == nullptr)
        {
            vdc_items = std::make_shared<System::VdcItems>();
        }
        return vdc_items;
    }

    if(child_yang_name == "procsys-items")
    {
        if(procsys_items == nullptr)
        {
            procsys_items = std::make_shared<System::ProcsysItems>();
        }
        return procsys_items;
    }

    if(child_yang_name == "proc-items")
    {
        if(proc_items == nullptr)
        {
            proc_items = std::make_shared<System::ProcItems>();
        }
        return proc_items;
    }

    if(child_yang_name == "regr-items")
    {
        if(regr_items == nullptr)
        {
            regr_items = std::make_shared<System::RegrItems>();
        }
        return regr_items;
    }

    if(child_yang_name == "rpm-items")
    {
        if(rpm_items == nullptr)
        {
            rpm_items = std::make_shared<System::RpmItems>();
        }
        return rpm_items;
    }

    if(child_yang_name == "ipSrcIf-items")
    {
        if(ipsrcif_items == nullptr)
        {
            ipsrcif_items = std::make_shared<System::IpSrcIfItems>();
        }
        return ipsrcif_items;
    }

    if(child_yang_name == "swpkgs-items")
    {
        if(swpkgs_items == nullptr)
        {
            swpkgs_items = std::make_shared<System::SwpkgsItems>();
        }
        return swpkgs_items;
    }

    if(child_yang_name == "sysmgr-items")
    {
        if(sysmgr_items == nullptr)
        {
            sysmgr_items = std::make_shared<System::SysmgrItems>();
        }
        return sysmgr_items;
    }

    if(child_yang_name == "showversion-items")
    {
        if(showversion_items == nullptr)
        {
            showversion_items = std::make_shared<System::ShowversionItems>();
        }
        return showversion_items;
    }

    if(child_yang_name == "tcpudp-items")
    {
        if(tcpudp_items == nullptr)
        {
            tcpudp_items = std::make_shared<System::TcpudpItems>();
        }
        return tcpudp_items;
    }

    if(child_yang_name == "terml-items")
    {
        if(terml_items == nullptr)
        {
            terml_items = std::make_shared<System::TermlItems>();
        }
        return terml_items;
    }

    if(child_yang_name == "termlog-items")
    {
        if(termlog_items == nullptr)
        {
            termlog_items = std::make_shared<System::TermlogItems>();
        }
        return termlog_items;
    }

    if(child_yang_name == "test_rule-items")
    {
        if(test_rule_items == nullptr)
        {
            test_rule_items = std::make_shared<System::TestRuleItems>();
        }
        return test_rule_items;
    }

    if(child_yang_name == "test_rslt_-items")
    {
        if(test_rslt__items == nullptr)
        {
            test_rslt__items = std::make_shared<System::TestRsltItems>();
        }
        return test_rslt__items;
    }

    if(child_yang_name == "tunnel-items")
    {
        if(tunnel_items == nullptr)
        {
            tunnel_items = std::make_shared<System::TunnelItems>();
        }
        return tunnel_items;
    }

    if(child_yang_name == "vtp-items")
    {
        if(vtp_items == nullptr)
        {
            vtp_items = std::make_shared<System::VtpItems>();
        }
        return vtp_items;
    }

    if(child_yang_name == "nbm-items")
    {
        if(nbm_items == nullptr)
        {
            nbm_items = std::make_shared<System::NbmItems>();
        }
        return nbm_items;
    }

    if(child_yang_name == "nbmcc-items")
    {
        if(nbmcc_items == nullptr)
        {
            nbmcc_items = std::make_shared<System::NbmccItems>();
        }
        return nbmcc_items;
    }

    if(child_yang_name == "nbmFlowsTable-items")
    {
        if(nbmflowstable_items == nullptr)
        {
            nbmflowstable_items = std::make_shared<System::NbmFlowsTableItems>();
        }
        return nbmflowstable_items;
    }

    if(child_yang_name == "nbmStats-items")
    {
        if(nbmstats_items == nullptr)
        {
            nbmstats_items = std::make_shared<System::NbmStatsItems>();
        }
        return nbmstats_items;
    }

    if(child_yang_name == "boot-items")
    {
        if(boot_items == nullptr)
        {
            boot_items = std::make_shared<System::BootItems>();
        }
        return boot_items;
    }

    if(child_yang_name == "ch-items")
    {
        if(ch_items == nullptr)
        {
            ch_items = std::make_shared<System::ChItems>();
        }
        return ch_items;
    }

    if(child_yang_name == "extch-items")
    {
        if(extch_items == nullptr)
        {
            extch_items = std::make_shared<System::ExtchItems>();
        }
        return extch_items;
    }

    if(child_yang_name == "ops-items")
    {
        if(ops_items == nullptr)
        {
            ops_items = std::make_shared<System::OpsItems>();
        }
        return ops_items;
    }

    if(child_yang_name == "eqptcapacity-items")
    {
        if(eqptcapacity_items == nullptr)
        {
            eqptcapacity_items = std::make_shared<System::EqptcapacityItems>();
        }
        return eqptcapacity_items;
    }

    if(child_yang_name == "diag-items")
    {
        if(diag_items == nullptr)
        {
            diag_items = std::make_shared<System::DiagItems>();
        }
        return diag_items;
    }

    if(child_yang_name == "lsnode-items")
    {
        if(lsnode_items == nullptr)
        {
            lsnode_items = std::make_shared<System::LsnodeItems>();
        }
        return lsnode_items;
    }

    if(child_yang_name == "pltfm-items")
    {
        if(pltfm_items == nullptr)
        {
            pltfm_items = std::make_shared<System::PltfmItems>();
        }
        return pltfm_items;
    }

    if(child_yang_name == "satm-items")
    {
        if(satm_items == nullptr)
        {
            satm_items = std::make_shared<System::SatmItems>();
        }
        return satm_items;
    }

    if(child_yang_name == "adjacency-items")
    {
        if(adjacency_items == nullptr)
        {
            adjacency_items = std::make_shared<System::AdjacencyItems>();
        }
        return adjacency_items;
    }

    if(child_yang_name == "arp-items")
    {
        if(arp_items == nullptr)
        {
            arp_items = std::make_shared<System::ArpItems>();
        }
        return arp_items;
    }

    if(child_yang_name == "bfd-items")
    {
        if(bfd_items == nullptr)
        {
            bfd_items = std::make_shared<System::BfdItems>();
        }
        return bfd_items;
    }

    if(child_yang_name == "cfs-items")
    {
        if(cfs_items == nullptr)
        {
            cfs_items = std::make_shared<System::CfsItems>();
        }
        return cfs_items;
    }

    if(child_yang_name == "hsrp-items")
    {
        if(hsrp_items == nullptr)
        {
            hsrp_items = std::make_shared<System::HsrpItems>();
        }
        return hsrp_items;
    }

    if(child_yang_name == "icmpv4-items")
    {
        if(icmpv4_items == nullptr)
        {
            icmpv4_items = std::make_shared<System::Icmpv4Items>();
        }
        return icmpv4_items;
    }

    if(child_yang_name == "icmpv6-items")
    {
        if(icmpv6_items == nullptr)
        {
            icmpv6_items = std::make_shared<System::Icmpv6Items>();
        }
        return icmpv6_items;
    }

    if(child_yang_name == "igmpsnoop-items")
    {
        if(igmpsnoop_items == nullptr)
        {
            igmpsnoop_items = std::make_shared<System::IgmpsnoopItems>();
        }
        return igmpsnoop_items;
    }

    if(child_yang_name == "m6rib-items")
    {
        if(m6rib_items == nullptr)
        {
            m6rib_items = std::make_shared<System::M6ribItems>();
        }
        return m6rib_items;
    }

    if(child_yang_name == "macsec-items")
    {
        if(macsec_items == nullptr)
        {
            macsec_items = std::make_shared<System::MacsecItems>();
        }
        return macsec_items;
    }

    if(child_yang_name == "mcastfwd-items")
    {
        if(mcastfwd_items == nullptr)
        {
            mcastfwd_items = std::make_shared<System::McastfwdItems>();
        }
        return mcastfwd_items;
    }

    if(child_yang_name == "mldsnoop-items")
    {
        if(mldsnoop_items == nullptr)
        {
            mldsnoop_items = std::make_shared<System::MldsnoopItems>();
        }
        return mldsnoop_items;
    }

    if(child_yang_name == "mpls-items")
    {
        if(mpls_items == nullptr)
        {
            mpls_items = std::make_shared<System::MplsItems>();
        }
        return mpls_items;
    }

    if(child_yang_name == "mplsstatic-items")
    {
        if(mplsstatic_items == nullptr)
        {
            mplsstatic_items = std::make_shared<System::MplsstaticItems>();
        }
        return mplsstatic_items;
    }

    if(child_yang_name == "labeltable-items")
    {
        if(labeltable_items == nullptr)
        {
            labeltable_items = std::make_shared<System::LabeltableItems>();
        }
        return labeltable_items;
    }

    if(child_yang_name == "mrib-items")
    {
        if(mrib_items == nullptr)
        {
            mrib_items = std::make_shared<System::MribItems>();
        }
        return mrib_items;
    }

    if(child_yang_name == "msdp-items")
    {
        if(msdp_items == nullptr)
        {
            msdp_items = std::make_shared<System::MsdpItems>();
        }
        return msdp_items;
    }

    if(child_yang_name == "nd-items")
    {
        if(nd_items == nullptr)
        {
            nd_items = std::make_shared<System::NdItems>();
        }
        return nd_items;
    }

    if(child_yang_name == "ngmvpn-items")
    {
        if(ngmvpn_items == nullptr)
        {
            ngmvpn_items = std::make_shared<System::NgmvpnItems>();
        }
        return ngmvpn_items;
    }

    if(child_yang_name == "pim-items")
    {
        if(pim_items == nullptr)
        {
            pim_items = std::make_shared<System::PimItems>();
        }
        return pim_items;
    }

    if(child_yang_name == "pim6-items")
    {
        if(pim6_items == nullptr)
        {
            pim6_items = std::make_shared<System::Pim6Items>();
        }
        return pim6_items;
    }

    if(child_yang_name == "segrt-items")
    {
        if(segrt_items == nullptr)
        {
            segrt_items = std::make_shared<System::SegrtItems>();
        }
        return segrt_items;
    }

    if(child_yang_name == "vrrp-items")
    {
        if(vrrp_items == nullptr)
        {
            vrrp_items = std::make_shared<System::VrrpItems>();
        }
        return vrrp_items;
    }

    if(child_yang_name == "vrrpv3-items")
    {
        if(vrrpv3_items == nullptr)
        {
            vrrpv3_items = std::make_shared<System::Vrrpv3Items>();
        }
        return vrrpv3_items;
    }

    if(child_yang_name == "scrtchpdrt-items")
    {
        if(scrtchpdrt_items == nullptr)
        {
            scrtchpdrt_items = std::make_shared<System::ScrtchpdrtItems>();
        }
        return scrtchpdrt_items;
    }

    if(child_yang_name == "sectl-items")
    {
        if(sectl_items == nullptr)
        {
            sectl_items = std::make_shared<System::SectlItems>();
        }
        return sectl_items;
    }

    if(child_yang_name == "caggr-items")
    {
        if(caggr_items == nullptr)
        {
            caggr_items = std::make_shared<System::CaggrItems>();
        }
        return caggr_items;
    }

    if(child_yang_name == "cphys-items")
    {
        if(cphys_items == nullptr)
        {
            cphys_items = std::make_shared<System::CphysItems>();
        }
        return cphys_items;
    }

    if(child_yang_name == "action-items")
    {
        if(action_items == nullptr)
        {
            action_items = std::make_shared<System::ActionItems>();
        }
        return action_items;
    }

    if(child_yang_name == "rtdbgexpTsSrc-items")
    {
        if(rtdbgexptssrc_items == nullptr)
        {
            rtdbgexptssrc_items = std::make_shared<System::RtdbgexpTsSrcItems>();
        }
        return rtdbgexptssrc_items;
    }

    if(child_yang_name == "rttraceroutepTrSrc-items")
    {
        if(rttracerouteptrsrc_items == nullptr)
        {
            rttracerouteptrsrc_items = std::make_shared<System::RttraceroutepTrSrcItems>();
        }
        return rttracerouteptrsrc_items;
    }

    if(child_yang_name == "rttraceroutepTrDst-items")
    {
        if(rttracerouteptrdst_items == nullptr)
        {
            rttracerouteptrdst_items = std::make_shared<System::RttraceroutepTrDstItems>();
        }
        return rttracerouteptrdst_items;
    }

    if(child_yang_name == "rtmaintFwinstlsrc-items")
    {
        if(rtmaintfwinstlsrc_items == nullptr)
        {
            rtmaintfwinstlsrc_items = std::make_shared<System::RtmaintFwinstlsrcItems>();
        }
        return rtmaintfwinstlsrc_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(bgp_items != nullptr)
    {
        _children["bgp-items"] = bgp_items;
    }

    if(sfw_items != nullptr)
    {
        _children["sfw-items"] = sfw_items;
    }

    if(capabilities_items != nullptr)
    {
        _children["capabilities-items"] = capabilities_items;
    }

    if(clock_items != nullptr)
    {
        _children["clock-items"] = clock_items;
    }

    if(time_items != nullptr)
    {
        _children["time-items"] = time_items;
    }

    if(ntpq_items != nullptr)
    {
        _children["ntpq-items"] = ntpq_items;
    }

    if(acct_items != nullptr)
    {
        _children["acct-items"] = acct_items;
    }

    if(retry_items != nullptr)
    {
        _children["retry-items"] = retry_items;
    }

    if(span_items != nullptr)
    {
        _children["span-items"] = span_items;
    }

    if(dhcp_items != nullptr)
    {
        _children["dhcp-items"] = dhcp_items;
    }

    if(dns_items != nullptr)
    {
        _children["dns-items"] = dns_items;
    }

    if(decommission_items != nullptr)
    {
        _children["decommission-items"] = decommission_items;
    }

    if(inb_items != nullptr)
    {
        _children["inb-items"] = inb_items;
    }

    if(ext_items != nullptr)
    {
        _children["ext-items"] = ext_items;
    }

    if(br_items != nullptr)
    {
        _children["br-items"] = br_items;
    }

    if(mac_items != nullptr)
    {
        _children["mac-items"] = mac_items;
    }

    if(cdp_items != nullptr)
    {
        _children["cdp-items"] = cdp_items;
    }

    if(lldp_items != nullptr)
    {
        _children["lldp-items"] = lldp_items;
    }

    if(mcp_items != nullptr)
    {
        _children["mcp-items"] = mcp_items;
    }

    if(vpc_items != nullptr)
    {
        _children["vpc-items"] = vpc_items;
    }

    if(epns_items != nullptr)
    {
        _children["epns-items"] = epns_items;
    }

    if(gold_items != nullptr)
    {
        _children["gold-items"] = gold_items;
    }

    if(igmp_items != nullptr)
    {
        _children["igmp-items"] = igmp_items;
    }

    if(ctrlrfwstatuscont_items != nullptr)
    {
        _children["ctrlrfwstatuscont-items"] = ctrlrfwstatuscont_items;
    }

    if(fwstatuscont_items != nullptr)
    {
        _children["fwstatuscont-items"] = fwstatuscont_items;
    }

    if(catfwstatuscont_items != nullptr)
    {
        _children["catfwstatuscont-items"] = catfwstatuscont_items;
    }

    if(isis_items != nullptr)
    {
        _children["isis-items"] = isis_items;
    }

    if(lacp_items != nullptr)
    {
        _children["lacp-items"] = lacp_items;
    }

    if(mgmt_items != nullptr)
    {
        _children["mgmt-items"] = mgmt_items;
    }

    if(snmp_items != nullptr)
    {
        _children["snmp-items"] = snmp_items;
    }

    if(syslogacct_items != nullptr)
    {
        _children["syslogacct-items"] = syslogacct_items;
    }

    if(syslog_items != nullptr)
    {
        _children["syslog-items"] = syslog_items;
    }

    if(mts_items != nullptr)
    {
        _children["mts-items"] = mts_items;
    }

    if(nat_items != nullptr)
    {
        _children["nat-items"] = nat_items;
    }

    if(odcreq_items != nullptr)
    {
        _children["odcreq-items"] = odcreq_items;
    }

    if(odcresp_items != nullptr)
    {
        _children["odcresp-items"] = odcresp_items;
    }

    if(ospf_items != nullptr)
    {
        _children["ospf-items"] = ospf_items;
    }

    if(evpn_items != nullptr)
    {
        _children["evpn-items"] = evpn_items;
    }

    if(userext_items != nullptr)
    {
        _children["userext-items"] = userext_items;
    }

    if(mockroot_items != nullptr)
    {
        _children["mockroot-items"] = mockroot_items;
    }

    if(stp_items != nullptr)
    {
        _children["stp-items"] = stp_items;
    }

    if(bdtable_items != nullptr)
    {
        _children["bdTable-items"] = bdtable_items;
    }

    if(globalconftable_items != nullptr)
    {
        _children["globalConfTable-items"] = globalconftable_items;
    }

    if(intftable_items != nullptr)
    {
        _children["intfTable-items"] = intftable_items;
    }

    if(mactable_items != nullptr)
    {
        _children["macTable-items"] = mactable_items;
    }

    if(systemtable_items != nullptr)
    {
        _children["systemTable-items"] = systemtable_items;
    }

    if(tunnelintftable_items != nullptr)
    {
        _children["tunnelIntfTable-items"] = tunnelintftable_items;
    }

    if(vlantable_items != nullptr)
    {
        _children["vlanTable-items"] = vlantable_items;
    }

    if(vpcdomtable_items != nullptr)
    {
        _children["vpcDomTable-items"] = vpcdomtable_items;
    }

    if(vrftable_items != nullptr)
    {
        _children["vrfTable-items"] = vrftable_items;
    }

    if(acl_items != nullptr)
    {
        _children["acl-items"] = acl_items;
    }

    if(actrl_items != nullptr)
    {
        _children["actrl-items"] = actrl_items;
    }

    if(actrlcapprov_items != nullptr)
    {
        _children["actrlcapprov-items"] = actrlcapprov_items;
    }

    if(analytics_items != nullptr)
    {
        _children["analytics-items"] = analytics_items;
    }

    if(hwtelemetry_items != nullptr)
    {
        _children["hwtelemetry-items"] = hwtelemetry_items;
    }

    if(copp_items != nullptr)
    {
        _children["copp-items"] = copp_items;
    }

    if(glean_items != nullptr)
    {
        _children["glean-items"] = glean_items;
    }

    if(hmm_items != nullptr)
    {
        _children["hmm-items"] = hmm_items;
    }

    if(icam_items != nullptr)
    {
        _children["icam-items"] = icam_items;
    }

    if(ipqos_items != nullptr)
    {
        _children["ipqos-items"] = ipqos_items;
    }

    if(monitor_items != nullptr)
    {
        _children["monitor-items"] = monitor_items;
    }

    if(flow_items != nullptr)
    {
        _children["flow-items"] = flow_items;
    }

    if(ngoam_items != nullptr)
    {
        _children["ngoam-items"] = ngoam_items;
    }

    if(nxapi_items != nullptr)
    {
        _children["nxapi-items"] = nxapi_items;
    }

    if(poe_items != nullptr)
    {
        _children["poe-items"] = poe_items;
    }

    if(qosm_items != nullptr)
    {
        _children["qosm-items"] = qosm_items;
    }

    if(sisf_items != nullptr)
    {
        _children["sisf-items"] = sisf_items;
    }

    if(tm_items != nullptr)
    {
        _children["tm-items"] = tm_items;
    }

    if(track_items != nullptr)
    {
        _children["track-items"] = track_items;
    }

    if(udld_items != nullptr)
    {
        _children["udld-items"] = udld_items;
    }

    if(acllog_items != nullptr)
    {
        _children["acllog-items"] = acllog_items;
    }

    if(bd_items != nullptr)
    {
        _children["bd-items"] = bd_items;
    }

    if(templatetable_items != nullptr)
    {
        _children["templateTable-items"] = templatetable_items;
    }

    if(fc_items != nullptr)
    {
        _children["fc-items"] = fc_items;
    }

    if(fcoe_items != nullptr)
    {
        _children["fcoe-items"] = fcoe_items;
    }

    if(npv_items != nullptr)
    {
        _children["npv-items"] = npv_items;
    }

    if(vsanmgr_items != nullptr)
    {
        _children["vsanmgr-items"] = vsanmgr_items;
    }

    if(fm_items != nullptr)
    {
        _children["fm-items"] = fm_items;
    }

    if(fset_items != nullptr)
    {
        _children["fset-items"] = fset_items;
    }

    if(install_items != nullptr)
    {
        _children["install-items"] = install_items;
    }

    if(intf_items != nullptr)
    {
        _children["intf-items"] = intf_items;
    }

    if(ipv4_items != nullptr)
    {
        _children["ipv4-items"] = ipv4_items;
    }

    if(ipv6_items != nullptr)
    {
        _children["ipv6-items"] = ipv6_items;
    }

    if(l1capprov_items != nullptr)
    {
        _children["l1capprov-items"] = l1capprov_items;
    }

    if(ethpm_items != nullptr)
    {
        _children["ethpm-items"] = ethpm_items;
    }

    if(breakout_items != nullptr)
    {
        _children["breakout-items"] = breakout_items;
    }

    if(im_items != nullptr)
    {
        _children["im-items"] = im_items;
    }

    if(pc_items != nullptr)
    {
        _children["pc-items"] = pc_items;
    }

    if(l2capprov_items != nullptr)
    {
        _children["l2capprov-items"] = l2capprov_items;
    }

    if(fcpm_items != nullptr)
    {
        _children["fcpm-items"] = fcpm_items;
    }

    if(l2fm_items != nullptr)
    {
        _children["l2fm-items"] = l2fm_items;
    }

    if(l2rib_items != nullptr)
    {
        _children["l2rib-items"] = l2rib_items;
    }

    if(pvlan_items != nullptr)
    {
        _children["pvlan-items"] = pvlan_items;
    }

    if(vlanmgr_items != nullptr)
    {
        _children["vlanmgr-items"] = vlanmgr_items;
    }

    if(eps_items != nullptr)
    {
        _children["eps-items"] = eps_items;
    }

    if(ctx_items != nullptr)
    {
        _children["ctx-items"] = ctx_items;
    }

    if(inst_items != nullptr)
    {
        _children["inst-items"] = inst_items;
    }

    if(l3capprov_items != nullptr)
    {
        _children["l3capprov-items"] = l3capprov_items;
    }

    if(l3vm_items != nullptr)
    {
        _children["l3vm-items"] = l3vm_items;
    }

    if(urib_items != nullptr)
    {
        _children["urib-items"] = urib_items;
    }

    if(u6rib_items != nullptr)
    {
        _children["u6rib-items"] = u6rib_items;
    }

    if(uribv4_items != nullptr)
    {
        _children["uribv4-items"] = uribv4_items;
    }

    if(uribv6_items != nullptr)
    {
        _children["uribv6-items"] = uribv6_items;
    }

    if(conng_items != nullptr)
    {
        _children["conng-items"] = conng_items;
    }

    if(vdc_items != nullptr)
    {
        _children["vdc-items"] = vdc_items;
    }

    if(procsys_items != nullptr)
    {
        _children["procsys-items"] = procsys_items;
    }

    if(proc_items != nullptr)
    {
        _children["proc-items"] = proc_items;
    }

    if(regr_items != nullptr)
    {
        _children["regr-items"] = regr_items;
    }

    if(rpm_items != nullptr)
    {
        _children["rpm-items"] = rpm_items;
    }

    if(ipsrcif_items != nullptr)
    {
        _children["ipSrcIf-items"] = ipsrcif_items;
    }

    if(swpkgs_items != nullptr)
    {
        _children["swpkgs-items"] = swpkgs_items;
    }

    if(sysmgr_items != nullptr)
    {
        _children["sysmgr-items"] = sysmgr_items;
    }

    if(showversion_items != nullptr)
    {
        _children["showversion-items"] = showversion_items;
    }

    if(tcpudp_items != nullptr)
    {
        _children["tcpudp-items"] = tcpudp_items;
    }

    if(terml_items != nullptr)
    {
        _children["terml-items"] = terml_items;
    }

    if(termlog_items != nullptr)
    {
        _children["termlog-items"] = termlog_items;
    }

    if(test_rule_items != nullptr)
    {
        _children["test_rule-items"] = test_rule_items;
    }

    if(test_rslt__items != nullptr)
    {
        _children["test_rslt_-items"] = test_rslt__items;
    }

    if(tunnel_items != nullptr)
    {
        _children["tunnel-items"] = tunnel_items;
    }

    if(vtp_items != nullptr)
    {
        _children["vtp-items"] = vtp_items;
    }

    if(nbm_items != nullptr)
    {
        _children["nbm-items"] = nbm_items;
    }

    if(nbmcc_items != nullptr)
    {
        _children["nbmcc-items"] = nbmcc_items;
    }

    if(nbmflowstable_items != nullptr)
    {
        _children["nbmFlowsTable-items"] = nbmflowstable_items;
    }

    if(nbmstats_items != nullptr)
    {
        _children["nbmStats-items"] = nbmstats_items;
    }

    if(boot_items != nullptr)
    {
        _children["boot-items"] = boot_items;
    }

    if(ch_items != nullptr)
    {
        _children["ch-items"] = ch_items;
    }

    if(extch_items != nullptr)
    {
        _children["extch-items"] = extch_items;
    }

    if(ops_items != nullptr)
    {
        _children["ops-items"] = ops_items;
    }

    if(eqptcapacity_items != nullptr)
    {
        _children["eqptcapacity-items"] = eqptcapacity_items;
    }

    if(diag_items != nullptr)
    {
        _children["diag-items"] = diag_items;
    }

    if(lsnode_items != nullptr)
    {
        _children["lsnode-items"] = lsnode_items;
    }

    if(pltfm_items != nullptr)
    {
        _children["pltfm-items"] = pltfm_items;
    }

    if(satm_items != nullptr)
    {
        _children["satm-items"] = satm_items;
    }

    if(adjacency_items != nullptr)
    {
        _children["adjacency-items"] = adjacency_items;
    }

    if(arp_items != nullptr)
    {
        _children["arp-items"] = arp_items;
    }

    if(bfd_items != nullptr)
    {
        _children["bfd-items"] = bfd_items;
    }

    if(cfs_items != nullptr)
    {
        _children["cfs-items"] = cfs_items;
    }

    if(hsrp_items != nullptr)
    {
        _children["hsrp-items"] = hsrp_items;
    }

    if(icmpv4_items != nullptr)
    {
        _children["icmpv4-items"] = icmpv4_items;
    }

    if(icmpv6_items != nullptr)
    {
        _children["icmpv6-items"] = icmpv6_items;
    }

    if(igmpsnoop_items != nullptr)
    {
        _children["igmpsnoop-items"] = igmpsnoop_items;
    }

    if(m6rib_items != nullptr)
    {
        _children["m6rib-items"] = m6rib_items;
    }

    if(macsec_items != nullptr)
    {
        _children["macsec-items"] = macsec_items;
    }

    if(mcastfwd_items != nullptr)
    {
        _children["mcastfwd-items"] = mcastfwd_items;
    }

    if(mldsnoop_items != nullptr)
    {
        _children["mldsnoop-items"] = mldsnoop_items;
    }

    if(mpls_items != nullptr)
    {
        _children["mpls-items"] = mpls_items;
    }

    if(mplsstatic_items != nullptr)
    {
        _children["mplsstatic-items"] = mplsstatic_items;
    }

    if(labeltable_items != nullptr)
    {
        _children["labeltable-items"] = labeltable_items;
    }

    if(mrib_items != nullptr)
    {
        _children["mrib-items"] = mrib_items;
    }

    if(msdp_items != nullptr)
    {
        _children["msdp-items"] = msdp_items;
    }

    if(nd_items != nullptr)
    {
        _children["nd-items"] = nd_items;
    }

    if(ngmvpn_items != nullptr)
    {
        _children["ngmvpn-items"] = ngmvpn_items;
    }

    if(pim_items != nullptr)
    {
        _children["pim-items"] = pim_items;
    }

    if(pim6_items != nullptr)
    {
        _children["pim6-items"] = pim6_items;
    }

    if(segrt_items != nullptr)
    {
        _children["segrt-items"] = segrt_items;
    }

    if(vrrp_items != nullptr)
    {
        _children["vrrp-items"] = vrrp_items;
    }

    if(vrrpv3_items != nullptr)
    {
        _children["vrrpv3-items"] = vrrpv3_items;
    }

    if(scrtchpdrt_items != nullptr)
    {
        _children["scrtchpdrt-items"] = scrtchpdrt_items;
    }

    if(sectl_items != nullptr)
    {
        _children["sectl-items"] = sectl_items;
    }

    if(caggr_items != nullptr)
    {
        _children["caggr-items"] = caggr_items;
    }

    if(cphys_items != nullptr)
    {
        _children["cphys-items"] = cphys_items;
    }

    if(action_items != nullptr)
    {
        _children["action-items"] = action_items;
    }

    if(rtdbgexptssrc_items != nullptr)
    {
        _children["rtdbgexpTsSrc-items"] = rtdbgexptssrc_items;
    }

    if(rttracerouteptrsrc_items != nullptr)
    {
        _children["rttraceroutepTrSrc-items"] = rttracerouteptrsrc_items;
    }

    if(rttracerouteptrdst_items != nullptr)
    {
        _children["rttraceroutepTrDst-items"] = rttracerouteptrdst_items;
    }

    if(rtmaintfwinstlsrc_items != nullptr)
    {
        _children["rtmaintFwinstlsrc-items"] = rtmaintfwinstlsrc_items;
    }

    return _children;
}

void System::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "currentTime")
    {
        currenttime = value;
        currenttime.value_namespace = name_space;
        currenttime.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "systemUpTime")
    {
        systemuptime = value;
        systemuptime.value_namespace = name_space;
        systemuptime.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "serial")
    {
        serial = value;
        serial.value_namespace = name_space;
        serial.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
}

void System::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "currentTime")
    {
        currenttime.yfilter = yfilter;
    }
    if(value_path == "systemUpTime")
    {
        systemuptime.yfilter = yfilter;
    }
    if(value_path == "serial")
    {
        serial.yfilter = yfilter;
    }
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
}

std::shared_ptr<ydk::Entity> System::clone_ptr() const
{
    return std::make_shared<System>();
}

std::string System::get_bundle_yang_models_location() const
{
    return ydk_cisco_nx_os_models_path;
}

std::string System::get_bundle_name() const
{
    return "cisco_nx_os";
}

augment_capabilities_function System::get_augment_capabilities_function() const
{
    return cisco_nx_os_augment_lookup_tables;
}

std::map<std::pair<std::string, std::string>, std::string> System::get_namespace_identity_lookup() const
{
    return cisco_nx_os_namespace_identity_lookup;
}

bool System::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "bgp-items" || name == "sfw-items" || name == "capabilities-items" || name == "clock-items" || name == "time-items" || name == "ntpq-items" || name == "acct-items" || name == "retry-items" || name == "span-items" || name == "dhcp-items" || name == "dns-items" || name == "decommission-items" || name == "inb-items" || name == "ext-items" || name == "br-items" || name == "mac-items" || name == "cdp-items" || name == "lldp-items" || name == "mcp-items" || name == "vpc-items" || name == "epns-items" || name == "gold-items" || name == "igmp-items" || name == "ctrlrfwstatuscont-items" || name == "fwstatuscont-items" || name == "catfwstatuscont-items" || name == "isis-items" || name == "lacp-items" || name == "mgmt-items" || name == "snmp-items" || name == "syslogacct-items" || name == "syslog-items" || name == "mts-items" || name == "nat-items" || name == "odcreq-items" || name == "odcresp-items" || name == "ospf-items" || name == "evpn-items" || name == "userext-items" || name == "mockroot-items" || name == "stp-items" || name == "bdTable-items" || name == "globalConfTable-items" || name == "intfTable-items" || name == "macTable-items" || name == "systemTable-items" || name == "tunnelIntfTable-items" || name == "vlanTable-items" || name == "vpcDomTable-items" || name == "vrfTable-items" || name == "acl-items" || name == "actrl-items" || name == "actrlcapprov-items" || name == "analytics-items" || name == "hwtelemetry-items" || name == "copp-items" || name == "glean-items" || name == "hmm-items" || name == "icam-items" || name == "ipqos-items" || name == "monitor-items" || name == "flow-items" || name == "ngoam-items" || name == "nxapi-items" || name == "poe-items" || name == "qosm-items" || name == "sisf-items" || name == "tm-items" || name == "track-items" || name == "udld-items" || name == "acllog-items" || name == "bd-items" || name == "templateTable-items" || name == "fc-items" || name == "fcoe-items" || name == "npv-items" || name == "vsanmgr-items" || name == "fm-items" || name == "fset-items" || name == "install-items" || name == "intf-items" || name == "ipv4-items" || name == "ipv6-items" || name == "l1capprov-items" || name == "ethpm-items" || name == "breakout-items" || name == "im-items" || name == "pc-items" || name == "l2capprov-items" || name == "fcpm-items" || name == "l2fm-items" || name == "l2rib-items" || name == "pvlan-items" || name == "vlanmgr-items" || name == "eps-items" || name == "ctx-items" || name == "inst-items" || name == "l3capprov-items" || name == "l3vm-items" || name == "urib-items" || name == "u6rib-items" || name == "uribv4-items" || name == "uribv6-items" || name == "conng-items" || name == "vdc-items" || name == "procsys-items" || name == "proc-items" || name == "regr-items" || name == "rpm-items" || name == "ipSrcIf-items" || name == "swpkgs-items" || name == "sysmgr-items" || name == "showversion-items" || name == "tcpudp-items" || name == "terml-items" || name == "termlog-items" || name == "test_rule-items" || name == "test_rslt_-items" || name == "tunnel-items" || name == "vtp-items" || name == "nbm-items" || name == "nbmcc-items" || name == "nbmFlowsTable-items" || name == "nbmStats-items" || name == "boot-items" || name == "ch-items" || name == "extch-items" || name == "ops-items" || name == "eqptcapacity-items" || name == "diag-items" || name == "lsnode-items" || name == "pltfm-items" || name == "satm-items" || name == "adjacency-items" || name == "arp-items" || name == "bfd-items" || name == "cfs-items" || name == "hsrp-items" || name == "icmpv4-items" || name == "icmpv6-items" || name == "igmpsnoop-items" || name == "m6rib-items" || name == "macsec-items" || name == "mcastfwd-items" || name == "mldsnoop-items" || name == "mpls-items" || name == "mplsstatic-items" || name == "labeltable-items" || name == "mrib-items" || name == "msdp-items" || name == "nd-items" || name == "ngmvpn-items" || name == "pim-items" || name == "pim6-items" || name == "segrt-items" || name == "vrrp-items" || name == "vrrpv3-items" || name == "scrtchpdrt-items" || name == "sectl-items" || name == "caggr-items" || name == "cphys-items" || name == "action-items" || name == "rtdbgexpTsSrc-items" || name == "rttraceroutepTrSrc-items" || name == "rttraceroutepTrDst-items" || name == "rtmaintFwinstlsrc-items" || name == "currentTime" || name == "systemUpTime" || name == "serial" || name == "name")
        return true;
    return false;
}

System::BgpItems::BgpItems()
    :
    name{YType::str, "name"},
    adminst{YType::enumeration, "adminSt"},
    operst{YType::enumeration, "operSt"}
        ,
    inst_items(std::make_shared<System::BgpItems::InstItems>())
{
    inst_items->parent = this;

    yang_name = "bgp-items"; yang_parent_name = "System"; is_top_level_class = false; has_list_ancestor = false; 
}

System::BgpItems::~BgpItems()
{
}

bool System::BgpItems::has_data() const
{
    if (is_presence_container) return true;
    return name.is_set
	|| adminst.is_set
	|| operst.is_set
	|| (inst_items !=  nullptr && inst_items->has_data());
}

bool System::BgpItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(name.yfilter)
	|| ydk::is_set(adminst.yfilter)
	|| ydk::is_set(operst.yfilter)
	|| (inst_items !=  nullptr && inst_items->has_operation());
}

std::string System::BgpItems::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-NX-OS-device:System/" << get_segment_path();
    return path_buffer.str();
}

std::string System::BgpItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bgp-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());
    if (adminst.is_set || is_set(adminst.yfilter)) leaf_name_data.push_back(adminst.get_name_leafdata());
    if (operst.is_set || is_set(operst.yfilter)) leaf_name_data.push_back(operst.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "inst-items")
    {
        if(inst_items == nullptr)
        {
            inst_items = std::make_shared<System::BgpItems::InstItems>();
        }
        return inst_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(inst_items != nullptr)
    {
        _children["inst-items"] = inst_items;
    }

    return _children;
}

void System::BgpItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "adminSt")
    {
        adminst = value;
        adminst.value_namespace = name_space;
        adminst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "operSt")
    {
        operst = value;
        operst.value_namespace = name_space;
        operst.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
    if(value_path == "adminSt")
    {
        adminst.yfilter = yfilter;
    }
    if(value_path == "operSt")
    {
        operst.yfilter = yfilter;
    }
}

bool System::BgpItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "inst-items" || name == "name" || name == "adminSt" || name == "operSt")
        return true;
    return false;
}

System::BgpItems::InstItems::InstItems()
    :
    asn{YType::str, "asn"},
    dispolbatch{YType::enumeration, "disPolBatch"},
    dispolbatchv4pfxlst{YType::str, "disPolBatchv4PfxLst"},
    dispolbatchv6pfxlst{YType::str, "disPolBatchv6PfxLst"},
    createts{YType::str, "createTs"},
    activatets{YType::str, "activateTs"},
    waitdonets{YType::str, "waitDoneTs"},
    memalert{YType::enumeration, "memAlert"},
    numrtattrib{YType::uint16, "numRtAttrib"},
    attribdbsz{YType::uint32, "attribDbSz"},
    numaspath{YType::uint16, "numAsPath"},
    aspathdbsz{YType::uint32, "asPathDbSz"},
    isolate{YType::enumeration, "isolate"},
    meddampintvl{YType::uint32, "medDampIntvl"},
    fabricsoo{YType::str, "fabricSoo"},
    flushroutes{YType::enumeration, "flushRoutes"},
    affgrpactv{YType::uint16, "affGrpActv"},
    srgbminlbl{YType::uint32, "srgbMinLbl"},
    srgbmaxlbl{YType::uint32, "srgbMaxLbl"},
    epeconfiguredpeers{YType::uint32, "epeConfiguredPeers"},
    epeactivepeers{YType::uint32, "epeActivePeers"},
    lnkstsrvr{YType::enumeration, "lnkStSrvr"},
    lnkstclnt{YType::enumeration, "lnkStClnt"},
    name{YType::str, "name"},
    adminst{YType::enumeration, "adminSt"},
    ctrl{YType::str, "ctrl"},
    opererr{YType::str, "operErr"}
        ,
    dom_items(std::make_shared<System::BgpItems::InstItems::DomItems>())
    , evthist_items(std::make_shared<System::BgpItems::InstItems::EvthistItems>())
    , oper_items(std::make_shared<System::BgpItems::InstItems::OperItems>())
{
    dom_items->parent = this;
    evthist_items->parent = this;
    oper_items->parent = this;

    yang_name = "inst-items"; yang_parent_name = "bgp-items"; is_top_level_class = false; has_list_ancestor = false; 
}

System::BgpItems::InstItems::~InstItems()
{
}

bool System::BgpItems::InstItems::has_data() const
{
    if (is_presence_container) return true;
    return asn.is_set
	|| dispolbatch.is_set
	|| dispolbatchv4pfxlst.is_set
	|| dispolbatchv6pfxlst.is_set
	|| createts.is_set
	|| activatets.is_set
	|| waitdonets.is_set
	|| memalert.is_set
	|| numrtattrib.is_set
	|| attribdbsz.is_set
	|| numaspath.is_set
	|| aspathdbsz.is_set
	|| isolate.is_set
	|| meddampintvl.is_set
	|| fabricsoo.is_set
	|| flushroutes.is_set
	|| affgrpactv.is_set
	|| srgbminlbl.is_set
	|| srgbmaxlbl.is_set
	|| epeconfiguredpeers.is_set
	|| epeactivepeers.is_set
	|| lnkstsrvr.is_set
	|| lnkstclnt.is_set
	|| name.is_set
	|| adminst.is_set
	|| ctrl.is_set
	|| opererr.is_set
	|| (dom_items !=  nullptr && dom_items->has_data())
	|| (evthist_items !=  nullptr && evthist_items->has_data())
	|| (oper_items !=  nullptr && oper_items->has_data());
}

bool System::BgpItems::InstItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(asn.yfilter)
	|| ydk::is_set(dispolbatch.yfilter)
	|| ydk::is_set(dispolbatchv4pfxlst.yfilter)
	|| ydk::is_set(dispolbatchv6pfxlst.yfilter)
	|| ydk::is_set(createts.yfilter)
	|| ydk::is_set(activatets.yfilter)
	|| ydk::is_set(waitdonets.yfilter)
	|| ydk::is_set(memalert.yfilter)
	|| ydk::is_set(numrtattrib.yfilter)
	|| ydk::is_set(attribdbsz.yfilter)
	|| ydk::is_set(numaspath.yfilter)
	|| ydk::is_set(aspathdbsz.yfilter)
	|| ydk::is_set(isolate.yfilter)
	|| ydk::is_set(meddampintvl.yfilter)
	|| ydk::is_set(fabricsoo.yfilter)
	|| ydk::is_set(flushroutes.yfilter)
	|| ydk::is_set(affgrpactv.yfilter)
	|| ydk::is_set(srgbminlbl.yfilter)
	|| ydk::is_set(srgbmaxlbl.yfilter)
	|| ydk::is_set(epeconfiguredpeers.yfilter)
	|| ydk::is_set(epeactivepeers.yfilter)
	|| ydk::is_set(lnkstsrvr.yfilter)
	|| ydk::is_set(lnkstclnt.yfilter)
	|| ydk::is_set(name.yfilter)
	|| ydk::is_set(adminst.yfilter)
	|| ydk::is_set(ctrl.yfilter)
	|| ydk::is_set(opererr.yfilter)
	|| (dom_items !=  nullptr && dom_items->has_operation())
	|| (evthist_items !=  nullptr && evthist_items->has_operation())
	|| (oper_items !=  nullptr && oper_items->has_operation());
}

std::string System::BgpItems::InstItems::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-NX-OS-device:System/bgp-items/" << get_segment_path();
    return path_buffer.str();
}

std::string System::BgpItems::InstItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "inst-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (asn.is_set || is_set(asn.yfilter)) leaf_name_data.push_back(asn.get_name_leafdata());
    if (dispolbatch.is_set || is_set(dispolbatch.yfilter)) leaf_name_data.push_back(dispolbatch.get_name_leafdata());
    if (dispolbatchv4pfxlst.is_set || is_set(dispolbatchv4pfxlst.yfilter)) leaf_name_data.push_back(dispolbatchv4pfxlst.get_name_leafdata());
    if (dispolbatchv6pfxlst.is_set || is_set(dispolbatchv6pfxlst.yfilter)) leaf_name_data.push_back(dispolbatchv6pfxlst.get_name_leafdata());
    if (createts.is_set || is_set(createts.yfilter)) leaf_name_data.push_back(createts.get_name_leafdata());
    if (activatets.is_set || is_set(activatets.yfilter)) leaf_name_data.push_back(activatets.get_name_leafdata());
    if (waitdonets.is_set || is_set(waitdonets.yfilter)) leaf_name_data.push_back(waitdonets.get_name_leafdata());
    if (memalert.is_set || is_set(memalert.yfilter)) leaf_name_data.push_back(memalert.get_name_leafdata());
    if (numrtattrib.is_set || is_set(numrtattrib.yfilter)) leaf_name_data.push_back(numrtattrib.get_name_leafdata());
    if (attribdbsz.is_set || is_set(attribdbsz.yfilter)) leaf_name_data.push_back(attribdbsz.get_name_leafdata());
    if (numaspath.is_set || is_set(numaspath.yfilter)) leaf_name_data.push_back(numaspath.get_name_leafdata());
    if (aspathdbsz.is_set || is_set(aspathdbsz.yfilter)) leaf_name_data.push_back(aspathdbsz.get_name_leafdata());
    if (isolate.is_set || is_set(isolate.yfilter)) leaf_name_data.push_back(isolate.get_name_leafdata());
    if (meddampintvl.is_set || is_set(meddampintvl.yfilter)) leaf_name_data.push_back(meddampintvl.get_name_leafdata());
    if (fabricsoo.is_set || is_set(fabricsoo.yfilter)) leaf_name_data.push_back(fabricsoo.get_name_leafdata());
    if (flushroutes.is_set || is_set(flushroutes.yfilter)) leaf_name_data.push_back(flushroutes.get_name_leafdata());
    if (affgrpactv.is_set || is_set(affgrpactv.yfilter)) leaf_name_data.push_back(affgrpactv.get_name_leafdata());
    if (srgbminlbl.is_set || is_set(srgbminlbl.yfilter)) leaf_name_data.push_back(srgbminlbl.get_name_leafdata());
    if (srgbmaxlbl.is_set || is_set(srgbmaxlbl.yfilter)) leaf_name_data.push_back(srgbmaxlbl.get_name_leafdata());
    if (epeconfiguredpeers.is_set || is_set(epeconfiguredpeers.yfilter)) leaf_name_data.push_back(epeconfiguredpeers.get_name_leafdata());
    if (epeactivepeers.is_set || is_set(epeactivepeers.yfilter)) leaf_name_data.push_back(epeactivepeers.get_name_leafdata());
    if (lnkstsrvr.is_set || is_set(lnkstsrvr.yfilter)) leaf_name_data.push_back(lnkstsrvr.get_name_leafdata());
    if (lnkstclnt.is_set || is_set(lnkstclnt.yfilter)) leaf_name_data.push_back(lnkstclnt.get_name_leafdata());
    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());
    if (adminst.is_set || is_set(adminst.yfilter)) leaf_name_data.push_back(adminst.get_name_leafdata());
    if (ctrl.is_set || is_set(ctrl.yfilter)) leaf_name_data.push_back(ctrl.get_name_leafdata());
    if (opererr.is_set || is_set(opererr.yfilter)) leaf_name_data.push_back(opererr.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "dom-items")
    {
        if(dom_items == nullptr)
        {
            dom_items = std::make_shared<System::BgpItems::InstItems::DomItems>();
        }
        return dom_items;
    }

    if(child_yang_name == "evthist-items")
    {
        if(evthist_items == nullptr)
        {
            evthist_items = std::make_shared<System::BgpItems::InstItems::EvthistItems>();
        }
        return evthist_items;
    }

    if(child_yang_name == "oper-items")
    {
        if(oper_items == nullptr)
        {
            oper_items = std::make_shared<System::BgpItems::InstItems::OperItems>();
        }
        return oper_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(dom_items != nullptr)
    {
        _children["dom-items"] = dom_items;
    }

    if(evthist_items != nullptr)
    {
        _children["evthist-items"] = evthist_items;
    }

    if(oper_items != nullptr)
    {
        _children["oper-items"] = oper_items;
    }

    return _children;
}

void System::BgpItems::InstItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "asn")
    {
        asn = value;
        asn.value_namespace = name_space;
        asn.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "disPolBatch")
    {
        dispolbatch = value;
        dispolbatch.value_namespace = name_space;
        dispolbatch.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "disPolBatchv4PfxLst")
    {
        dispolbatchv4pfxlst = value;
        dispolbatchv4pfxlst.value_namespace = name_space;
        dispolbatchv4pfxlst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "disPolBatchv6PfxLst")
    {
        dispolbatchv6pfxlst = value;
        dispolbatchv6pfxlst.value_namespace = name_space;
        dispolbatchv6pfxlst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "createTs")
    {
        createts = value;
        createts.value_namespace = name_space;
        createts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "activateTs")
    {
        activatets = value;
        activatets.value_namespace = name_space;
        activatets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "waitDoneTs")
    {
        waitdonets = value;
        waitdonets.value_namespace = name_space;
        waitdonets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "memAlert")
    {
        memalert = value;
        memalert.value_namespace = name_space;
        memalert.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numRtAttrib")
    {
        numrtattrib = value;
        numrtattrib.value_namespace = name_space;
        numrtattrib.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "attribDbSz")
    {
        attribdbsz = value;
        attribdbsz.value_namespace = name_space;
        attribdbsz.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numAsPath")
    {
        numaspath = value;
        numaspath.value_namespace = name_space;
        numaspath.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asPathDbSz")
    {
        aspathdbsz = value;
        aspathdbsz.value_namespace = name_space;
        aspathdbsz.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "isolate")
    {
        isolate = value;
        isolate.value_namespace = name_space;
        isolate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "medDampIntvl")
    {
        meddampintvl = value;
        meddampintvl.value_namespace = name_space;
        meddampintvl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fabricSoo")
    {
        fabricsoo = value;
        fabricsoo.value_namespace = name_space;
        fabricsoo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flushRoutes")
    {
        flushroutes = value;
        flushroutes.value_namespace = name_space;
        flushroutes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "affGrpActv")
    {
        affgrpactv = value;
        affgrpactv.value_namespace = name_space;
        affgrpactv.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srgbMinLbl")
    {
        srgbminlbl = value;
        srgbminlbl.value_namespace = name_space;
        srgbminlbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srgbMaxLbl")
    {
        srgbmaxlbl = value;
        srgbmaxlbl.value_namespace = name_space;
        srgbmaxlbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "epeConfiguredPeers")
    {
        epeconfiguredpeers = value;
        epeconfiguredpeers.value_namespace = name_space;
        epeconfiguredpeers.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "epeActivePeers")
    {
        epeactivepeers = value;
        epeactivepeers.value_namespace = name_space;
        epeactivepeers.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lnkStSrvr")
    {
        lnkstsrvr = value;
        lnkstsrvr.value_namespace = name_space;
        lnkstsrvr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lnkStClnt")
    {
        lnkstclnt = value;
        lnkstclnt.value_namespace = name_space;
        lnkstclnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "adminSt")
    {
        adminst = value;
        adminst.value_namespace = name_space;
        adminst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ctrl")
    {
        ctrl = value;
        ctrl.value_namespace = name_space;
        ctrl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "operErr")
    {
        opererr = value;
        opererr.value_namespace = name_space;
        opererr.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "asn")
    {
        asn.yfilter = yfilter;
    }
    if(value_path == "disPolBatch")
    {
        dispolbatch.yfilter = yfilter;
    }
    if(value_path == "disPolBatchv4PfxLst")
    {
        dispolbatchv4pfxlst.yfilter = yfilter;
    }
    if(value_path == "disPolBatchv6PfxLst")
    {
        dispolbatchv6pfxlst.yfilter = yfilter;
    }
    if(value_path == "createTs")
    {
        createts.yfilter = yfilter;
    }
    if(value_path == "activateTs")
    {
        activatets.yfilter = yfilter;
    }
    if(value_path == "waitDoneTs")
    {
        waitdonets.yfilter = yfilter;
    }
    if(value_path == "memAlert")
    {
        memalert.yfilter = yfilter;
    }
    if(value_path == "numRtAttrib")
    {
        numrtattrib.yfilter = yfilter;
    }
    if(value_path == "attribDbSz")
    {
        attribdbsz.yfilter = yfilter;
    }
    if(value_path == "numAsPath")
    {
        numaspath.yfilter = yfilter;
    }
    if(value_path == "asPathDbSz")
    {
        aspathdbsz.yfilter = yfilter;
    }
    if(value_path == "isolate")
    {
        isolate.yfilter = yfilter;
    }
    if(value_path == "medDampIntvl")
    {
        meddampintvl.yfilter = yfilter;
    }
    if(value_path == "fabricSoo")
    {
        fabricsoo.yfilter = yfilter;
    }
    if(value_path == "flushRoutes")
    {
        flushroutes.yfilter = yfilter;
    }
    if(value_path == "affGrpActv")
    {
        affgrpactv.yfilter = yfilter;
    }
    if(value_path == "srgbMinLbl")
    {
        srgbminlbl.yfilter = yfilter;
    }
    if(value_path == "srgbMaxLbl")
    {
        srgbmaxlbl.yfilter = yfilter;
    }
    if(value_path == "epeConfiguredPeers")
    {
        epeconfiguredpeers.yfilter = yfilter;
    }
    if(value_path == "epeActivePeers")
    {
        epeactivepeers.yfilter = yfilter;
    }
    if(value_path == "lnkStSrvr")
    {
        lnkstsrvr.yfilter = yfilter;
    }
    if(value_path == "lnkStClnt")
    {
        lnkstclnt.yfilter = yfilter;
    }
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
    if(value_path == "adminSt")
    {
        adminst.yfilter = yfilter;
    }
    if(value_path == "ctrl")
    {
        ctrl.yfilter = yfilter;
    }
    if(value_path == "operErr")
    {
        opererr.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "dom-items" || name == "evthist-items" || name == "oper-items" || name == "asn" || name == "disPolBatch" || name == "disPolBatchv4PfxLst" || name == "disPolBatchv6PfxLst" || name == "createTs" || name == "activateTs" || name == "waitDoneTs" || name == "memAlert" || name == "numRtAttrib" || name == "attribDbSz" || name == "numAsPath" || name == "asPathDbSz" || name == "isolate" || name == "medDampIntvl" || name == "fabricSoo" || name == "flushRoutes" || name == "affGrpActv" || name == "srgbMinLbl" || name == "srgbMaxLbl" || name == "epeConfiguredPeers" || name == "epeActivePeers" || name == "lnkStSrvr" || name == "lnkStClnt" || name == "name" || name == "adminSt" || name == "ctrl" || name == "operErr")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomItems()
    :
    dom_list(this, {"name"})
{

    yang_name = "dom-items"; yang_parent_name = "inst-items"; is_top_level_class = false; has_list_ancestor = false; 
}

System::BgpItems::InstItems::DomItems::~DomItems()
{
}

bool System::BgpItems::InstItems::DomItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<dom_list.len(); index++)
    {
        if(dom_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::has_operation() const
{
    for (std::size_t index=0; index<dom_list.len(); index++)
    {
        if(dom_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-NX-OS-device:System/bgp-items/inst-items/" << get_segment_path();
    return path_buffer.str();
}

std::string System::BgpItems::InstItems::DomItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "dom-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "Dom-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList>();
        ent_->parent = this;
        dom_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : dom_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "Dom-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::DomList()
    :
    name{YType::str, "name"},
    mode{YType::enumeration, "mode"},
    rtrid{YType::str, "rtrId"},
    clusterid{YType::str, "clusterId"},
    kaintvl{YType::uint16, "kaIntvl"},
    holdintvl{YType::uint16, "holdIntvl"},
    pfxpeertimeout{YType::uint16, "pfxPeerTimeout"},
    pfxpeerwaittime{YType::uint16, "pfxPeerWaitTime"},
    maxaslimit{YType::uint16, "maxAsLimit"},
    bestpathintvl{YType::uint16, "bestPathIntvl"},
    always{YType::enumeration, "always"},
    reconnintvl{YType::uint16, "reConnIntvl"},
    operst{YType::enumeration, "operSt"},
    operrtrid{YType::str, "operRtrId"},
    firstpeerupts{YType::str, "firstPeerUpTs"},
    numpeers{YType::uint32, "numPeers"},
    numpeerspending{YType::uint32, "numPeersPending"},
    numestpeers{YType::uint32, "numEstPeers"},
    id{YType::uint32, "id"},
    vnid{YType::uint32, "vnid"},
    vtepip{YType::str, "vtepIp"},
    vtepvirtip{YType::str, "vtepVirtIp"},
    routermac{YType::str, "routerMac"},
    localasn{YType::str, "localAsn"}
        ,
    rtctrl_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::RtctrlItems>())
    , pathctrl_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::PathctrlItems>())
    , confed_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::ConfedItems>())
    , af_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems>())
    , bmp_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::BmpItems>())
    , gr_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::GrItems>())
    , peer_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::PeerItems>())
    , peercont_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::PeercontItems>())
    , sessioncont_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::SessioncontItems>())
    , policycont_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::PolicycontItems>())
{
    rtctrl_items->parent = this;
    pathctrl_items->parent = this;
    confed_items->parent = this;
    af_items->parent = this;
    bmp_items->parent = this;
    gr_items->parent = this;
    peer_items->parent = this;
    peercont_items->parent = this;
    sessioncont_items->parent = this;
    policycont_items->parent = this;

    yang_name = "Dom-list"; yang_parent_name = "dom-items"; is_top_level_class = false; has_list_ancestor = false; 
}

System::BgpItems::InstItems::DomItems::DomList::~DomList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::has_data() const
{
    if (is_presence_container) return true;
    return name.is_set
	|| mode.is_set
	|| rtrid.is_set
	|| clusterid.is_set
	|| kaintvl.is_set
	|| holdintvl.is_set
	|| pfxpeertimeout.is_set
	|| pfxpeerwaittime.is_set
	|| maxaslimit.is_set
	|| bestpathintvl.is_set
	|| always.is_set
	|| reconnintvl.is_set
	|| operst.is_set
	|| operrtrid.is_set
	|| firstpeerupts.is_set
	|| numpeers.is_set
	|| numpeerspending.is_set
	|| numestpeers.is_set
	|| id.is_set
	|| vnid.is_set
	|| vtepip.is_set
	|| vtepvirtip.is_set
	|| routermac.is_set
	|| localasn.is_set
	|| (rtctrl_items !=  nullptr && rtctrl_items->has_data())
	|| (pathctrl_items !=  nullptr && pathctrl_items->has_data())
	|| (confed_items !=  nullptr && confed_items->has_data())
	|| (af_items !=  nullptr && af_items->has_data())
	|| (bmp_items !=  nullptr && bmp_items->has_data())
	|| (gr_items !=  nullptr && gr_items->has_data())
	|| (peer_items !=  nullptr && peer_items->has_data())
	|| (peercont_items !=  nullptr && peercont_items->has_data())
	|| (sessioncont_items !=  nullptr && sessioncont_items->has_data())
	|| (policycont_items !=  nullptr && policycont_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(name.yfilter)
	|| ydk::is_set(mode.yfilter)
	|| ydk::is_set(rtrid.yfilter)
	|| ydk::is_set(clusterid.yfilter)
	|| ydk::is_set(kaintvl.yfilter)
	|| ydk::is_set(holdintvl.yfilter)
	|| ydk::is_set(pfxpeertimeout.yfilter)
	|| ydk::is_set(pfxpeerwaittime.yfilter)
	|| ydk::is_set(maxaslimit.yfilter)
	|| ydk::is_set(bestpathintvl.yfilter)
	|| ydk::is_set(always.yfilter)
	|| ydk::is_set(reconnintvl.yfilter)
	|| ydk::is_set(operst.yfilter)
	|| ydk::is_set(operrtrid.yfilter)
	|| ydk::is_set(firstpeerupts.yfilter)
	|| ydk::is_set(numpeers.yfilter)
	|| ydk::is_set(numpeerspending.yfilter)
	|| ydk::is_set(numestpeers.yfilter)
	|| ydk::is_set(id.yfilter)
	|| ydk::is_set(vnid.yfilter)
	|| ydk::is_set(vtepip.yfilter)
	|| ydk::is_set(vtepvirtip.yfilter)
	|| ydk::is_set(routermac.yfilter)
	|| ydk::is_set(localasn.yfilter)
	|| (rtctrl_items !=  nullptr && rtctrl_items->has_operation())
	|| (pathctrl_items !=  nullptr && pathctrl_items->has_operation())
	|| (confed_items !=  nullptr && confed_items->has_operation())
	|| (af_items !=  nullptr && af_items->has_operation())
	|| (bmp_items !=  nullptr && bmp_items->has_operation())
	|| (gr_items !=  nullptr && gr_items->has_operation())
	|| (peer_items !=  nullptr && peer_items->has_operation())
	|| (peercont_items !=  nullptr && peercont_items->has_operation())
	|| (sessioncont_items !=  nullptr && sessioncont_items->has_operation())
	|| (policycont_items !=  nullptr && policycont_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-NX-OS-device:System/bgp-items/inst-items/dom-items/" << get_segment_path();
    return path_buffer.str();
}

std::string System::BgpItems::InstItems::DomItems::DomList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Dom-list";
    ADD_KEY_TOKEN(name, "name");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());
    if (mode.is_set || is_set(mode.yfilter)) leaf_name_data.push_back(mode.get_name_leafdata());
    if (rtrid.is_set || is_set(rtrid.yfilter)) leaf_name_data.push_back(rtrid.get_name_leafdata());
    if (clusterid.is_set || is_set(clusterid.yfilter)) leaf_name_data.push_back(clusterid.get_name_leafdata());
    if (kaintvl.is_set || is_set(kaintvl.yfilter)) leaf_name_data.push_back(kaintvl.get_name_leafdata());
    if (holdintvl.is_set || is_set(holdintvl.yfilter)) leaf_name_data.push_back(holdintvl.get_name_leafdata());
    if (pfxpeertimeout.is_set || is_set(pfxpeertimeout.yfilter)) leaf_name_data.push_back(pfxpeertimeout.get_name_leafdata());
    if (pfxpeerwaittime.is_set || is_set(pfxpeerwaittime.yfilter)) leaf_name_data.push_back(pfxpeerwaittime.get_name_leafdata());
    if (maxaslimit.is_set || is_set(maxaslimit.yfilter)) leaf_name_data.push_back(maxaslimit.get_name_leafdata());
    if (bestpathintvl.is_set || is_set(bestpathintvl.yfilter)) leaf_name_data.push_back(bestpathintvl.get_name_leafdata());
    if (always.is_set || is_set(always.yfilter)) leaf_name_data.push_back(always.get_name_leafdata());
    if (reconnintvl.is_set || is_set(reconnintvl.yfilter)) leaf_name_data.push_back(reconnintvl.get_name_leafdata());
    if (operst.is_set || is_set(operst.yfilter)) leaf_name_data.push_back(operst.get_name_leafdata());
    if (operrtrid.is_set || is_set(operrtrid.yfilter)) leaf_name_data.push_back(operrtrid.get_name_leafdata());
    if (firstpeerupts.is_set || is_set(firstpeerupts.yfilter)) leaf_name_data.push_back(firstpeerupts.get_name_leafdata());
    if (numpeers.is_set || is_set(numpeers.yfilter)) leaf_name_data.push_back(numpeers.get_name_leafdata());
    if (numpeerspending.is_set || is_set(numpeerspending.yfilter)) leaf_name_data.push_back(numpeerspending.get_name_leafdata());
    if (numestpeers.is_set || is_set(numestpeers.yfilter)) leaf_name_data.push_back(numestpeers.get_name_leafdata());
    if (id.is_set || is_set(id.yfilter)) leaf_name_data.push_back(id.get_name_leafdata());
    if (vnid.is_set || is_set(vnid.yfilter)) leaf_name_data.push_back(vnid.get_name_leafdata());
    if (vtepip.is_set || is_set(vtepip.yfilter)) leaf_name_data.push_back(vtepip.get_name_leafdata());
    if (vtepvirtip.is_set || is_set(vtepvirtip.yfilter)) leaf_name_data.push_back(vtepvirtip.get_name_leafdata());
    if (routermac.is_set || is_set(routermac.yfilter)) leaf_name_data.push_back(routermac.get_name_leafdata());
    if (localasn.is_set || is_set(localasn.yfilter)) leaf_name_data.push_back(localasn.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "rtctrl-items")
    {
        if(rtctrl_items == nullptr)
        {
            rtctrl_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::RtctrlItems>();
        }
        return rtctrl_items;
    }

    if(child_yang_name == "pathctrl-items")
    {
        if(pathctrl_items == nullptr)
        {
            pathctrl_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::PathctrlItems>();
        }
        return pathctrl_items;
    }

    if(child_yang_name == "confed-items")
    {
        if(confed_items == nullptr)
        {
            confed_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::ConfedItems>();
        }
        return confed_items;
    }

    if(child_yang_name == "af-items")
    {
        if(af_items == nullptr)
        {
            af_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems>();
        }
        return af_items;
    }

    if(child_yang_name == "bmp-items")
    {
        if(bmp_items == nullptr)
        {
            bmp_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::BmpItems>();
        }
        return bmp_items;
    }

    if(child_yang_name == "gr-items")
    {
        if(gr_items == nullptr)
        {
            gr_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::GrItems>();
        }
        return gr_items;
    }

    if(child_yang_name == "peer-items")
    {
        if(peer_items == nullptr)
        {
            peer_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::PeerItems>();
        }
        return peer_items;
    }

    if(child_yang_name == "peercont-items")
    {
        if(peercont_items == nullptr)
        {
            peercont_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::PeercontItems>();
        }
        return peercont_items;
    }

    if(child_yang_name == "sessioncont-items")
    {
        if(sessioncont_items == nullptr)
        {
            sessioncont_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::SessioncontItems>();
        }
        return sessioncont_items;
    }

    if(child_yang_name == "policycont-items")
    {
        if(policycont_items == nullptr)
        {
            policycont_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::PolicycontItems>();
        }
        return policycont_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(rtctrl_items != nullptr)
    {
        _children["rtctrl-items"] = rtctrl_items;
    }

    if(pathctrl_items != nullptr)
    {
        _children["pathctrl-items"] = pathctrl_items;
    }

    if(confed_items != nullptr)
    {
        _children["confed-items"] = confed_items;
    }

    if(af_items != nullptr)
    {
        _children["af-items"] = af_items;
    }

    if(bmp_items != nullptr)
    {
        _children["bmp-items"] = bmp_items;
    }

    if(gr_items != nullptr)
    {
        _children["gr-items"] = gr_items;
    }

    if(peer_items != nullptr)
    {
        _children["peer-items"] = peer_items;
    }

    if(peercont_items != nullptr)
    {
        _children["peercont-items"] = peercont_items;
    }

    if(sessioncont_items != nullptr)
    {
        _children["sessioncont-items"] = sessioncont_items;
    }

    if(policycont_items != nullptr)
    {
        _children["policycont-items"] = policycont_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mode")
    {
        mode = value;
        mode.value_namespace = name_space;
        mode.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtrId")
    {
        rtrid = value;
        rtrid.value_namespace = name_space;
        rtrid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "clusterId")
    {
        clusterid = value;
        clusterid.value_namespace = name_space;
        clusterid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "kaIntvl")
    {
        kaintvl = value;
        kaintvl.value_namespace = name_space;
        kaintvl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "holdIntvl")
    {
        holdintvl = value;
        holdintvl.value_namespace = name_space;
        holdintvl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pfxPeerTimeout")
    {
        pfxpeertimeout = value;
        pfxpeertimeout.value_namespace = name_space;
        pfxpeertimeout.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pfxPeerWaitTime")
    {
        pfxpeerwaittime = value;
        pfxpeerwaittime.value_namespace = name_space;
        pfxpeerwaittime.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maxAsLimit")
    {
        maxaslimit = value;
        maxaslimit.value_namespace = name_space;
        maxaslimit.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bestPathIntvl")
    {
        bestpathintvl = value;
        bestpathintvl.value_namespace = name_space;
        bestpathintvl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "always")
    {
        always = value;
        always.value_namespace = name_space;
        always.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "reConnIntvl")
    {
        reconnintvl = value;
        reconnintvl.value_namespace = name_space;
        reconnintvl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "operSt")
    {
        operst = value;
        operst.value_namespace = name_space;
        operst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "operRtrId")
    {
        operrtrid = value;
        operrtrid.value_namespace = name_space;
        operrtrid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "firstPeerUpTs")
    {
        firstpeerupts = value;
        firstpeerupts.value_namespace = name_space;
        firstpeerupts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPeers")
    {
        numpeers = value;
        numpeers.value_namespace = name_space;
        numpeers.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPeersPending")
    {
        numpeerspending = value;
        numpeerspending.value_namespace = name_space;
        numpeerspending.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numEstPeers")
    {
        numestpeers = value;
        numestpeers.value_namespace = name_space;
        numestpeers.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "id")
    {
        id = value;
        id.value_namespace = name_space;
        id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vnid")
    {
        vnid = value;
        vnid.value_namespace = name_space;
        vnid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vtepIp")
    {
        vtepip = value;
        vtepip.value_namespace = name_space;
        vtepip.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vtepVirtIp")
    {
        vtepvirtip = value;
        vtepvirtip.value_namespace = name_space;
        vtepvirtip.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "routerMac")
    {
        routermac = value;
        routermac.value_namespace = name_space;
        routermac.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "localAsn")
    {
        localasn = value;
        localasn.value_namespace = name_space;
        localasn.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
    if(value_path == "mode")
    {
        mode.yfilter = yfilter;
    }
    if(value_path == "rtrId")
    {
        rtrid.yfilter = yfilter;
    }
    if(value_path == "clusterId")
    {
        clusterid.yfilter = yfilter;
    }
    if(value_path == "kaIntvl")
    {
        kaintvl.yfilter = yfilter;
    }
    if(value_path == "holdIntvl")
    {
        holdintvl.yfilter = yfilter;
    }
    if(value_path == "pfxPeerTimeout")
    {
        pfxpeertimeout.yfilter = yfilter;
    }
    if(value_path == "pfxPeerWaitTime")
    {
        pfxpeerwaittime.yfilter = yfilter;
    }
    if(value_path == "maxAsLimit")
    {
        maxaslimit.yfilter = yfilter;
    }
    if(value_path == "bestPathIntvl")
    {
        bestpathintvl.yfilter = yfilter;
    }
    if(value_path == "always")
    {
        always.yfilter = yfilter;
    }
    if(value_path == "reConnIntvl")
    {
        reconnintvl.yfilter = yfilter;
    }
    if(value_path == "operSt")
    {
        operst.yfilter = yfilter;
    }
    if(value_path == "operRtrId")
    {
        operrtrid.yfilter = yfilter;
    }
    if(value_path == "firstPeerUpTs")
    {
        firstpeerupts.yfilter = yfilter;
    }
    if(value_path == "numPeers")
    {
        numpeers.yfilter = yfilter;
    }
    if(value_path == "numPeersPending")
    {
        numpeerspending.yfilter = yfilter;
    }
    if(value_path == "numEstPeers")
    {
        numestpeers.yfilter = yfilter;
    }
    if(value_path == "id")
    {
        id.yfilter = yfilter;
    }
    if(value_path == "vnid")
    {
        vnid.yfilter = yfilter;
    }
    if(value_path == "vtepIp")
    {
        vtepip.yfilter = yfilter;
    }
    if(value_path == "vtepVirtIp")
    {
        vtepvirtip.yfilter = yfilter;
    }
    if(value_path == "routerMac")
    {
        routermac.yfilter = yfilter;
    }
    if(value_path == "localAsn")
    {
        localasn.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "rtctrl-items" || name == "pathctrl-items" || name == "confed-items" || name == "af-items" || name == "bmp-items" || name == "gr-items" || name == "peer-items" || name == "peercont-items" || name == "sessioncont-items" || name == "policycont-items" || name == "name" || name == "mode" || name == "rtrId" || name == "clusterId" || name == "kaIntvl" || name == "holdIntvl" || name == "pfxPeerTimeout" || name == "pfxPeerWaitTime" || name == "maxAsLimit" || name == "bestPathIntvl" || name == "always" || name == "reConnIntvl" || name == "operSt" || name == "operRtrId" || name == "firstPeerUpTs" || name == "numPeers" || name == "numPeersPending" || name == "numEstPeers" || name == "id" || name == "vnid" || name == "vtepIp" || name == "vtepVirtIp" || name == "routerMac" || name == "localAsn")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::RtctrlItems::RtctrlItems()
    :
    supprrt{YType::enumeration, "supprRt"},
    logneighborchanges{YType::enumeration, "logNeighborChanges"},
    enforcefirstas{YType::enumeration, "enforceFirstAs"},
    fibaccelerate{YType::enumeration, "fibAccelerate"}
{

    yang_name = "rtctrl-items"; yang_parent_name = "Dom-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::RtctrlItems::~RtctrlItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::RtctrlItems::has_data() const
{
    if (is_presence_container) return true;
    return supprrt.is_set
	|| logneighborchanges.is_set
	|| enforcefirstas.is_set
	|| fibaccelerate.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::RtctrlItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(supprrt.yfilter)
	|| ydk::is_set(logneighborchanges.yfilter)
	|| ydk::is_set(enforcefirstas.yfilter)
	|| ydk::is_set(fibaccelerate.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::RtctrlItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rtctrl-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::RtctrlItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (supprrt.is_set || is_set(supprrt.yfilter)) leaf_name_data.push_back(supprrt.get_name_leafdata());
    if (logneighborchanges.is_set || is_set(logneighborchanges.yfilter)) leaf_name_data.push_back(logneighborchanges.get_name_leafdata());
    if (enforcefirstas.is_set || is_set(enforcefirstas.yfilter)) leaf_name_data.push_back(enforcefirstas.get_name_leafdata());
    if (fibaccelerate.is_set || is_set(fibaccelerate.yfilter)) leaf_name_data.push_back(fibaccelerate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::RtctrlItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::RtctrlItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::RtctrlItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "supprRt")
    {
        supprrt = value;
        supprrt.value_namespace = name_space;
        supprrt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "logNeighborChanges")
    {
        logneighborchanges = value;
        logneighborchanges.value_namespace = name_space;
        logneighborchanges.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "enforceFirstAs")
    {
        enforcefirstas = value;
        enforcefirstas.value_namespace = name_space;
        enforcefirstas.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fibAccelerate")
    {
        fibaccelerate = value;
        fibaccelerate.value_namespace = name_space;
        fibaccelerate.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::RtctrlItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "supprRt")
    {
        supprrt.yfilter = yfilter;
    }
    if(value_path == "logNeighborChanges")
    {
        logneighborchanges.yfilter = yfilter;
    }
    if(value_path == "enforceFirstAs")
    {
        enforcefirstas.yfilter = yfilter;
    }
    if(value_path == "fibAccelerate")
    {
        fibaccelerate.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::RtctrlItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "supprRt" || name == "logNeighborChanges" || name == "enforceFirstAs" || name == "fibAccelerate")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::PathctrlItems::PathctrlItems()
    :
    alwayscompmed{YType::enumeration, "alwaysCompMed"},
    aspathmultipathrelax{YType::enumeration, "asPathMultipathRelax"},
    aspathignore{YType::enumeration, "asPathIgnore"},
    comprtrid{YType::enumeration, "compRtrId"},
    compnbrid{YType::enumeration, "compNbrId"},
    costcommunityignore{YType::enumeration, "costCommunityIgnore"},
    medconfed{YType::enumeration, "medConfed"},
    medmissingasworst{YType::enumeration, "medMissingAsWorst"},
    mednondeter{YType::enumeration, "medNonDeter"},
    igpmetricignore{YType::enumeration, "igpMetricIgnore"}
{

    yang_name = "pathctrl-items"; yang_parent_name = "Dom-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::PathctrlItems::~PathctrlItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::PathctrlItems::has_data() const
{
    if (is_presence_container) return true;
    return alwayscompmed.is_set
	|| aspathmultipathrelax.is_set
	|| aspathignore.is_set
	|| comprtrid.is_set
	|| compnbrid.is_set
	|| costcommunityignore.is_set
	|| medconfed.is_set
	|| medmissingasworst.is_set
	|| mednondeter.is_set
	|| igpmetricignore.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::PathctrlItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(alwayscompmed.yfilter)
	|| ydk::is_set(aspathmultipathrelax.yfilter)
	|| ydk::is_set(aspathignore.yfilter)
	|| ydk::is_set(comprtrid.yfilter)
	|| ydk::is_set(compnbrid.yfilter)
	|| ydk::is_set(costcommunityignore.yfilter)
	|| ydk::is_set(medconfed.yfilter)
	|| ydk::is_set(medmissingasworst.yfilter)
	|| ydk::is_set(mednondeter.yfilter)
	|| ydk::is_set(igpmetricignore.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::PathctrlItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pathctrl-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::PathctrlItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (alwayscompmed.is_set || is_set(alwayscompmed.yfilter)) leaf_name_data.push_back(alwayscompmed.get_name_leafdata());
    if (aspathmultipathrelax.is_set || is_set(aspathmultipathrelax.yfilter)) leaf_name_data.push_back(aspathmultipathrelax.get_name_leafdata());
    if (aspathignore.is_set || is_set(aspathignore.yfilter)) leaf_name_data.push_back(aspathignore.get_name_leafdata());
    if (comprtrid.is_set || is_set(comprtrid.yfilter)) leaf_name_data.push_back(comprtrid.get_name_leafdata());
    if (compnbrid.is_set || is_set(compnbrid.yfilter)) leaf_name_data.push_back(compnbrid.get_name_leafdata());
    if (costcommunityignore.is_set || is_set(costcommunityignore.yfilter)) leaf_name_data.push_back(costcommunityignore.get_name_leafdata());
    if (medconfed.is_set || is_set(medconfed.yfilter)) leaf_name_data.push_back(medconfed.get_name_leafdata());
    if (medmissingasworst.is_set || is_set(medmissingasworst.yfilter)) leaf_name_data.push_back(medmissingasworst.get_name_leafdata());
    if (mednondeter.is_set || is_set(mednondeter.yfilter)) leaf_name_data.push_back(mednondeter.get_name_leafdata());
    if (igpmetricignore.is_set || is_set(igpmetricignore.yfilter)) leaf_name_data.push_back(igpmetricignore.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::PathctrlItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::PathctrlItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::PathctrlItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "alwaysCompMed")
    {
        alwayscompmed = value;
        alwayscompmed.value_namespace = name_space;
        alwayscompmed.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asPathMultipathRelax")
    {
        aspathmultipathrelax = value;
        aspathmultipathrelax.value_namespace = name_space;
        aspathmultipathrelax.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asPathIgnore")
    {
        aspathignore = value;
        aspathignore.value_namespace = name_space;
        aspathignore.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "compRtrId")
    {
        comprtrid = value;
        comprtrid.value_namespace = name_space;
        comprtrid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "compNbrId")
    {
        compnbrid = value;
        compnbrid.value_namespace = name_space;
        compnbrid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "costCommunityIgnore")
    {
        costcommunityignore = value;
        costcommunityignore.value_namespace = name_space;
        costcommunityignore.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "medConfed")
    {
        medconfed = value;
        medconfed.value_namespace = name_space;
        medconfed.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "medMissingAsWorst")
    {
        medmissingasworst = value;
        medmissingasworst.value_namespace = name_space;
        medmissingasworst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "medNonDeter")
    {
        mednondeter = value;
        mednondeter.value_namespace = name_space;
        mednondeter.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "igpMetricIgnore")
    {
        igpmetricignore = value;
        igpmetricignore.value_namespace = name_space;
        igpmetricignore.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::PathctrlItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "alwaysCompMed")
    {
        alwayscompmed.yfilter = yfilter;
    }
    if(value_path == "asPathMultipathRelax")
    {
        aspathmultipathrelax.yfilter = yfilter;
    }
    if(value_path == "asPathIgnore")
    {
        aspathignore.yfilter = yfilter;
    }
    if(value_path == "compRtrId")
    {
        comprtrid.yfilter = yfilter;
    }
    if(value_path == "compNbrId")
    {
        compnbrid.yfilter = yfilter;
    }
    if(value_path == "costCommunityIgnore")
    {
        costcommunityignore.yfilter = yfilter;
    }
    if(value_path == "medConfed")
    {
        medconfed.yfilter = yfilter;
    }
    if(value_path == "medMissingAsWorst")
    {
        medmissingasworst.yfilter = yfilter;
    }
    if(value_path == "medNonDeter")
    {
        mednondeter.yfilter = yfilter;
    }
    if(value_path == "igpMetricIgnore")
    {
        igpmetricignore.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::PathctrlItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "alwaysCompMed" || name == "asPathMultipathRelax" || name == "asPathIgnore" || name == "compRtrId" || name == "compNbrId" || name == "costCommunityIgnore" || name == "medConfed" || name == "medMissingAsWorst" || name == "medNonDeter" || name == "igpMetricIgnore")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::ConfedItems::ConfedItems()
    :
    asn{YType::str, "asn"}
        ,
    peer_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems>())
{
    peer_items->parent = this;

    yang_name = "confed-items"; yang_parent_name = "Dom-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::ConfedItems::~ConfedItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::ConfedItems::has_data() const
{
    if (is_presence_container) return true;
    return asn.is_set
	|| (peer_items !=  nullptr && peer_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::ConfedItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(asn.yfilter)
	|| (peer_items !=  nullptr && peer_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::ConfedItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "confed-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::ConfedItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (asn.is_set || is_set(asn.yfilter)) leaf_name_data.push_back(asn.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::ConfedItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "peer-items")
    {
        if(peer_items == nullptr)
        {
            peer_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems>();
        }
        return peer_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::ConfedItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(peer_items != nullptr)
    {
        _children["peer-items"] = peer_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::ConfedItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "asn")
    {
        asn = value;
        asn.value_namespace = name_space;
        asn.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::ConfedItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "asn")
    {
        asn.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::ConfedItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "peer-items" || name == "asn")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::PeerItems()
    :
    confederationpeer_list(this, {"asn"})
{

    yang_name = "peer-items"; yang_parent_name = "confed-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::~PeerItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<confederationpeer_list.len(); index++)
    {
        if(confederationpeer_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::has_operation() const
{
    for (std::size_t index=0; index<confederationpeer_list.len(); index++)
    {
        if(confederationpeer_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "peer-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ConfederationPeer-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList>();
        ent_->parent = this;
        confederationpeer_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : confederationpeer_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ConfederationPeer-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList::ConfederationPeerList()
    :
    asn{YType::str, "asn"}
{

    yang_name = "ConfederationPeer-list"; yang_parent_name = "peer-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList::~ConfederationPeerList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList::has_data() const
{
    if (is_presence_container) return true;
    return asn.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(asn.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ConfederationPeer-list";
    ADD_KEY_TOKEN(asn, "asn");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (asn.is_set || is_set(asn.yfilter)) leaf_name_data.push_back(asn.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "asn")
    {
        asn = value;
        asn.value_namespace = name_space;
        asn.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "asn")
    {
        asn.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::ConfedItems::PeerItems::ConfederationPeerList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "asn")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::AfItems()
    :
    domaf_list(this, {"type"})
{

    yang_name = "af-items"; yang_parent_name = "Dom-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::~AfItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<domaf_list.len(); index++)
    {
        if(domaf_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::has_operation() const
{
    for (std::size_t index=0; index<domaf_list.len(); index++)
    {
        if(domaf_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "af-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "DomAf-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList>();
        ent_->parent = this;
        domaf_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : domaf_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "DomAf-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DomAfList()
    :
    type{YType::enumeration, "type"},
    maxecmp{YType::uint8, "maxEcmp"},
    maxextecmp{YType::uint8, "maxExtEcmp"},
    maxextintecmp{YType::uint8, "maxExtIntEcmp"},
    maxmxdecmp{YType::uint8, "maxMxdEcmp"},
    tmrbstpthdfr{YType::uint32, "tmrBstpthDfr"},
    tmrmax{YType::uint32, "tmrMax"},
    tblmap{YType::str, "tblMap"},
    tblmapfltr{YType::enumeration, "tblMapFltr"},
    vniethtag{YType::enumeration, "vniEthTag"},
    advsysmac{YType::enumeration, "advSysMac"},
    bestpathsigts{YType::str, "bestPathSigTs"},
    bestpathcmpltts{YType::str, "bestPathCmpltTs"},
    critnhtimeout{YType::uint32, "critNhTimeout"},
    noncritnhtimeout{YType::uint32, "nonCritNhTimeout"},
    tblver{YType::uint32, "tblVer"},
    nhrtmap{YType::str, "nhRtMap"},
    clreflection{YType::enumeration, "clReflection"},
    advertl2vpnevpn{YType::enumeration, "advertL2vpnEvpn"},
    alloclblall{YType::enumeration, "allocLblAll"},
    alloclblrtmap{YType::str, "allocLblRtMap"},
    lblallocmod{YType::enumeration, "lblAllocMod"},
    retainrttrtmap{YType::str, "retainRttRtMap"},
    retainrttall{YType::enumeration, "retainRttAll"},
    defmetric{YType::str, "defMetric"},
    tblid{YType::uint32, "tblId"},
    tblst{YType::enumeration, "tblSt"},
    numpeers{YType::uint32, "numPeers"},
    numpeersactive{YType::uint32, "numPeersActive"},
    numroutes{YType::uint32, "numRoutes"},
    numpaths{YType::uint32, "numPaths"},
    numnetworks{YType::uint32, "numNetworks"},
    numaggregates{YType::uint32, "numAggregates"},
    definforiginate{YType::enumeration, "defInfOriginate"},
    definforigrd{YType::str, "defInfOrigRd"},
    definforigrtt{YType::str, "defInfOrigRtt"},
    igpmetric{YType::uint16, "igpMetric"},
    supprinactive{YType::enumeration, "supprInactive"},
    advpip{YType::enumeration, "advPip"},
    exportgwip{YType::enumeration, "exportGwIp"}
        ,
    ctrl_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems>())
    , admindist_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems>())
    , dampening_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems>())
    , prefix_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems>())
    , aggaddr_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems>())
    , addlpath_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems>())
    , rt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems>())
    , vpnrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems>())
    , lblrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems>())
    , lsrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems>())
    , evpnrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems>())
    , mvpnrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems>())
    , importedrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems>())
    , selforigrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::SelforigrtItems>())
    , injectedrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::InjectedrtItems>())
    , exportedrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ExportedrtItems>())
    , rcvdpathsrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RcvdpathsrtItems>())
    , rtmap_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtmapItems>())
    , fltrlist_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::FltrlistItems>())
    , pfxlist_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PfxlistItems>())
    , damppathsrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DamppathsrtItems>())
    , damphstpathsrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DamphstpathsrtItems>())
    , rttype_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RttypeItems>())
    , vnid_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VnidItems>())
    , mac_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MacItems>())
    , rd_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RdItems>())
    , pfx_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PfxItems>())
    , esid_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EsidItems>())
    , nh_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::NhItems>())
    , mrttype_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MrttypeItems>())
    , defrtleak_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DefrtleakItems>())
    , interleak_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::InterleakItems>())
    , injname_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::InjnameItems>())
{
    ctrl_items->parent = this;
    admindist_items->parent = this;
    dampening_items->parent = this;
    prefix_items->parent = this;
    aggaddr_items->parent = this;
    addlpath_items->parent = this;
    rt_items->parent = this;
    vpnrt_items->parent = this;
    lblrt_items->parent = this;
    lsrt_items->parent = this;
    evpnrt_items->parent = this;
    mvpnrt_items->parent = this;
    importedrt_items->parent = this;
    selforigrt_items->parent = this;
    injectedrt_items->parent = this;
    exportedrt_items->parent = this;
    rcvdpathsrt_items->parent = this;
    rtmap_items->parent = this;
    fltrlist_items->parent = this;
    pfxlist_items->parent = this;
    damppathsrt_items->parent = this;
    damphstpathsrt_items->parent = this;
    rttype_items->parent = this;
    vnid_items->parent = this;
    mac_items->parent = this;
    rd_items->parent = this;
    pfx_items->parent = this;
    esid_items->parent = this;
    nh_items->parent = this;
    mrttype_items->parent = this;
    defrtleak_items->parent = this;
    interleak_items->parent = this;
    injname_items->parent = this;

    yang_name = "DomAf-list"; yang_parent_name = "af-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::~DomAfList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| maxecmp.is_set
	|| maxextecmp.is_set
	|| maxextintecmp.is_set
	|| maxmxdecmp.is_set
	|| tmrbstpthdfr.is_set
	|| tmrmax.is_set
	|| tblmap.is_set
	|| tblmapfltr.is_set
	|| vniethtag.is_set
	|| advsysmac.is_set
	|| bestpathsigts.is_set
	|| bestpathcmpltts.is_set
	|| critnhtimeout.is_set
	|| noncritnhtimeout.is_set
	|| tblver.is_set
	|| nhrtmap.is_set
	|| clreflection.is_set
	|| advertl2vpnevpn.is_set
	|| alloclblall.is_set
	|| alloclblrtmap.is_set
	|| lblallocmod.is_set
	|| retainrttrtmap.is_set
	|| retainrttall.is_set
	|| defmetric.is_set
	|| tblid.is_set
	|| tblst.is_set
	|| numpeers.is_set
	|| numpeersactive.is_set
	|| numroutes.is_set
	|| numpaths.is_set
	|| numnetworks.is_set
	|| numaggregates.is_set
	|| definforiginate.is_set
	|| definforigrd.is_set
	|| definforigrtt.is_set
	|| igpmetric.is_set
	|| supprinactive.is_set
	|| advpip.is_set
	|| exportgwip.is_set
	|| (ctrl_items !=  nullptr && ctrl_items->has_data())
	|| (admindist_items !=  nullptr && admindist_items->has_data())
	|| (dampening_items !=  nullptr && dampening_items->has_data())
	|| (prefix_items !=  nullptr && prefix_items->has_data())
	|| (aggaddr_items !=  nullptr && aggaddr_items->has_data())
	|| (addlpath_items !=  nullptr && addlpath_items->has_data())
	|| (rt_items !=  nullptr && rt_items->has_data())
	|| (vpnrt_items !=  nullptr && vpnrt_items->has_data())
	|| (lblrt_items !=  nullptr && lblrt_items->has_data())
	|| (lsrt_items !=  nullptr && lsrt_items->has_data())
	|| (evpnrt_items !=  nullptr && evpnrt_items->has_data())
	|| (mvpnrt_items !=  nullptr && mvpnrt_items->has_data())
	|| (importedrt_items !=  nullptr && importedrt_items->has_data())
	|| (selforigrt_items !=  nullptr && selforigrt_items->has_data())
	|| (injectedrt_items !=  nullptr && injectedrt_items->has_data())
	|| (exportedrt_items !=  nullptr && exportedrt_items->has_data())
	|| (rcvdpathsrt_items !=  nullptr && rcvdpathsrt_items->has_data())
	|| (rtmap_items !=  nullptr && rtmap_items->has_data())
	|| (fltrlist_items !=  nullptr && fltrlist_items->has_data())
	|| (pfxlist_items !=  nullptr && pfxlist_items->has_data())
	|| (damppathsrt_items !=  nullptr && damppathsrt_items->has_data())
	|| (damphstpathsrt_items !=  nullptr && damphstpathsrt_items->has_data())
	|| (rttype_items !=  nullptr && rttype_items->has_data())
	|| (vnid_items !=  nullptr && vnid_items->has_data())
	|| (mac_items !=  nullptr && mac_items->has_data())
	|| (rd_items !=  nullptr && rd_items->has_data())
	|| (pfx_items !=  nullptr && pfx_items->has_data())
	|| (esid_items !=  nullptr && esid_items->has_data())
	|| (nh_items !=  nullptr && nh_items->has_data())
	|| (mrttype_items !=  nullptr && mrttype_items->has_data())
	|| (defrtleak_items !=  nullptr && defrtleak_items->has_data())
	|| (interleak_items !=  nullptr && interleak_items->has_data())
	|| (injname_items !=  nullptr && injname_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(maxecmp.yfilter)
	|| ydk::is_set(maxextecmp.yfilter)
	|| ydk::is_set(maxextintecmp.yfilter)
	|| ydk::is_set(maxmxdecmp.yfilter)
	|| ydk::is_set(tmrbstpthdfr.yfilter)
	|| ydk::is_set(tmrmax.yfilter)
	|| ydk::is_set(tblmap.yfilter)
	|| ydk::is_set(tblmapfltr.yfilter)
	|| ydk::is_set(vniethtag.yfilter)
	|| ydk::is_set(advsysmac.yfilter)
	|| ydk::is_set(bestpathsigts.yfilter)
	|| ydk::is_set(bestpathcmpltts.yfilter)
	|| ydk::is_set(critnhtimeout.yfilter)
	|| ydk::is_set(noncritnhtimeout.yfilter)
	|| ydk::is_set(tblver.yfilter)
	|| ydk::is_set(nhrtmap.yfilter)
	|| ydk::is_set(clreflection.yfilter)
	|| ydk::is_set(advertl2vpnevpn.yfilter)
	|| ydk::is_set(alloclblall.yfilter)
	|| ydk::is_set(alloclblrtmap.yfilter)
	|| ydk::is_set(lblallocmod.yfilter)
	|| ydk::is_set(retainrttrtmap.yfilter)
	|| ydk::is_set(retainrttall.yfilter)
	|| ydk::is_set(defmetric.yfilter)
	|| ydk::is_set(tblid.yfilter)
	|| ydk::is_set(tblst.yfilter)
	|| ydk::is_set(numpeers.yfilter)
	|| ydk::is_set(numpeersactive.yfilter)
	|| ydk::is_set(numroutes.yfilter)
	|| ydk::is_set(numpaths.yfilter)
	|| ydk::is_set(numnetworks.yfilter)
	|| ydk::is_set(numaggregates.yfilter)
	|| ydk::is_set(definforiginate.yfilter)
	|| ydk::is_set(definforigrd.yfilter)
	|| ydk::is_set(definforigrtt.yfilter)
	|| ydk::is_set(igpmetric.yfilter)
	|| ydk::is_set(supprinactive.yfilter)
	|| ydk::is_set(advpip.yfilter)
	|| ydk::is_set(exportgwip.yfilter)
	|| (ctrl_items !=  nullptr && ctrl_items->has_operation())
	|| (admindist_items !=  nullptr && admindist_items->has_operation())
	|| (dampening_items !=  nullptr && dampening_items->has_operation())
	|| (prefix_items !=  nullptr && prefix_items->has_operation())
	|| (aggaddr_items !=  nullptr && aggaddr_items->has_operation())
	|| (addlpath_items !=  nullptr && addlpath_items->has_operation())
	|| (rt_items !=  nullptr && rt_items->has_operation())
	|| (vpnrt_items !=  nullptr && vpnrt_items->has_operation())
	|| (lblrt_items !=  nullptr && lblrt_items->has_operation())
	|| (lsrt_items !=  nullptr && lsrt_items->has_operation())
	|| (evpnrt_items !=  nullptr && evpnrt_items->has_operation())
	|| (mvpnrt_items !=  nullptr && mvpnrt_items->has_operation())
	|| (importedrt_items !=  nullptr && importedrt_items->has_operation())
	|| (selforigrt_items !=  nullptr && selforigrt_items->has_operation())
	|| (injectedrt_items !=  nullptr && injectedrt_items->has_operation())
	|| (exportedrt_items !=  nullptr && exportedrt_items->has_operation())
	|| (rcvdpathsrt_items !=  nullptr && rcvdpathsrt_items->has_operation())
	|| (rtmap_items !=  nullptr && rtmap_items->has_operation())
	|| (fltrlist_items !=  nullptr && fltrlist_items->has_operation())
	|| (pfxlist_items !=  nullptr && pfxlist_items->has_operation())
	|| (damppathsrt_items !=  nullptr && damppathsrt_items->has_operation())
	|| (damphstpathsrt_items !=  nullptr && damphstpathsrt_items->has_operation())
	|| (rttype_items !=  nullptr && rttype_items->has_operation())
	|| (vnid_items !=  nullptr && vnid_items->has_operation())
	|| (mac_items !=  nullptr && mac_items->has_operation())
	|| (rd_items !=  nullptr && rd_items->has_operation())
	|| (pfx_items !=  nullptr && pfx_items->has_operation())
	|| (esid_items !=  nullptr && esid_items->has_operation())
	|| (nh_items !=  nullptr && nh_items->has_operation())
	|| (mrttype_items !=  nullptr && mrttype_items->has_operation())
	|| (defrtleak_items !=  nullptr && defrtleak_items->has_operation())
	|| (interleak_items !=  nullptr && interleak_items->has_operation())
	|| (injname_items !=  nullptr && injname_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "DomAf-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (maxecmp.is_set || is_set(maxecmp.yfilter)) leaf_name_data.push_back(maxecmp.get_name_leafdata());
    if (maxextecmp.is_set || is_set(maxextecmp.yfilter)) leaf_name_data.push_back(maxextecmp.get_name_leafdata());
    if (maxextintecmp.is_set || is_set(maxextintecmp.yfilter)) leaf_name_data.push_back(maxextintecmp.get_name_leafdata());
    if (maxmxdecmp.is_set || is_set(maxmxdecmp.yfilter)) leaf_name_data.push_back(maxmxdecmp.get_name_leafdata());
    if (tmrbstpthdfr.is_set || is_set(tmrbstpthdfr.yfilter)) leaf_name_data.push_back(tmrbstpthdfr.get_name_leafdata());
    if (tmrmax.is_set || is_set(tmrmax.yfilter)) leaf_name_data.push_back(tmrmax.get_name_leafdata());
    if (tblmap.is_set || is_set(tblmap.yfilter)) leaf_name_data.push_back(tblmap.get_name_leafdata());
    if (tblmapfltr.is_set || is_set(tblmapfltr.yfilter)) leaf_name_data.push_back(tblmapfltr.get_name_leafdata());
    if (vniethtag.is_set || is_set(vniethtag.yfilter)) leaf_name_data.push_back(vniethtag.get_name_leafdata());
    if (advsysmac.is_set || is_set(advsysmac.yfilter)) leaf_name_data.push_back(advsysmac.get_name_leafdata());
    if (bestpathsigts.is_set || is_set(bestpathsigts.yfilter)) leaf_name_data.push_back(bestpathsigts.get_name_leafdata());
    if (bestpathcmpltts.is_set || is_set(bestpathcmpltts.yfilter)) leaf_name_data.push_back(bestpathcmpltts.get_name_leafdata());
    if (critnhtimeout.is_set || is_set(critnhtimeout.yfilter)) leaf_name_data.push_back(critnhtimeout.get_name_leafdata());
    if (noncritnhtimeout.is_set || is_set(noncritnhtimeout.yfilter)) leaf_name_data.push_back(noncritnhtimeout.get_name_leafdata());
    if (tblver.is_set || is_set(tblver.yfilter)) leaf_name_data.push_back(tblver.get_name_leafdata());
    if (nhrtmap.is_set || is_set(nhrtmap.yfilter)) leaf_name_data.push_back(nhrtmap.get_name_leafdata());
    if (clreflection.is_set || is_set(clreflection.yfilter)) leaf_name_data.push_back(clreflection.get_name_leafdata());
    if (advertl2vpnevpn.is_set || is_set(advertl2vpnevpn.yfilter)) leaf_name_data.push_back(advertl2vpnevpn.get_name_leafdata());
    if (alloclblall.is_set || is_set(alloclblall.yfilter)) leaf_name_data.push_back(alloclblall.get_name_leafdata());
    if (alloclblrtmap.is_set || is_set(alloclblrtmap.yfilter)) leaf_name_data.push_back(alloclblrtmap.get_name_leafdata());
    if (lblallocmod.is_set || is_set(lblallocmod.yfilter)) leaf_name_data.push_back(lblallocmod.get_name_leafdata());
    if (retainrttrtmap.is_set || is_set(retainrttrtmap.yfilter)) leaf_name_data.push_back(retainrttrtmap.get_name_leafdata());
    if (retainrttall.is_set || is_set(retainrttall.yfilter)) leaf_name_data.push_back(retainrttall.get_name_leafdata());
    if (defmetric.is_set || is_set(defmetric.yfilter)) leaf_name_data.push_back(defmetric.get_name_leafdata());
    if (tblid.is_set || is_set(tblid.yfilter)) leaf_name_data.push_back(tblid.get_name_leafdata());
    if (tblst.is_set || is_set(tblst.yfilter)) leaf_name_data.push_back(tblst.get_name_leafdata());
    if (numpeers.is_set || is_set(numpeers.yfilter)) leaf_name_data.push_back(numpeers.get_name_leafdata());
    if (numpeersactive.is_set || is_set(numpeersactive.yfilter)) leaf_name_data.push_back(numpeersactive.get_name_leafdata());
    if (numroutes.is_set || is_set(numroutes.yfilter)) leaf_name_data.push_back(numroutes.get_name_leafdata());
    if (numpaths.is_set || is_set(numpaths.yfilter)) leaf_name_data.push_back(numpaths.get_name_leafdata());
    if (numnetworks.is_set || is_set(numnetworks.yfilter)) leaf_name_data.push_back(numnetworks.get_name_leafdata());
    if (numaggregates.is_set || is_set(numaggregates.yfilter)) leaf_name_data.push_back(numaggregates.get_name_leafdata());
    if (definforiginate.is_set || is_set(definforiginate.yfilter)) leaf_name_data.push_back(definforiginate.get_name_leafdata());
    if (definforigrd.is_set || is_set(definforigrd.yfilter)) leaf_name_data.push_back(definforigrd.get_name_leafdata());
    if (definforigrtt.is_set || is_set(definforigrtt.yfilter)) leaf_name_data.push_back(definforigrtt.get_name_leafdata());
    if (igpmetric.is_set || is_set(igpmetric.yfilter)) leaf_name_data.push_back(igpmetric.get_name_leafdata());
    if (supprinactive.is_set || is_set(supprinactive.yfilter)) leaf_name_data.push_back(supprinactive.get_name_leafdata());
    if (advpip.is_set || is_set(advpip.yfilter)) leaf_name_data.push_back(advpip.get_name_leafdata());
    if (exportgwip.is_set || is_set(exportgwip.yfilter)) leaf_name_data.push_back(exportgwip.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ctrl-items")
    {
        if(ctrl_items == nullptr)
        {
            ctrl_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems>();
        }
        return ctrl_items;
    }

    if(child_yang_name == "adminDist-items")
    {
        if(admindist_items == nullptr)
        {
            admindist_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems>();
        }
        return admindist_items;
    }

    if(child_yang_name == "dampening-items")
    {
        if(dampening_items == nullptr)
        {
            dampening_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems>();
        }
        return dampening_items;
    }

    if(child_yang_name == "prefix-items")
    {
        if(prefix_items == nullptr)
        {
            prefix_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems>();
        }
        return prefix_items;
    }

    if(child_yang_name == "aggaddr-items")
    {
        if(aggaddr_items == nullptr)
        {
            aggaddr_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems>();
        }
        return aggaddr_items;
    }

    if(child_yang_name == "addlpath-items")
    {
        if(addlpath_items == nullptr)
        {
            addlpath_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems>();
        }
        return addlpath_items;
    }

    if(child_yang_name == "rt-items")
    {
        if(rt_items == nullptr)
        {
            rt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems>();
        }
        return rt_items;
    }

    if(child_yang_name == "vpnrt-items")
    {
        if(vpnrt_items == nullptr)
        {
            vpnrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems>();
        }
        return vpnrt_items;
    }

    if(child_yang_name == "lblrt-items")
    {
        if(lblrt_items == nullptr)
        {
            lblrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems>();
        }
        return lblrt_items;
    }

    if(child_yang_name == "lsrt-items")
    {
        if(lsrt_items == nullptr)
        {
            lsrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems>();
        }
        return lsrt_items;
    }

    if(child_yang_name == "evpnrt-items")
    {
        if(evpnrt_items == nullptr)
        {
            evpnrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems>();
        }
        return evpnrt_items;
    }

    if(child_yang_name == "mvpnrt-items")
    {
        if(mvpnrt_items == nullptr)
        {
            mvpnrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems>();
        }
        return mvpnrt_items;
    }

    if(child_yang_name == "importedrt-items")
    {
        if(importedrt_items == nullptr)
        {
            importedrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems>();
        }
        return importedrt_items;
    }

    if(child_yang_name == "selforigrt-items")
    {
        if(selforigrt_items == nullptr)
        {
            selforigrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::SelforigrtItems>();
        }
        return selforigrt_items;
    }

    if(child_yang_name == "injectedrt-items")
    {
        if(injectedrt_items == nullptr)
        {
            injectedrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::InjectedrtItems>();
        }
        return injectedrt_items;
    }

    if(child_yang_name == "exportedrt-items")
    {
        if(exportedrt_items == nullptr)
        {
            exportedrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ExportedrtItems>();
        }
        return exportedrt_items;
    }

    if(child_yang_name == "rcvdpathsrt-items")
    {
        if(rcvdpathsrt_items == nullptr)
        {
            rcvdpathsrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RcvdpathsrtItems>();
        }
        return rcvdpathsrt_items;
    }

    if(child_yang_name == "rtmap-items")
    {
        if(rtmap_items == nullptr)
        {
            rtmap_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtmapItems>();
        }
        return rtmap_items;
    }

    if(child_yang_name == "fltrlist-items")
    {
        if(fltrlist_items == nullptr)
        {
            fltrlist_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::FltrlistItems>();
        }
        return fltrlist_items;
    }

    if(child_yang_name == "pfxlist-items")
    {
        if(pfxlist_items == nullptr)
        {
            pfxlist_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PfxlistItems>();
        }
        return pfxlist_items;
    }

    if(child_yang_name == "damppathsrt-items")
    {
        if(damppathsrt_items == nullptr)
        {
            damppathsrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DamppathsrtItems>();
        }
        return damppathsrt_items;
    }

    if(child_yang_name == "damphstpathsrt-items")
    {
        if(damphstpathsrt_items == nullptr)
        {
            damphstpathsrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DamphstpathsrtItems>();
        }
        return damphstpathsrt_items;
    }

    if(child_yang_name == "rttype-items")
    {
        if(rttype_items == nullptr)
        {
            rttype_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RttypeItems>();
        }
        return rttype_items;
    }

    if(child_yang_name == "vnid-items")
    {
        if(vnid_items == nullptr)
        {
            vnid_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VnidItems>();
        }
        return vnid_items;
    }

    if(child_yang_name == "mac-items")
    {
        if(mac_items == nullptr)
        {
            mac_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MacItems>();
        }
        return mac_items;
    }

    if(child_yang_name == "rd-items")
    {
        if(rd_items == nullptr)
        {
            rd_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RdItems>();
        }
        return rd_items;
    }

    if(child_yang_name == "pfx-items")
    {
        if(pfx_items == nullptr)
        {
            pfx_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PfxItems>();
        }
        return pfx_items;
    }

    if(child_yang_name == "esid-items")
    {
        if(esid_items == nullptr)
        {
            esid_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EsidItems>();
        }
        return esid_items;
    }

    if(child_yang_name == "nh-items")
    {
        if(nh_items == nullptr)
        {
            nh_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::NhItems>();
        }
        return nh_items;
    }

    if(child_yang_name == "mrttype-items")
    {
        if(mrttype_items == nullptr)
        {
            mrttype_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MrttypeItems>();
        }
        return mrttype_items;
    }

    if(child_yang_name == "defrtleak-items")
    {
        if(defrtleak_items == nullptr)
        {
            defrtleak_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DefrtleakItems>();
        }
        return defrtleak_items;
    }

    if(child_yang_name == "interleak-items")
    {
        if(interleak_items == nullptr)
        {
            interleak_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::InterleakItems>();
        }
        return interleak_items;
    }

    if(child_yang_name == "injname-items")
    {
        if(injname_items == nullptr)
        {
            injname_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::InjnameItems>();
        }
        return injname_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(ctrl_items != nullptr)
    {
        _children["ctrl-items"] = ctrl_items;
    }

    if(admindist_items != nullptr)
    {
        _children["adminDist-items"] = admindist_items;
    }

    if(dampening_items != nullptr)
    {
        _children["dampening-items"] = dampening_items;
    }

    if(prefix_items != nullptr)
    {
        _children["prefix-items"] = prefix_items;
    }

    if(aggaddr_items != nullptr)
    {
        _children["aggaddr-items"] = aggaddr_items;
    }

    if(addlpath_items != nullptr)
    {
        _children["addlpath-items"] = addlpath_items;
    }

    if(rt_items != nullptr)
    {
        _children["rt-items"] = rt_items;
    }

    if(vpnrt_items != nullptr)
    {
        _children["vpnrt-items"] = vpnrt_items;
    }

    if(lblrt_items != nullptr)
    {
        _children["lblrt-items"] = lblrt_items;
    }

    if(lsrt_items != nullptr)
    {
        _children["lsrt-items"] = lsrt_items;
    }

    if(evpnrt_items != nullptr)
    {
        _children["evpnrt-items"] = evpnrt_items;
    }

    if(mvpnrt_items != nullptr)
    {
        _children["mvpnrt-items"] = mvpnrt_items;
    }

    if(importedrt_items != nullptr)
    {
        _children["importedrt-items"] = importedrt_items;
    }

    if(selforigrt_items != nullptr)
    {
        _children["selforigrt-items"] = selforigrt_items;
    }

    if(injectedrt_items != nullptr)
    {
        _children["injectedrt-items"] = injectedrt_items;
    }

    if(exportedrt_items != nullptr)
    {
        _children["exportedrt-items"] = exportedrt_items;
    }

    if(rcvdpathsrt_items != nullptr)
    {
        _children["rcvdpathsrt-items"] = rcvdpathsrt_items;
    }

    if(rtmap_items != nullptr)
    {
        _children["rtmap-items"] = rtmap_items;
    }

    if(fltrlist_items != nullptr)
    {
        _children["fltrlist-items"] = fltrlist_items;
    }

    if(pfxlist_items != nullptr)
    {
        _children["pfxlist-items"] = pfxlist_items;
    }

    if(damppathsrt_items != nullptr)
    {
        _children["damppathsrt-items"] = damppathsrt_items;
    }

    if(damphstpathsrt_items != nullptr)
    {
        _children["damphstpathsrt-items"] = damphstpathsrt_items;
    }

    if(rttype_items != nullptr)
    {
        _children["rttype-items"] = rttype_items;
    }

    if(vnid_items != nullptr)
    {
        _children["vnid-items"] = vnid_items;
    }

    if(mac_items != nullptr)
    {
        _children["mac-items"] = mac_items;
    }

    if(rd_items != nullptr)
    {
        _children["rd-items"] = rd_items;
    }

    if(pfx_items != nullptr)
    {
        _children["pfx-items"] = pfx_items;
    }

    if(esid_items != nullptr)
    {
        _children["esid-items"] = esid_items;
    }

    if(nh_items != nullptr)
    {
        _children["nh-items"] = nh_items;
    }

    if(mrttype_items != nullptr)
    {
        _children["mrttype-items"] = mrttype_items;
    }

    if(defrtleak_items != nullptr)
    {
        _children["defrtleak-items"] = defrtleak_items;
    }

    if(interleak_items != nullptr)
    {
        _children["interleak-items"] = interleak_items;
    }

    if(injname_items != nullptr)
    {
        _children["injname-items"] = injname_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maxEcmp")
    {
        maxecmp = value;
        maxecmp.value_namespace = name_space;
        maxecmp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maxExtEcmp")
    {
        maxextecmp = value;
        maxextecmp.value_namespace = name_space;
        maxextecmp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maxExtIntEcmp")
    {
        maxextintecmp = value;
        maxextintecmp.value_namespace = name_space;
        maxextintecmp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maxMxdEcmp")
    {
        maxmxdecmp = value;
        maxmxdecmp.value_namespace = name_space;
        maxmxdecmp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tmrBstpthDfr")
    {
        tmrbstpthdfr = value;
        tmrbstpthdfr.value_namespace = name_space;
        tmrbstpthdfr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tmrMax")
    {
        tmrmax = value;
        tmrmax.value_namespace = name_space;
        tmrmax.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tblMap")
    {
        tblmap = value;
        tblmap.value_namespace = name_space;
        tblmap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tblMapFltr")
    {
        tblmapfltr = value;
        tblmapfltr.value_namespace = name_space;
        tblmapfltr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vniEthTag")
    {
        vniethtag = value;
        vniethtag.value_namespace = name_space;
        vniethtag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "advSysMac")
    {
        advsysmac = value;
        advsysmac.value_namespace = name_space;
        advsysmac.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bestPathSigTs")
    {
        bestpathsigts = value;
        bestpathsigts.value_namespace = name_space;
        bestpathsigts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bestPathCmpltTs")
    {
        bestpathcmpltts = value;
        bestpathcmpltts.value_namespace = name_space;
        bestpathcmpltts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "critNhTimeout")
    {
        critnhtimeout = value;
        critnhtimeout.value_namespace = name_space;
        critnhtimeout.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nonCritNhTimeout")
    {
        noncritnhtimeout = value;
        noncritnhtimeout.value_namespace = name_space;
        noncritnhtimeout.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tblVer")
    {
        tblver = value;
        tblver.value_namespace = name_space;
        tblver.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nhRtMap")
    {
        nhrtmap = value;
        nhrtmap.value_namespace = name_space;
        nhrtmap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "clReflection")
    {
        clreflection = value;
        clreflection.value_namespace = name_space;
        clreflection.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "advertL2vpnEvpn")
    {
        advertl2vpnevpn = value;
        advertl2vpnevpn.value_namespace = name_space;
        advertl2vpnevpn.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "allocLblAll")
    {
        alloclblall = value;
        alloclblall.value_namespace = name_space;
        alloclblall.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "allocLblRtMap")
    {
        alloclblrtmap = value;
        alloclblrtmap.value_namespace = name_space;
        alloclblrtmap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lblAllocMod")
    {
        lblallocmod = value;
        lblallocmod.value_namespace = name_space;
        lblallocmod.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "retainRttRtMap")
    {
        retainrttrtmap = value;
        retainrttrtmap.value_namespace = name_space;
        retainrttrtmap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "retainRttAll")
    {
        retainrttall = value;
        retainrttall.value_namespace = name_space;
        retainrttall.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "defMetric")
    {
        defmetric = value;
        defmetric.value_namespace = name_space;
        defmetric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tblId")
    {
        tblid = value;
        tblid.value_namespace = name_space;
        tblid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tblSt")
    {
        tblst = value;
        tblst.value_namespace = name_space;
        tblst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPeers")
    {
        numpeers = value;
        numpeers.value_namespace = name_space;
        numpeers.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPeersActive")
    {
        numpeersactive = value;
        numpeersactive.value_namespace = name_space;
        numpeersactive.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numRoutes")
    {
        numroutes = value;
        numroutes.value_namespace = name_space;
        numroutes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPaths")
    {
        numpaths = value;
        numpaths.value_namespace = name_space;
        numpaths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numNetworks")
    {
        numnetworks = value;
        numnetworks.value_namespace = name_space;
        numnetworks.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numAggregates")
    {
        numaggregates = value;
        numaggregates.value_namespace = name_space;
        numaggregates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "defInfOriginate")
    {
        definforiginate = value;
        definforiginate.value_namespace = name_space;
        definforiginate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "defInfOrigRd")
    {
        definforigrd = value;
        definforigrd.value_namespace = name_space;
        definforigrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "defInfOrigRtt")
    {
        definforigrtt = value;
        definforigrtt.value_namespace = name_space;
        definforigrtt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "igpMetric")
    {
        igpmetric = value;
        igpmetric.value_namespace = name_space;
        igpmetric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "supprInactive")
    {
        supprinactive = value;
        supprinactive.value_namespace = name_space;
        supprinactive.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "advPip")
    {
        advpip = value;
        advpip.value_namespace = name_space;
        advpip.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exportGwIp")
    {
        exportgwip = value;
        exportgwip.value_namespace = name_space;
        exportgwip.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "maxEcmp")
    {
        maxecmp.yfilter = yfilter;
    }
    if(value_path == "maxExtEcmp")
    {
        maxextecmp.yfilter = yfilter;
    }
    if(value_path == "maxExtIntEcmp")
    {
        maxextintecmp.yfilter = yfilter;
    }
    if(value_path == "maxMxdEcmp")
    {
        maxmxdecmp.yfilter = yfilter;
    }
    if(value_path == "tmrBstpthDfr")
    {
        tmrbstpthdfr.yfilter = yfilter;
    }
    if(value_path == "tmrMax")
    {
        tmrmax.yfilter = yfilter;
    }
    if(value_path == "tblMap")
    {
        tblmap.yfilter = yfilter;
    }
    if(value_path == "tblMapFltr")
    {
        tblmapfltr.yfilter = yfilter;
    }
    if(value_path == "vniEthTag")
    {
        vniethtag.yfilter = yfilter;
    }
    if(value_path == "advSysMac")
    {
        advsysmac.yfilter = yfilter;
    }
    if(value_path == "bestPathSigTs")
    {
        bestpathsigts.yfilter = yfilter;
    }
    if(value_path == "bestPathCmpltTs")
    {
        bestpathcmpltts.yfilter = yfilter;
    }
    if(value_path == "critNhTimeout")
    {
        critnhtimeout.yfilter = yfilter;
    }
    if(value_path == "nonCritNhTimeout")
    {
        noncritnhtimeout.yfilter = yfilter;
    }
    if(value_path == "tblVer")
    {
        tblver.yfilter = yfilter;
    }
    if(value_path == "nhRtMap")
    {
        nhrtmap.yfilter = yfilter;
    }
    if(value_path == "clReflection")
    {
        clreflection.yfilter = yfilter;
    }
    if(value_path == "advertL2vpnEvpn")
    {
        advertl2vpnevpn.yfilter = yfilter;
    }
    if(value_path == "allocLblAll")
    {
        alloclblall.yfilter = yfilter;
    }
    if(value_path == "allocLblRtMap")
    {
        alloclblrtmap.yfilter = yfilter;
    }
    if(value_path == "lblAllocMod")
    {
        lblallocmod.yfilter = yfilter;
    }
    if(value_path == "retainRttRtMap")
    {
        retainrttrtmap.yfilter = yfilter;
    }
    if(value_path == "retainRttAll")
    {
        retainrttall.yfilter = yfilter;
    }
    if(value_path == "defMetric")
    {
        defmetric.yfilter = yfilter;
    }
    if(value_path == "tblId")
    {
        tblid.yfilter = yfilter;
    }
    if(value_path == "tblSt")
    {
        tblst.yfilter = yfilter;
    }
    if(value_path == "numPeers")
    {
        numpeers.yfilter = yfilter;
    }
    if(value_path == "numPeersActive")
    {
        numpeersactive.yfilter = yfilter;
    }
    if(value_path == "numRoutes")
    {
        numroutes.yfilter = yfilter;
    }
    if(value_path == "numPaths")
    {
        numpaths.yfilter = yfilter;
    }
    if(value_path == "numNetworks")
    {
        numnetworks.yfilter = yfilter;
    }
    if(value_path == "numAggregates")
    {
        numaggregates.yfilter = yfilter;
    }
    if(value_path == "defInfOriginate")
    {
        definforiginate.yfilter = yfilter;
    }
    if(value_path == "defInfOrigRd")
    {
        definforigrd.yfilter = yfilter;
    }
    if(value_path == "defInfOrigRtt")
    {
        definforigrtt.yfilter = yfilter;
    }
    if(value_path == "igpMetric")
    {
        igpmetric.yfilter = yfilter;
    }
    if(value_path == "supprInactive")
    {
        supprinactive.yfilter = yfilter;
    }
    if(value_path == "advPip")
    {
        advpip.yfilter = yfilter;
    }
    if(value_path == "exportGwIp")
    {
        exportgwip.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ctrl-items" || name == "adminDist-items" || name == "dampening-items" || name == "prefix-items" || name == "aggaddr-items" || name == "addlpath-items" || name == "rt-items" || name == "vpnrt-items" || name == "lblrt-items" || name == "lsrt-items" || name == "evpnrt-items" || name == "mvpnrt-items" || name == "importedrt-items" || name == "selforigrt-items" || name == "injectedrt-items" || name == "exportedrt-items" || name == "rcvdpathsrt-items" || name == "rtmap-items" || name == "fltrlist-items" || name == "pfxlist-items" || name == "damppathsrt-items" || name == "damphstpathsrt-items" || name == "rttype-items" || name == "vnid-items" || name == "mac-items" || name == "rd-items" || name == "pfx-items" || name == "esid-items" || name == "nh-items" || name == "mrttype-items" || name == "defrtleak-items" || name == "interleak-items" || name == "injname-items" || name == "type" || name == "maxEcmp" || name == "maxExtEcmp" || name == "maxExtIntEcmp" || name == "maxMxdEcmp" || name == "tmrBstpthDfr" || name == "tmrMax" || name == "tblMap" || name == "tblMapFltr" || name == "vniEthTag" || name == "advSysMac" || name == "bestPathSigTs" || name == "bestPathCmpltTs" || name == "critNhTimeout" || name == "nonCritNhTimeout" || name == "tblVer" || name == "nhRtMap" || name == "clReflection" || name == "advertL2vpnEvpn" || name == "allocLblAll" || name == "allocLblRtMap" || name == "lblAllocMod" || name == "retainRttRtMap" || name == "retainRttAll" || name == "defMetric" || name == "tblId" || name == "tblSt" || name == "numPeers" || name == "numPeersActive" || name == "numRoutes" || name == "numPaths" || name == "numNetworks" || name == "numAggregates" || name == "defInfOriginate" || name == "defInfOrigRd" || name == "defInfOrigRtt" || name == "igpMetric" || name == "supprInactive" || name == "advPip" || name == "exportGwIp")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::CtrlItems()
    :
    vpnctrlp_list(this, {"type"})
{

    yang_name = "ctrl-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::~CtrlItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<vpnctrlp_list.len(); index++)
    {
        if(vpnctrlp_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::has_operation() const
{
    for (std::size_t index=0; index<vpnctrlp_list.len(); index++)
    {
        if(vpnctrlp_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ctrl-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "VpnCtrlP-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList>();
        ent_->parent = this;
        vpnctrlp_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : vpnctrlp_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "VpnCtrlP-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList::VpnCtrlPList()
    :
    type{YType::enumeration, "type"}
{

    yang_name = "VpnCtrlP-list"; yang_parent_name = "ctrl-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList::~VpnCtrlPList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "VpnCtrlP-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::CtrlItems::VpnCtrlPList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems::AdminDistItems()
    :
    edist{YType::uint16, "eDist"},
    idist{YType::uint16, "iDist"},
    localdist{YType::uint16, "localDist"}
{

    yang_name = "adminDist-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems::~AdminDistItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems::has_data() const
{
    if (is_presence_container) return true;
    return edist.is_set
	|| idist.is_set
	|| localdist.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(edist.yfilter)
	|| ydk::is_set(idist.yfilter)
	|| ydk::is_set(localdist.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "adminDist-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (edist.is_set || is_set(edist.yfilter)) leaf_name_data.push_back(edist.get_name_leafdata());
    if (idist.is_set || is_set(idist.yfilter)) leaf_name_data.push_back(idist.get_name_leafdata());
    if (localdist.is_set || is_set(localdist.yfilter)) leaf_name_data.push_back(localdist.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "eDist")
    {
        edist = value;
        edist.value_namespace = name_space;
        edist.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "iDist")
    {
        idist = value;
        idist.value_namespace = name_space;
        idist.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "localDist")
    {
        localdist = value;
        localdist.value_namespace = name_space;
        localdist.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "eDist")
    {
        edist.yfilter = yfilter;
    }
    if(value_path == "iDist")
    {
        idist.yfilter = yfilter;
    }
    if(value_path == "localDist")
    {
        localdist.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AdminDistItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "eDist" || name == "iDist" || name == "localDist")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems::DampeningItems()
    :
    rtmap{YType::str, "rtMap"},
    halflife{YType::uint8, "halfLife"},
    reuse{YType::uint16, "reuse"},
    suppress{YType::uint16, "suppress"},
    maxsupprpenalty{YType::uint32, "maxSupprPenalty"},
    maxsuppresstime{YType::uint8, "maxSuppressTime"}
{

    yang_name = "dampening-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems::~DampeningItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems::has_data() const
{
    if (is_presence_container) return true;
    return rtmap.is_set
	|| halflife.is_set
	|| reuse.is_set
	|| suppress.is_set
	|| maxsupprpenalty.is_set
	|| maxsuppresstime.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(rtmap.yfilter)
	|| ydk::is_set(halflife.yfilter)
	|| ydk::is_set(reuse.yfilter)
	|| ydk::is_set(suppress.yfilter)
	|| ydk::is_set(maxsupprpenalty.yfilter)
	|| ydk::is_set(maxsuppresstime.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "dampening-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (rtmap.is_set || is_set(rtmap.yfilter)) leaf_name_data.push_back(rtmap.get_name_leafdata());
    if (halflife.is_set || is_set(halflife.yfilter)) leaf_name_data.push_back(halflife.get_name_leafdata());
    if (reuse.is_set || is_set(reuse.yfilter)) leaf_name_data.push_back(reuse.get_name_leafdata());
    if (suppress.is_set || is_set(suppress.yfilter)) leaf_name_data.push_back(suppress.get_name_leafdata());
    if (maxsupprpenalty.is_set || is_set(maxsupprpenalty.yfilter)) leaf_name_data.push_back(maxsupprpenalty.get_name_leafdata());
    if (maxsuppresstime.is_set || is_set(maxsuppresstime.yfilter)) leaf_name_data.push_back(maxsuppresstime.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "rtMap")
    {
        rtmap = value;
        rtmap.value_namespace = name_space;
        rtmap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "halfLife")
    {
        halflife = value;
        halflife.value_namespace = name_space;
        halflife.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "reuse")
    {
        reuse = value;
        reuse.value_namespace = name_space;
        reuse.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "suppress")
    {
        suppress = value;
        suppress.value_namespace = name_space;
        suppress.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maxSupprPenalty")
    {
        maxsupprpenalty = value;
        maxsupprpenalty.value_namespace = name_space;
        maxsupprpenalty.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maxSuppressTime")
    {
        maxsuppresstime = value;
        maxsuppresstime.value_namespace = name_space;
        maxsuppresstime.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "rtMap")
    {
        rtmap.yfilter = yfilter;
    }
    if(value_path == "halfLife")
    {
        halflife.yfilter = yfilter;
    }
    if(value_path == "reuse")
    {
        reuse.yfilter = yfilter;
    }
    if(value_path == "suppress")
    {
        suppress.yfilter = yfilter;
    }
    if(value_path == "maxSupprPenalty")
    {
        maxsupprpenalty.yfilter = yfilter;
    }
    if(value_path == "maxSuppressTime")
    {
        maxsuppresstime.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::DampeningItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "rtMap" || name == "halfLife" || name == "reuse" || name == "suppress" || name == "maxSupprPenalty" || name == "maxSuppressTime")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::PrefixItems()
    :
    advprefix_list(this, {"addr"})
{

    yang_name = "prefix-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::~PrefixItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<advprefix_list.len(); index++)
    {
        if(advprefix_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::has_operation() const
{
    for (std::size_t index=0; index<advprefix_list.len(); index++)
    {
        if(advprefix_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "prefix-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AdvPrefix-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList>();
        ent_->parent = this;
        advprefix_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : advprefix_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AdvPrefix-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList::AdvPrefixList()
    :
    addr{YType::str, "addr"},
    rtmap{YType::str, "rtMap"}
{

    yang_name = "AdvPrefix-list"; yang_parent_name = "prefix-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList::~AdvPrefixList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList::has_data() const
{
    if (is_presence_container) return true;
    return addr.is_set
	|| rtmap.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(addr.yfilter)
	|| ydk::is_set(rtmap.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AdvPrefix-list";
    ADD_KEY_TOKEN(addr, "addr");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (addr.is_set || is_set(addr.yfilter)) leaf_name_data.push_back(addr.get_name_leafdata());
    if (rtmap.is_set || is_set(rtmap.yfilter)) leaf_name_data.push_back(rtmap.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "addr")
    {
        addr = value;
        addr.value_namespace = name_space;
        addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtMap")
    {
        rtmap = value;
        rtmap.value_namespace = name_space;
        rtmap.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "addr")
    {
        addr.yfilter = yfilter;
    }
    if(value_path == "rtMap")
    {
        rtmap.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::PrefixItems::AdvPrefixList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "addr" || name == "rtMap")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggaddrItems()
    :
    aggaddr_list(this, {"addr"})
{

    yang_name = "aggaddr-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::~AggaddrItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<aggaddr_list.len(); index++)
    {
        if(aggaddr_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::has_operation() const
{
    for (std::size_t index=0; index<aggaddr_list.len(); index++)
    {
        if(aggaddr_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "aggaddr-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AggAddr-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList>();
        ent_->parent = this;
        aggaddr_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : aggaddr_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AggAddr-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList::AggAddrList()
    :
    addr{YType::str, "addr"},
    advermap{YType::str, "adverMap"},
    attrmap{YType::str, "attrMap"},
    asset{YType::enumeration, "asSet"},
    summaryonly{YType::enumeration, "summaryOnly"},
    supprmap{YType::str, "supprMap"}
{

    yang_name = "AggAddr-list"; yang_parent_name = "aggaddr-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList::~AggAddrList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList::has_data() const
{
    if (is_presence_container) return true;
    return addr.is_set
	|| advermap.is_set
	|| attrmap.is_set
	|| asset.is_set
	|| summaryonly.is_set
	|| supprmap.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(addr.yfilter)
	|| ydk::is_set(advermap.yfilter)
	|| ydk::is_set(attrmap.yfilter)
	|| ydk::is_set(asset.yfilter)
	|| ydk::is_set(summaryonly.yfilter)
	|| ydk::is_set(supprmap.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AggAddr-list";
    ADD_KEY_TOKEN(addr, "addr");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (addr.is_set || is_set(addr.yfilter)) leaf_name_data.push_back(addr.get_name_leafdata());
    if (advermap.is_set || is_set(advermap.yfilter)) leaf_name_data.push_back(advermap.get_name_leafdata());
    if (attrmap.is_set || is_set(attrmap.yfilter)) leaf_name_data.push_back(attrmap.get_name_leafdata());
    if (asset.is_set || is_set(asset.yfilter)) leaf_name_data.push_back(asset.get_name_leafdata());
    if (summaryonly.is_set || is_set(summaryonly.yfilter)) leaf_name_data.push_back(summaryonly.get_name_leafdata());
    if (supprmap.is_set || is_set(supprmap.yfilter)) leaf_name_data.push_back(supprmap.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "addr")
    {
        addr = value;
        addr.value_namespace = name_space;
        addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "adverMap")
    {
        advermap = value;
        advermap.value_namespace = name_space;
        advermap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "attrMap")
    {
        attrmap = value;
        attrmap.value_namespace = name_space;
        attrmap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asSet")
    {
        asset = value;
        asset.value_namespace = name_space;
        asset.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "summaryOnly")
    {
        summaryonly = value;
        summaryonly.value_namespace = name_space;
        summaryonly.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "supprMap")
    {
        supprmap = value;
        supprmap.value_namespace = name_space;
        supprmap.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "addr")
    {
        addr.yfilter = yfilter;
    }
    if(value_path == "adverMap")
    {
        advermap.yfilter = yfilter;
    }
    if(value_path == "attrMap")
    {
        attrmap.yfilter = yfilter;
    }
    if(value_path == "asSet")
    {
        asset.yfilter = yfilter;
    }
    if(value_path == "summaryOnly")
    {
        summaryonly.yfilter = yfilter;
    }
    if(value_path == "supprMap")
    {
        supprmap.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AggaddrItems::AggAddrList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "addr" || name == "adverMap" || name == "attrMap" || name == "asSet" || name == "summaryOnly" || name == "supprMap")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems::AddlpathItems()
    :
    capability{YType::str, "capability"},
    rtmap{YType::str, "rtMap"}
{

    yang_name = "addlpath-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems::~AddlpathItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems::has_data() const
{
    if (is_presence_container) return true;
    return capability.is_set
	|| rtmap.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(capability.yfilter)
	|| ydk::is_set(rtmap.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "addlpath-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (capability.is_set || is_set(capability.yfilter)) leaf_name_data.push_back(capability.get_name_leafdata());
    if (rtmap.is_set || is_set(rtmap.yfilter)) leaf_name_data.push_back(rtmap.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "capability")
    {
        capability = value;
        capability.value_namespace = name_space;
        capability.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtMap")
    {
        rtmap = value;
        rtmap.value_namespace = name_space;
        rtmap.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "capability")
    {
        capability.yfilter = yfilter;
    }
    if(value_path == "rtMap")
    {
        rtmap.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::AddlpathItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "capability" || name == "rtMap")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RtItems()
    :
    route_list(this, {"pfx"})
{

    yang_name = "rt-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::~RtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<route_list.len(); index++)
    {
        if(route_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::has_operation() const
{
    for (std::size_t index=0; index<route_list.len(); index++)
    {
        if(route_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "Route-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList>();
        ent_->parent = this;
        route_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : route_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "Route-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::RouteList()
    :
    pfx{YType::str, "pfx"},
    name{YType::str, "name"},
    ver{YType::uint32, "ver"},
    rtflags{YType::str, "rtFlags"},
    numpaths{YType::uint32, "numPaths"},
    bestpathid{YType::uint32, "bestPathId"}
        ,
    path_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems>())
{
    path_items->parent = this;

    yang_name = "Route-list"; yang_parent_name = "rt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::~RouteList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::has_data() const
{
    if (is_presence_container) return true;
    return pfx.is_set
	|| name.is_set
	|| ver.is_set
	|| rtflags.is_set
	|| numpaths.is_set
	|| bestpathid.is_set
	|| (path_items !=  nullptr && path_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfx.yfilter)
	|| ydk::is_set(name.yfilter)
	|| ydk::is_set(ver.yfilter)
	|| ydk::is_set(rtflags.yfilter)
	|| ydk::is_set(numpaths.yfilter)
	|| ydk::is_set(bestpathid.yfilter)
	|| (path_items !=  nullptr && path_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Route-list";
    ADD_KEY_TOKEN(pfx, "pfx");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfx.is_set || is_set(pfx.yfilter)) leaf_name_data.push_back(pfx.get_name_leafdata());
    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());
    if (ver.is_set || is_set(ver.yfilter)) leaf_name_data.push_back(ver.get_name_leafdata());
    if (rtflags.is_set || is_set(rtflags.yfilter)) leaf_name_data.push_back(rtflags.get_name_leafdata());
    if (numpaths.is_set || is_set(numpaths.yfilter)) leaf_name_data.push_back(numpaths.get_name_leafdata());
    if (bestpathid.is_set || is_set(bestpathid.yfilter)) leaf_name_data.push_back(bestpathid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "path-items")
    {
        if(path_items == nullptr)
        {
            path_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems>();
        }
        return path_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(path_items != nullptr)
    {
        _children["path-items"] = path_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfx")
    {
        pfx = value;
        pfx.value_namespace = name_space;
        pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ver")
    {
        ver = value;
        ver.value_namespace = name_space;
        ver.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtFlags")
    {
        rtflags = value;
        rtflags.value_namespace = name_space;
        rtflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPaths")
    {
        numpaths = value;
        numpaths.value_namespace = name_space;
        numpaths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bestPathId")
    {
        bestpathid = value;
        bestpathid.value_namespace = name_space;
        bestpathid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfx")
    {
        pfx.yfilter = yfilter;
    }
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
    if(value_path == "ver")
    {
        ver.yfilter = yfilter;
    }
    if(value_path == "rtFlags")
    {
        rtflags.yfilter = yfilter;
    }
    if(value_path == "numPaths")
    {
        numpaths.yfilter = yfilter;
    }
    if(value_path == "bestPathId")
    {
        bestpathid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "path-items" || name == "pfx" || name == "name" || name == "ver" || name == "rtFlags" || name == "numPaths" || name == "bestPathId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathItems()
    :
    path_list(this, {"peer", "id", "nh", "importedrd", "origimportedrd"})
{

    yang_name = "path-items"; yang_parent_name = "Route-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::~PathItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::has_operation() const
{
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "path-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "Path-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList>();
        ent_->parent = this;
        path_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : path_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "Path-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PathList()
    :
    peer{YType::str, "peer"},
    id{YType::uint32, "id"},
    nh{YType::str, "nh"},
    importedrd{YType::str, "importedRd"},
    origimportedrd{YType::str, "origImportedRd"},
    nhmetric{YType::uint32, "nhMetric"},
    type{YType::enumeration, "type"},
    operst{YType::enumeration, "operSt"},
    flags{YType::str, "flags"},
    origin{YType::enumeration, "origin"},
    metric{YType::uint32, "metric"},
    localpref{YType::uint32, "localPref"},
    weight{YType::uint16, "weight"},
    aggr{YType::str, "aggr"},
    aggras{YType::str, "aggrAs"},
    unknownattrdata{YType::str, "unknownAttrData"},
    unknownattrlen{YType::uint32, "unknownAttrLen"},
    regcomm{YType::str, "regComm"},
    extcomm{YType::str, "extComm"},
    aspath{YType::str, "asPath"},
    rcvdlbl{YType::str, "rcvdLbl"},
    originatorid{YType::str, "originatorId"},
    clusterlst{YType::str, "clusterLst"},
    peerrtrid{YType::str, "peerRtrId"}
        ,
    seg_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems>())
    , rcomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems>())
    , ecomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems>())
    , lnkstattr_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems>())
    , pfxsid_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems>())
    , pmsi_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems>())
{
    seg_items->parent = this;
    rcomm_items->parent = this;
    ecomm_items->parent = this;
    lnkstattr_items->parent = this;
    pfxsid_items->parent = this;
    pmsi_items->parent = this;

    yang_name = "Path-list"; yang_parent_name = "path-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::~PathList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::has_data() const
{
    if (is_presence_container) return true;
    return peer.is_set
	|| id.is_set
	|| nh.is_set
	|| importedrd.is_set
	|| origimportedrd.is_set
	|| nhmetric.is_set
	|| type.is_set
	|| operst.is_set
	|| flags.is_set
	|| origin.is_set
	|| metric.is_set
	|| localpref.is_set
	|| weight.is_set
	|| aggr.is_set
	|| aggras.is_set
	|| unknownattrdata.is_set
	|| unknownattrlen.is_set
	|| regcomm.is_set
	|| extcomm.is_set
	|| aspath.is_set
	|| rcvdlbl.is_set
	|| originatorid.is_set
	|| clusterlst.is_set
	|| peerrtrid.is_set
	|| (seg_items !=  nullptr && seg_items->has_data())
	|| (rcomm_items !=  nullptr && rcomm_items->has_data())
	|| (ecomm_items !=  nullptr && ecomm_items->has_data())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_data())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_data())
	|| (pmsi_items !=  nullptr && pmsi_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(peer.yfilter)
	|| ydk::is_set(id.yfilter)
	|| ydk::is_set(nh.yfilter)
	|| ydk::is_set(importedrd.yfilter)
	|| ydk::is_set(origimportedrd.yfilter)
	|| ydk::is_set(nhmetric.yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(operst.yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(origin.yfilter)
	|| ydk::is_set(metric.yfilter)
	|| ydk::is_set(localpref.yfilter)
	|| ydk::is_set(weight.yfilter)
	|| ydk::is_set(aggr.yfilter)
	|| ydk::is_set(aggras.yfilter)
	|| ydk::is_set(unknownattrdata.yfilter)
	|| ydk::is_set(unknownattrlen.yfilter)
	|| ydk::is_set(regcomm.yfilter)
	|| ydk::is_set(extcomm.yfilter)
	|| ydk::is_set(aspath.yfilter)
	|| ydk::is_set(rcvdlbl.yfilter)
	|| ydk::is_set(originatorid.yfilter)
	|| ydk::is_set(clusterlst.yfilter)
	|| ydk::is_set(peerrtrid.yfilter)
	|| (seg_items !=  nullptr && seg_items->has_operation())
	|| (rcomm_items !=  nullptr && rcomm_items->has_operation())
	|| (ecomm_items !=  nullptr && ecomm_items->has_operation())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_operation())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_operation())
	|| (pmsi_items !=  nullptr && pmsi_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Path-list";
    ADD_KEY_TOKEN(peer, "peer");
    ADD_KEY_TOKEN(id, "id");
    ADD_KEY_TOKEN(nh, "nh");
    ADD_KEY_TOKEN(importedrd, "importedRd");
    ADD_KEY_TOKEN(origimportedrd, "origImportedRd");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (peer.is_set || is_set(peer.yfilter)) leaf_name_data.push_back(peer.get_name_leafdata());
    if (id.is_set || is_set(id.yfilter)) leaf_name_data.push_back(id.get_name_leafdata());
    if (nh.is_set || is_set(nh.yfilter)) leaf_name_data.push_back(nh.get_name_leafdata());
    if (importedrd.is_set || is_set(importedrd.yfilter)) leaf_name_data.push_back(importedrd.get_name_leafdata());
    if (origimportedrd.is_set || is_set(origimportedrd.yfilter)) leaf_name_data.push_back(origimportedrd.get_name_leafdata());
    if (nhmetric.is_set || is_set(nhmetric.yfilter)) leaf_name_data.push_back(nhmetric.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (operst.is_set || is_set(operst.yfilter)) leaf_name_data.push_back(operst.get_name_leafdata());
    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (origin.is_set || is_set(origin.yfilter)) leaf_name_data.push_back(origin.get_name_leafdata());
    if (metric.is_set || is_set(metric.yfilter)) leaf_name_data.push_back(metric.get_name_leafdata());
    if (localpref.is_set || is_set(localpref.yfilter)) leaf_name_data.push_back(localpref.get_name_leafdata());
    if (weight.is_set || is_set(weight.yfilter)) leaf_name_data.push_back(weight.get_name_leafdata());
    if (aggr.is_set || is_set(aggr.yfilter)) leaf_name_data.push_back(aggr.get_name_leafdata());
    if (aggras.is_set || is_set(aggras.yfilter)) leaf_name_data.push_back(aggras.get_name_leafdata());
    if (unknownattrdata.is_set || is_set(unknownattrdata.yfilter)) leaf_name_data.push_back(unknownattrdata.get_name_leafdata());
    if (unknownattrlen.is_set || is_set(unknownattrlen.yfilter)) leaf_name_data.push_back(unknownattrlen.get_name_leafdata());
    if (regcomm.is_set || is_set(regcomm.yfilter)) leaf_name_data.push_back(regcomm.get_name_leafdata());
    if (extcomm.is_set || is_set(extcomm.yfilter)) leaf_name_data.push_back(extcomm.get_name_leafdata());
    if (aspath.is_set || is_set(aspath.yfilter)) leaf_name_data.push_back(aspath.get_name_leafdata());
    if (rcvdlbl.is_set || is_set(rcvdlbl.yfilter)) leaf_name_data.push_back(rcvdlbl.get_name_leafdata());
    if (originatorid.is_set || is_set(originatorid.yfilter)) leaf_name_data.push_back(originatorid.get_name_leafdata());
    if (clusterlst.is_set || is_set(clusterlst.yfilter)) leaf_name_data.push_back(clusterlst.get_name_leafdata());
    if (peerrtrid.is_set || is_set(peerrtrid.yfilter)) leaf_name_data.push_back(peerrtrid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "seg-items")
    {
        if(seg_items == nullptr)
        {
            seg_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems>();
        }
        return seg_items;
    }

    if(child_yang_name == "rcomm-items")
    {
        if(rcomm_items == nullptr)
        {
            rcomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems>();
        }
        return rcomm_items;
    }

    if(child_yang_name == "ecomm-items")
    {
        if(ecomm_items == nullptr)
        {
            ecomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems>();
        }
        return ecomm_items;
    }

    if(child_yang_name == "lnkstattr-items")
    {
        if(lnkstattr_items == nullptr)
        {
            lnkstattr_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems>();
        }
        return lnkstattr_items;
    }

    if(child_yang_name == "pfxsid-items")
    {
        if(pfxsid_items == nullptr)
        {
            pfxsid_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems>();
        }
        return pfxsid_items;
    }

    if(child_yang_name == "pmsi-items")
    {
        if(pmsi_items == nullptr)
        {
            pmsi_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems>();
        }
        return pmsi_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(seg_items != nullptr)
    {
        _children["seg-items"] = seg_items;
    }

    if(rcomm_items != nullptr)
    {
        _children["rcomm-items"] = rcomm_items;
    }

    if(ecomm_items != nullptr)
    {
        _children["ecomm-items"] = ecomm_items;
    }

    if(lnkstattr_items != nullptr)
    {
        _children["lnkstattr-items"] = lnkstattr_items;
    }

    if(pfxsid_items != nullptr)
    {
        _children["pfxsid-items"] = pfxsid_items;
    }

    if(pmsi_items != nullptr)
    {
        _children["pmsi-items"] = pmsi_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "peer")
    {
        peer = value;
        peer.value_namespace = name_space;
        peer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "id")
    {
        id = value;
        id.value_namespace = name_space;
        id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh")
    {
        nh = value;
        nh.value_namespace = name_space;
        nh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "importedRd")
    {
        importedrd = value;
        importedrd.value_namespace = name_space;
        importedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd = value;
        origimportedrd.value_namespace = name_space;
        origimportedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nhMetric")
    {
        nhmetric = value;
        nhmetric.value_namespace = name_space;
        nhmetric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "operSt")
    {
        operst = value;
        operst.value_namespace = name_space;
        operst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origin")
    {
        origin = value;
        origin.value_namespace = name_space;
        origin.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "metric")
    {
        metric = value;
        metric.value_namespace = name_space;
        metric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "localPref")
    {
        localpref = value;
        localpref.value_namespace = name_space;
        localpref.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight")
    {
        weight = value;
        weight.value_namespace = name_space;
        weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggr")
    {
        aggr = value;
        aggr.value_namespace = name_space;
        aggr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggrAs")
    {
        aggras = value;
        aggras.value_namespace = name_space;
        aggras.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata = value;
        unknownattrdata.value_namespace = name_space;
        unknownattrdata.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen = value;
        unknownattrlen.value_namespace = name_space;
        unknownattrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "regComm")
    {
        regcomm = value;
        regcomm.value_namespace = name_space;
        regcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extComm")
    {
        extcomm = value;
        extcomm.value_namespace = name_space;
        extcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asPath")
    {
        aspath = value;
        aspath.value_namespace = name_space;
        aspath.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl = value;
        rcvdlbl.value_namespace = name_space;
        rcvdlbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "originatorId")
    {
        originatorid = value;
        originatorid.value_namespace = name_space;
        originatorid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "clusterLst")
    {
        clusterlst = value;
        clusterlst.value_namespace = name_space;
        clusterlst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid = value;
        peerrtrid.value_namespace = name_space;
        peerrtrid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "peer")
    {
        peer.yfilter = yfilter;
    }
    if(value_path == "id")
    {
        id.yfilter = yfilter;
    }
    if(value_path == "nh")
    {
        nh.yfilter = yfilter;
    }
    if(value_path == "importedRd")
    {
        importedrd.yfilter = yfilter;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd.yfilter = yfilter;
    }
    if(value_path == "nhMetric")
    {
        nhmetric.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "operSt")
    {
        operst.yfilter = yfilter;
    }
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "origin")
    {
        origin.yfilter = yfilter;
    }
    if(value_path == "metric")
    {
        metric.yfilter = yfilter;
    }
    if(value_path == "localPref")
    {
        localpref.yfilter = yfilter;
    }
    if(value_path == "weight")
    {
        weight.yfilter = yfilter;
    }
    if(value_path == "aggr")
    {
        aggr.yfilter = yfilter;
    }
    if(value_path == "aggrAs")
    {
        aggras.yfilter = yfilter;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata.yfilter = yfilter;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen.yfilter = yfilter;
    }
    if(value_path == "regComm")
    {
        regcomm.yfilter = yfilter;
    }
    if(value_path == "extComm")
    {
        extcomm.yfilter = yfilter;
    }
    if(value_path == "asPath")
    {
        aspath.yfilter = yfilter;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl.yfilter = yfilter;
    }
    if(value_path == "originatorId")
    {
        originatorid.yfilter = yfilter;
    }
    if(value_path == "clusterLst")
    {
        clusterlst.yfilter = yfilter;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "seg-items" || name == "rcomm-items" || name == "ecomm-items" || name == "lnkstattr-items" || name == "pfxsid-items" || name == "pmsi-items" || name == "peer" || name == "id" || name == "nh" || name == "importedRd" || name == "origImportedRd" || name == "nhMetric" || name == "type" || name == "operSt" || name == "flags" || name == "origin" || name == "metric" || name == "localPref" || name == "weight" || name == "aggr" || name == "aggrAs" || name == "unknownAttrData" || name == "unknownAttrLen" || name == "regComm" || name == "extComm" || name == "asPath" || name == "rcvdLbl" || name == "originatorId" || name == "clusterLst" || name == "peerRtrId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::SegItems()
    :
    asseg_list(this, {"order"})
{

    yang_name = "seg-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::~SegItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::has_operation() const
{
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "seg-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsSeg-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList>();
        ent_->parent = this;
        asseg_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asseg_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsSeg-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsSegList()
    :
    order{YType::uint16, "order"},
    type{YType::enumeration, "type"}
        ,
    asn_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>())
{
    asn_items->parent = this;

    yang_name = "AsSeg-list"; yang_parent_name = "seg-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::~AsSegList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| type.is_set
	|| (asn_items !=  nullptr && asn_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(type.yfilter)
	|| (asn_items !=  nullptr && asn_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsSeg-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "asn-items")
    {
        if(asn_items == nullptr)
        {
            asn_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>();
        }
        return asn_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(asn_items != nullptr)
    {
        _children["asn-items"] = asn_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "asn-items" || name == "order" || name == "type")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsnItems()
    :
    asitem_list(this, {"order"})
{

    yang_name = "asn-items"; yang_parent_name = "AsSeg-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::~AsnItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_operation() const
{
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "asn-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsItem-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList>();
        ent_->parent = this;
        asitem_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asitem_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsItem-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::AsItemList()
    :
    order{YType::uint16, "order"},
    asn{YType::str, "asn"}
{

    yang_name = "AsItem-list"; yang_parent_name = "asn-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::~AsItemList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| asn.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(asn.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsItem-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (asn.is_set || is_set(asn.yfilter)) leaf_name_data.push_back(asn.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asn")
    {
        asn = value;
        asn.value_namespace = name_space;
        asn.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "asn")
    {
        asn.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "order" || name == "asn")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RcommItems()
    :
    regcomm_list(this, {"community"})
{

    yang_name = "rcomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::~RcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::has_operation() const
{
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rcomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "RegComm-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList>();
        ent_->parent = this;
        regcomm_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : regcomm_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "RegComm-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList::RegCommList()
    :
    community{YType::str, "community"}
{

    yang_name = "RegComm-list"; yang_parent_name = "rcomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList::~RegCommList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "RegComm-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::RcommItems::RegCommList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::EcommItems()
    :
    encap{YType::str, "encap"},
    rtrmac{YType::str, "rtrMac"}
        ,
    rt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_>())
{
    rt_items->parent = this;

    yang_name = "ecomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::~EcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::has_data() const
{
    if (is_presence_container) return true;
    return encap.is_set
	|| rtrmac.is_set
	|| (rt_items !=  nullptr && rt_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(encap.yfilter)
	|| ydk::is_set(rtrmac.yfilter)
	|| (rt_items !=  nullptr && rt_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ecomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (encap.is_set || is_set(encap.yfilter)) leaf_name_data.push_back(encap.get_name_leafdata());
    if (rtrmac.is_set || is_set(rtrmac.yfilter)) leaf_name_data.push_back(rtrmac.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "rt-items")
    {
        if(rt_items == nullptr)
        {
            rt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_>();
        }
        return rt_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(rt_items != nullptr)
    {
        _children["rt-items"] = rt_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "encap")
    {
        encap = value;
        encap.value_namespace = name_space;
        encap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtrMac")
    {
        rtrmac = value;
        rtrmac.value_namespace = name_space;
        rtrmac.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "encap")
    {
        encap.yfilter = yfilter;
    }
    if(value_path == "rtrMac")
    {
        rtrmac.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "rt-items" || name == "encap" || name == "rtrMac")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::RtItems_()
    :
    extcommrt_list(this, {"community"})
{

    yang_name = "rt-items"; yang_parent_name = "ecomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::~RtItems_()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::has_operation() const
{
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ExtCommRt-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList>();
        ent_->parent = this;
        extcommrt_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : extcommrt_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ExtCommRt-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList::ExtCommRtList()
    :
    community{YType::str, "community"}
{

    yang_name = "ExtCommRt-list"; yang_parent_name = "rt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList::~ExtCommRtList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ExtCommRt-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::EcommItems::RtItems_::ExtCommRtList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::LnkstattrItems()
    :
    lnkattrflags{YType::str, "lnkAttrFlags"},
    attrlen{YType::uint16, "attrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "lnkstattr-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::~LnkstattrItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::has_data() const
{
    if (is_presence_container) return true;
    return lnkattrflags.is_set
	|| attrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(lnkattrflags.yfilter)
	|| ydk::is_set(attrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lnkstattr-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (lnkattrflags.is_set || is_set(lnkattrflags.yfilter)) leaf_name_data.push_back(lnkattrflags.get_name_leafdata());
    if (attrlen.is_set || is_set(attrlen.yfilter)) leaf_name_data.push_back(attrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags = value;
        lnkattrflags.value_namespace = name_space;
        lnkattrflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "attrLen")
    {
        attrlen = value;
        attrlen.value_namespace = name_space;
        attrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags.yfilter = yfilter;
    }
    if(value_path == "attrLen")
    {
        attrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "lnkAttrFlags" || name == "attrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::TlvItems()
    :
    lnkstattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "lnkstattr-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "LnkStAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList>();
        ent_->parent = this;
        lnkstattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : lnkstattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "LnkStAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::LnkStAttrEntryList()
    :
    type{YType::enumeration, "type"},
    val{YType::str, "val"}
{

    yang_name = "LnkStAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::~LnkStAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "LnkStAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::PfxsidItems()
    :
    pfxsidattrlen{YType::uint16, "pfxSidAttrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "pfxsid-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::~PfxsidItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::has_data() const
{
    if (is_presence_container) return true;
    return pfxsidattrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfxsidattrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pfxsid-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfxsidattrlen.is_set || is_set(pfxsidattrlen.yfilter)) leaf_name_data.push_back(pfxsidattrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen = value;
        pfxsidattrlen.value_namespace = name_space;
        pfxsidattrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "pfxSidAttrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::TlvItems()
    :
    pfxsidattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "pfxsid-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "PfxSidAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList>();
        ent_->parent = this;
        pfxsidattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : pfxsidattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "PfxSidAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::PfxSidAttrEntryList()
    :
    type{YType::enumeration, "type"},
    len{YType::uint16, "len"},
    val{YType::str, "val"}
{

    yang_name = "PfxSidAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::~PfxSidAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| len.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(len.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "PfxSidAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (len.is_set || is_set(len.yfilter)) leaf_name_data.push_back(len.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "len")
    {
        len = value;
        len.value_namespace = name_space;
        len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "len")
    {
        len.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "len" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems::PmsiItems()
    :
    flags{YType::str, "flags"},
    tuntype{YType::enumeration, "tunType"},
    lbl{YType::uint32, "lbl"},
    tunid{YType::str, "tunId"}
{

    yang_name = "pmsi-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems::~PmsiItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems::has_data() const
{
    if (is_presence_container) return true;
    return flags.is_set
	|| tuntype.is_set
	|| lbl.is_set
	|| tunid.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(tuntype.yfilter)
	|| ydk::is_set(lbl.yfilter)
	|| ydk::is_set(tunid.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pmsi-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (tuntype.is_set || is_set(tuntype.yfilter)) leaf_name_data.push_back(tuntype.get_name_leafdata());
    if (lbl.is_set || is_set(lbl.yfilter)) leaf_name_data.push_back(lbl.get_name_leafdata());
    if (tunid.is_set || is_set(tunid.yfilter)) leaf_name_data.push_back(tunid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunType")
    {
        tuntype = value;
        tuntype.value_namespace = name_space;
        tuntype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lbl")
    {
        lbl = value;
        lbl.value_namespace = name_space;
        lbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunId")
    {
        tunid = value;
        tunid.value_namespace = name_space;
        tunid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "tunType")
    {
        tuntype.yfilter = yfilter;
    }
    if(value_path == "lbl")
    {
        lbl.yfilter = yfilter;
    }
    if(value_path == "tunId")
    {
        tunid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::RtItems::RouteList::PathItems::PathList::PmsiItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "flags" || name == "tunType" || name == "lbl" || name == "tunId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnrtItems()
    :
    vpnroute_list(this, {"pfx", "rd"})
{

    yang_name = "vpnrt-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::~VpnrtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<vpnroute_list.len(); index++)
    {
        if(vpnroute_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::has_operation() const
{
    for (std::size_t index=0; index<vpnroute_list.len(); index++)
    {
        if(vpnroute_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "vpnrt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "VpnRoute-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList>();
        ent_->parent = this;
        vpnroute_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : vpnroute_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "VpnRoute-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::VpnRouteList()
    :
    pfx{YType::str, "pfx"},
    rd{YType::str, "rd"},
    name{YType::str, "name"},
    ver{YType::uint32, "ver"},
    rtflags{YType::str, "rtFlags"},
    numpaths{YType::uint32, "numPaths"},
    bestpathid{YType::uint32, "bestPathId"}
        ,
    path_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems>())
{
    path_items->parent = this;

    yang_name = "VpnRoute-list"; yang_parent_name = "vpnrt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::~VpnRouteList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::has_data() const
{
    if (is_presence_container) return true;
    return pfx.is_set
	|| rd.is_set
	|| name.is_set
	|| ver.is_set
	|| rtflags.is_set
	|| numpaths.is_set
	|| bestpathid.is_set
	|| (path_items !=  nullptr && path_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfx.yfilter)
	|| ydk::is_set(rd.yfilter)
	|| ydk::is_set(name.yfilter)
	|| ydk::is_set(ver.yfilter)
	|| ydk::is_set(rtflags.yfilter)
	|| ydk::is_set(numpaths.yfilter)
	|| ydk::is_set(bestpathid.yfilter)
	|| (path_items !=  nullptr && path_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "VpnRoute-list";
    ADD_KEY_TOKEN(pfx, "pfx");
    ADD_KEY_TOKEN(rd, "rd");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfx.is_set || is_set(pfx.yfilter)) leaf_name_data.push_back(pfx.get_name_leafdata());
    if (rd.is_set || is_set(rd.yfilter)) leaf_name_data.push_back(rd.get_name_leafdata());
    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());
    if (ver.is_set || is_set(ver.yfilter)) leaf_name_data.push_back(ver.get_name_leafdata());
    if (rtflags.is_set || is_set(rtflags.yfilter)) leaf_name_data.push_back(rtflags.get_name_leafdata());
    if (numpaths.is_set || is_set(numpaths.yfilter)) leaf_name_data.push_back(numpaths.get_name_leafdata());
    if (bestpathid.is_set || is_set(bestpathid.yfilter)) leaf_name_data.push_back(bestpathid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "path-items")
    {
        if(path_items == nullptr)
        {
            path_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems>();
        }
        return path_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(path_items != nullptr)
    {
        _children["path-items"] = path_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfx")
    {
        pfx = value;
        pfx.value_namespace = name_space;
        pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rd")
    {
        rd = value;
        rd.value_namespace = name_space;
        rd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ver")
    {
        ver = value;
        ver.value_namespace = name_space;
        ver.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtFlags")
    {
        rtflags = value;
        rtflags.value_namespace = name_space;
        rtflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPaths")
    {
        numpaths = value;
        numpaths.value_namespace = name_space;
        numpaths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bestPathId")
    {
        bestpathid = value;
        bestpathid.value_namespace = name_space;
        bestpathid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfx")
    {
        pfx.yfilter = yfilter;
    }
    if(value_path == "rd")
    {
        rd.yfilter = yfilter;
    }
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
    if(value_path == "ver")
    {
        ver.yfilter = yfilter;
    }
    if(value_path == "rtFlags")
    {
        rtflags.yfilter = yfilter;
    }
    if(value_path == "numPaths")
    {
        numpaths.yfilter = yfilter;
    }
    if(value_path == "bestPathId")
    {
        bestpathid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "path-items" || name == "pfx" || name == "rd" || name == "name" || name == "ver" || name == "rtFlags" || name == "numPaths" || name == "bestPathId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathItems()
    :
    path_list(this, {"peer", "id", "nh", "importedrd", "origimportedrd"})
{

    yang_name = "path-items"; yang_parent_name = "VpnRoute-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::~PathItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::has_operation() const
{
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "path-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "Path-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList>();
        ent_->parent = this;
        path_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : path_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "Path-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PathList()
    :
    peer{YType::str, "peer"},
    id{YType::uint32, "id"},
    nh{YType::str, "nh"},
    importedrd{YType::str, "importedRd"},
    origimportedrd{YType::str, "origImportedRd"},
    nhmetric{YType::uint32, "nhMetric"},
    type{YType::enumeration, "type"},
    operst{YType::enumeration, "operSt"},
    flags{YType::str, "flags"},
    origin{YType::enumeration, "origin"},
    metric{YType::uint32, "metric"},
    localpref{YType::uint32, "localPref"},
    weight{YType::uint16, "weight"},
    aggr{YType::str, "aggr"},
    aggras{YType::str, "aggrAs"},
    unknownattrdata{YType::str, "unknownAttrData"},
    unknownattrlen{YType::uint32, "unknownAttrLen"},
    regcomm{YType::str, "regComm"},
    extcomm{YType::str, "extComm"},
    aspath{YType::str, "asPath"},
    rcvdlbl{YType::str, "rcvdLbl"},
    originatorid{YType::str, "originatorId"},
    clusterlst{YType::str, "clusterLst"},
    peerrtrid{YType::str, "peerRtrId"}
        ,
    seg_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems>())
    , rcomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems>())
    , ecomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems>())
    , lnkstattr_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems>())
    , pfxsid_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems>())
    , pmsi_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems>())
{
    seg_items->parent = this;
    rcomm_items->parent = this;
    ecomm_items->parent = this;
    lnkstattr_items->parent = this;
    pfxsid_items->parent = this;
    pmsi_items->parent = this;

    yang_name = "Path-list"; yang_parent_name = "path-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::~PathList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::has_data() const
{
    if (is_presence_container) return true;
    return peer.is_set
	|| id.is_set
	|| nh.is_set
	|| importedrd.is_set
	|| origimportedrd.is_set
	|| nhmetric.is_set
	|| type.is_set
	|| operst.is_set
	|| flags.is_set
	|| origin.is_set
	|| metric.is_set
	|| localpref.is_set
	|| weight.is_set
	|| aggr.is_set
	|| aggras.is_set
	|| unknownattrdata.is_set
	|| unknownattrlen.is_set
	|| regcomm.is_set
	|| extcomm.is_set
	|| aspath.is_set
	|| rcvdlbl.is_set
	|| originatorid.is_set
	|| clusterlst.is_set
	|| peerrtrid.is_set
	|| (seg_items !=  nullptr && seg_items->has_data())
	|| (rcomm_items !=  nullptr && rcomm_items->has_data())
	|| (ecomm_items !=  nullptr && ecomm_items->has_data())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_data())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_data())
	|| (pmsi_items !=  nullptr && pmsi_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(peer.yfilter)
	|| ydk::is_set(id.yfilter)
	|| ydk::is_set(nh.yfilter)
	|| ydk::is_set(importedrd.yfilter)
	|| ydk::is_set(origimportedrd.yfilter)
	|| ydk::is_set(nhmetric.yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(operst.yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(origin.yfilter)
	|| ydk::is_set(metric.yfilter)
	|| ydk::is_set(localpref.yfilter)
	|| ydk::is_set(weight.yfilter)
	|| ydk::is_set(aggr.yfilter)
	|| ydk::is_set(aggras.yfilter)
	|| ydk::is_set(unknownattrdata.yfilter)
	|| ydk::is_set(unknownattrlen.yfilter)
	|| ydk::is_set(regcomm.yfilter)
	|| ydk::is_set(extcomm.yfilter)
	|| ydk::is_set(aspath.yfilter)
	|| ydk::is_set(rcvdlbl.yfilter)
	|| ydk::is_set(originatorid.yfilter)
	|| ydk::is_set(clusterlst.yfilter)
	|| ydk::is_set(peerrtrid.yfilter)
	|| (seg_items !=  nullptr && seg_items->has_operation())
	|| (rcomm_items !=  nullptr && rcomm_items->has_operation())
	|| (ecomm_items !=  nullptr && ecomm_items->has_operation())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_operation())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_operation())
	|| (pmsi_items !=  nullptr && pmsi_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Path-list";
    ADD_KEY_TOKEN(peer, "peer");
    ADD_KEY_TOKEN(id, "id");
    ADD_KEY_TOKEN(nh, "nh");
    ADD_KEY_TOKEN(importedrd, "importedRd");
    ADD_KEY_TOKEN(origimportedrd, "origImportedRd");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (peer.is_set || is_set(peer.yfilter)) leaf_name_data.push_back(peer.get_name_leafdata());
    if (id.is_set || is_set(id.yfilter)) leaf_name_data.push_back(id.get_name_leafdata());
    if (nh.is_set || is_set(nh.yfilter)) leaf_name_data.push_back(nh.get_name_leafdata());
    if (importedrd.is_set || is_set(importedrd.yfilter)) leaf_name_data.push_back(importedrd.get_name_leafdata());
    if (origimportedrd.is_set || is_set(origimportedrd.yfilter)) leaf_name_data.push_back(origimportedrd.get_name_leafdata());
    if (nhmetric.is_set || is_set(nhmetric.yfilter)) leaf_name_data.push_back(nhmetric.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (operst.is_set || is_set(operst.yfilter)) leaf_name_data.push_back(operst.get_name_leafdata());
    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (origin.is_set || is_set(origin.yfilter)) leaf_name_data.push_back(origin.get_name_leafdata());
    if (metric.is_set || is_set(metric.yfilter)) leaf_name_data.push_back(metric.get_name_leafdata());
    if (localpref.is_set || is_set(localpref.yfilter)) leaf_name_data.push_back(localpref.get_name_leafdata());
    if (weight.is_set || is_set(weight.yfilter)) leaf_name_data.push_back(weight.get_name_leafdata());
    if (aggr.is_set || is_set(aggr.yfilter)) leaf_name_data.push_back(aggr.get_name_leafdata());
    if (aggras.is_set || is_set(aggras.yfilter)) leaf_name_data.push_back(aggras.get_name_leafdata());
    if (unknownattrdata.is_set || is_set(unknownattrdata.yfilter)) leaf_name_data.push_back(unknownattrdata.get_name_leafdata());
    if (unknownattrlen.is_set || is_set(unknownattrlen.yfilter)) leaf_name_data.push_back(unknownattrlen.get_name_leafdata());
    if (regcomm.is_set || is_set(regcomm.yfilter)) leaf_name_data.push_back(regcomm.get_name_leafdata());
    if (extcomm.is_set || is_set(extcomm.yfilter)) leaf_name_data.push_back(extcomm.get_name_leafdata());
    if (aspath.is_set || is_set(aspath.yfilter)) leaf_name_data.push_back(aspath.get_name_leafdata());
    if (rcvdlbl.is_set || is_set(rcvdlbl.yfilter)) leaf_name_data.push_back(rcvdlbl.get_name_leafdata());
    if (originatorid.is_set || is_set(originatorid.yfilter)) leaf_name_data.push_back(originatorid.get_name_leafdata());
    if (clusterlst.is_set || is_set(clusterlst.yfilter)) leaf_name_data.push_back(clusterlst.get_name_leafdata());
    if (peerrtrid.is_set || is_set(peerrtrid.yfilter)) leaf_name_data.push_back(peerrtrid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "seg-items")
    {
        if(seg_items == nullptr)
        {
            seg_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems>();
        }
        return seg_items;
    }

    if(child_yang_name == "rcomm-items")
    {
        if(rcomm_items == nullptr)
        {
            rcomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems>();
        }
        return rcomm_items;
    }

    if(child_yang_name == "ecomm-items")
    {
        if(ecomm_items == nullptr)
        {
            ecomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems>();
        }
        return ecomm_items;
    }

    if(child_yang_name == "lnkstattr-items")
    {
        if(lnkstattr_items == nullptr)
        {
            lnkstattr_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems>();
        }
        return lnkstattr_items;
    }

    if(child_yang_name == "pfxsid-items")
    {
        if(pfxsid_items == nullptr)
        {
            pfxsid_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems>();
        }
        return pfxsid_items;
    }

    if(child_yang_name == "pmsi-items")
    {
        if(pmsi_items == nullptr)
        {
            pmsi_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems>();
        }
        return pmsi_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(seg_items != nullptr)
    {
        _children["seg-items"] = seg_items;
    }

    if(rcomm_items != nullptr)
    {
        _children["rcomm-items"] = rcomm_items;
    }

    if(ecomm_items != nullptr)
    {
        _children["ecomm-items"] = ecomm_items;
    }

    if(lnkstattr_items != nullptr)
    {
        _children["lnkstattr-items"] = lnkstattr_items;
    }

    if(pfxsid_items != nullptr)
    {
        _children["pfxsid-items"] = pfxsid_items;
    }

    if(pmsi_items != nullptr)
    {
        _children["pmsi-items"] = pmsi_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "peer")
    {
        peer = value;
        peer.value_namespace = name_space;
        peer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "id")
    {
        id = value;
        id.value_namespace = name_space;
        id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh")
    {
        nh = value;
        nh.value_namespace = name_space;
        nh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "importedRd")
    {
        importedrd = value;
        importedrd.value_namespace = name_space;
        importedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd = value;
        origimportedrd.value_namespace = name_space;
        origimportedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nhMetric")
    {
        nhmetric = value;
        nhmetric.value_namespace = name_space;
        nhmetric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "operSt")
    {
        operst = value;
        operst.value_namespace = name_space;
        operst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origin")
    {
        origin = value;
        origin.value_namespace = name_space;
        origin.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "metric")
    {
        metric = value;
        metric.value_namespace = name_space;
        metric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "localPref")
    {
        localpref = value;
        localpref.value_namespace = name_space;
        localpref.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight")
    {
        weight = value;
        weight.value_namespace = name_space;
        weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggr")
    {
        aggr = value;
        aggr.value_namespace = name_space;
        aggr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggrAs")
    {
        aggras = value;
        aggras.value_namespace = name_space;
        aggras.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata = value;
        unknownattrdata.value_namespace = name_space;
        unknownattrdata.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen = value;
        unknownattrlen.value_namespace = name_space;
        unknownattrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "regComm")
    {
        regcomm = value;
        regcomm.value_namespace = name_space;
        regcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extComm")
    {
        extcomm = value;
        extcomm.value_namespace = name_space;
        extcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asPath")
    {
        aspath = value;
        aspath.value_namespace = name_space;
        aspath.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl = value;
        rcvdlbl.value_namespace = name_space;
        rcvdlbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "originatorId")
    {
        originatorid = value;
        originatorid.value_namespace = name_space;
        originatorid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "clusterLst")
    {
        clusterlst = value;
        clusterlst.value_namespace = name_space;
        clusterlst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid = value;
        peerrtrid.value_namespace = name_space;
        peerrtrid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "peer")
    {
        peer.yfilter = yfilter;
    }
    if(value_path == "id")
    {
        id.yfilter = yfilter;
    }
    if(value_path == "nh")
    {
        nh.yfilter = yfilter;
    }
    if(value_path == "importedRd")
    {
        importedrd.yfilter = yfilter;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd.yfilter = yfilter;
    }
    if(value_path == "nhMetric")
    {
        nhmetric.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "operSt")
    {
        operst.yfilter = yfilter;
    }
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "origin")
    {
        origin.yfilter = yfilter;
    }
    if(value_path == "metric")
    {
        metric.yfilter = yfilter;
    }
    if(value_path == "localPref")
    {
        localpref.yfilter = yfilter;
    }
    if(value_path == "weight")
    {
        weight.yfilter = yfilter;
    }
    if(value_path == "aggr")
    {
        aggr.yfilter = yfilter;
    }
    if(value_path == "aggrAs")
    {
        aggras.yfilter = yfilter;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata.yfilter = yfilter;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen.yfilter = yfilter;
    }
    if(value_path == "regComm")
    {
        regcomm.yfilter = yfilter;
    }
    if(value_path == "extComm")
    {
        extcomm.yfilter = yfilter;
    }
    if(value_path == "asPath")
    {
        aspath.yfilter = yfilter;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl.yfilter = yfilter;
    }
    if(value_path == "originatorId")
    {
        originatorid.yfilter = yfilter;
    }
    if(value_path == "clusterLst")
    {
        clusterlst.yfilter = yfilter;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "seg-items" || name == "rcomm-items" || name == "ecomm-items" || name == "lnkstattr-items" || name == "pfxsid-items" || name == "pmsi-items" || name == "peer" || name == "id" || name == "nh" || name == "importedRd" || name == "origImportedRd" || name == "nhMetric" || name == "type" || name == "operSt" || name == "flags" || name == "origin" || name == "metric" || name == "localPref" || name == "weight" || name == "aggr" || name == "aggrAs" || name == "unknownAttrData" || name == "unknownAttrLen" || name == "regComm" || name == "extComm" || name == "asPath" || name == "rcvdLbl" || name == "originatorId" || name == "clusterLst" || name == "peerRtrId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::SegItems()
    :
    asseg_list(this, {"order"})
{

    yang_name = "seg-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::~SegItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::has_operation() const
{
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "seg-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsSeg-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList>();
        ent_->parent = this;
        asseg_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asseg_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsSeg-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsSegList()
    :
    order{YType::uint16, "order"},
    type{YType::enumeration, "type"}
        ,
    asn_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>())
{
    asn_items->parent = this;

    yang_name = "AsSeg-list"; yang_parent_name = "seg-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::~AsSegList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| type.is_set
	|| (asn_items !=  nullptr && asn_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(type.yfilter)
	|| (asn_items !=  nullptr && asn_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsSeg-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "asn-items")
    {
        if(asn_items == nullptr)
        {
            asn_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>();
        }
        return asn_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(asn_items != nullptr)
    {
        _children["asn-items"] = asn_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "asn-items" || name == "order" || name == "type")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsnItems()
    :
    asitem_list(this, {"order"})
{

    yang_name = "asn-items"; yang_parent_name = "AsSeg-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::~AsnItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_operation() const
{
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "asn-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsItem-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList>();
        ent_->parent = this;
        asitem_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asitem_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsItem-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::AsItemList()
    :
    order{YType::uint16, "order"},
    asn{YType::str, "asn"}
{

    yang_name = "AsItem-list"; yang_parent_name = "asn-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::~AsItemList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| asn.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(asn.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsItem-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (asn.is_set || is_set(asn.yfilter)) leaf_name_data.push_back(asn.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asn")
    {
        asn = value;
        asn.value_namespace = name_space;
        asn.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "asn")
    {
        asn.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "order" || name == "asn")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RcommItems()
    :
    regcomm_list(this, {"community"})
{

    yang_name = "rcomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::~RcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::has_operation() const
{
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rcomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "RegComm-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList>();
        ent_->parent = this;
        regcomm_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : regcomm_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "RegComm-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList::RegCommList()
    :
    community{YType::str, "community"}
{

    yang_name = "RegComm-list"; yang_parent_name = "rcomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList::~RegCommList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "RegComm-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::RcommItems::RegCommList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::EcommItems()
    :
    encap{YType::str, "encap"},
    rtrmac{YType::str, "rtrMac"}
        ,
    rt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems>())
{
    rt_items->parent = this;

    yang_name = "ecomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::~EcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::has_data() const
{
    if (is_presence_container) return true;
    return encap.is_set
	|| rtrmac.is_set
	|| (rt_items !=  nullptr && rt_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(encap.yfilter)
	|| ydk::is_set(rtrmac.yfilter)
	|| (rt_items !=  nullptr && rt_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ecomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (encap.is_set || is_set(encap.yfilter)) leaf_name_data.push_back(encap.get_name_leafdata());
    if (rtrmac.is_set || is_set(rtrmac.yfilter)) leaf_name_data.push_back(rtrmac.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "rt-items")
    {
        if(rt_items == nullptr)
        {
            rt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems>();
        }
        return rt_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(rt_items != nullptr)
    {
        _children["rt-items"] = rt_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "encap")
    {
        encap = value;
        encap.value_namespace = name_space;
        encap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtrMac")
    {
        rtrmac = value;
        rtrmac.value_namespace = name_space;
        rtrmac.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "encap")
    {
        encap.yfilter = yfilter;
    }
    if(value_path == "rtrMac")
    {
        rtrmac.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "rt-items" || name == "encap" || name == "rtrMac")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::RtItems()
    :
    extcommrt_list(this, {"community"})
{

    yang_name = "rt-items"; yang_parent_name = "ecomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::~RtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::has_operation() const
{
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ExtCommRt-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList>();
        ent_->parent = this;
        extcommrt_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : extcommrt_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ExtCommRt-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::ExtCommRtList()
    :
    community{YType::str, "community"}
{

    yang_name = "ExtCommRt-list"; yang_parent_name = "rt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::~ExtCommRtList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ExtCommRt-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::LnkstattrItems()
    :
    lnkattrflags{YType::str, "lnkAttrFlags"},
    attrlen{YType::uint16, "attrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "lnkstattr-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::~LnkstattrItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::has_data() const
{
    if (is_presence_container) return true;
    return lnkattrflags.is_set
	|| attrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(lnkattrflags.yfilter)
	|| ydk::is_set(attrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lnkstattr-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (lnkattrflags.is_set || is_set(lnkattrflags.yfilter)) leaf_name_data.push_back(lnkattrflags.get_name_leafdata());
    if (attrlen.is_set || is_set(attrlen.yfilter)) leaf_name_data.push_back(attrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags = value;
        lnkattrflags.value_namespace = name_space;
        lnkattrflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "attrLen")
    {
        attrlen = value;
        attrlen.value_namespace = name_space;
        attrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags.yfilter = yfilter;
    }
    if(value_path == "attrLen")
    {
        attrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "lnkAttrFlags" || name == "attrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::TlvItems()
    :
    lnkstattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "lnkstattr-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "LnkStAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList>();
        ent_->parent = this;
        lnkstattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : lnkstattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "LnkStAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::LnkStAttrEntryList()
    :
    type{YType::enumeration, "type"},
    val{YType::str, "val"}
{

    yang_name = "LnkStAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::~LnkStAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "LnkStAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::PfxsidItems()
    :
    pfxsidattrlen{YType::uint16, "pfxSidAttrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "pfxsid-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::~PfxsidItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::has_data() const
{
    if (is_presence_container) return true;
    return pfxsidattrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfxsidattrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pfxsid-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfxsidattrlen.is_set || is_set(pfxsidattrlen.yfilter)) leaf_name_data.push_back(pfxsidattrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen = value;
        pfxsidattrlen.value_namespace = name_space;
        pfxsidattrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "pfxSidAttrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::TlvItems()
    :
    pfxsidattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "pfxsid-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "PfxSidAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList>();
        ent_->parent = this;
        pfxsidattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : pfxsidattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "PfxSidAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::PfxSidAttrEntryList()
    :
    type{YType::enumeration, "type"},
    len{YType::uint16, "len"},
    val{YType::str, "val"}
{

    yang_name = "PfxSidAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::~PfxSidAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| len.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(len.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "PfxSidAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (len.is_set || is_set(len.yfilter)) leaf_name_data.push_back(len.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "len")
    {
        len = value;
        len.value_namespace = name_space;
        len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "len")
    {
        len.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "len" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems::PmsiItems()
    :
    flags{YType::str, "flags"},
    tuntype{YType::enumeration, "tunType"},
    lbl{YType::uint32, "lbl"},
    tunid{YType::str, "tunId"}
{

    yang_name = "pmsi-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems::~PmsiItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems::has_data() const
{
    if (is_presence_container) return true;
    return flags.is_set
	|| tuntype.is_set
	|| lbl.is_set
	|| tunid.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(tuntype.yfilter)
	|| ydk::is_set(lbl.yfilter)
	|| ydk::is_set(tunid.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pmsi-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (tuntype.is_set || is_set(tuntype.yfilter)) leaf_name_data.push_back(tuntype.get_name_leafdata());
    if (lbl.is_set || is_set(lbl.yfilter)) leaf_name_data.push_back(lbl.get_name_leafdata());
    if (tunid.is_set || is_set(tunid.yfilter)) leaf_name_data.push_back(tunid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunType")
    {
        tuntype = value;
        tuntype.value_namespace = name_space;
        tuntype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lbl")
    {
        lbl = value;
        lbl.value_namespace = name_space;
        lbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunId")
    {
        tunid = value;
        tunid.value_namespace = name_space;
        tunid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "tunType")
    {
        tuntype.yfilter = yfilter;
    }
    if(value_path == "lbl")
    {
        lbl.yfilter = yfilter;
    }
    if(value_path == "tunId")
    {
        tunid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::VpnrtItems::VpnRouteList::PathItems::PathList::PmsiItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "flags" || name == "tunType" || name == "lbl" || name == "tunId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblrtItems()
    :
    lblroute_list(this, {"pfx"})
{

    yang_name = "lblrt-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::~LblrtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<lblroute_list.len(); index++)
    {
        if(lblroute_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::has_operation() const
{
    for (std::size_t index=0; index<lblroute_list.len(); index++)
    {
        if(lblroute_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lblrt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "LblRoute-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList>();
        ent_->parent = this;
        lblroute_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : lblroute_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "LblRoute-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::LblRouteList()
    :
    pfx{YType::str, "pfx"},
    rd{YType::str, "rd"},
    rtlblafflags{YType::str, "rtLblAfFlags"},
    rtlblafver{YType::uint32, "rtLblAfVer"},
    loclbl{YType::uint32, "locLbl"},
    pfxlblholddowndelts{YType::str, "pfxLblHoldDownDelTs"},
    name{YType::str, "name"},
    ver{YType::uint32, "ver"},
    rtflags{YType::str, "rtFlags"},
    numpaths{YType::uint32, "numPaths"},
    bestpathid{YType::uint32, "bestPathId"}
        ,
    path_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems>())
{
    path_items->parent = this;

    yang_name = "LblRoute-list"; yang_parent_name = "lblrt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::~LblRouteList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::has_data() const
{
    if (is_presence_container) return true;
    return pfx.is_set
	|| rd.is_set
	|| rtlblafflags.is_set
	|| rtlblafver.is_set
	|| loclbl.is_set
	|| pfxlblholddowndelts.is_set
	|| name.is_set
	|| ver.is_set
	|| rtflags.is_set
	|| numpaths.is_set
	|| bestpathid.is_set
	|| (path_items !=  nullptr && path_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfx.yfilter)
	|| ydk::is_set(rd.yfilter)
	|| ydk::is_set(rtlblafflags.yfilter)
	|| ydk::is_set(rtlblafver.yfilter)
	|| ydk::is_set(loclbl.yfilter)
	|| ydk::is_set(pfxlblholddowndelts.yfilter)
	|| ydk::is_set(name.yfilter)
	|| ydk::is_set(ver.yfilter)
	|| ydk::is_set(rtflags.yfilter)
	|| ydk::is_set(numpaths.yfilter)
	|| ydk::is_set(bestpathid.yfilter)
	|| (path_items !=  nullptr && path_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "LblRoute-list";
    ADD_KEY_TOKEN(pfx, "pfx");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfx.is_set || is_set(pfx.yfilter)) leaf_name_data.push_back(pfx.get_name_leafdata());
    if (rd.is_set || is_set(rd.yfilter)) leaf_name_data.push_back(rd.get_name_leafdata());
    if (rtlblafflags.is_set || is_set(rtlblafflags.yfilter)) leaf_name_data.push_back(rtlblafflags.get_name_leafdata());
    if (rtlblafver.is_set || is_set(rtlblafver.yfilter)) leaf_name_data.push_back(rtlblafver.get_name_leafdata());
    if (loclbl.is_set || is_set(loclbl.yfilter)) leaf_name_data.push_back(loclbl.get_name_leafdata());
    if (pfxlblholddowndelts.is_set || is_set(pfxlblholddowndelts.yfilter)) leaf_name_data.push_back(pfxlblholddowndelts.get_name_leafdata());
    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());
    if (ver.is_set || is_set(ver.yfilter)) leaf_name_data.push_back(ver.get_name_leafdata());
    if (rtflags.is_set || is_set(rtflags.yfilter)) leaf_name_data.push_back(rtflags.get_name_leafdata());
    if (numpaths.is_set || is_set(numpaths.yfilter)) leaf_name_data.push_back(numpaths.get_name_leafdata());
    if (bestpathid.is_set || is_set(bestpathid.yfilter)) leaf_name_data.push_back(bestpathid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "path-items")
    {
        if(path_items == nullptr)
        {
            path_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems>();
        }
        return path_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(path_items != nullptr)
    {
        _children["path-items"] = path_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfx")
    {
        pfx = value;
        pfx.value_namespace = name_space;
        pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rd")
    {
        rd = value;
        rd.value_namespace = name_space;
        rd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtLblAfFlags")
    {
        rtlblafflags = value;
        rtlblafflags.value_namespace = name_space;
        rtlblafflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtLblAfVer")
    {
        rtlblafver = value;
        rtlblafver.value_namespace = name_space;
        rtlblafver.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "locLbl")
    {
        loclbl = value;
        loclbl.value_namespace = name_space;
        loclbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pfxLblHoldDownDelTs")
    {
        pfxlblholddowndelts = value;
        pfxlblholddowndelts.value_namespace = name_space;
        pfxlblholddowndelts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ver")
    {
        ver = value;
        ver.value_namespace = name_space;
        ver.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtFlags")
    {
        rtflags = value;
        rtflags.value_namespace = name_space;
        rtflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPaths")
    {
        numpaths = value;
        numpaths.value_namespace = name_space;
        numpaths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bestPathId")
    {
        bestpathid = value;
        bestpathid.value_namespace = name_space;
        bestpathid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfx")
    {
        pfx.yfilter = yfilter;
    }
    if(value_path == "rd")
    {
        rd.yfilter = yfilter;
    }
    if(value_path == "rtLblAfFlags")
    {
        rtlblafflags.yfilter = yfilter;
    }
    if(value_path == "rtLblAfVer")
    {
        rtlblafver.yfilter = yfilter;
    }
    if(value_path == "locLbl")
    {
        loclbl.yfilter = yfilter;
    }
    if(value_path == "pfxLblHoldDownDelTs")
    {
        pfxlblholddowndelts.yfilter = yfilter;
    }
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
    if(value_path == "ver")
    {
        ver.yfilter = yfilter;
    }
    if(value_path == "rtFlags")
    {
        rtflags.yfilter = yfilter;
    }
    if(value_path == "numPaths")
    {
        numpaths.yfilter = yfilter;
    }
    if(value_path == "bestPathId")
    {
        bestpathid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "path-items" || name == "pfx" || name == "rd" || name == "rtLblAfFlags" || name == "rtLblAfVer" || name == "locLbl" || name == "pfxLblHoldDownDelTs" || name == "name" || name == "ver" || name == "rtFlags" || name == "numPaths" || name == "bestPathId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathItems()
    :
    path_list(this, {"peer", "id", "nh", "importedrd", "origimportedrd"})
{

    yang_name = "path-items"; yang_parent_name = "LblRoute-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::~PathItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::has_operation() const
{
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "path-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "Path-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList>();
        ent_->parent = this;
        path_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : path_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "Path-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PathList()
    :
    peer{YType::str, "peer"},
    id{YType::uint32, "id"},
    nh{YType::str, "nh"},
    importedrd{YType::str, "importedRd"},
    origimportedrd{YType::str, "origImportedRd"},
    nhmetric{YType::uint32, "nhMetric"},
    type{YType::enumeration, "type"},
    operst{YType::enumeration, "operSt"},
    flags{YType::str, "flags"},
    origin{YType::enumeration, "origin"},
    metric{YType::uint32, "metric"},
    localpref{YType::uint32, "localPref"},
    weight{YType::uint16, "weight"},
    aggr{YType::str, "aggr"},
    aggras{YType::str, "aggrAs"},
    unknownattrdata{YType::str, "unknownAttrData"},
    unknownattrlen{YType::uint32, "unknownAttrLen"},
    regcomm{YType::str, "regComm"},
    extcomm{YType::str, "extComm"},
    aspath{YType::str, "asPath"},
    rcvdlbl{YType::str, "rcvdLbl"},
    originatorid{YType::str, "originatorId"},
    clusterlst{YType::str, "clusterLst"},
    peerrtrid{YType::str, "peerRtrId"}
        ,
    seg_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems>())
    , rcomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems>())
    , ecomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems>())
    , lnkstattr_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems>())
    , pfxsid_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems>())
    , pmsi_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems>())
{
    seg_items->parent = this;
    rcomm_items->parent = this;
    ecomm_items->parent = this;
    lnkstattr_items->parent = this;
    pfxsid_items->parent = this;
    pmsi_items->parent = this;

    yang_name = "Path-list"; yang_parent_name = "path-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::~PathList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::has_data() const
{
    if (is_presence_container) return true;
    return peer.is_set
	|| id.is_set
	|| nh.is_set
	|| importedrd.is_set
	|| origimportedrd.is_set
	|| nhmetric.is_set
	|| type.is_set
	|| operst.is_set
	|| flags.is_set
	|| origin.is_set
	|| metric.is_set
	|| localpref.is_set
	|| weight.is_set
	|| aggr.is_set
	|| aggras.is_set
	|| unknownattrdata.is_set
	|| unknownattrlen.is_set
	|| regcomm.is_set
	|| extcomm.is_set
	|| aspath.is_set
	|| rcvdlbl.is_set
	|| originatorid.is_set
	|| clusterlst.is_set
	|| peerrtrid.is_set
	|| (seg_items !=  nullptr && seg_items->has_data())
	|| (rcomm_items !=  nullptr && rcomm_items->has_data())
	|| (ecomm_items !=  nullptr && ecomm_items->has_data())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_data())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_data())
	|| (pmsi_items !=  nullptr && pmsi_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(peer.yfilter)
	|| ydk::is_set(id.yfilter)
	|| ydk::is_set(nh.yfilter)
	|| ydk::is_set(importedrd.yfilter)
	|| ydk::is_set(origimportedrd.yfilter)
	|| ydk::is_set(nhmetric.yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(operst.yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(origin.yfilter)
	|| ydk::is_set(metric.yfilter)
	|| ydk::is_set(localpref.yfilter)
	|| ydk::is_set(weight.yfilter)
	|| ydk::is_set(aggr.yfilter)
	|| ydk::is_set(aggras.yfilter)
	|| ydk::is_set(unknownattrdata.yfilter)
	|| ydk::is_set(unknownattrlen.yfilter)
	|| ydk::is_set(regcomm.yfilter)
	|| ydk::is_set(extcomm.yfilter)
	|| ydk::is_set(aspath.yfilter)
	|| ydk::is_set(rcvdlbl.yfilter)
	|| ydk::is_set(originatorid.yfilter)
	|| ydk::is_set(clusterlst.yfilter)
	|| ydk::is_set(peerrtrid.yfilter)
	|| (seg_items !=  nullptr && seg_items->has_operation())
	|| (rcomm_items !=  nullptr && rcomm_items->has_operation())
	|| (ecomm_items !=  nullptr && ecomm_items->has_operation())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_operation())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_operation())
	|| (pmsi_items !=  nullptr && pmsi_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Path-list";
    ADD_KEY_TOKEN(peer, "peer");
    ADD_KEY_TOKEN(id, "id");
    ADD_KEY_TOKEN(nh, "nh");
    ADD_KEY_TOKEN(importedrd, "importedRd");
    ADD_KEY_TOKEN(origimportedrd, "origImportedRd");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (peer.is_set || is_set(peer.yfilter)) leaf_name_data.push_back(peer.get_name_leafdata());
    if (id.is_set || is_set(id.yfilter)) leaf_name_data.push_back(id.get_name_leafdata());
    if (nh.is_set || is_set(nh.yfilter)) leaf_name_data.push_back(nh.get_name_leafdata());
    if (importedrd.is_set || is_set(importedrd.yfilter)) leaf_name_data.push_back(importedrd.get_name_leafdata());
    if (origimportedrd.is_set || is_set(origimportedrd.yfilter)) leaf_name_data.push_back(origimportedrd.get_name_leafdata());
    if (nhmetric.is_set || is_set(nhmetric.yfilter)) leaf_name_data.push_back(nhmetric.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (operst.is_set || is_set(operst.yfilter)) leaf_name_data.push_back(operst.get_name_leafdata());
    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (origin.is_set || is_set(origin.yfilter)) leaf_name_data.push_back(origin.get_name_leafdata());
    if (metric.is_set || is_set(metric.yfilter)) leaf_name_data.push_back(metric.get_name_leafdata());
    if (localpref.is_set || is_set(localpref.yfilter)) leaf_name_data.push_back(localpref.get_name_leafdata());
    if (weight.is_set || is_set(weight.yfilter)) leaf_name_data.push_back(weight.get_name_leafdata());
    if (aggr.is_set || is_set(aggr.yfilter)) leaf_name_data.push_back(aggr.get_name_leafdata());
    if (aggras.is_set || is_set(aggras.yfilter)) leaf_name_data.push_back(aggras.get_name_leafdata());
    if (unknownattrdata.is_set || is_set(unknownattrdata.yfilter)) leaf_name_data.push_back(unknownattrdata.get_name_leafdata());
    if (unknownattrlen.is_set || is_set(unknownattrlen.yfilter)) leaf_name_data.push_back(unknownattrlen.get_name_leafdata());
    if (regcomm.is_set || is_set(regcomm.yfilter)) leaf_name_data.push_back(regcomm.get_name_leafdata());
    if (extcomm.is_set || is_set(extcomm.yfilter)) leaf_name_data.push_back(extcomm.get_name_leafdata());
    if (aspath.is_set || is_set(aspath.yfilter)) leaf_name_data.push_back(aspath.get_name_leafdata());
    if (rcvdlbl.is_set || is_set(rcvdlbl.yfilter)) leaf_name_data.push_back(rcvdlbl.get_name_leafdata());
    if (originatorid.is_set || is_set(originatorid.yfilter)) leaf_name_data.push_back(originatorid.get_name_leafdata());
    if (clusterlst.is_set || is_set(clusterlst.yfilter)) leaf_name_data.push_back(clusterlst.get_name_leafdata());
    if (peerrtrid.is_set || is_set(peerrtrid.yfilter)) leaf_name_data.push_back(peerrtrid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "seg-items")
    {
        if(seg_items == nullptr)
        {
            seg_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems>();
        }
        return seg_items;
    }

    if(child_yang_name == "rcomm-items")
    {
        if(rcomm_items == nullptr)
        {
            rcomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems>();
        }
        return rcomm_items;
    }

    if(child_yang_name == "ecomm-items")
    {
        if(ecomm_items == nullptr)
        {
            ecomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems>();
        }
        return ecomm_items;
    }

    if(child_yang_name == "lnkstattr-items")
    {
        if(lnkstattr_items == nullptr)
        {
            lnkstattr_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems>();
        }
        return lnkstattr_items;
    }

    if(child_yang_name == "pfxsid-items")
    {
        if(pfxsid_items == nullptr)
        {
            pfxsid_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems>();
        }
        return pfxsid_items;
    }

    if(child_yang_name == "pmsi-items")
    {
        if(pmsi_items == nullptr)
        {
            pmsi_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems>();
        }
        return pmsi_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(seg_items != nullptr)
    {
        _children["seg-items"] = seg_items;
    }

    if(rcomm_items != nullptr)
    {
        _children["rcomm-items"] = rcomm_items;
    }

    if(ecomm_items != nullptr)
    {
        _children["ecomm-items"] = ecomm_items;
    }

    if(lnkstattr_items != nullptr)
    {
        _children["lnkstattr-items"] = lnkstattr_items;
    }

    if(pfxsid_items != nullptr)
    {
        _children["pfxsid-items"] = pfxsid_items;
    }

    if(pmsi_items != nullptr)
    {
        _children["pmsi-items"] = pmsi_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "peer")
    {
        peer = value;
        peer.value_namespace = name_space;
        peer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "id")
    {
        id = value;
        id.value_namespace = name_space;
        id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh")
    {
        nh = value;
        nh.value_namespace = name_space;
        nh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "importedRd")
    {
        importedrd = value;
        importedrd.value_namespace = name_space;
        importedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd = value;
        origimportedrd.value_namespace = name_space;
        origimportedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nhMetric")
    {
        nhmetric = value;
        nhmetric.value_namespace = name_space;
        nhmetric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "operSt")
    {
        operst = value;
        operst.value_namespace = name_space;
        operst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origin")
    {
        origin = value;
        origin.value_namespace = name_space;
        origin.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "metric")
    {
        metric = value;
        metric.value_namespace = name_space;
        metric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "localPref")
    {
        localpref = value;
        localpref.value_namespace = name_space;
        localpref.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight")
    {
        weight = value;
        weight.value_namespace = name_space;
        weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggr")
    {
        aggr = value;
        aggr.value_namespace = name_space;
        aggr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggrAs")
    {
        aggras = value;
        aggras.value_namespace = name_space;
        aggras.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata = value;
        unknownattrdata.value_namespace = name_space;
        unknownattrdata.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen = value;
        unknownattrlen.value_namespace = name_space;
        unknownattrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "regComm")
    {
        regcomm = value;
        regcomm.value_namespace = name_space;
        regcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extComm")
    {
        extcomm = value;
        extcomm.value_namespace = name_space;
        extcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asPath")
    {
        aspath = value;
        aspath.value_namespace = name_space;
        aspath.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl = value;
        rcvdlbl.value_namespace = name_space;
        rcvdlbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "originatorId")
    {
        originatorid = value;
        originatorid.value_namespace = name_space;
        originatorid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "clusterLst")
    {
        clusterlst = value;
        clusterlst.value_namespace = name_space;
        clusterlst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid = value;
        peerrtrid.value_namespace = name_space;
        peerrtrid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "peer")
    {
        peer.yfilter = yfilter;
    }
    if(value_path == "id")
    {
        id.yfilter = yfilter;
    }
    if(value_path == "nh")
    {
        nh.yfilter = yfilter;
    }
    if(value_path == "importedRd")
    {
        importedrd.yfilter = yfilter;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd.yfilter = yfilter;
    }
    if(value_path == "nhMetric")
    {
        nhmetric.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "operSt")
    {
        operst.yfilter = yfilter;
    }
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "origin")
    {
        origin.yfilter = yfilter;
    }
    if(value_path == "metric")
    {
        metric.yfilter = yfilter;
    }
    if(value_path == "localPref")
    {
        localpref.yfilter = yfilter;
    }
    if(value_path == "weight")
    {
        weight.yfilter = yfilter;
    }
    if(value_path == "aggr")
    {
        aggr.yfilter = yfilter;
    }
    if(value_path == "aggrAs")
    {
        aggras.yfilter = yfilter;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata.yfilter = yfilter;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen.yfilter = yfilter;
    }
    if(value_path == "regComm")
    {
        regcomm.yfilter = yfilter;
    }
    if(value_path == "extComm")
    {
        extcomm.yfilter = yfilter;
    }
    if(value_path == "asPath")
    {
        aspath.yfilter = yfilter;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl.yfilter = yfilter;
    }
    if(value_path == "originatorId")
    {
        originatorid.yfilter = yfilter;
    }
    if(value_path == "clusterLst")
    {
        clusterlst.yfilter = yfilter;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "seg-items" || name == "rcomm-items" || name == "ecomm-items" || name == "lnkstattr-items" || name == "pfxsid-items" || name == "pmsi-items" || name == "peer" || name == "id" || name == "nh" || name == "importedRd" || name == "origImportedRd" || name == "nhMetric" || name == "type" || name == "operSt" || name == "flags" || name == "origin" || name == "metric" || name == "localPref" || name == "weight" || name == "aggr" || name == "aggrAs" || name == "unknownAttrData" || name == "unknownAttrLen" || name == "regComm" || name == "extComm" || name == "asPath" || name == "rcvdLbl" || name == "originatorId" || name == "clusterLst" || name == "peerRtrId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::SegItems()
    :
    asseg_list(this, {"order"})
{

    yang_name = "seg-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::~SegItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::has_operation() const
{
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "seg-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsSeg-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList>();
        ent_->parent = this;
        asseg_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asseg_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsSeg-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsSegList()
    :
    order{YType::uint16, "order"},
    type{YType::enumeration, "type"}
        ,
    asn_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>())
{
    asn_items->parent = this;

    yang_name = "AsSeg-list"; yang_parent_name = "seg-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::~AsSegList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| type.is_set
	|| (asn_items !=  nullptr && asn_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(type.yfilter)
	|| (asn_items !=  nullptr && asn_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsSeg-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "asn-items")
    {
        if(asn_items == nullptr)
        {
            asn_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>();
        }
        return asn_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(asn_items != nullptr)
    {
        _children["asn-items"] = asn_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "asn-items" || name == "order" || name == "type")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsnItems()
    :
    asitem_list(this, {"order"})
{

    yang_name = "asn-items"; yang_parent_name = "AsSeg-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::~AsnItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_operation() const
{
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "asn-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsItem-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList>();
        ent_->parent = this;
        asitem_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asitem_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsItem-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::AsItemList()
    :
    order{YType::uint16, "order"},
    asn{YType::str, "asn"}
{

    yang_name = "AsItem-list"; yang_parent_name = "asn-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::~AsItemList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| asn.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(asn.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsItem-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (asn.is_set || is_set(asn.yfilter)) leaf_name_data.push_back(asn.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asn")
    {
        asn = value;
        asn.value_namespace = name_space;
        asn.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "asn")
    {
        asn.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "order" || name == "asn")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RcommItems()
    :
    regcomm_list(this, {"community"})
{

    yang_name = "rcomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::~RcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::has_operation() const
{
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rcomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "RegComm-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList>();
        ent_->parent = this;
        regcomm_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : regcomm_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "RegComm-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList::RegCommList()
    :
    community{YType::str, "community"}
{

    yang_name = "RegComm-list"; yang_parent_name = "rcomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList::~RegCommList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "RegComm-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::RcommItems::RegCommList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::EcommItems()
    :
    encap{YType::str, "encap"},
    rtrmac{YType::str, "rtrMac"}
        ,
    rt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems>())
{
    rt_items->parent = this;

    yang_name = "ecomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::~EcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::has_data() const
{
    if (is_presence_container) return true;
    return encap.is_set
	|| rtrmac.is_set
	|| (rt_items !=  nullptr && rt_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(encap.yfilter)
	|| ydk::is_set(rtrmac.yfilter)
	|| (rt_items !=  nullptr && rt_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ecomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (encap.is_set || is_set(encap.yfilter)) leaf_name_data.push_back(encap.get_name_leafdata());
    if (rtrmac.is_set || is_set(rtrmac.yfilter)) leaf_name_data.push_back(rtrmac.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "rt-items")
    {
        if(rt_items == nullptr)
        {
            rt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems>();
        }
        return rt_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(rt_items != nullptr)
    {
        _children["rt-items"] = rt_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "encap")
    {
        encap = value;
        encap.value_namespace = name_space;
        encap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtrMac")
    {
        rtrmac = value;
        rtrmac.value_namespace = name_space;
        rtrmac.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "encap")
    {
        encap.yfilter = yfilter;
    }
    if(value_path == "rtrMac")
    {
        rtrmac.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "rt-items" || name == "encap" || name == "rtrMac")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::RtItems()
    :
    extcommrt_list(this, {"community"})
{

    yang_name = "rt-items"; yang_parent_name = "ecomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::~RtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::has_operation() const
{
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ExtCommRt-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList>();
        ent_->parent = this;
        extcommrt_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : extcommrt_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ExtCommRt-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::ExtCommRtList()
    :
    community{YType::str, "community"}
{

    yang_name = "ExtCommRt-list"; yang_parent_name = "rt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::~ExtCommRtList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ExtCommRt-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::LnkstattrItems()
    :
    lnkattrflags{YType::str, "lnkAttrFlags"},
    attrlen{YType::uint16, "attrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "lnkstattr-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::~LnkstattrItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::has_data() const
{
    if (is_presence_container) return true;
    return lnkattrflags.is_set
	|| attrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(lnkattrflags.yfilter)
	|| ydk::is_set(attrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lnkstattr-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (lnkattrflags.is_set || is_set(lnkattrflags.yfilter)) leaf_name_data.push_back(lnkattrflags.get_name_leafdata());
    if (attrlen.is_set || is_set(attrlen.yfilter)) leaf_name_data.push_back(attrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags = value;
        lnkattrflags.value_namespace = name_space;
        lnkattrflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "attrLen")
    {
        attrlen = value;
        attrlen.value_namespace = name_space;
        attrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags.yfilter = yfilter;
    }
    if(value_path == "attrLen")
    {
        attrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "lnkAttrFlags" || name == "attrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::TlvItems()
    :
    lnkstattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "lnkstattr-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "LnkStAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList>();
        ent_->parent = this;
        lnkstattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : lnkstattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "LnkStAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::LnkStAttrEntryList()
    :
    type{YType::enumeration, "type"},
    val{YType::str, "val"}
{

    yang_name = "LnkStAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::~LnkStAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "LnkStAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::PfxsidItems()
    :
    pfxsidattrlen{YType::uint16, "pfxSidAttrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "pfxsid-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::~PfxsidItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::has_data() const
{
    if (is_presence_container) return true;
    return pfxsidattrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfxsidattrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pfxsid-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfxsidattrlen.is_set || is_set(pfxsidattrlen.yfilter)) leaf_name_data.push_back(pfxsidattrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen = value;
        pfxsidattrlen.value_namespace = name_space;
        pfxsidattrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "pfxSidAttrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::TlvItems()
    :
    pfxsidattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "pfxsid-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "PfxSidAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList>();
        ent_->parent = this;
        pfxsidattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : pfxsidattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "PfxSidAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::PfxSidAttrEntryList()
    :
    type{YType::enumeration, "type"},
    len{YType::uint16, "len"},
    val{YType::str, "val"}
{

    yang_name = "PfxSidAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::~PfxSidAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| len.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(len.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "PfxSidAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (len.is_set || is_set(len.yfilter)) leaf_name_data.push_back(len.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "len")
    {
        len = value;
        len.value_namespace = name_space;
        len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "len")
    {
        len.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "len" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems::PmsiItems()
    :
    flags{YType::str, "flags"},
    tuntype{YType::enumeration, "tunType"},
    lbl{YType::uint32, "lbl"},
    tunid{YType::str, "tunId"}
{

    yang_name = "pmsi-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems::~PmsiItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems::has_data() const
{
    if (is_presence_container) return true;
    return flags.is_set
	|| tuntype.is_set
	|| lbl.is_set
	|| tunid.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(tuntype.yfilter)
	|| ydk::is_set(lbl.yfilter)
	|| ydk::is_set(tunid.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pmsi-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (tuntype.is_set || is_set(tuntype.yfilter)) leaf_name_data.push_back(tuntype.get_name_leafdata());
    if (lbl.is_set || is_set(lbl.yfilter)) leaf_name_data.push_back(lbl.get_name_leafdata());
    if (tunid.is_set || is_set(tunid.yfilter)) leaf_name_data.push_back(tunid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunType")
    {
        tuntype = value;
        tuntype.value_namespace = name_space;
        tuntype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lbl")
    {
        lbl = value;
        lbl.value_namespace = name_space;
        lbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunId")
    {
        tunid = value;
        tunid.value_namespace = name_space;
        tunid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "tunType")
    {
        tuntype.yfilter = yfilter;
    }
    if(value_path == "lbl")
    {
        lbl.yfilter = yfilter;
    }
    if(value_path == "tunId")
    {
        tunid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LblrtItems::LblRouteList::PathItems::PathList::PmsiItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "flags" || name == "tunType" || name == "lbl" || name == "tunId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LsrtItems()
    :
    lnkstroute_list(this, {"pfx"})
{

    yang_name = "lsrt-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::~LsrtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<lnkstroute_list.len(); index++)
    {
        if(lnkstroute_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::has_operation() const
{
    for (std::size_t index=0; index<lnkstroute_list.len(); index++)
    {
        if(lnkstroute_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lsrt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "LnkStRoute-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList>();
        ent_->parent = this;
        lnkstroute_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : lnkstroute_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "LnkStRoute-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::LnkStRouteList()
    :
    pfx{YType::str, "pfx"},
    nlritype{YType::enumeration, "nlriType"},
    protoid{YType::enumeration, "protoId"},
    name{YType::str, "name"},
    ver{YType::uint32, "ver"},
    rtflags{YType::str, "rtFlags"},
    numpaths{YType::uint32, "numPaths"},
    bestpathid{YType::uint32, "bestPathId"}
        ,
    path_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems>())
{
    path_items->parent = this;

    yang_name = "LnkStRoute-list"; yang_parent_name = "lsrt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::~LnkStRouteList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::has_data() const
{
    if (is_presence_container) return true;
    return pfx.is_set
	|| nlritype.is_set
	|| protoid.is_set
	|| name.is_set
	|| ver.is_set
	|| rtflags.is_set
	|| numpaths.is_set
	|| bestpathid.is_set
	|| (path_items !=  nullptr && path_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfx.yfilter)
	|| ydk::is_set(nlritype.yfilter)
	|| ydk::is_set(protoid.yfilter)
	|| ydk::is_set(name.yfilter)
	|| ydk::is_set(ver.yfilter)
	|| ydk::is_set(rtflags.yfilter)
	|| ydk::is_set(numpaths.yfilter)
	|| ydk::is_set(bestpathid.yfilter)
	|| (path_items !=  nullptr && path_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "LnkStRoute-list";
    ADD_KEY_TOKEN(pfx, "pfx");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfx.is_set || is_set(pfx.yfilter)) leaf_name_data.push_back(pfx.get_name_leafdata());
    if (nlritype.is_set || is_set(nlritype.yfilter)) leaf_name_data.push_back(nlritype.get_name_leafdata());
    if (protoid.is_set || is_set(protoid.yfilter)) leaf_name_data.push_back(protoid.get_name_leafdata());
    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());
    if (ver.is_set || is_set(ver.yfilter)) leaf_name_data.push_back(ver.get_name_leafdata());
    if (rtflags.is_set || is_set(rtflags.yfilter)) leaf_name_data.push_back(rtflags.get_name_leafdata());
    if (numpaths.is_set || is_set(numpaths.yfilter)) leaf_name_data.push_back(numpaths.get_name_leafdata());
    if (bestpathid.is_set || is_set(bestpathid.yfilter)) leaf_name_data.push_back(bestpathid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "path-items")
    {
        if(path_items == nullptr)
        {
            path_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems>();
        }
        return path_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(path_items != nullptr)
    {
        _children["path-items"] = path_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfx")
    {
        pfx = value;
        pfx.value_namespace = name_space;
        pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nlriType")
    {
        nlritype = value;
        nlritype.value_namespace = name_space;
        nlritype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protoId")
    {
        protoid = value;
        protoid.value_namespace = name_space;
        protoid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ver")
    {
        ver = value;
        ver.value_namespace = name_space;
        ver.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtFlags")
    {
        rtflags = value;
        rtflags.value_namespace = name_space;
        rtflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPaths")
    {
        numpaths = value;
        numpaths.value_namespace = name_space;
        numpaths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bestPathId")
    {
        bestpathid = value;
        bestpathid.value_namespace = name_space;
        bestpathid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfx")
    {
        pfx.yfilter = yfilter;
    }
    if(value_path == "nlriType")
    {
        nlritype.yfilter = yfilter;
    }
    if(value_path == "protoId")
    {
        protoid.yfilter = yfilter;
    }
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
    if(value_path == "ver")
    {
        ver.yfilter = yfilter;
    }
    if(value_path == "rtFlags")
    {
        rtflags.yfilter = yfilter;
    }
    if(value_path == "numPaths")
    {
        numpaths.yfilter = yfilter;
    }
    if(value_path == "bestPathId")
    {
        bestpathid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "path-items" || name == "pfx" || name == "nlriType" || name == "protoId" || name == "name" || name == "ver" || name == "rtFlags" || name == "numPaths" || name == "bestPathId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathItems()
    :
    path_list(this, {"peer", "id", "nh", "importedrd", "origimportedrd"})
{

    yang_name = "path-items"; yang_parent_name = "LnkStRoute-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::~PathItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::has_operation() const
{
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "path-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "Path-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList>();
        ent_->parent = this;
        path_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : path_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "Path-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PathList()
    :
    peer{YType::str, "peer"},
    id{YType::uint32, "id"},
    nh{YType::str, "nh"},
    importedrd{YType::str, "importedRd"},
    origimportedrd{YType::str, "origImportedRd"},
    nhmetric{YType::uint32, "nhMetric"},
    type{YType::enumeration, "type"},
    operst{YType::enumeration, "operSt"},
    flags{YType::str, "flags"},
    origin{YType::enumeration, "origin"},
    metric{YType::uint32, "metric"},
    localpref{YType::uint32, "localPref"},
    weight{YType::uint16, "weight"},
    aggr{YType::str, "aggr"},
    aggras{YType::str, "aggrAs"},
    unknownattrdata{YType::str, "unknownAttrData"},
    unknownattrlen{YType::uint32, "unknownAttrLen"},
    regcomm{YType::str, "regComm"},
    extcomm{YType::str, "extComm"},
    aspath{YType::str, "asPath"},
    rcvdlbl{YType::str, "rcvdLbl"},
    originatorid{YType::str, "originatorId"},
    clusterlst{YType::str, "clusterLst"},
    peerrtrid{YType::str, "peerRtrId"}
        ,
    seg_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems>())
    , rcomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems>())
    , ecomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems>())
    , lnkstattr_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems>())
    , pfxsid_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems>())
    , pmsi_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems>())
{
    seg_items->parent = this;
    rcomm_items->parent = this;
    ecomm_items->parent = this;
    lnkstattr_items->parent = this;
    pfxsid_items->parent = this;
    pmsi_items->parent = this;

    yang_name = "Path-list"; yang_parent_name = "path-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::~PathList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::has_data() const
{
    if (is_presence_container) return true;
    return peer.is_set
	|| id.is_set
	|| nh.is_set
	|| importedrd.is_set
	|| origimportedrd.is_set
	|| nhmetric.is_set
	|| type.is_set
	|| operst.is_set
	|| flags.is_set
	|| origin.is_set
	|| metric.is_set
	|| localpref.is_set
	|| weight.is_set
	|| aggr.is_set
	|| aggras.is_set
	|| unknownattrdata.is_set
	|| unknownattrlen.is_set
	|| regcomm.is_set
	|| extcomm.is_set
	|| aspath.is_set
	|| rcvdlbl.is_set
	|| originatorid.is_set
	|| clusterlst.is_set
	|| peerrtrid.is_set
	|| (seg_items !=  nullptr && seg_items->has_data())
	|| (rcomm_items !=  nullptr && rcomm_items->has_data())
	|| (ecomm_items !=  nullptr && ecomm_items->has_data())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_data())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_data())
	|| (pmsi_items !=  nullptr && pmsi_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(peer.yfilter)
	|| ydk::is_set(id.yfilter)
	|| ydk::is_set(nh.yfilter)
	|| ydk::is_set(importedrd.yfilter)
	|| ydk::is_set(origimportedrd.yfilter)
	|| ydk::is_set(nhmetric.yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(operst.yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(origin.yfilter)
	|| ydk::is_set(metric.yfilter)
	|| ydk::is_set(localpref.yfilter)
	|| ydk::is_set(weight.yfilter)
	|| ydk::is_set(aggr.yfilter)
	|| ydk::is_set(aggras.yfilter)
	|| ydk::is_set(unknownattrdata.yfilter)
	|| ydk::is_set(unknownattrlen.yfilter)
	|| ydk::is_set(regcomm.yfilter)
	|| ydk::is_set(extcomm.yfilter)
	|| ydk::is_set(aspath.yfilter)
	|| ydk::is_set(rcvdlbl.yfilter)
	|| ydk::is_set(originatorid.yfilter)
	|| ydk::is_set(clusterlst.yfilter)
	|| ydk::is_set(peerrtrid.yfilter)
	|| (seg_items !=  nullptr && seg_items->has_operation())
	|| (rcomm_items !=  nullptr && rcomm_items->has_operation())
	|| (ecomm_items !=  nullptr && ecomm_items->has_operation())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_operation())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_operation())
	|| (pmsi_items !=  nullptr && pmsi_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Path-list";
    ADD_KEY_TOKEN(peer, "peer");
    ADD_KEY_TOKEN(id, "id");
    ADD_KEY_TOKEN(nh, "nh");
    ADD_KEY_TOKEN(importedrd, "importedRd");
    ADD_KEY_TOKEN(origimportedrd, "origImportedRd");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (peer.is_set || is_set(peer.yfilter)) leaf_name_data.push_back(peer.get_name_leafdata());
    if (id.is_set || is_set(id.yfilter)) leaf_name_data.push_back(id.get_name_leafdata());
    if (nh.is_set || is_set(nh.yfilter)) leaf_name_data.push_back(nh.get_name_leafdata());
    if (importedrd.is_set || is_set(importedrd.yfilter)) leaf_name_data.push_back(importedrd.get_name_leafdata());
    if (origimportedrd.is_set || is_set(origimportedrd.yfilter)) leaf_name_data.push_back(origimportedrd.get_name_leafdata());
    if (nhmetric.is_set || is_set(nhmetric.yfilter)) leaf_name_data.push_back(nhmetric.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (operst.is_set || is_set(operst.yfilter)) leaf_name_data.push_back(operst.get_name_leafdata());
    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (origin.is_set || is_set(origin.yfilter)) leaf_name_data.push_back(origin.get_name_leafdata());
    if (metric.is_set || is_set(metric.yfilter)) leaf_name_data.push_back(metric.get_name_leafdata());
    if (localpref.is_set || is_set(localpref.yfilter)) leaf_name_data.push_back(localpref.get_name_leafdata());
    if (weight.is_set || is_set(weight.yfilter)) leaf_name_data.push_back(weight.get_name_leafdata());
    if (aggr.is_set || is_set(aggr.yfilter)) leaf_name_data.push_back(aggr.get_name_leafdata());
    if (aggras.is_set || is_set(aggras.yfilter)) leaf_name_data.push_back(aggras.get_name_leafdata());
    if (unknownattrdata.is_set || is_set(unknownattrdata.yfilter)) leaf_name_data.push_back(unknownattrdata.get_name_leafdata());
    if (unknownattrlen.is_set || is_set(unknownattrlen.yfilter)) leaf_name_data.push_back(unknownattrlen.get_name_leafdata());
    if (regcomm.is_set || is_set(regcomm.yfilter)) leaf_name_data.push_back(regcomm.get_name_leafdata());
    if (extcomm.is_set || is_set(extcomm.yfilter)) leaf_name_data.push_back(extcomm.get_name_leafdata());
    if (aspath.is_set || is_set(aspath.yfilter)) leaf_name_data.push_back(aspath.get_name_leafdata());
    if (rcvdlbl.is_set || is_set(rcvdlbl.yfilter)) leaf_name_data.push_back(rcvdlbl.get_name_leafdata());
    if (originatorid.is_set || is_set(originatorid.yfilter)) leaf_name_data.push_back(originatorid.get_name_leafdata());
    if (clusterlst.is_set || is_set(clusterlst.yfilter)) leaf_name_data.push_back(clusterlst.get_name_leafdata());
    if (peerrtrid.is_set || is_set(peerrtrid.yfilter)) leaf_name_data.push_back(peerrtrid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "seg-items")
    {
        if(seg_items == nullptr)
        {
            seg_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems>();
        }
        return seg_items;
    }

    if(child_yang_name == "rcomm-items")
    {
        if(rcomm_items == nullptr)
        {
            rcomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems>();
        }
        return rcomm_items;
    }

    if(child_yang_name == "ecomm-items")
    {
        if(ecomm_items == nullptr)
        {
            ecomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems>();
        }
        return ecomm_items;
    }

    if(child_yang_name == "lnkstattr-items")
    {
        if(lnkstattr_items == nullptr)
        {
            lnkstattr_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems>();
        }
        return lnkstattr_items;
    }

    if(child_yang_name == "pfxsid-items")
    {
        if(pfxsid_items == nullptr)
        {
            pfxsid_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems>();
        }
        return pfxsid_items;
    }

    if(child_yang_name == "pmsi-items")
    {
        if(pmsi_items == nullptr)
        {
            pmsi_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems>();
        }
        return pmsi_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(seg_items != nullptr)
    {
        _children["seg-items"] = seg_items;
    }

    if(rcomm_items != nullptr)
    {
        _children["rcomm-items"] = rcomm_items;
    }

    if(ecomm_items != nullptr)
    {
        _children["ecomm-items"] = ecomm_items;
    }

    if(lnkstattr_items != nullptr)
    {
        _children["lnkstattr-items"] = lnkstattr_items;
    }

    if(pfxsid_items != nullptr)
    {
        _children["pfxsid-items"] = pfxsid_items;
    }

    if(pmsi_items != nullptr)
    {
        _children["pmsi-items"] = pmsi_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "peer")
    {
        peer = value;
        peer.value_namespace = name_space;
        peer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "id")
    {
        id = value;
        id.value_namespace = name_space;
        id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh")
    {
        nh = value;
        nh.value_namespace = name_space;
        nh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "importedRd")
    {
        importedrd = value;
        importedrd.value_namespace = name_space;
        importedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd = value;
        origimportedrd.value_namespace = name_space;
        origimportedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nhMetric")
    {
        nhmetric = value;
        nhmetric.value_namespace = name_space;
        nhmetric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "operSt")
    {
        operst = value;
        operst.value_namespace = name_space;
        operst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origin")
    {
        origin = value;
        origin.value_namespace = name_space;
        origin.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "metric")
    {
        metric = value;
        metric.value_namespace = name_space;
        metric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "localPref")
    {
        localpref = value;
        localpref.value_namespace = name_space;
        localpref.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight")
    {
        weight = value;
        weight.value_namespace = name_space;
        weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggr")
    {
        aggr = value;
        aggr.value_namespace = name_space;
        aggr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggrAs")
    {
        aggras = value;
        aggras.value_namespace = name_space;
        aggras.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata = value;
        unknownattrdata.value_namespace = name_space;
        unknownattrdata.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen = value;
        unknownattrlen.value_namespace = name_space;
        unknownattrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "regComm")
    {
        regcomm = value;
        regcomm.value_namespace = name_space;
        regcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extComm")
    {
        extcomm = value;
        extcomm.value_namespace = name_space;
        extcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asPath")
    {
        aspath = value;
        aspath.value_namespace = name_space;
        aspath.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl = value;
        rcvdlbl.value_namespace = name_space;
        rcvdlbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "originatorId")
    {
        originatorid = value;
        originatorid.value_namespace = name_space;
        originatorid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "clusterLst")
    {
        clusterlst = value;
        clusterlst.value_namespace = name_space;
        clusterlst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid = value;
        peerrtrid.value_namespace = name_space;
        peerrtrid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "peer")
    {
        peer.yfilter = yfilter;
    }
    if(value_path == "id")
    {
        id.yfilter = yfilter;
    }
    if(value_path == "nh")
    {
        nh.yfilter = yfilter;
    }
    if(value_path == "importedRd")
    {
        importedrd.yfilter = yfilter;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd.yfilter = yfilter;
    }
    if(value_path == "nhMetric")
    {
        nhmetric.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "operSt")
    {
        operst.yfilter = yfilter;
    }
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "origin")
    {
        origin.yfilter = yfilter;
    }
    if(value_path == "metric")
    {
        metric.yfilter = yfilter;
    }
    if(value_path == "localPref")
    {
        localpref.yfilter = yfilter;
    }
    if(value_path == "weight")
    {
        weight.yfilter = yfilter;
    }
    if(value_path == "aggr")
    {
        aggr.yfilter = yfilter;
    }
    if(value_path == "aggrAs")
    {
        aggras.yfilter = yfilter;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata.yfilter = yfilter;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen.yfilter = yfilter;
    }
    if(value_path == "regComm")
    {
        regcomm.yfilter = yfilter;
    }
    if(value_path == "extComm")
    {
        extcomm.yfilter = yfilter;
    }
    if(value_path == "asPath")
    {
        aspath.yfilter = yfilter;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl.yfilter = yfilter;
    }
    if(value_path == "originatorId")
    {
        originatorid.yfilter = yfilter;
    }
    if(value_path == "clusterLst")
    {
        clusterlst.yfilter = yfilter;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "seg-items" || name == "rcomm-items" || name == "ecomm-items" || name == "lnkstattr-items" || name == "pfxsid-items" || name == "pmsi-items" || name == "peer" || name == "id" || name == "nh" || name == "importedRd" || name == "origImportedRd" || name == "nhMetric" || name == "type" || name == "operSt" || name == "flags" || name == "origin" || name == "metric" || name == "localPref" || name == "weight" || name == "aggr" || name == "aggrAs" || name == "unknownAttrData" || name == "unknownAttrLen" || name == "regComm" || name == "extComm" || name == "asPath" || name == "rcvdLbl" || name == "originatorId" || name == "clusterLst" || name == "peerRtrId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::SegItems()
    :
    asseg_list(this, {"order"})
{

    yang_name = "seg-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::~SegItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::has_operation() const
{
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "seg-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsSeg-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList>();
        ent_->parent = this;
        asseg_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asseg_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsSeg-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsSegList()
    :
    order{YType::uint16, "order"},
    type{YType::enumeration, "type"}
        ,
    asn_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>())
{
    asn_items->parent = this;

    yang_name = "AsSeg-list"; yang_parent_name = "seg-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::~AsSegList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| type.is_set
	|| (asn_items !=  nullptr && asn_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(type.yfilter)
	|| (asn_items !=  nullptr && asn_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsSeg-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "asn-items")
    {
        if(asn_items == nullptr)
        {
            asn_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>();
        }
        return asn_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(asn_items != nullptr)
    {
        _children["asn-items"] = asn_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "asn-items" || name == "order" || name == "type")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsnItems()
    :
    asitem_list(this, {"order"})
{

    yang_name = "asn-items"; yang_parent_name = "AsSeg-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::~AsnItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_operation() const
{
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "asn-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsItem-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList>();
        ent_->parent = this;
        asitem_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asitem_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsItem-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::AsItemList()
    :
    order{YType::uint16, "order"},
    asn{YType::str, "asn"}
{

    yang_name = "AsItem-list"; yang_parent_name = "asn-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::~AsItemList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| asn.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(asn.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsItem-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (asn.is_set || is_set(asn.yfilter)) leaf_name_data.push_back(asn.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asn")
    {
        asn = value;
        asn.value_namespace = name_space;
        asn.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "asn")
    {
        asn.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "order" || name == "asn")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RcommItems()
    :
    regcomm_list(this, {"community"})
{

    yang_name = "rcomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::~RcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::has_operation() const
{
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rcomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "RegComm-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList>();
        ent_->parent = this;
        regcomm_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : regcomm_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "RegComm-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList::RegCommList()
    :
    community{YType::str, "community"}
{

    yang_name = "RegComm-list"; yang_parent_name = "rcomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList::~RegCommList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "RegComm-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::RcommItems::RegCommList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::EcommItems()
    :
    encap{YType::str, "encap"},
    rtrmac{YType::str, "rtrMac"}
        ,
    rt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems>())
{
    rt_items->parent = this;

    yang_name = "ecomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::~EcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::has_data() const
{
    if (is_presence_container) return true;
    return encap.is_set
	|| rtrmac.is_set
	|| (rt_items !=  nullptr && rt_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(encap.yfilter)
	|| ydk::is_set(rtrmac.yfilter)
	|| (rt_items !=  nullptr && rt_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ecomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (encap.is_set || is_set(encap.yfilter)) leaf_name_data.push_back(encap.get_name_leafdata());
    if (rtrmac.is_set || is_set(rtrmac.yfilter)) leaf_name_data.push_back(rtrmac.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "rt-items")
    {
        if(rt_items == nullptr)
        {
            rt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems>();
        }
        return rt_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(rt_items != nullptr)
    {
        _children["rt-items"] = rt_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "encap")
    {
        encap = value;
        encap.value_namespace = name_space;
        encap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtrMac")
    {
        rtrmac = value;
        rtrmac.value_namespace = name_space;
        rtrmac.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "encap")
    {
        encap.yfilter = yfilter;
    }
    if(value_path == "rtrMac")
    {
        rtrmac.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "rt-items" || name == "encap" || name == "rtrMac")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::RtItems()
    :
    extcommrt_list(this, {"community"})
{

    yang_name = "rt-items"; yang_parent_name = "ecomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::~RtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::has_operation() const
{
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ExtCommRt-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList>();
        ent_->parent = this;
        extcommrt_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : extcommrt_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ExtCommRt-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::ExtCommRtList()
    :
    community{YType::str, "community"}
{

    yang_name = "ExtCommRt-list"; yang_parent_name = "rt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::~ExtCommRtList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ExtCommRt-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::LnkstattrItems()
    :
    lnkattrflags{YType::str, "lnkAttrFlags"},
    attrlen{YType::uint16, "attrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "lnkstattr-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::~LnkstattrItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::has_data() const
{
    if (is_presence_container) return true;
    return lnkattrflags.is_set
	|| attrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(lnkattrflags.yfilter)
	|| ydk::is_set(attrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lnkstattr-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (lnkattrflags.is_set || is_set(lnkattrflags.yfilter)) leaf_name_data.push_back(lnkattrflags.get_name_leafdata());
    if (attrlen.is_set || is_set(attrlen.yfilter)) leaf_name_data.push_back(attrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags = value;
        lnkattrflags.value_namespace = name_space;
        lnkattrflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "attrLen")
    {
        attrlen = value;
        attrlen.value_namespace = name_space;
        attrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags.yfilter = yfilter;
    }
    if(value_path == "attrLen")
    {
        attrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "lnkAttrFlags" || name == "attrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::TlvItems()
    :
    lnkstattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "lnkstattr-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "LnkStAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList>();
        ent_->parent = this;
        lnkstattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : lnkstattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "LnkStAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::LnkStAttrEntryList()
    :
    type{YType::enumeration, "type"},
    val{YType::str, "val"}
{

    yang_name = "LnkStAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::~LnkStAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "LnkStAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::PfxsidItems()
    :
    pfxsidattrlen{YType::uint16, "pfxSidAttrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "pfxsid-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::~PfxsidItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::has_data() const
{
    if (is_presence_container) return true;
    return pfxsidattrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfxsidattrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pfxsid-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfxsidattrlen.is_set || is_set(pfxsidattrlen.yfilter)) leaf_name_data.push_back(pfxsidattrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen = value;
        pfxsidattrlen.value_namespace = name_space;
        pfxsidattrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "pfxSidAttrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::TlvItems()
    :
    pfxsidattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "pfxsid-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "PfxSidAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList>();
        ent_->parent = this;
        pfxsidattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : pfxsidattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "PfxSidAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::PfxSidAttrEntryList()
    :
    type{YType::enumeration, "type"},
    len{YType::uint16, "len"},
    val{YType::str, "val"}
{

    yang_name = "PfxSidAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::~PfxSidAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| len.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(len.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "PfxSidAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (len.is_set || is_set(len.yfilter)) leaf_name_data.push_back(len.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "len")
    {
        len = value;
        len.value_namespace = name_space;
        len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "len")
    {
        len.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "len" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems::PmsiItems()
    :
    flags{YType::str, "flags"},
    tuntype{YType::enumeration, "tunType"},
    lbl{YType::uint32, "lbl"},
    tunid{YType::str, "tunId"}
{

    yang_name = "pmsi-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems::~PmsiItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems::has_data() const
{
    if (is_presence_container) return true;
    return flags.is_set
	|| tuntype.is_set
	|| lbl.is_set
	|| tunid.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(tuntype.yfilter)
	|| ydk::is_set(lbl.yfilter)
	|| ydk::is_set(tunid.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pmsi-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (tuntype.is_set || is_set(tuntype.yfilter)) leaf_name_data.push_back(tuntype.get_name_leafdata());
    if (lbl.is_set || is_set(lbl.yfilter)) leaf_name_data.push_back(lbl.get_name_leafdata());
    if (tunid.is_set || is_set(tunid.yfilter)) leaf_name_data.push_back(tunid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunType")
    {
        tuntype = value;
        tuntype.value_namespace = name_space;
        tuntype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lbl")
    {
        lbl = value;
        lbl.value_namespace = name_space;
        lbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunId")
    {
        tunid = value;
        tunid.value_namespace = name_space;
        tunid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "tunType")
    {
        tuntype.yfilter = yfilter;
    }
    if(value_path == "lbl")
    {
        lbl.yfilter = yfilter;
    }
    if(value_path == "tunId")
    {
        tunid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::LsrtItems::LnkStRouteList::PathItems::PathList::PmsiItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "flags" || name == "tunType" || name == "lbl" || name == "tunId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnrtItems()
    :
    evpnroute_list(this, {"pfx", "rd"})
{

    yang_name = "evpnrt-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::~EvpnrtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<evpnroute_list.len(); index++)
    {
        if(evpnroute_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::has_operation() const
{
    for (std::size_t index=0; index<evpnroute_list.len(); index++)
    {
        if(evpnroute_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "evpnrt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "EvpnRoute-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList>();
        ent_->parent = this;
        evpnroute_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : evpnroute_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "EvpnRoute-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::EvpnRouteList()
    :
    pfx{YType::str, "pfx"},
    rd{YType::str, "rd"},
    rttype{YType::enumeration, "rtType"},
    name{YType::str, "name"},
    ver{YType::uint32, "ver"},
    rtflags{YType::str, "rtFlags"},
    numpaths{YType::uint32, "numPaths"},
    bestpathid{YType::uint32, "bestPathId"}
        ,
    path_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems>())
{
    path_items->parent = this;

    yang_name = "EvpnRoute-list"; yang_parent_name = "evpnrt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::~EvpnRouteList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::has_data() const
{
    if (is_presence_container) return true;
    return pfx.is_set
	|| rd.is_set
	|| rttype.is_set
	|| name.is_set
	|| ver.is_set
	|| rtflags.is_set
	|| numpaths.is_set
	|| bestpathid.is_set
	|| (path_items !=  nullptr && path_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfx.yfilter)
	|| ydk::is_set(rd.yfilter)
	|| ydk::is_set(rttype.yfilter)
	|| ydk::is_set(name.yfilter)
	|| ydk::is_set(ver.yfilter)
	|| ydk::is_set(rtflags.yfilter)
	|| ydk::is_set(numpaths.yfilter)
	|| ydk::is_set(bestpathid.yfilter)
	|| (path_items !=  nullptr && path_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "EvpnRoute-list";
    ADD_KEY_TOKEN(pfx, "pfx");
    ADD_KEY_TOKEN(rd, "rd");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfx.is_set || is_set(pfx.yfilter)) leaf_name_data.push_back(pfx.get_name_leafdata());
    if (rd.is_set || is_set(rd.yfilter)) leaf_name_data.push_back(rd.get_name_leafdata());
    if (rttype.is_set || is_set(rttype.yfilter)) leaf_name_data.push_back(rttype.get_name_leafdata());
    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());
    if (ver.is_set || is_set(ver.yfilter)) leaf_name_data.push_back(ver.get_name_leafdata());
    if (rtflags.is_set || is_set(rtflags.yfilter)) leaf_name_data.push_back(rtflags.get_name_leafdata());
    if (numpaths.is_set || is_set(numpaths.yfilter)) leaf_name_data.push_back(numpaths.get_name_leafdata());
    if (bestpathid.is_set || is_set(bestpathid.yfilter)) leaf_name_data.push_back(bestpathid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "path-items")
    {
        if(path_items == nullptr)
        {
            path_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems>();
        }
        return path_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(path_items != nullptr)
    {
        _children["path-items"] = path_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfx")
    {
        pfx = value;
        pfx.value_namespace = name_space;
        pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rd")
    {
        rd = value;
        rd.value_namespace = name_space;
        rd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtType")
    {
        rttype = value;
        rttype.value_namespace = name_space;
        rttype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ver")
    {
        ver = value;
        ver.value_namespace = name_space;
        ver.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtFlags")
    {
        rtflags = value;
        rtflags.value_namespace = name_space;
        rtflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPaths")
    {
        numpaths = value;
        numpaths.value_namespace = name_space;
        numpaths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bestPathId")
    {
        bestpathid = value;
        bestpathid.value_namespace = name_space;
        bestpathid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfx")
    {
        pfx.yfilter = yfilter;
    }
    if(value_path == "rd")
    {
        rd.yfilter = yfilter;
    }
    if(value_path == "rtType")
    {
        rttype.yfilter = yfilter;
    }
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
    if(value_path == "ver")
    {
        ver.yfilter = yfilter;
    }
    if(value_path == "rtFlags")
    {
        rtflags.yfilter = yfilter;
    }
    if(value_path == "numPaths")
    {
        numpaths.yfilter = yfilter;
    }
    if(value_path == "bestPathId")
    {
        bestpathid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "path-items" || name == "pfx" || name == "rd" || name == "rtType" || name == "name" || name == "ver" || name == "rtFlags" || name == "numPaths" || name == "bestPathId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathItems()
    :
    path_list(this, {"peer", "id", "nh", "importedrd", "origimportedrd"})
{

    yang_name = "path-items"; yang_parent_name = "EvpnRoute-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::~PathItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::has_operation() const
{
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "path-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "Path-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList>();
        ent_->parent = this;
        path_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : path_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "Path-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PathList()
    :
    peer{YType::str, "peer"},
    id{YType::uint32, "id"},
    nh{YType::str, "nh"},
    importedrd{YType::str, "importedRd"},
    origimportedrd{YType::str, "origImportedRd"},
    nhmetric{YType::uint32, "nhMetric"},
    type{YType::enumeration, "type"},
    operst{YType::enumeration, "operSt"},
    flags{YType::str, "flags"},
    origin{YType::enumeration, "origin"},
    metric{YType::uint32, "metric"},
    localpref{YType::uint32, "localPref"},
    weight{YType::uint16, "weight"},
    aggr{YType::str, "aggr"},
    aggras{YType::str, "aggrAs"},
    unknownattrdata{YType::str, "unknownAttrData"},
    unknownattrlen{YType::uint32, "unknownAttrLen"},
    regcomm{YType::str, "regComm"},
    extcomm{YType::str, "extComm"},
    aspath{YType::str, "asPath"},
    rcvdlbl{YType::str, "rcvdLbl"},
    originatorid{YType::str, "originatorId"},
    clusterlst{YType::str, "clusterLst"},
    peerrtrid{YType::str, "peerRtrId"}
        ,
    seg_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems>())
    , rcomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems>())
    , ecomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems>())
    , lnkstattr_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems>())
    , pfxsid_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems>())
    , pmsi_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems>())
{
    seg_items->parent = this;
    rcomm_items->parent = this;
    ecomm_items->parent = this;
    lnkstattr_items->parent = this;
    pfxsid_items->parent = this;
    pmsi_items->parent = this;

    yang_name = "Path-list"; yang_parent_name = "path-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::~PathList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::has_data() const
{
    if (is_presence_container) return true;
    return peer.is_set
	|| id.is_set
	|| nh.is_set
	|| importedrd.is_set
	|| origimportedrd.is_set
	|| nhmetric.is_set
	|| type.is_set
	|| operst.is_set
	|| flags.is_set
	|| origin.is_set
	|| metric.is_set
	|| localpref.is_set
	|| weight.is_set
	|| aggr.is_set
	|| aggras.is_set
	|| unknownattrdata.is_set
	|| unknownattrlen.is_set
	|| regcomm.is_set
	|| extcomm.is_set
	|| aspath.is_set
	|| rcvdlbl.is_set
	|| originatorid.is_set
	|| clusterlst.is_set
	|| peerrtrid.is_set
	|| (seg_items !=  nullptr && seg_items->has_data())
	|| (rcomm_items !=  nullptr && rcomm_items->has_data())
	|| (ecomm_items !=  nullptr && ecomm_items->has_data())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_data())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_data())
	|| (pmsi_items !=  nullptr && pmsi_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(peer.yfilter)
	|| ydk::is_set(id.yfilter)
	|| ydk::is_set(nh.yfilter)
	|| ydk::is_set(importedrd.yfilter)
	|| ydk::is_set(origimportedrd.yfilter)
	|| ydk::is_set(nhmetric.yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(operst.yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(origin.yfilter)
	|| ydk::is_set(metric.yfilter)
	|| ydk::is_set(localpref.yfilter)
	|| ydk::is_set(weight.yfilter)
	|| ydk::is_set(aggr.yfilter)
	|| ydk::is_set(aggras.yfilter)
	|| ydk::is_set(unknownattrdata.yfilter)
	|| ydk::is_set(unknownattrlen.yfilter)
	|| ydk::is_set(regcomm.yfilter)
	|| ydk::is_set(extcomm.yfilter)
	|| ydk::is_set(aspath.yfilter)
	|| ydk::is_set(rcvdlbl.yfilter)
	|| ydk::is_set(originatorid.yfilter)
	|| ydk::is_set(clusterlst.yfilter)
	|| ydk::is_set(peerrtrid.yfilter)
	|| (seg_items !=  nullptr && seg_items->has_operation())
	|| (rcomm_items !=  nullptr && rcomm_items->has_operation())
	|| (ecomm_items !=  nullptr && ecomm_items->has_operation())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_operation())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_operation())
	|| (pmsi_items !=  nullptr && pmsi_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Path-list";
    ADD_KEY_TOKEN(peer, "peer");
    ADD_KEY_TOKEN(id, "id");
    ADD_KEY_TOKEN(nh, "nh");
    ADD_KEY_TOKEN(importedrd, "importedRd");
    ADD_KEY_TOKEN(origimportedrd, "origImportedRd");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (peer.is_set || is_set(peer.yfilter)) leaf_name_data.push_back(peer.get_name_leafdata());
    if (id.is_set || is_set(id.yfilter)) leaf_name_data.push_back(id.get_name_leafdata());
    if (nh.is_set || is_set(nh.yfilter)) leaf_name_data.push_back(nh.get_name_leafdata());
    if (importedrd.is_set || is_set(importedrd.yfilter)) leaf_name_data.push_back(importedrd.get_name_leafdata());
    if (origimportedrd.is_set || is_set(origimportedrd.yfilter)) leaf_name_data.push_back(origimportedrd.get_name_leafdata());
    if (nhmetric.is_set || is_set(nhmetric.yfilter)) leaf_name_data.push_back(nhmetric.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (operst.is_set || is_set(operst.yfilter)) leaf_name_data.push_back(operst.get_name_leafdata());
    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (origin.is_set || is_set(origin.yfilter)) leaf_name_data.push_back(origin.get_name_leafdata());
    if (metric.is_set || is_set(metric.yfilter)) leaf_name_data.push_back(metric.get_name_leafdata());
    if (localpref.is_set || is_set(localpref.yfilter)) leaf_name_data.push_back(localpref.get_name_leafdata());
    if (weight.is_set || is_set(weight.yfilter)) leaf_name_data.push_back(weight.get_name_leafdata());
    if (aggr.is_set || is_set(aggr.yfilter)) leaf_name_data.push_back(aggr.get_name_leafdata());
    if (aggras.is_set || is_set(aggras.yfilter)) leaf_name_data.push_back(aggras.get_name_leafdata());
    if (unknownattrdata.is_set || is_set(unknownattrdata.yfilter)) leaf_name_data.push_back(unknownattrdata.get_name_leafdata());
    if (unknownattrlen.is_set || is_set(unknownattrlen.yfilter)) leaf_name_data.push_back(unknownattrlen.get_name_leafdata());
    if (regcomm.is_set || is_set(regcomm.yfilter)) leaf_name_data.push_back(regcomm.get_name_leafdata());
    if (extcomm.is_set || is_set(extcomm.yfilter)) leaf_name_data.push_back(extcomm.get_name_leafdata());
    if (aspath.is_set || is_set(aspath.yfilter)) leaf_name_data.push_back(aspath.get_name_leafdata());
    if (rcvdlbl.is_set || is_set(rcvdlbl.yfilter)) leaf_name_data.push_back(rcvdlbl.get_name_leafdata());
    if (originatorid.is_set || is_set(originatorid.yfilter)) leaf_name_data.push_back(originatorid.get_name_leafdata());
    if (clusterlst.is_set || is_set(clusterlst.yfilter)) leaf_name_data.push_back(clusterlst.get_name_leafdata());
    if (peerrtrid.is_set || is_set(peerrtrid.yfilter)) leaf_name_data.push_back(peerrtrid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "seg-items")
    {
        if(seg_items == nullptr)
        {
            seg_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems>();
        }
        return seg_items;
    }

    if(child_yang_name == "rcomm-items")
    {
        if(rcomm_items == nullptr)
        {
            rcomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems>();
        }
        return rcomm_items;
    }

    if(child_yang_name == "ecomm-items")
    {
        if(ecomm_items == nullptr)
        {
            ecomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems>();
        }
        return ecomm_items;
    }

    if(child_yang_name == "lnkstattr-items")
    {
        if(lnkstattr_items == nullptr)
        {
            lnkstattr_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems>();
        }
        return lnkstattr_items;
    }

    if(child_yang_name == "pfxsid-items")
    {
        if(pfxsid_items == nullptr)
        {
            pfxsid_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems>();
        }
        return pfxsid_items;
    }

    if(child_yang_name == "pmsi-items")
    {
        if(pmsi_items == nullptr)
        {
            pmsi_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems>();
        }
        return pmsi_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(seg_items != nullptr)
    {
        _children["seg-items"] = seg_items;
    }

    if(rcomm_items != nullptr)
    {
        _children["rcomm-items"] = rcomm_items;
    }

    if(ecomm_items != nullptr)
    {
        _children["ecomm-items"] = ecomm_items;
    }

    if(lnkstattr_items != nullptr)
    {
        _children["lnkstattr-items"] = lnkstattr_items;
    }

    if(pfxsid_items != nullptr)
    {
        _children["pfxsid-items"] = pfxsid_items;
    }

    if(pmsi_items != nullptr)
    {
        _children["pmsi-items"] = pmsi_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "peer")
    {
        peer = value;
        peer.value_namespace = name_space;
        peer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "id")
    {
        id = value;
        id.value_namespace = name_space;
        id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh")
    {
        nh = value;
        nh.value_namespace = name_space;
        nh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "importedRd")
    {
        importedrd = value;
        importedrd.value_namespace = name_space;
        importedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd = value;
        origimportedrd.value_namespace = name_space;
        origimportedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nhMetric")
    {
        nhmetric = value;
        nhmetric.value_namespace = name_space;
        nhmetric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "operSt")
    {
        operst = value;
        operst.value_namespace = name_space;
        operst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origin")
    {
        origin = value;
        origin.value_namespace = name_space;
        origin.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "metric")
    {
        metric = value;
        metric.value_namespace = name_space;
        metric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "localPref")
    {
        localpref = value;
        localpref.value_namespace = name_space;
        localpref.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight")
    {
        weight = value;
        weight.value_namespace = name_space;
        weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggr")
    {
        aggr = value;
        aggr.value_namespace = name_space;
        aggr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggrAs")
    {
        aggras = value;
        aggras.value_namespace = name_space;
        aggras.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata = value;
        unknownattrdata.value_namespace = name_space;
        unknownattrdata.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen = value;
        unknownattrlen.value_namespace = name_space;
        unknownattrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "regComm")
    {
        regcomm = value;
        regcomm.value_namespace = name_space;
        regcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extComm")
    {
        extcomm = value;
        extcomm.value_namespace = name_space;
        extcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asPath")
    {
        aspath = value;
        aspath.value_namespace = name_space;
        aspath.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl = value;
        rcvdlbl.value_namespace = name_space;
        rcvdlbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "originatorId")
    {
        originatorid = value;
        originatorid.value_namespace = name_space;
        originatorid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "clusterLst")
    {
        clusterlst = value;
        clusterlst.value_namespace = name_space;
        clusterlst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid = value;
        peerrtrid.value_namespace = name_space;
        peerrtrid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "peer")
    {
        peer.yfilter = yfilter;
    }
    if(value_path == "id")
    {
        id.yfilter = yfilter;
    }
    if(value_path == "nh")
    {
        nh.yfilter = yfilter;
    }
    if(value_path == "importedRd")
    {
        importedrd.yfilter = yfilter;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd.yfilter = yfilter;
    }
    if(value_path == "nhMetric")
    {
        nhmetric.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "operSt")
    {
        operst.yfilter = yfilter;
    }
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "origin")
    {
        origin.yfilter = yfilter;
    }
    if(value_path == "metric")
    {
        metric.yfilter = yfilter;
    }
    if(value_path == "localPref")
    {
        localpref.yfilter = yfilter;
    }
    if(value_path == "weight")
    {
        weight.yfilter = yfilter;
    }
    if(value_path == "aggr")
    {
        aggr.yfilter = yfilter;
    }
    if(value_path == "aggrAs")
    {
        aggras.yfilter = yfilter;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata.yfilter = yfilter;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen.yfilter = yfilter;
    }
    if(value_path == "regComm")
    {
        regcomm.yfilter = yfilter;
    }
    if(value_path == "extComm")
    {
        extcomm.yfilter = yfilter;
    }
    if(value_path == "asPath")
    {
        aspath.yfilter = yfilter;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl.yfilter = yfilter;
    }
    if(value_path == "originatorId")
    {
        originatorid.yfilter = yfilter;
    }
    if(value_path == "clusterLst")
    {
        clusterlst.yfilter = yfilter;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "seg-items" || name == "rcomm-items" || name == "ecomm-items" || name == "lnkstattr-items" || name == "pfxsid-items" || name == "pmsi-items" || name == "peer" || name == "id" || name == "nh" || name == "importedRd" || name == "origImportedRd" || name == "nhMetric" || name == "type" || name == "operSt" || name == "flags" || name == "origin" || name == "metric" || name == "localPref" || name == "weight" || name == "aggr" || name == "aggrAs" || name == "unknownAttrData" || name == "unknownAttrLen" || name == "regComm" || name == "extComm" || name == "asPath" || name == "rcvdLbl" || name == "originatorId" || name == "clusterLst" || name == "peerRtrId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::SegItems()
    :
    asseg_list(this, {"order"})
{

    yang_name = "seg-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::~SegItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::has_operation() const
{
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "seg-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsSeg-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList>();
        ent_->parent = this;
        asseg_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asseg_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsSeg-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsSegList()
    :
    order{YType::uint16, "order"},
    type{YType::enumeration, "type"}
        ,
    asn_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>())
{
    asn_items->parent = this;

    yang_name = "AsSeg-list"; yang_parent_name = "seg-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::~AsSegList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| type.is_set
	|| (asn_items !=  nullptr && asn_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(type.yfilter)
	|| (asn_items !=  nullptr && asn_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsSeg-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "asn-items")
    {
        if(asn_items == nullptr)
        {
            asn_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>();
        }
        return asn_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(asn_items != nullptr)
    {
        _children["asn-items"] = asn_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "asn-items" || name == "order" || name == "type")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsnItems()
    :
    asitem_list(this, {"order"})
{

    yang_name = "asn-items"; yang_parent_name = "AsSeg-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::~AsnItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_operation() const
{
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "asn-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsItem-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList>();
        ent_->parent = this;
        asitem_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asitem_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsItem-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::AsItemList()
    :
    order{YType::uint16, "order"},
    asn{YType::str, "asn"}
{

    yang_name = "AsItem-list"; yang_parent_name = "asn-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::~AsItemList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| asn.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(asn.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsItem-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (asn.is_set || is_set(asn.yfilter)) leaf_name_data.push_back(asn.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asn")
    {
        asn = value;
        asn.value_namespace = name_space;
        asn.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "asn")
    {
        asn.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "order" || name == "asn")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RcommItems()
    :
    regcomm_list(this, {"community"})
{

    yang_name = "rcomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::~RcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::has_operation() const
{
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rcomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "RegComm-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList>();
        ent_->parent = this;
        regcomm_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : regcomm_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "RegComm-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList::RegCommList()
    :
    community{YType::str, "community"}
{

    yang_name = "RegComm-list"; yang_parent_name = "rcomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList::~RegCommList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "RegComm-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::RcommItems::RegCommList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::EcommItems()
    :
    encap{YType::str, "encap"},
    rtrmac{YType::str, "rtrMac"}
        ,
    rt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems>())
{
    rt_items->parent = this;

    yang_name = "ecomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::~EcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::has_data() const
{
    if (is_presence_container) return true;
    return encap.is_set
	|| rtrmac.is_set
	|| (rt_items !=  nullptr && rt_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(encap.yfilter)
	|| ydk::is_set(rtrmac.yfilter)
	|| (rt_items !=  nullptr && rt_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ecomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (encap.is_set || is_set(encap.yfilter)) leaf_name_data.push_back(encap.get_name_leafdata());
    if (rtrmac.is_set || is_set(rtrmac.yfilter)) leaf_name_data.push_back(rtrmac.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "rt-items")
    {
        if(rt_items == nullptr)
        {
            rt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems>();
        }
        return rt_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(rt_items != nullptr)
    {
        _children["rt-items"] = rt_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "encap")
    {
        encap = value;
        encap.value_namespace = name_space;
        encap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtrMac")
    {
        rtrmac = value;
        rtrmac.value_namespace = name_space;
        rtrmac.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "encap")
    {
        encap.yfilter = yfilter;
    }
    if(value_path == "rtrMac")
    {
        rtrmac.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "rt-items" || name == "encap" || name == "rtrMac")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::RtItems()
    :
    extcommrt_list(this, {"community"})
{

    yang_name = "rt-items"; yang_parent_name = "ecomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::~RtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::has_operation() const
{
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ExtCommRt-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList>();
        ent_->parent = this;
        extcommrt_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : extcommrt_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ExtCommRt-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::ExtCommRtList()
    :
    community{YType::str, "community"}
{

    yang_name = "ExtCommRt-list"; yang_parent_name = "rt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::~ExtCommRtList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ExtCommRt-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::LnkstattrItems()
    :
    lnkattrflags{YType::str, "lnkAttrFlags"},
    attrlen{YType::uint16, "attrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "lnkstattr-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::~LnkstattrItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::has_data() const
{
    if (is_presence_container) return true;
    return lnkattrflags.is_set
	|| attrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(lnkattrflags.yfilter)
	|| ydk::is_set(attrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lnkstattr-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (lnkattrflags.is_set || is_set(lnkattrflags.yfilter)) leaf_name_data.push_back(lnkattrflags.get_name_leafdata());
    if (attrlen.is_set || is_set(attrlen.yfilter)) leaf_name_data.push_back(attrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags = value;
        lnkattrflags.value_namespace = name_space;
        lnkattrflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "attrLen")
    {
        attrlen = value;
        attrlen.value_namespace = name_space;
        attrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags.yfilter = yfilter;
    }
    if(value_path == "attrLen")
    {
        attrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "lnkAttrFlags" || name == "attrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::TlvItems()
    :
    lnkstattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "lnkstattr-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "LnkStAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList>();
        ent_->parent = this;
        lnkstattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : lnkstattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "LnkStAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::LnkStAttrEntryList()
    :
    type{YType::enumeration, "type"},
    val{YType::str, "val"}
{

    yang_name = "LnkStAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::~LnkStAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "LnkStAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::PfxsidItems()
    :
    pfxsidattrlen{YType::uint16, "pfxSidAttrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "pfxsid-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::~PfxsidItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::has_data() const
{
    if (is_presence_container) return true;
    return pfxsidattrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfxsidattrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pfxsid-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfxsidattrlen.is_set || is_set(pfxsidattrlen.yfilter)) leaf_name_data.push_back(pfxsidattrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen = value;
        pfxsidattrlen.value_namespace = name_space;
        pfxsidattrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "pfxSidAttrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::TlvItems()
    :
    pfxsidattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "pfxsid-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "PfxSidAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList>();
        ent_->parent = this;
        pfxsidattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : pfxsidattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "PfxSidAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::PfxSidAttrEntryList()
    :
    type{YType::enumeration, "type"},
    len{YType::uint16, "len"},
    val{YType::str, "val"}
{

    yang_name = "PfxSidAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::~PfxSidAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| len.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(len.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "PfxSidAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (len.is_set || is_set(len.yfilter)) leaf_name_data.push_back(len.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "len")
    {
        len = value;
        len.value_namespace = name_space;
        len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "len")
    {
        len.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "len" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems::PmsiItems()
    :
    flags{YType::str, "flags"},
    tuntype{YType::enumeration, "tunType"},
    lbl{YType::uint32, "lbl"},
    tunid{YType::str, "tunId"}
{

    yang_name = "pmsi-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems::~PmsiItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems::has_data() const
{
    if (is_presence_container) return true;
    return flags.is_set
	|| tuntype.is_set
	|| lbl.is_set
	|| tunid.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(tuntype.yfilter)
	|| ydk::is_set(lbl.yfilter)
	|| ydk::is_set(tunid.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pmsi-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (tuntype.is_set || is_set(tuntype.yfilter)) leaf_name_data.push_back(tuntype.get_name_leafdata());
    if (lbl.is_set || is_set(lbl.yfilter)) leaf_name_data.push_back(lbl.get_name_leafdata());
    if (tunid.is_set || is_set(tunid.yfilter)) leaf_name_data.push_back(tunid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunType")
    {
        tuntype = value;
        tuntype.value_namespace = name_space;
        tuntype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lbl")
    {
        lbl = value;
        lbl.value_namespace = name_space;
        lbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunId")
    {
        tunid = value;
        tunid.value_namespace = name_space;
        tunid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "tunType")
    {
        tuntype.yfilter = yfilter;
    }
    if(value_path == "lbl")
    {
        lbl.yfilter = yfilter;
    }
    if(value_path == "tunId")
    {
        tunid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::EvpnrtItems::EvpnRouteList::PathItems::PathList::PmsiItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "flags" || name == "tunType" || name == "lbl" || name == "tunId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnrtItems()
    :
    mvpnroute_list(this, {"pfx", "rd"})
{

    yang_name = "mvpnrt-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::~MvpnrtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<mvpnroute_list.len(); index++)
    {
        if(mvpnroute_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::has_operation() const
{
    for (std::size_t index=0; index<mvpnroute_list.len(); index++)
    {
        if(mvpnroute_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mvpnrt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "MvpnRoute-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList>();
        ent_->parent = this;
        mvpnroute_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : mvpnroute_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "MvpnRoute-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::MvpnRouteList()
    :
    pfx{YType::str, "pfx"},
    rd{YType::str, "rd"},
    rttype{YType::enumeration, "rtType"},
    name{YType::str, "name"},
    ver{YType::uint32, "ver"},
    rtflags{YType::str, "rtFlags"},
    numpaths{YType::uint32, "numPaths"},
    bestpathid{YType::uint32, "bestPathId"}
        ,
    path_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems>())
{
    path_items->parent = this;

    yang_name = "MvpnRoute-list"; yang_parent_name = "mvpnrt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::~MvpnRouteList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::has_data() const
{
    if (is_presence_container) return true;
    return pfx.is_set
	|| rd.is_set
	|| rttype.is_set
	|| name.is_set
	|| ver.is_set
	|| rtflags.is_set
	|| numpaths.is_set
	|| bestpathid.is_set
	|| (path_items !=  nullptr && path_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfx.yfilter)
	|| ydk::is_set(rd.yfilter)
	|| ydk::is_set(rttype.yfilter)
	|| ydk::is_set(name.yfilter)
	|| ydk::is_set(ver.yfilter)
	|| ydk::is_set(rtflags.yfilter)
	|| ydk::is_set(numpaths.yfilter)
	|| ydk::is_set(bestpathid.yfilter)
	|| (path_items !=  nullptr && path_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "MvpnRoute-list";
    ADD_KEY_TOKEN(pfx, "pfx");
    ADD_KEY_TOKEN(rd, "rd");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfx.is_set || is_set(pfx.yfilter)) leaf_name_data.push_back(pfx.get_name_leafdata());
    if (rd.is_set || is_set(rd.yfilter)) leaf_name_data.push_back(rd.get_name_leafdata());
    if (rttype.is_set || is_set(rttype.yfilter)) leaf_name_data.push_back(rttype.get_name_leafdata());
    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());
    if (ver.is_set || is_set(ver.yfilter)) leaf_name_data.push_back(ver.get_name_leafdata());
    if (rtflags.is_set || is_set(rtflags.yfilter)) leaf_name_data.push_back(rtflags.get_name_leafdata());
    if (numpaths.is_set || is_set(numpaths.yfilter)) leaf_name_data.push_back(numpaths.get_name_leafdata());
    if (bestpathid.is_set || is_set(bestpathid.yfilter)) leaf_name_data.push_back(bestpathid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "path-items")
    {
        if(path_items == nullptr)
        {
            path_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems>();
        }
        return path_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(path_items != nullptr)
    {
        _children["path-items"] = path_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfx")
    {
        pfx = value;
        pfx.value_namespace = name_space;
        pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rd")
    {
        rd = value;
        rd.value_namespace = name_space;
        rd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtType")
    {
        rttype = value;
        rttype.value_namespace = name_space;
        rttype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ver")
    {
        ver = value;
        ver.value_namespace = name_space;
        ver.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtFlags")
    {
        rtflags = value;
        rtflags.value_namespace = name_space;
        rtflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPaths")
    {
        numpaths = value;
        numpaths.value_namespace = name_space;
        numpaths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bestPathId")
    {
        bestpathid = value;
        bestpathid.value_namespace = name_space;
        bestpathid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfx")
    {
        pfx.yfilter = yfilter;
    }
    if(value_path == "rd")
    {
        rd.yfilter = yfilter;
    }
    if(value_path == "rtType")
    {
        rttype.yfilter = yfilter;
    }
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
    if(value_path == "ver")
    {
        ver.yfilter = yfilter;
    }
    if(value_path == "rtFlags")
    {
        rtflags.yfilter = yfilter;
    }
    if(value_path == "numPaths")
    {
        numpaths.yfilter = yfilter;
    }
    if(value_path == "bestPathId")
    {
        bestpathid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "path-items" || name == "pfx" || name == "rd" || name == "rtType" || name == "name" || name == "ver" || name == "rtFlags" || name == "numPaths" || name == "bestPathId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathItems()
    :
    path_list(this, {"peer", "id", "nh", "importedrd", "origimportedrd"})
{

    yang_name = "path-items"; yang_parent_name = "MvpnRoute-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::~PathItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::has_operation() const
{
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "path-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "Path-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList>();
        ent_->parent = this;
        path_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : path_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "Path-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PathList()
    :
    peer{YType::str, "peer"},
    id{YType::uint32, "id"},
    nh{YType::str, "nh"},
    importedrd{YType::str, "importedRd"},
    origimportedrd{YType::str, "origImportedRd"},
    nhmetric{YType::uint32, "nhMetric"},
    type{YType::enumeration, "type"},
    operst{YType::enumeration, "operSt"},
    flags{YType::str, "flags"},
    origin{YType::enumeration, "origin"},
    metric{YType::uint32, "metric"},
    localpref{YType::uint32, "localPref"},
    weight{YType::uint16, "weight"},
    aggr{YType::str, "aggr"},
    aggras{YType::str, "aggrAs"},
    unknownattrdata{YType::str, "unknownAttrData"},
    unknownattrlen{YType::uint32, "unknownAttrLen"},
    regcomm{YType::str, "regComm"},
    extcomm{YType::str, "extComm"},
    aspath{YType::str, "asPath"},
    rcvdlbl{YType::str, "rcvdLbl"},
    originatorid{YType::str, "originatorId"},
    clusterlst{YType::str, "clusterLst"},
    peerrtrid{YType::str, "peerRtrId"}
        ,
    seg_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems>())
    , rcomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems>())
    , ecomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems>())
    , lnkstattr_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems>())
    , pfxsid_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems>())
    , pmsi_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems>())
{
    seg_items->parent = this;
    rcomm_items->parent = this;
    ecomm_items->parent = this;
    lnkstattr_items->parent = this;
    pfxsid_items->parent = this;
    pmsi_items->parent = this;

    yang_name = "Path-list"; yang_parent_name = "path-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::~PathList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::has_data() const
{
    if (is_presence_container) return true;
    return peer.is_set
	|| id.is_set
	|| nh.is_set
	|| importedrd.is_set
	|| origimportedrd.is_set
	|| nhmetric.is_set
	|| type.is_set
	|| operst.is_set
	|| flags.is_set
	|| origin.is_set
	|| metric.is_set
	|| localpref.is_set
	|| weight.is_set
	|| aggr.is_set
	|| aggras.is_set
	|| unknownattrdata.is_set
	|| unknownattrlen.is_set
	|| regcomm.is_set
	|| extcomm.is_set
	|| aspath.is_set
	|| rcvdlbl.is_set
	|| originatorid.is_set
	|| clusterlst.is_set
	|| peerrtrid.is_set
	|| (seg_items !=  nullptr && seg_items->has_data())
	|| (rcomm_items !=  nullptr && rcomm_items->has_data())
	|| (ecomm_items !=  nullptr && ecomm_items->has_data())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_data())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_data())
	|| (pmsi_items !=  nullptr && pmsi_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(peer.yfilter)
	|| ydk::is_set(id.yfilter)
	|| ydk::is_set(nh.yfilter)
	|| ydk::is_set(importedrd.yfilter)
	|| ydk::is_set(origimportedrd.yfilter)
	|| ydk::is_set(nhmetric.yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(operst.yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(origin.yfilter)
	|| ydk::is_set(metric.yfilter)
	|| ydk::is_set(localpref.yfilter)
	|| ydk::is_set(weight.yfilter)
	|| ydk::is_set(aggr.yfilter)
	|| ydk::is_set(aggras.yfilter)
	|| ydk::is_set(unknownattrdata.yfilter)
	|| ydk::is_set(unknownattrlen.yfilter)
	|| ydk::is_set(regcomm.yfilter)
	|| ydk::is_set(extcomm.yfilter)
	|| ydk::is_set(aspath.yfilter)
	|| ydk::is_set(rcvdlbl.yfilter)
	|| ydk::is_set(originatorid.yfilter)
	|| ydk::is_set(clusterlst.yfilter)
	|| ydk::is_set(peerrtrid.yfilter)
	|| (seg_items !=  nullptr && seg_items->has_operation())
	|| (rcomm_items !=  nullptr && rcomm_items->has_operation())
	|| (ecomm_items !=  nullptr && ecomm_items->has_operation())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_operation())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_operation())
	|| (pmsi_items !=  nullptr && pmsi_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Path-list";
    ADD_KEY_TOKEN(peer, "peer");
    ADD_KEY_TOKEN(id, "id");
    ADD_KEY_TOKEN(nh, "nh");
    ADD_KEY_TOKEN(importedrd, "importedRd");
    ADD_KEY_TOKEN(origimportedrd, "origImportedRd");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (peer.is_set || is_set(peer.yfilter)) leaf_name_data.push_back(peer.get_name_leafdata());
    if (id.is_set || is_set(id.yfilter)) leaf_name_data.push_back(id.get_name_leafdata());
    if (nh.is_set || is_set(nh.yfilter)) leaf_name_data.push_back(nh.get_name_leafdata());
    if (importedrd.is_set || is_set(importedrd.yfilter)) leaf_name_data.push_back(importedrd.get_name_leafdata());
    if (origimportedrd.is_set || is_set(origimportedrd.yfilter)) leaf_name_data.push_back(origimportedrd.get_name_leafdata());
    if (nhmetric.is_set || is_set(nhmetric.yfilter)) leaf_name_data.push_back(nhmetric.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (operst.is_set || is_set(operst.yfilter)) leaf_name_data.push_back(operst.get_name_leafdata());
    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (origin.is_set || is_set(origin.yfilter)) leaf_name_data.push_back(origin.get_name_leafdata());
    if (metric.is_set || is_set(metric.yfilter)) leaf_name_data.push_back(metric.get_name_leafdata());
    if (localpref.is_set || is_set(localpref.yfilter)) leaf_name_data.push_back(localpref.get_name_leafdata());
    if (weight.is_set || is_set(weight.yfilter)) leaf_name_data.push_back(weight.get_name_leafdata());
    if (aggr.is_set || is_set(aggr.yfilter)) leaf_name_data.push_back(aggr.get_name_leafdata());
    if (aggras.is_set || is_set(aggras.yfilter)) leaf_name_data.push_back(aggras.get_name_leafdata());
    if (unknownattrdata.is_set || is_set(unknownattrdata.yfilter)) leaf_name_data.push_back(unknownattrdata.get_name_leafdata());
    if (unknownattrlen.is_set || is_set(unknownattrlen.yfilter)) leaf_name_data.push_back(unknownattrlen.get_name_leafdata());
    if (regcomm.is_set || is_set(regcomm.yfilter)) leaf_name_data.push_back(regcomm.get_name_leafdata());
    if (extcomm.is_set || is_set(extcomm.yfilter)) leaf_name_data.push_back(extcomm.get_name_leafdata());
    if (aspath.is_set || is_set(aspath.yfilter)) leaf_name_data.push_back(aspath.get_name_leafdata());
    if (rcvdlbl.is_set || is_set(rcvdlbl.yfilter)) leaf_name_data.push_back(rcvdlbl.get_name_leafdata());
    if (originatorid.is_set || is_set(originatorid.yfilter)) leaf_name_data.push_back(originatorid.get_name_leafdata());
    if (clusterlst.is_set || is_set(clusterlst.yfilter)) leaf_name_data.push_back(clusterlst.get_name_leafdata());
    if (peerrtrid.is_set || is_set(peerrtrid.yfilter)) leaf_name_data.push_back(peerrtrid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "seg-items")
    {
        if(seg_items == nullptr)
        {
            seg_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems>();
        }
        return seg_items;
    }

    if(child_yang_name == "rcomm-items")
    {
        if(rcomm_items == nullptr)
        {
            rcomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems>();
        }
        return rcomm_items;
    }

    if(child_yang_name == "ecomm-items")
    {
        if(ecomm_items == nullptr)
        {
            ecomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems>();
        }
        return ecomm_items;
    }

    if(child_yang_name == "lnkstattr-items")
    {
        if(lnkstattr_items == nullptr)
        {
            lnkstattr_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems>();
        }
        return lnkstattr_items;
    }

    if(child_yang_name == "pfxsid-items")
    {
        if(pfxsid_items == nullptr)
        {
            pfxsid_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems>();
        }
        return pfxsid_items;
    }

    if(child_yang_name == "pmsi-items")
    {
        if(pmsi_items == nullptr)
        {
            pmsi_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems>();
        }
        return pmsi_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(seg_items != nullptr)
    {
        _children["seg-items"] = seg_items;
    }

    if(rcomm_items != nullptr)
    {
        _children["rcomm-items"] = rcomm_items;
    }

    if(ecomm_items != nullptr)
    {
        _children["ecomm-items"] = ecomm_items;
    }

    if(lnkstattr_items != nullptr)
    {
        _children["lnkstattr-items"] = lnkstattr_items;
    }

    if(pfxsid_items != nullptr)
    {
        _children["pfxsid-items"] = pfxsid_items;
    }

    if(pmsi_items != nullptr)
    {
        _children["pmsi-items"] = pmsi_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "peer")
    {
        peer = value;
        peer.value_namespace = name_space;
        peer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "id")
    {
        id = value;
        id.value_namespace = name_space;
        id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh")
    {
        nh = value;
        nh.value_namespace = name_space;
        nh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "importedRd")
    {
        importedrd = value;
        importedrd.value_namespace = name_space;
        importedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd = value;
        origimportedrd.value_namespace = name_space;
        origimportedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nhMetric")
    {
        nhmetric = value;
        nhmetric.value_namespace = name_space;
        nhmetric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "operSt")
    {
        operst = value;
        operst.value_namespace = name_space;
        operst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origin")
    {
        origin = value;
        origin.value_namespace = name_space;
        origin.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "metric")
    {
        metric = value;
        metric.value_namespace = name_space;
        metric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "localPref")
    {
        localpref = value;
        localpref.value_namespace = name_space;
        localpref.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight")
    {
        weight = value;
        weight.value_namespace = name_space;
        weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggr")
    {
        aggr = value;
        aggr.value_namespace = name_space;
        aggr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggrAs")
    {
        aggras = value;
        aggras.value_namespace = name_space;
        aggras.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata = value;
        unknownattrdata.value_namespace = name_space;
        unknownattrdata.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen = value;
        unknownattrlen.value_namespace = name_space;
        unknownattrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "regComm")
    {
        regcomm = value;
        regcomm.value_namespace = name_space;
        regcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extComm")
    {
        extcomm = value;
        extcomm.value_namespace = name_space;
        extcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asPath")
    {
        aspath = value;
        aspath.value_namespace = name_space;
        aspath.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl = value;
        rcvdlbl.value_namespace = name_space;
        rcvdlbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "originatorId")
    {
        originatorid = value;
        originatorid.value_namespace = name_space;
        originatorid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "clusterLst")
    {
        clusterlst = value;
        clusterlst.value_namespace = name_space;
        clusterlst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid = value;
        peerrtrid.value_namespace = name_space;
        peerrtrid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "peer")
    {
        peer.yfilter = yfilter;
    }
    if(value_path == "id")
    {
        id.yfilter = yfilter;
    }
    if(value_path == "nh")
    {
        nh.yfilter = yfilter;
    }
    if(value_path == "importedRd")
    {
        importedrd.yfilter = yfilter;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd.yfilter = yfilter;
    }
    if(value_path == "nhMetric")
    {
        nhmetric.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "operSt")
    {
        operst.yfilter = yfilter;
    }
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "origin")
    {
        origin.yfilter = yfilter;
    }
    if(value_path == "metric")
    {
        metric.yfilter = yfilter;
    }
    if(value_path == "localPref")
    {
        localpref.yfilter = yfilter;
    }
    if(value_path == "weight")
    {
        weight.yfilter = yfilter;
    }
    if(value_path == "aggr")
    {
        aggr.yfilter = yfilter;
    }
    if(value_path == "aggrAs")
    {
        aggras.yfilter = yfilter;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata.yfilter = yfilter;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen.yfilter = yfilter;
    }
    if(value_path == "regComm")
    {
        regcomm.yfilter = yfilter;
    }
    if(value_path == "extComm")
    {
        extcomm.yfilter = yfilter;
    }
    if(value_path == "asPath")
    {
        aspath.yfilter = yfilter;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl.yfilter = yfilter;
    }
    if(value_path == "originatorId")
    {
        originatorid.yfilter = yfilter;
    }
    if(value_path == "clusterLst")
    {
        clusterlst.yfilter = yfilter;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "seg-items" || name == "rcomm-items" || name == "ecomm-items" || name == "lnkstattr-items" || name == "pfxsid-items" || name == "pmsi-items" || name == "peer" || name == "id" || name == "nh" || name == "importedRd" || name == "origImportedRd" || name == "nhMetric" || name == "type" || name == "operSt" || name == "flags" || name == "origin" || name == "metric" || name == "localPref" || name == "weight" || name == "aggr" || name == "aggrAs" || name == "unknownAttrData" || name == "unknownAttrLen" || name == "regComm" || name == "extComm" || name == "asPath" || name == "rcvdLbl" || name == "originatorId" || name == "clusterLst" || name == "peerRtrId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::SegItems()
    :
    asseg_list(this, {"order"})
{

    yang_name = "seg-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::~SegItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::has_operation() const
{
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "seg-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsSeg-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList>();
        ent_->parent = this;
        asseg_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asseg_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsSeg-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsSegList()
    :
    order{YType::uint16, "order"},
    type{YType::enumeration, "type"}
        ,
    asn_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>())
{
    asn_items->parent = this;

    yang_name = "AsSeg-list"; yang_parent_name = "seg-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::~AsSegList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| type.is_set
	|| (asn_items !=  nullptr && asn_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(type.yfilter)
	|| (asn_items !=  nullptr && asn_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsSeg-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "asn-items")
    {
        if(asn_items == nullptr)
        {
            asn_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>();
        }
        return asn_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(asn_items != nullptr)
    {
        _children["asn-items"] = asn_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "asn-items" || name == "order" || name == "type")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsnItems()
    :
    asitem_list(this, {"order"})
{

    yang_name = "asn-items"; yang_parent_name = "AsSeg-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::~AsnItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_operation() const
{
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "asn-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsItem-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList>();
        ent_->parent = this;
        asitem_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asitem_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsItem-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::AsItemList()
    :
    order{YType::uint16, "order"},
    asn{YType::str, "asn"}
{

    yang_name = "AsItem-list"; yang_parent_name = "asn-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::~AsItemList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| asn.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(asn.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsItem-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (asn.is_set || is_set(asn.yfilter)) leaf_name_data.push_back(asn.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asn")
    {
        asn = value;
        asn.value_namespace = name_space;
        asn.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "asn")
    {
        asn.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "order" || name == "asn")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RcommItems()
    :
    regcomm_list(this, {"community"})
{

    yang_name = "rcomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::~RcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::has_operation() const
{
    for (std::size_t index=0; index<regcomm_list.len(); index++)
    {
        if(regcomm_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rcomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "RegComm-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList>();
        ent_->parent = this;
        regcomm_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : regcomm_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "RegComm-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList::RegCommList()
    :
    community{YType::str, "community"}
{

    yang_name = "RegComm-list"; yang_parent_name = "rcomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList::~RegCommList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "RegComm-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::RcommItems::RegCommList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::EcommItems()
    :
    encap{YType::str, "encap"},
    rtrmac{YType::str, "rtrMac"}
        ,
    rt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems>())
{
    rt_items->parent = this;

    yang_name = "ecomm-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::~EcommItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::has_data() const
{
    if (is_presence_container) return true;
    return encap.is_set
	|| rtrmac.is_set
	|| (rt_items !=  nullptr && rt_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(encap.yfilter)
	|| ydk::is_set(rtrmac.yfilter)
	|| (rt_items !=  nullptr && rt_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ecomm-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (encap.is_set || is_set(encap.yfilter)) leaf_name_data.push_back(encap.get_name_leafdata());
    if (rtrmac.is_set || is_set(rtrmac.yfilter)) leaf_name_data.push_back(rtrmac.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "rt-items")
    {
        if(rt_items == nullptr)
        {
            rt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems>();
        }
        return rt_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(rt_items != nullptr)
    {
        _children["rt-items"] = rt_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "encap")
    {
        encap = value;
        encap.value_namespace = name_space;
        encap.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtrMac")
    {
        rtrmac = value;
        rtrmac.value_namespace = name_space;
        rtrmac.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "encap")
    {
        encap.yfilter = yfilter;
    }
    if(value_path == "rtrMac")
    {
        rtrmac.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "rt-items" || name == "encap" || name == "rtrMac")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::RtItems()
    :
    extcommrt_list(this, {"community"})
{

    yang_name = "rt-items"; yang_parent_name = "ecomm-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::~RtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::has_operation() const
{
    for (std::size_t index=0; index<extcommrt_list.len(); index++)
    {
        if(extcommrt_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ExtCommRt-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList>();
        ent_->parent = this;
        extcommrt_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : extcommrt_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ExtCommRt-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::ExtCommRtList()
    :
    community{YType::str, "community"}
{

    yang_name = "ExtCommRt-list"; yang_parent_name = "rt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::~ExtCommRtList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_data() const
{
    if (is_presence_container) return true;
    return community.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(community.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ExtCommRt-list";
    ADD_KEY_TOKEN(community, "community");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (community.is_set || is_set(community.yfilter)) leaf_name_data.push_back(community.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "community")
    {
        community = value;
        community.value_namespace = name_space;
        community.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "community")
    {
        community.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::EcommItems::RtItems::ExtCommRtList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "community")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::LnkstattrItems()
    :
    lnkattrflags{YType::str, "lnkAttrFlags"},
    attrlen{YType::uint16, "attrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "lnkstattr-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::~LnkstattrItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::has_data() const
{
    if (is_presence_container) return true;
    return lnkattrflags.is_set
	|| attrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(lnkattrflags.yfilter)
	|| ydk::is_set(attrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lnkstattr-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (lnkattrflags.is_set || is_set(lnkattrflags.yfilter)) leaf_name_data.push_back(lnkattrflags.get_name_leafdata());
    if (attrlen.is_set || is_set(attrlen.yfilter)) leaf_name_data.push_back(attrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags = value;
        lnkattrflags.value_namespace = name_space;
        lnkattrflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "attrLen")
    {
        attrlen = value;
        attrlen.value_namespace = name_space;
        attrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "lnkAttrFlags")
    {
        lnkattrflags.yfilter = yfilter;
    }
    if(value_path == "attrLen")
    {
        attrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "lnkAttrFlags" || name == "attrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::TlvItems()
    :
    lnkstattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "lnkstattr-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<lnkstattrentry_list.len(); index++)
    {
        if(lnkstattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "LnkStAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList>();
        ent_->parent = this;
        lnkstattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : lnkstattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "LnkStAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::LnkStAttrEntryList()
    :
    type{YType::enumeration, "type"},
    val{YType::str, "val"}
{

    yang_name = "LnkStAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::~LnkStAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "LnkStAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::LnkstattrItems::TlvItems::LnkStAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::PfxsidItems()
    :
    pfxsidattrlen{YType::uint16, "pfxSidAttrLen"}
        ,
    tlv_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems>())
{
    tlv_items->parent = this;

    yang_name = "pfxsid-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::~PfxsidItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::has_data() const
{
    if (is_presence_container) return true;
    return pfxsidattrlen.is_set
	|| (tlv_items !=  nullptr && tlv_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfxsidattrlen.yfilter)
	|| (tlv_items !=  nullptr && tlv_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pfxsid-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfxsidattrlen.is_set || is_set(pfxsidattrlen.yfilter)) leaf_name_data.push_back(pfxsidattrlen.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "tlv-items")
    {
        if(tlv_items == nullptr)
        {
            tlv_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems>();
        }
        return tlv_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(tlv_items != nullptr)
    {
        _children["tlv-items"] = tlv_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen = value;
        pfxsidattrlen.value_namespace = name_space;
        pfxsidattrlen.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfxSidAttrLen")
    {
        pfxsidattrlen.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tlv-items" || name == "pfxSidAttrLen")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::TlvItems()
    :
    pfxsidattrentry_list(this, {"type"})
{

    yang_name = "tlv-items"; yang_parent_name = "pfxsid-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::~TlvItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_operation() const
{
    for (std::size_t index=0; index<pfxsidattrentry_list.len(); index++)
    {
        if(pfxsidattrentry_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tlv-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "PfxSidAttrEntry-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList>();
        ent_->parent = this;
        pfxsidattrentry_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : pfxsidattrentry_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "PfxSidAttrEntry-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::PfxSidAttrEntryList()
    :
    type{YType::enumeration, "type"},
    len{YType::uint16, "len"},
    val{YType::str, "val"}
{

    yang_name = "PfxSidAttrEntry-list"; yang_parent_name = "tlv-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::~PfxSidAttrEntryList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| len.is_set
	|| val.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(len.yfilter)
	|| ydk::is_set(val.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "PfxSidAttrEntry-list";
    ADD_KEY_TOKEN(type, "type");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (len.is_set || is_set(len.yfilter)) leaf_name_data.push_back(len.get_name_leafdata());
    if (val.is_set || is_set(val.yfilter)) leaf_name_data.push_back(val.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "len")
    {
        len = value;
        len.value_namespace = name_space;
        len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "val")
    {
        val = value;
        val.value_namespace = name_space;
        val.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "len")
    {
        len.yfilter = yfilter;
    }
    if(value_path == "val")
    {
        val.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PfxsidItems::TlvItems::PfxSidAttrEntryList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "type" || name == "len" || name == "val")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems::PmsiItems()
    :
    flags{YType::str, "flags"},
    tuntype{YType::enumeration, "tunType"},
    lbl{YType::uint32, "lbl"},
    tunid{YType::str, "tunId"}
{

    yang_name = "pmsi-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems::~PmsiItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems::has_data() const
{
    if (is_presence_container) return true;
    return flags.is_set
	|| tuntype.is_set
	|| lbl.is_set
	|| tunid.is_set;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(tuntype.yfilter)
	|| ydk::is_set(lbl.yfilter)
	|| ydk::is_set(tunid.yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pmsi-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (tuntype.is_set || is_set(tuntype.yfilter)) leaf_name_data.push_back(tuntype.get_name_leafdata());
    if (lbl.is_set || is_set(lbl.yfilter)) leaf_name_data.push_back(lbl.get_name_leafdata());
    if (tunid.is_set || is_set(tunid.yfilter)) leaf_name_data.push_back(tunid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunType")
    {
        tuntype = value;
        tuntype.value_namespace = name_space;
        tuntype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lbl")
    {
        lbl = value;
        lbl.value_namespace = name_space;
        lbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunId")
    {
        tunid = value;
        tunid.value_namespace = name_space;
        tunid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "tunType")
    {
        tuntype.yfilter = yfilter;
    }
    if(value_path == "lbl")
    {
        lbl.yfilter = yfilter;
    }
    if(value_path == "tunId")
    {
        tunid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::MvpnrtItems::MvpnRouteList::PathItems::PathList::PmsiItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "flags" || name == "tunType" || name == "lbl" || name == "tunId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::ImportedrtItems()
    :
    rt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems>())
    , vpnrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::VpnrtItems>())
    , lblrt_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::LblrtItems>())
{
    rt_items->parent = this;
    vpnrt_items->parent = this;
    lblrt_items->parent = this;

    yang_name = "importedrt-items"; yang_parent_name = "DomAf-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::~ImportedrtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::has_data() const
{
    if (is_presence_container) return true;
    return (rt_items !=  nullptr && rt_items->has_data())
	|| (vpnrt_items !=  nullptr && vpnrt_items->has_data())
	|| (lblrt_items !=  nullptr && lblrt_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::has_operation() const
{
    return is_set(yfilter)
	|| (rt_items !=  nullptr && rt_items->has_operation())
	|| (vpnrt_items !=  nullptr && vpnrt_items->has_operation())
	|| (lblrt_items !=  nullptr && lblrt_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "importedrt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "rt-items")
    {
        if(rt_items == nullptr)
        {
            rt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems>();
        }
        return rt_items;
    }

    if(child_yang_name == "vpnrt-items")
    {
        if(vpnrt_items == nullptr)
        {
            vpnrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::VpnrtItems>();
        }
        return vpnrt_items;
    }

    if(child_yang_name == "lblrt-items")
    {
        if(lblrt_items == nullptr)
        {
            lblrt_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::LblrtItems>();
        }
        return lblrt_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(rt_items != nullptr)
    {
        _children["rt-items"] = rt_items;
    }

    if(vpnrt_items != nullptr)
    {
        _children["vpnrt-items"] = vpnrt_items;
    }

    if(lblrt_items != nullptr)
    {
        _children["lblrt-items"] = lblrt_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "rt-items" || name == "vpnrt-items" || name == "lblrt-items")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RtItems()
    :
    route_list(this, {"pfx"})
{

    yang_name = "rt-items"; yang_parent_name = "importedrt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::~RtItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<route_list.len(); index++)
    {
        if(route_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::has_operation() const
{
    for (std::size_t index=0; index<route_list.len(); index++)
    {
        if(route_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rt-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "Route-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList>();
        ent_->parent = this;
        route_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : route_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "Route-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::RouteList()
    :
    pfx{YType::str, "pfx"},
    name{YType::str, "name"},
    ver{YType::uint32, "ver"},
    rtflags{YType::str, "rtFlags"},
    numpaths{YType::uint32, "numPaths"},
    bestpathid{YType::uint32, "bestPathId"}
        ,
    path_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems>())
{
    path_items->parent = this;

    yang_name = "Route-list"; yang_parent_name = "rt-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::~RouteList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::has_data() const
{
    if (is_presence_container) return true;
    return pfx.is_set
	|| name.is_set
	|| ver.is_set
	|| rtflags.is_set
	|| numpaths.is_set
	|| bestpathid.is_set
	|| (path_items !=  nullptr && path_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfx.yfilter)
	|| ydk::is_set(name.yfilter)
	|| ydk::is_set(ver.yfilter)
	|| ydk::is_set(rtflags.yfilter)
	|| ydk::is_set(numpaths.yfilter)
	|| ydk::is_set(bestpathid.yfilter)
	|| (path_items !=  nullptr && path_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Route-list";
    ADD_KEY_TOKEN(pfx, "pfx");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfx.is_set || is_set(pfx.yfilter)) leaf_name_data.push_back(pfx.get_name_leafdata());
    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());
    if (ver.is_set || is_set(ver.yfilter)) leaf_name_data.push_back(ver.get_name_leafdata());
    if (rtflags.is_set || is_set(rtflags.yfilter)) leaf_name_data.push_back(rtflags.get_name_leafdata());
    if (numpaths.is_set || is_set(numpaths.yfilter)) leaf_name_data.push_back(numpaths.get_name_leafdata());
    if (bestpathid.is_set || is_set(bestpathid.yfilter)) leaf_name_data.push_back(bestpathid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "path-items")
    {
        if(path_items == nullptr)
        {
            path_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems>();
        }
        return path_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(path_items != nullptr)
    {
        _children["path-items"] = path_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfx")
    {
        pfx = value;
        pfx.value_namespace = name_space;
        pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ver")
    {
        ver = value;
        ver.value_namespace = name_space;
        ver.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rtFlags")
    {
        rtflags = value;
        rtflags.value_namespace = name_space;
        rtflags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "numPaths")
    {
        numpaths = value;
        numpaths.value_namespace = name_space;
        numpaths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bestPathId")
    {
        bestpathid = value;
        bestpathid.value_namespace = name_space;
        bestpathid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfx")
    {
        pfx.yfilter = yfilter;
    }
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
    if(value_path == "ver")
    {
        ver.yfilter = yfilter;
    }
    if(value_path == "rtFlags")
    {
        rtflags.yfilter = yfilter;
    }
    if(value_path == "numPaths")
    {
        numpaths.yfilter = yfilter;
    }
    if(value_path == "bestPathId")
    {
        bestpathid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "path-items" || name == "pfx" || name == "name" || name == "ver" || name == "rtFlags" || name == "numPaths" || name == "bestPathId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathItems()
    :
    path_list(this, {"peer", "id", "nh", "importedrd", "origimportedrd"})
{

    yang_name = "path-items"; yang_parent_name = "Route-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::~PathItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::has_operation() const
{
    for (std::size_t index=0; index<path_list.len(); index++)
    {
        if(path_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "path-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "Path-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList>();
        ent_->parent = this;
        path_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : path_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "Path-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::PathList()
    :
    peer{YType::str, "peer"},
    id{YType::uint32, "id"},
    nh{YType::str, "nh"},
    importedrd{YType::str, "importedRd"},
    origimportedrd{YType::str, "origImportedRd"},
    nhmetric{YType::uint32, "nhMetric"},
    type{YType::enumeration, "type"},
    operst{YType::enumeration, "operSt"},
    flags{YType::str, "flags"},
    origin{YType::enumeration, "origin"},
    metric{YType::uint32, "metric"},
    localpref{YType::uint32, "localPref"},
    weight{YType::uint16, "weight"},
    aggr{YType::str, "aggr"},
    aggras{YType::str, "aggrAs"},
    unknownattrdata{YType::str, "unknownAttrData"},
    unknownattrlen{YType::uint32, "unknownAttrLen"},
    regcomm{YType::str, "regComm"},
    extcomm{YType::str, "extComm"},
    aspath{YType::str, "asPath"},
    rcvdlbl{YType::str, "rcvdLbl"},
    originatorid{YType::str, "originatorId"},
    clusterlst{YType::str, "clusterLst"},
    peerrtrid{YType::str, "peerRtrId"}
        ,
    seg_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems>())
    , rcomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::RcommItems>())
    , ecomm_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::EcommItems>())
    , lnkstattr_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::LnkstattrItems>())
    , pfxsid_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::PfxsidItems>())
    , pmsi_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::PmsiItems>())
{
    seg_items->parent = this;
    rcomm_items->parent = this;
    ecomm_items->parent = this;
    lnkstattr_items->parent = this;
    pfxsid_items->parent = this;
    pmsi_items->parent = this;

    yang_name = "Path-list"; yang_parent_name = "path-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::~PathList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::has_data() const
{
    if (is_presence_container) return true;
    return peer.is_set
	|| id.is_set
	|| nh.is_set
	|| importedrd.is_set
	|| origimportedrd.is_set
	|| nhmetric.is_set
	|| type.is_set
	|| operst.is_set
	|| flags.is_set
	|| origin.is_set
	|| metric.is_set
	|| localpref.is_set
	|| weight.is_set
	|| aggr.is_set
	|| aggras.is_set
	|| unknownattrdata.is_set
	|| unknownattrlen.is_set
	|| regcomm.is_set
	|| extcomm.is_set
	|| aspath.is_set
	|| rcvdlbl.is_set
	|| originatorid.is_set
	|| clusterlst.is_set
	|| peerrtrid.is_set
	|| (seg_items !=  nullptr && seg_items->has_data())
	|| (rcomm_items !=  nullptr && rcomm_items->has_data())
	|| (ecomm_items !=  nullptr && ecomm_items->has_data())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_data())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_data())
	|| (pmsi_items !=  nullptr && pmsi_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(peer.yfilter)
	|| ydk::is_set(id.yfilter)
	|| ydk::is_set(nh.yfilter)
	|| ydk::is_set(importedrd.yfilter)
	|| ydk::is_set(origimportedrd.yfilter)
	|| ydk::is_set(nhmetric.yfilter)
	|| ydk::is_set(type.yfilter)
	|| ydk::is_set(operst.yfilter)
	|| ydk::is_set(flags.yfilter)
	|| ydk::is_set(origin.yfilter)
	|| ydk::is_set(metric.yfilter)
	|| ydk::is_set(localpref.yfilter)
	|| ydk::is_set(weight.yfilter)
	|| ydk::is_set(aggr.yfilter)
	|| ydk::is_set(aggras.yfilter)
	|| ydk::is_set(unknownattrdata.yfilter)
	|| ydk::is_set(unknownattrlen.yfilter)
	|| ydk::is_set(regcomm.yfilter)
	|| ydk::is_set(extcomm.yfilter)
	|| ydk::is_set(aspath.yfilter)
	|| ydk::is_set(rcvdlbl.yfilter)
	|| ydk::is_set(originatorid.yfilter)
	|| ydk::is_set(clusterlst.yfilter)
	|| ydk::is_set(peerrtrid.yfilter)
	|| (seg_items !=  nullptr && seg_items->has_operation())
	|| (rcomm_items !=  nullptr && rcomm_items->has_operation())
	|| (ecomm_items !=  nullptr && ecomm_items->has_operation())
	|| (lnkstattr_items !=  nullptr && lnkstattr_items->has_operation())
	|| (pfxsid_items !=  nullptr && pfxsid_items->has_operation())
	|| (pmsi_items !=  nullptr && pmsi_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Path-list";
    ADD_KEY_TOKEN(peer, "peer");
    ADD_KEY_TOKEN(id, "id");
    ADD_KEY_TOKEN(nh, "nh");
    ADD_KEY_TOKEN(importedrd, "importedRd");
    ADD_KEY_TOKEN(origimportedrd, "origImportedRd");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (peer.is_set || is_set(peer.yfilter)) leaf_name_data.push_back(peer.get_name_leafdata());
    if (id.is_set || is_set(id.yfilter)) leaf_name_data.push_back(id.get_name_leafdata());
    if (nh.is_set || is_set(nh.yfilter)) leaf_name_data.push_back(nh.get_name_leafdata());
    if (importedrd.is_set || is_set(importedrd.yfilter)) leaf_name_data.push_back(importedrd.get_name_leafdata());
    if (origimportedrd.is_set || is_set(origimportedrd.yfilter)) leaf_name_data.push_back(origimportedrd.get_name_leafdata());
    if (nhmetric.is_set || is_set(nhmetric.yfilter)) leaf_name_data.push_back(nhmetric.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());
    if (operst.is_set || is_set(operst.yfilter)) leaf_name_data.push_back(operst.get_name_leafdata());
    if (flags.is_set || is_set(flags.yfilter)) leaf_name_data.push_back(flags.get_name_leafdata());
    if (origin.is_set || is_set(origin.yfilter)) leaf_name_data.push_back(origin.get_name_leafdata());
    if (metric.is_set || is_set(metric.yfilter)) leaf_name_data.push_back(metric.get_name_leafdata());
    if (localpref.is_set || is_set(localpref.yfilter)) leaf_name_data.push_back(localpref.get_name_leafdata());
    if (weight.is_set || is_set(weight.yfilter)) leaf_name_data.push_back(weight.get_name_leafdata());
    if (aggr.is_set || is_set(aggr.yfilter)) leaf_name_data.push_back(aggr.get_name_leafdata());
    if (aggras.is_set || is_set(aggras.yfilter)) leaf_name_data.push_back(aggras.get_name_leafdata());
    if (unknownattrdata.is_set || is_set(unknownattrdata.yfilter)) leaf_name_data.push_back(unknownattrdata.get_name_leafdata());
    if (unknownattrlen.is_set || is_set(unknownattrlen.yfilter)) leaf_name_data.push_back(unknownattrlen.get_name_leafdata());
    if (regcomm.is_set || is_set(regcomm.yfilter)) leaf_name_data.push_back(regcomm.get_name_leafdata());
    if (extcomm.is_set || is_set(extcomm.yfilter)) leaf_name_data.push_back(extcomm.get_name_leafdata());
    if (aspath.is_set || is_set(aspath.yfilter)) leaf_name_data.push_back(aspath.get_name_leafdata());
    if (rcvdlbl.is_set || is_set(rcvdlbl.yfilter)) leaf_name_data.push_back(rcvdlbl.get_name_leafdata());
    if (originatorid.is_set || is_set(originatorid.yfilter)) leaf_name_data.push_back(originatorid.get_name_leafdata());
    if (clusterlst.is_set || is_set(clusterlst.yfilter)) leaf_name_data.push_back(clusterlst.get_name_leafdata());
    if (peerrtrid.is_set || is_set(peerrtrid.yfilter)) leaf_name_data.push_back(peerrtrid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "seg-items")
    {
        if(seg_items == nullptr)
        {
            seg_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems>();
        }
        return seg_items;
    }

    if(child_yang_name == "rcomm-items")
    {
        if(rcomm_items == nullptr)
        {
            rcomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::RcommItems>();
        }
        return rcomm_items;
    }

    if(child_yang_name == "ecomm-items")
    {
        if(ecomm_items == nullptr)
        {
            ecomm_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::EcommItems>();
        }
        return ecomm_items;
    }

    if(child_yang_name == "lnkstattr-items")
    {
        if(lnkstattr_items == nullptr)
        {
            lnkstattr_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::LnkstattrItems>();
        }
        return lnkstattr_items;
    }

    if(child_yang_name == "pfxsid-items")
    {
        if(pfxsid_items == nullptr)
        {
            pfxsid_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::PfxsidItems>();
        }
        return pfxsid_items;
    }

    if(child_yang_name == "pmsi-items")
    {
        if(pmsi_items == nullptr)
        {
            pmsi_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::PmsiItems>();
        }
        return pmsi_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(seg_items != nullptr)
    {
        _children["seg-items"] = seg_items;
    }

    if(rcomm_items != nullptr)
    {
        _children["rcomm-items"] = rcomm_items;
    }

    if(ecomm_items != nullptr)
    {
        _children["ecomm-items"] = ecomm_items;
    }

    if(lnkstattr_items != nullptr)
    {
        _children["lnkstattr-items"] = lnkstattr_items;
    }

    if(pfxsid_items != nullptr)
    {
        _children["pfxsid-items"] = pfxsid_items;
    }

    if(pmsi_items != nullptr)
    {
        _children["pmsi-items"] = pmsi_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "peer")
    {
        peer = value;
        peer.value_namespace = name_space;
        peer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "id")
    {
        id = value;
        id.value_namespace = name_space;
        id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh")
    {
        nh = value;
        nh.value_namespace = name_space;
        nh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "importedRd")
    {
        importedrd = value;
        importedrd.value_namespace = name_space;
        importedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd = value;
        origimportedrd.value_namespace = name_space;
        origimportedrd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nhMetric")
    {
        nhmetric = value;
        nhmetric.value_namespace = name_space;
        nhmetric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "operSt")
    {
        operst = value;
        operst.value_namespace = name_space;
        operst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flags")
    {
        flags = value;
        flags.value_namespace = name_space;
        flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "origin")
    {
        origin = value;
        origin.value_namespace = name_space;
        origin.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "metric")
    {
        metric = value;
        metric.value_namespace = name_space;
        metric.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "localPref")
    {
        localpref = value;
        localpref.value_namespace = name_space;
        localpref.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight")
    {
        weight = value;
        weight.value_namespace = name_space;
        weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggr")
    {
        aggr = value;
        aggr.value_namespace = name_space;
        aggr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aggrAs")
    {
        aggras = value;
        aggras.value_namespace = name_space;
        aggras.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata = value;
        unknownattrdata.value_namespace = name_space;
        unknownattrdata.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen = value;
        unknownattrlen.value_namespace = name_space;
        unknownattrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "regComm")
    {
        regcomm = value;
        regcomm.value_namespace = name_space;
        regcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extComm")
    {
        extcomm = value;
        extcomm.value_namespace = name_space;
        extcomm.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "asPath")
    {
        aspath = value;
        aspath.value_namespace = name_space;
        aspath.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl = value;
        rcvdlbl.value_namespace = name_space;
        rcvdlbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "originatorId")
    {
        originatorid = value;
        originatorid.value_namespace = name_space;
        originatorid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "clusterLst")
    {
        clusterlst = value;
        clusterlst.value_namespace = name_space;
        clusterlst.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid = value;
        peerrtrid.value_namespace = name_space;
        peerrtrid.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "peer")
    {
        peer.yfilter = yfilter;
    }
    if(value_path == "id")
    {
        id.yfilter = yfilter;
    }
    if(value_path == "nh")
    {
        nh.yfilter = yfilter;
    }
    if(value_path == "importedRd")
    {
        importedrd.yfilter = yfilter;
    }
    if(value_path == "origImportedRd")
    {
        origimportedrd.yfilter = yfilter;
    }
    if(value_path == "nhMetric")
    {
        nhmetric.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
    if(value_path == "operSt")
    {
        operst.yfilter = yfilter;
    }
    if(value_path == "flags")
    {
        flags.yfilter = yfilter;
    }
    if(value_path == "origin")
    {
        origin.yfilter = yfilter;
    }
    if(value_path == "metric")
    {
        metric.yfilter = yfilter;
    }
    if(value_path == "localPref")
    {
        localpref.yfilter = yfilter;
    }
    if(value_path == "weight")
    {
        weight.yfilter = yfilter;
    }
    if(value_path == "aggr")
    {
        aggr.yfilter = yfilter;
    }
    if(value_path == "aggrAs")
    {
        aggras.yfilter = yfilter;
    }
    if(value_path == "unknownAttrData")
    {
        unknownattrdata.yfilter = yfilter;
    }
    if(value_path == "unknownAttrLen")
    {
        unknownattrlen.yfilter = yfilter;
    }
    if(value_path == "regComm")
    {
        regcomm.yfilter = yfilter;
    }
    if(value_path == "extComm")
    {
        extcomm.yfilter = yfilter;
    }
    if(value_path == "asPath")
    {
        aspath.yfilter = yfilter;
    }
    if(value_path == "rcvdLbl")
    {
        rcvdlbl.yfilter = yfilter;
    }
    if(value_path == "originatorId")
    {
        originatorid.yfilter = yfilter;
    }
    if(value_path == "clusterLst")
    {
        clusterlst.yfilter = yfilter;
    }
    if(value_path == "peerRtrId")
    {
        peerrtrid.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "seg-items" || name == "rcomm-items" || name == "ecomm-items" || name == "lnkstattr-items" || name == "pfxsid-items" || name == "pmsi-items" || name == "peer" || name == "id" || name == "nh" || name == "importedRd" || name == "origImportedRd" || name == "nhMetric" || name == "type" || name == "operSt" || name == "flags" || name == "origin" || name == "metric" || name == "localPref" || name == "weight" || name == "aggr" || name == "aggrAs" || name == "unknownAttrData" || name == "unknownAttrLen" || name == "regComm" || name == "extComm" || name == "asPath" || name == "rcvdLbl" || name == "originatorId" || name == "clusterLst" || name == "peerRtrId")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::SegItems()
    :
    asseg_list(this, {"order"})
{

    yang_name = "seg-items"; yang_parent_name = "Path-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::~SegItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::has_operation() const
{
    for (std::size_t index=0; index<asseg_list.len(); index++)
    {
        if(asseg_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "seg-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsSeg-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList>();
        ent_->parent = this;
        asseg_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asseg_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsSeg-list")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsSegList()
    :
    order{YType::uint16, "order"},
    type{YType::enumeration, "type"}
        ,
    asn_items(std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>())
{
    asn_items->parent = this;

    yang_name = "AsSeg-list"; yang_parent_name = "seg-items"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::~AsSegList()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::has_data() const
{
    if (is_presence_container) return true;
    return order.is_set
	|| type.is_set
	|| (asn_items !=  nullptr && asn_items->has_data());
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(order.yfilter)
	|| ydk::is_set(type.yfilter)
	|| (asn_items !=  nullptr && asn_items->has_operation());
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "AsSeg-list";
    ADD_KEY_TOKEN(order, "order");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (order.is_set || is_set(order.yfilter)) leaf_name_data.push_back(order.get_name_leafdata());
    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "asn-items")
    {
        if(asn_items == nullptr)
        {
            asn_items = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems>();
        }
        return asn_items;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(asn_items != nullptr)
    {
        _children["asn-items"] = asn_items;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "order")
    {
        order = value;
        order.value_namespace = name_space;
        order.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "order")
    {
        order.yfilter = yfilter;
    }
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "asn-items" || name == "order" || name == "type")
        return true;
    return false;
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsnItems()
    :
    asitem_list(this, {"order"})
{

    yang_name = "asn-items"; yang_parent_name = "AsSeg-list"; is_top_level_class = false; has_list_ancestor = true; 
}

System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::~AsnItems()
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_data())
            return true;
    }
    return false;
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_operation() const
{
    for (std::size_t index=0; index<asitem_list.len(); index++)
    {
        if(asitem_list[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "asn-items";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "AsItem-list")
    {
        auto ent_ = std::make_shared<System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::AsItemList>();
        ent_->parent = this;
        asitem_list.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : asitem_list.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool System::BgpItems::InstItems::DomItems::DomList::AfItems::DomAfList::ImportedrtItems::RtItems::RouteList::PathItems::PathList::SegItems::AsSegList::AsnItems::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "AsItem-list")
        return true;
    return false;
}

const Enum::YLeaf VrrpPreempt::enabled {1, "enabled"};
const Enum::YLeaf VrrpPreempt::disabled {2, "disabled"};

const Enum::YLeaf FlowSamplerMode::unspecified {0, "unspecified"};
const Enum::YLeaf FlowSamplerMode::flow {1, "flow"};
const Enum::YLeaf FlowSamplerMode::pkts {2, "pkts"};

const Enum::YLeaf NgmvpnAfT::ipv4 {0, "ipv4"};
const Enum::YLeaf NgmvpnAfT::ipv6 {1, "ipv6"};

const Enum::YLeaf AaaKeyEncLdapProviderKeyEnc::Y_0 {0, "0"};
const Enum::YLeaf AaaKeyEncLdapProviderKeyEnc::Y_6 {6, "6"};
const Enum::YLeaf AaaKeyEncLdapProviderKeyEnc::Y_7 {7, "7"};
const Enum::YLeaf AaaKeyEncLdapProviderKeyEnc::inherit_from_global {255, "inherit-from-global"};

const Enum::YLeaf RelnStateQual::none {0, "none"};
const Enum::YLeaf RelnStateQual::mismatch_target {1, "mismatch-target"};
const Enum::YLeaf RelnStateQual::default_target {2, "default-target"};

const Enum::YLeaf AnalyticsFltType::ipv4 {1, "ipv4"};
const Enum::YLeaf AnalyticsFltType::ipv6 {2, "ipv6"};
const Enum::YLeaf AnalyticsFltType::ce {3, "ce"};

const Enum::YLeaf SatmOperSt::unknown {0, "unknown"};
const Enum::YLeaf SatmOperSt::up {1, "up"};
const Enum::YLeaf SatmOperSt::down {2, "down"};
const Enum::YLeaf SatmOperSt::failed {3, "failed"};

const Enum::YLeaf MribMultipathMode::none {1, "none"};
const Enum::YLeaf MribMultipathMode::nbm {2, "nbm"};
const Enum::YLeaf MribMultipathMode::null {3, "null"};
const Enum::YLeaf MribMultipathMode::s_g_hash {4, "s-g-hash"};
const Enum::YLeaf MribMultipathMode::legacy {5, "legacy"};
const Enum::YLeaf MribMultipathMode::resilient {6, "resilient"};
const Enum::YLeaf MribMultipathMode::s_g_hash_next_hop {7, "s-g-hash-next-hop"};

const Enum::YLeaf BfdAuthInterop::enable {1, "enable"};
const Enum::YLeaf BfdAuthInterop::disable {0, "disable"};

const Enum::YLeaf IgmpsnoopEhType::igmp_snoop_internal {0, "igmp-snoop-internal"};
const Enum::YLeaf IgmpsnoopEhType::mfdm {1, "mfdm"};
const Enum::YLeaf IgmpsnoopEhType::mfdm_sum {2, "mfdm-sum"};
const Enum::YLeaf IgmpsnoopEhType::rib {3, "rib"};
const Enum::YLeaf IgmpsnoopEhType::vlan {4, "vlan"};
const Enum::YLeaf IgmpsnoopEhType::vlan_events {5, "vlan-events"};
const Enum::YLeaf IgmpsnoopEhType::vpc {6, "vpc"};

const Enum::YLeaf StpSimulate::enabled {1, "enabled"};
const Enum::YLeaf StpSimulate::disabled {2, "disabled"};

const Enum::YLeaf NwAdminStIfStatIcmpRedirect::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStIfStatIcmpRedirect::disabled {2, "disabled"};

const Enum::YLeaf FsetAdminState::none {0, "none"};
const Enum::YLeaf FsetAdminState::enabled {1, "enabled"};
const Enum::YLeaf FsetAdminState::disabled {2, "disabled"};
const Enum::YLeaf FsetAdminState::installed {3, "installed"};
const Enum::YLeaf FsetAdminState::uninstalled {4, "uninstalled"};

const Enum::YLeaf L2EnfPref::sw {1, "sw"};
const Enum::YLeaf L2EnfPref::hw {2, "hw"};

const Enum::YLeaf SatmFpFsmSt::unknown {0, "unknown"};
const Enum::YLeaf SatmFpFsmSt::created {1, "created"};
const Enum::YLeaf SatmFpFsmSt::discovered {2, "discovered"};
const Enum::YLeaf SatmFpFsmSt::configured {3, "configured"};
const Enum::YLeaf SatmFpFsmSt::up {4, "up"};
const Enum::YLeaf SatmFpFsmSt::connecting {5, "connecting"};
const Enum::YLeaf SatmFpFsmSt::active {6, "active"};
const Enum::YLeaf SatmFpFsmSt::incompatible {7, "incompatible"};
const Enum::YLeaf SatmFpFsmSt::disconnected {8, "disconnected"};
const Enum::YLeaf SatmFpFsmSt::id_mismatch {9, "id-mismatch"};

const Enum::YLeaf BgpMajNotifErr::none {0, "none"};
const Enum::YLeaf BgpMajNotifErr::hdr_err {1, "hdr-err"};
const Enum::YLeaf BgpMajNotifErr::open_msg_err {2, "open-msg-err"};
const Enum::YLeaf BgpMajNotifErr::upd_msg_err {3, "upd-msg-err"};
const Enum::YLeaf BgpMajNotifErr::hold_timer_exp {4, "hold-timer-exp"};
const Enum::YLeaf BgpMajNotifErr::fsm_err {5, "fsm-err"};
const Enum::YLeaf BgpMajNotifErr::cease_err {6, "cease-err"};
const Enum::YLeaf BgpMajNotifErr::cap_msg_err {7, "cap-msg-err"};
const Enum::YLeaf BgpMajNotifErr::process_restart_err {101, "process-restart-err"};
const Enum::YLeaf BgpMajNotifErr::fd_read_err {102, "fd-read-err"};
const Enum::YLeaf BgpMajNotifErr::fd_ioctl_err {103, "fd-ioctl-err"};
const Enum::YLeaf BgpMajNotifErr::peer_close_sess_err {104, "peer-close-sess-err"};
const Enum::YLeaf BgpMajNotifErr::rcvd_notif_err {105, "rcvd-notif-err"};
const Enum::YLeaf BgpMajNotifErr::rcvd_dup_conn_req {106, "rcvd-dup-conn-req"};
const Enum::YLeaf BgpMajNotifErr::dyn_cap_no_buf {107, "dyn-cap-no-buf"};

const Enum::YLeaf IpHardwareEcmpHashPolynomialT::CRC16 {0, "CRC16"};
const Enum::YLeaf IpHardwareEcmpHashPolynomialT::CRC32HI {1, "CRC32HI"};

const Enum::YLeaf AggregateAdminState::unknown {0, "unknown"};
const Enum::YLeaf AggregateAdminState::up {1, "up"};
const Enum::YLeaf AggregateAdminState::down {2, "down"};

const Enum::YLeaf NdStAdjOperStQual::subnet_mismatch {1, "subnet-mismatch"};
const Enum::YLeaf NdStAdjOperStQual::invalid_mac {2, "invalid-mac"};
const Enum::YLeaf NdStAdjOperStQual::invalid_ip {3, "invalid-ip"};
const Enum::YLeaf NdStAdjOperStQual::invalid_vrf {4, "invalid-vrf"};
const Enum::YLeaf NdStAdjOperStQual::own_mac {5, "own-mac"};
const Enum::YLeaf NdStAdjOperStQual::if_down {6, "if-down"};
const Enum::YLeaf NdStAdjOperStQual::up {7, "up"};

const Enum::YLeaf SnmpTcpSessionAuthT::no {0, "no"};
const Enum::YLeaf SnmpTcpSessionAuthT::tcpSess {1, "tcpSess"};
const Enum::YLeaf SnmpTcpSessionAuthT::tcpSessAuth {2, "tcpSessAuth"};

const Enum::YLeaf NvoEncapT::unknown {0, "unknown"};
const Enum::YLeaf NvoEncapT::vxlan {1, "vxlan"};
const Enum::YLeaf NvoEncapT::vxlan_tun_ctrl_frame {2, "vxlan-tun-ctrl-frame"};
const Enum::YLeaf NvoEncapT::vxlan_tun_ctrl_frame_lacp {3, "vxlan-tun-ctrl-frame-lacp"};
const Enum::YLeaf NvoEncapT::vxlan_tun_ctrl_frame_stp {4, "vxlan-tun-ctrl-frame-stp"};
const Enum::YLeaf NvoEncapT::dot1q {5, "dot1q"};
const Enum::YLeaf NvoEncapT::dot1q_tun_ctrl_frame {6, "dot1q-tun-ctrl-frame"};
const Enum::YLeaf NvoEncapT::dot1q_tun_ctrl_frame_lacp {7, "dot1q-tun-ctrl-frame-lacp"};
const Enum::YLeaf NvoEncapT::dot1q_tun_ctrl_frame_stp {8, "dot1q-tun-ctrl-frame-stp"};

const Enum::YLeaf EqptcapConnT::unspecified {0, "unspecified"};
const Enum::YLeaf EqptcapConnT::sc {1, "sc"};
const Enum::YLeaf EqptcapConnT::fc1_copper {2, "fc1-copper"};
const Enum::YLeaf EqptcapConnT::fc2_copper {3, "fc2-copper"};
const Enum::YLeaf EqptcapConnT::bnc_tnc {4, "bnc-tnc"};
const Enum::YLeaf EqptcapConnT::fc_coax {5, "fc-coax"};
const Enum::YLeaf EqptcapConnT::fiber_jack {6, "fiber-jack"};
const Enum::YLeaf EqptcapConnT::lc {7, "lc"};
const Enum::YLeaf EqptcapConnT::mt_rj {8, "mt-rj"};
const Enum::YLeaf EqptcapConnT::mu {9, "mu"};
const Enum::YLeaf EqptcapConnT::sg {10, "sg"};
const Enum::YLeaf EqptcapConnT::optical_pigtail {11, "optical-pigtail"};
const Enum::YLeaf EqptcapConnT::mpo {12, "mpo"};
const Enum::YLeaf EqptcapConnT::hssdc_2 {32, "hssdc-2"};
const Enum::YLeaf EqptcapConnT::copper_pigtail {33, "copper-pigtail"};
const Enum::YLeaf EqptcapConnT::rj45 {34, "rj45"};

const Enum::YLeaf EpmEpOperSt::down {0, "down"};
const Enum::YLeaf EpmEpOperSt::up {1, "up"};

const Enum::YLeaf TelemetryProtocol::UDP {1, "UDP"};
const Enum::YLeaf TelemetryProtocol::TCP {2, "TCP"};
const Enum::YLeaf TelemetryProtocol::gRPC {3, "gRPC"};
const Enum::YLeaf TelemetryProtocol::HTTP {4, "HTTP"};

const Enum::YLeaf IpAddrT::primary {1, "primary"};
const Enum::YLeaf IpAddrT::secondary {2, "secondary"};

const Enum::YLeaf TunnelifTunnelOperSt::up {1, "up"};
const Enum::YLeaf TunnelifTunnelOperSt::down {2, "down"};

const Enum::YLeaf IsisLvlT::p2p {0, "p2p"};
const Enum::YLeaf IsisLvlT::l1 {1, "l1"};
const Enum::YLeaf IsisLvlT::l2 {2, "l2"};

const Enum::YLeaf TunnelTunnelQual::unknown {0, "unknown"};
const Enum::YLeaf TunnelTunnelQual::ivxlan {1, "ivxlan"};
const Enum::YLeaf TunnelTunnelQual::vxlan {2, "vxlan"};

const Enum::YLeaf NdConfigErr::noerror {0, "noerror"};
const Enum::YLeaf NdConfigErr::managedConfigFlag {1, "managedConfigFlag"};
const Enum::YLeaf NdConfigErr::otherConfigFlag {2, "otherConfigFlag"};
const Enum::YLeaf NdConfigErr::raIntvl {3, "raIntvl"};
const Enum::YLeaf NdConfigErr::raLifetime {4, "raLifetime"};
const Enum::YLeaf NdConfigErr::suppressRa {5, "suppressRa"};
const Enum::YLeaf NdConfigErr::macExtract {6, "macExtract"};

const Enum::YLeaf OpflexDirection::in {0, "in"};
const Enum::YLeaf OpflexDirection::out {1, "out"};

const Enum::YLeaf ActrlOperSt::enabled {1, "enabled"};
const Enum::YLeaf ActrlOperSt::disabled {2, "disabled"};

const Enum::YLeaf IgmpDbT::route {1, "route"};

const Enum::YLeaf InbandTelemetryFltType::ipv4 {1, "ipv4"};
const Enum::YLeaf InbandTelemetryFltType::ipv6 {2, "ipv6"};
const Enum::YLeaf InbandTelemetryFltType::ce {3, "ce"};

const Enum::YLeaf VpcTosCfgType::noCfg {0, "noCfg"};
const Enum::YLeaf VpcTosCfgType::tos_byte {1, "tos-byte"};
const Enum::YLeaf VpcTosCfgType::tos_value {2, "tos-value"};
const Enum::YLeaf VpcTosCfgType::tos_type {3, "tos-type"};
const Enum::YLeaf VpcTosCfgType::precedence_type {4, "precedence-type"};
const Enum::YLeaf VpcTosCfgType::precedence_value {5, "precedence-value"};

const Enum::YLeaf AggregateHostReachabilityMode::unknown {0, "unknown"};
const Enum::YLeaf AggregateHostReachabilityMode::floodAndLearn {1, "floodAndLearn"};
const Enum::YLeaf AggregateHostReachabilityMode::controller {2, "controller"};
const Enum::YLeaf AggregateHostReachabilityMode::bgp {3, "bgp"};

const Enum::YLeaf BgpMinNotifErr::none {0, "none"};
const Enum::YLeaf BgpMinNotifErr::unspecified_msg_hdr_err {1, "unspecified-msg-hdr-err"};
const Enum::YLeaf BgpMinNotifErr::conn_not_synced {2, "conn-not-synced"};
const Enum::YLeaf BgpMinNotifErr::bad_msg_len {3, "bad-msg-len"};
const Enum::YLeaf BgpMinNotifErr::bad_msg_type {4, "bad-msg-type"};
const Enum::YLeaf BgpMinNotifErr::unknown_msg_hdr_err {5, "unknown-msg-hdr-err"};
const Enum::YLeaf BgpMinNotifErr::unspecified_open_err {6, "unspecified-open-err"};
const Enum::YLeaf BgpMinNotifErr::unsupp_version {7, "unsupp-version"};
const Enum::YLeaf BgpMinNotifErr::bad_peer_as {8, "bad-peer-as"};
const Enum::YLeaf BgpMinNotifErr::bad_peer_rtrid {9, "bad-peer-rtrid"};
const Enum::YLeaf BgpMinNotifErr::unsupp_opt_param {10, "unsupp-opt-param"};
const Enum::YLeaf BgpMinNotifErr::auth_err {11, "auth-err"};
const Enum::YLeaf BgpMinNotifErr::bad_holdtime {12, "bad-holdtime"};
const Enum::YLeaf BgpMinNotifErr::unsupp_cap {13, "unsupp-cap"};
const Enum::YLeaf BgpMinNotifErr::unknown_open_hdr_err {14, "unknown-open-hdr-err"};
const Enum::YLeaf BgpMinNotifErr::unspecified_update_err {15, "unspecified-update-err"};
const Enum::YLeaf BgpMinNotifErr::malformed_attr_list {16, "malformed-attr-list"};
const Enum::YLeaf BgpMinNotifErr::unrecognized_wellknown_attr {17, "unrecognized-wellknown-attr"};
const Enum::YLeaf BgpMinNotifErr::missing_wellknown_attr {18, "missing-wellknown-attr"};
const Enum::YLeaf BgpMinNotifErr::attr_flags_err {19, "attr-flags-err"};
const Enum::YLeaf BgpMinNotifErr::attr_len_err {20, "attr-len-err"};
const Enum::YLeaf BgpMinNotifErr::invalid_origin_attr {21, "invalid-origin-attr"};
const Enum::YLeaf BgpMinNotifErr::as_loop_err {22, "as-loop-err"};
const Enum::YLeaf BgpMinNotifErr::invalid_nh_attr {23, "invalid-nh-attr"};
const Enum::YLeaf BgpMinNotifErr::opt_attr_err {24, "opt-attr-err"};
const Enum::YLeaf BgpMinNotifErr::invalid_nw_field {25, "invalid-nw-field"};
const Enum::YLeaf BgpMinNotifErr::bad_as_path {26, "bad-as-path"};
const Enum::YLeaf BgpMinNotifErr::unknown_update_hdr_err {27, "unknown-update-hdr-err"};
const Enum::YLeaf BgpMinNotifErr::unspecified_cease_err {28, "unspecified-cease-err"};
const Enum::YLeaf BgpMinNotifErr::max_pfx_count_err {29, "max-pfx-count-err"};
const Enum::YLeaf BgpMinNotifErr::admin_shut {30, "admin-shut"};
const Enum::YLeaf BgpMinNotifErr::peer_decfg {31, "peer-decfg"};
const Enum::YLeaf BgpMinNotifErr::session_cleared {32, "session-cleared"};
const Enum::YLeaf BgpMinNotifErr::conn_rej {33, "conn-rej"};
const Enum::YLeaf BgpMinNotifErr::other_cfg_chg {34, "other-cfg-chg"};
const Enum::YLeaf BgpMinNotifErr::conn_coll_resolution {35, "conn-coll-resolution"};
const Enum::YLeaf BgpMinNotifErr::out_of_rsrc {36, "out-of-rsrc"};
const Enum::YLeaf BgpMinNotifErr::dyn_cap_cfg_chg {37, "dyn-cap-cfg-chg"};
const Enum::YLeaf BgpMinNotifErr::ttl_cfg_chg {38, "ttl-cfg-chg"};
const Enum::YLeaf BgpMinNotifErr::ttl_security_cfg_chg {39, "ttl-security-cfg-chg"};
const Enum::YLeaf BgpMinNotifErr::passive_neighbor_cfg_chg {40, "passive-neighbor-cfg-chg"};
const Enum::YLeaf BgpMinNotifErr::af_cfg_chg {41, "af-cfg-chg"};
const Enum::YLeaf BgpMinNotifErr::rr_cfg_chg {42, "rr-cfg-chg"};
const Enum::YLeaf BgpMinNotifErr::rtrid_cfg_chg {43, "rtrid-cfg-chg"};
const Enum::YLeaf BgpMinNotifErr::confed_id_chg {44, "confed-id-chg"};
const Enum::YLeaf BgpMinNotifErr::confed_membership_change {45, "confed-membership-change"};
const Enum::YLeaf BgpMinNotifErr::gr_cfg_chg {46, "gr-cfg-chg"};
const Enum::YLeaf BgpMinNotifErr::soft_recfg_chg {47, "soft-recfg-chg"};
const Enum::YLeaf BgpMinNotifErr::updatesrc_if_chg {48, "updatesrc-if-chg"};
const Enum::YLeaf BgpMinNotifErr::localas_chg {49, "localas-chg"};
const Enum::YLeaf BgpMinNotifErr::unknown_cease_err {50, "unknown-cease-err"};
const Enum::YLeaf BgpMinNotifErr::unspecified_cap_msg_err {51, "unspecified-cap-msg-err"};
const Enum::YLeaf BgpMinNotifErr::unknown_seq_num {52, "unknown-seq-num"};
const Enum::YLeaf BgpMinNotifErr::invalid_cap_len {53, "invalid-cap-len"};
const Enum::YLeaf BgpMinNotifErr::bad_cap_val {54, "bad-cap-val"};
const Enum::YLeaf BgpMinNotifErr::unsupp_cap_code {55, "unsupp-cap-code"};
const Enum::YLeaf BgpMinNotifErr::unknown_cap_err {56, "unknown-cap-err"};

const Enum::YLeaf AaaAuthenticationProtocol::pap {0, "pap"};
const Enum::YLeaf AaaAuthenticationProtocol::chap {1, "chap"};
const Enum::YLeaf AaaAuthenticationProtocol::mschap {2, "mschap"};
const Enum::YLeaf AaaAuthenticationProtocol::mschapv2 {3, "mschapv2"};
const Enum::YLeaf AaaAuthenticationProtocol::ascii {4, "ascii"};

const Enum::YLeaf EqptSlotLoc::unknown {0, "unknown"};
const Enum::YLeaf EqptSlotLoc::front {1, "front"};
const Enum::YLeaf EqptSlotLoc::rear {2, "rear"};

const Enum::YLeaf AggregateTunnelType::unknown {0, "unknown"};
const Enum::YLeaf AggregateTunnelType::vxlanipv4 {1, "vxlanipv4"};
const Enum::YLeaf AggregateTunnelType::vxlanipv6 {2, "vxlanipv6"};
const Enum::YLeaf AggregateTunnelType::nvgre {3, "nvgre"};

const Enum::YLeaf SnmpAuthType::hmac_md5_96 {1, "hmac-md5-96"};
const Enum::YLeaf SnmpAuthType::hmac_sha1_96 {2, "hmac-sha1-96"};

const Enum::YLeaf QospCtrlMeth::static_ {0, "static"};
const Enum::YLeaf QospCtrlMeth::dynamic {1, "dynamic"};

const Enum::YLeaf BgpAsSet::enabled {1, "enabled"};
const Enum::YLeaf BgpAsSet::disabled {0, "disabled"};

const Enum::YLeaf McastVer::unspecified {0, "unspecified"};

const Enum::YLeaf NgmvpnDbT::mroute {0, "mroute"};
const Enum::YLeaf NgmvpnDbT::saroute {1, "saroute"};
const Enum::YLeaf NgmvpnDbT::l2route {2, "l2route"};

const Enum::YLeaf AaaRealm::local {0, "local"};
const Enum::YLeaf AaaRealm::radius {1, "radius"};
const Enum::YLeaf AaaRealm::tacacs {2, "tacacs"};
const Enum::YLeaf AaaRealm::ldap {3, "ldap"};

const Enum::YLeaf PlatformPfcMmuBufferSt::disable {0, "disable"};
const Enum::YLeaf PlatformPfcMmuBufferSt::enable {1, "enable"};

const Enum::YLeaf IpqosPrec::routine {0, "routine"};
const Enum::YLeaf IpqosPrec::priority {1, "priority"};
const Enum::YLeaf IpqosPrec::immediate {2, "immediate"};
const Enum::YLeaf IpqosPrec::flash {3, "flash"};
const Enum::YLeaf IpqosPrec::flash_override {4, "flash-override"};
const Enum::YLeaf IpqosPrec::critical {5, "critical"};
const Enum::YLeaf IpqosPrec::internet {6, "internet"};
const Enum::YLeaf IpqosPrec::network {7, "network"};

const Enum::YLeaf PcChannelingSt::unknown {0, "unknown"};
const Enum::YLeaf PcChannelingSt::channeling {1, "channeling"};
const Enum::YLeaf PcChannelingSt::individual {2, "individual"};
const Enum::YLeaf PcChannelingSt::failed {3, "failed"};
const Enum::YLeaf PcChannelingSt::suspended {4, "suspended"};
const Enum::YLeaf PcChannelingSt::hot_standby {5, "hot-standby"};

const Enum::YLeaf PcPoType::none {0, "none"};
const Enum::YLeaf PcPoType::hif_pc {1, "hif-pc"};
const Enum::YLeaf PcPoType::non_hif_pc {2, "non-hif-pc"};

const Enum::YLeaf SpanDestEncapT::gre {1, "gre"};

const Enum::YLeaf EqptdiagAllGrpsT::none {0, "none"};
const Enum::YLeaf EqptdiagAllGrpsT::sys_mem {1, "sys-mem"};
const Enum::YLeaf EqptdiagAllGrpsT::cpu {2, "cpu"};
const Enum::YLeaf EqptdiagAllGrpsT::peripherals {3, "peripherals"};
const Enum::YLeaf EqptdiagAllGrpsT::internal_conn {4, "internal-conn"};
const Enum::YLeaf EqptdiagAllGrpsT::asic {5, "asic"};
const Enum::YLeaf EqptdiagAllGrpsT::port {6, "port"};

const Enum::YLeaf L3VrfOperStateQual::admin_down {1, "admin-down"};
const Enum::YLeaf L3VrfOperStateQual::admin_down_pending {2, "admin-down-pending"};
const Enum::YLeaf L3VrfOperStateQual::delete_holddown {3, "delete-holddown"};
const Enum::YLeaf L3VrfOperStateQual::delete_pending {4, "delete-pending"};
const Enum::YLeaf L3VrfOperStateQual::invalid {5, "invalid"};
const Enum::YLeaf L3VrfOperStateQual::create_pending {6, "create-pending"};

const Enum::YLeaf AaaLoggingLevel::Emergency {0, "Emergency"};
const Enum::YLeaf AaaLoggingLevel::Alert {1, "Alert"};
const Enum::YLeaf AaaLoggingLevel::Critical {2, "Critical"};
const Enum::YLeaf AaaLoggingLevel::Error {3, "Error"};
const Enum::YLeaf AaaLoggingLevel::Warning {4, "Warning"};
const Enum::YLeaf AaaLoggingLevel::Notif {5, "Notif"};
const Enum::YLeaf AaaLoggingLevel::Inform {6, "Inform"};
const Enum::YLeaf AaaLoggingLevel::Debug {7, "Debug"};

const Enum::YLeaf NwAdminSt::enabled {1, "enabled"};
const Enum::YLeaf NwAdminSt::disabled {2, "disabled"};

const Enum::YLeaf PkiCsyncActivationStateType::disabled {0, "disabled"};
const Enum::YLeaf PkiCsyncActivationStateType::enabled {1, "enabled"};

const Enum::YLeaf EqptLedOpSt::unknown {0, "unknown"};
const Enum::YLeaf EqptLedOpSt::off {1, "off"};
const Enum::YLeaf EqptLedOpSt::on {2, "on"};
const Enum::YLeaf EqptLedOpSt::blinking {3, "blinking"};
const Enum::YLeaf EqptLedOpSt::fail {4, "fail"};

const Enum::YLeaf L1LinkTransmitReset::enable {1, "enable"};
const Enum::YLeaf L1LinkTransmitReset::disable {0, "disable"};

const Enum::YLeaf L1SpanMode::not_a_span_dest {1, "not-a-span-dest"};
const Enum::YLeaf L1SpanMode::span_dest {2, "span-dest"};
const Enum::YLeaf L1SpanMode::span_dest_fwd {3, "span-dest-fwd"};
const Enum::YLeaf L1SpanMode::span_dest_fwd_learn {4, "span-dest-fwd-learn"};

const Enum::YLeaf NbmNbmOperationalMode::UNDEFINED {0, "UNDEFINED"};
const Enum::YLeaf NbmNbmOperationalMode::PIM_ACTIVE {1, "PIM_ACTIVE"};

const Enum::YLeaf SnmpVersion::v1 {1, "v1"};
const Enum::YLeaf SnmpVersion::v2c {2, "v2c"};
const Enum::YLeaf SnmpVersion::v3 {3, "v3"};

const Enum::YLeaf ActrlcapSubj::unknown {0, "unknown"};
const Enum::YLeaf ActrlcapSubj::rule_namespace {1, "rule-namespace"};
const Enum::YLeaf ActrlcapSubj::scope_namespace {2, "scope-namespace"};

const Enum::YLeaf TerminalTermParity::none {0, "none"};
const Enum::YLeaf TerminalTermParity::odd {1, "odd"};
const Enum::YLeaf TerminalTermParity::even {2, "even"};

const Enum::YLeaf CoppExcep::Undefined {0, "Undefined"};
const Enum::YLeaf CoppExcep::glean {1, "glean"};
const Enum::YLeaf CoppExcep::mtu_failure {2, "mtu-failure"};
const Enum::YLeaf CoppExcep::ttl_failure {3, "ttl-failure"};
const Enum::YLeaf CoppExcep::nat_flow {4, "nat-flow"};
const Enum::YLeaf CoppExcep::sflow {5, "sflow"};

const Enum::YLeaf NwAdminStProcessStatStaticDisc::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStProcessStatStaticDisc::disabled {2, "disabled"};

const Enum::YLeaf BgpPasswdSet::enabled {1, "enabled"};
const Enum::YLeaf BgpPasswdSet::disabled {0, "disabled"};

const Enum::YLeaf SpanErSpanVer::ver1 {1, "ver1"};
const Enum::YLeaf SpanErSpanVer::ver2 {2, "ver2"};

const Enum::YLeaf IsisAdjOperSt::init {1, "init"};
const Enum::YLeaf IsisAdjOperSt::up {2, "up"};
const Enum::YLeaf IsisAdjOperSt::down {3, "down"};
const Enum::YLeaf IsisAdjOperSt::gr_init {4, "gr-init"};

const Enum::YLeaf Ipv6IPv6EventLogSize::disabled {0, "disabled"};
const Enum::YLeaf Ipv6IPv6EventLogSize::small {1, "small"};
const Enum::YLeaf Ipv6IPv6EventLogSize::medium {2, "medium"};
const Enum::YLeaf Ipv6IPv6EventLogSize::large {3, "large"};

const Enum::YLeaf RtextcomType::rttarget {1, "rttarget"};
const Enum::YLeaf RtextcomType::generic {2, "generic"};

const Enum::YLeaf TunnelLayerT::l2 {1, "l2"};
const Enum::YLeaf TunnelLayerT::l3 {2, "l3"};

const Enum::YLeaf VpcDualActiveSt::false_ {0, "false"};
const Enum::YLeaf VpcDualActiveSt::true_ {1, "true"};

const Enum::YLeaf SatmHpOperSt::unknown {0, "unknown"};
const Enum::YLeaf SatmHpOperSt::up {1, "up"};
const Enum::YLeaf SatmHpOperSt::down {2, "down"};
const Enum::YLeaf SatmHpOperSt::fail {3, "fail"};

const Enum::YLeaf TunnelifSnmpTrapSt::enabled {1, "enabled"};
const Enum::YLeaf TunnelifSnmpTrapSt::disabled {2, "disabled"};

const Enum::YLeaf AaaNoRolePolicy::no_login {0, "no-login"};
const Enum::YLeaf AaaNoRolePolicy::assign_default_role {1, "assign-default-role"};

const Enum::YLeaf MonitorDestEncapT::gre {1, "gre"};

const Enum::YLeaf L2MacType::unknown {0, "unknown"};
const Enum::YLeaf L2MacType::primary {1, "primary"};
const Enum::YLeaf L2MacType::gateway {2, "gateway"};
const Enum::YLeaf L2MacType::overlay {4, "overlay"};
const Enum::YLeaf L2MacType::primary_vpc_peer {5, "primary-vpc-peer"};
const Enum::YLeaf L2MacType::control_plane {6, "control-plane"};
const Enum::YLeaf L2MacType::vsan {7, "vsan"};

const Enum::YLeaf RtleakScope::intra {1, "intra"};
const Enum::YLeaf RtleakScope::inter {2, "inter"};
const Enum::YLeaf RtleakScope::defrt {3, "defrt"};

const Enum::YLeaf Ipv6ConfigErr::noerror {0, "noerror"};
const Enum::YLeaf Ipv6ConfigErr::nghbrAddress {1, "nghbrAddress"};
const Enum::YLeaf Ipv6ConfigErr::useLinkLocalOnly {2, "useLinkLocalOnly"};
const Enum::YLeaf Ipv6ConfigErr::forward {3, "forward"};

const Enum::YLeaf PkiKeyringState::started {1, "started"};
const Enum::YLeaf PkiKeyringState::created {2, "created"};
const Enum::YLeaf PkiKeyringState::reqCreated {3, "reqCreated"};
const Enum::YLeaf PkiKeyringState::tpSet {4, "tpSet"};
const Enum::YLeaf PkiKeyringState::completed {5, "completed"};

const Enum::YLeaf InstallerUpgStatusType::pre_upgrade {0, "pre-upgrade"};
const Enum::YLeaf InstallerUpgStatusType::in_progress {1, "in-progress"};
const Enum::YLeaf InstallerUpgStatusType::success {2, "success"};
const Enum::YLeaf InstallerUpgStatusType::failed {3, "failed"};
const Enum::YLeaf InstallerUpgStatusType::not_compatible {4, "not-compatible"};
const Enum::YLeaf InstallerUpgStatusType::none {5, "none"};

const Enum::YLeaf NwAdminSt_::enabled {1, "enabled"};
const Enum::YLeaf NwAdminSt_::disabled {2, "disabled"};

const Enum::YLeaf VrrpAuthType::none {1, "none"};
const Enum::YLeaf VrrpAuthType::simple {2, "simple"};

const Enum::YLeaf AggregateMacType::unknown {0, "unknown"};
const Enum::YLeaf AggregateMacType::unicast {1, "unicast"};
const Enum::YLeaf AggregateMacType::multicast {2, "multicast"};

const Enum::YLeaf StpGuard::default_ {0, "default"};
const Enum::YLeaf StpGuard::root {1, "root"};
const Enum::YLeaf StpGuard::loop {2, "loop"};
const Enum::YLeaf StpGuard::none {3, "none"};

const Enum::YLeaf EqptCOpSt::unknown {0, "unknown"};
const Enum::YLeaf EqptCOpSt::inserted {1, "inserted"};
const Enum::YLeaf EqptCOpSt::absent {2, "absent"};
const Enum::YLeaf EqptCOpSt::mismatch {3, "mismatch"};
const Enum::YLeaf EqptCOpSt::fail {4, "fail"};
const Enum::YLeaf EqptCOpSt::present {5, "present"};
const Enum::YLeaf EqptCOpSt::removed {6, "removed"};
const Enum::YLeaf EqptCOpSt::online {7, "online"};
const Enum::YLeaf EqptCOpSt::offline {8, "offline"};
const Enum::YLeaf EqptCOpSt::pwr_up {9, "pwr-up"};
const Enum::YLeaf EqptCOpSt::pwr_down {10, "pwr-down"};
const Enum::YLeaf EqptCOpSt::err_pwr_down {11, "err-pwr-down"};
const Enum::YLeaf EqptCOpSt::testing {12, "testing"};
const Enum::YLeaf EqptCOpSt::init {13, "init"};
const Enum::YLeaf EqptCOpSt::reg_failure {14, "reg-failure"};
const Enum::YLeaf EqptCOpSt::dnld {15, "dnld"};
const Enum::YLeaf EqptCOpSt::upg {16, "upg"};
const Enum::YLeaf EqptCOpSt::srg_fail {17, "srg-fail"};
const Enum::YLeaf EqptCOpSt::ha_seq_fail {18, "ha-seq-fail"};

const Enum::YLeaf OpflexEpTransitionStatus::unknown {0, "unknown"};
const Enum::YLeaf OpflexEpTransitionStatus::attached {1, "attached"};
const Enum::YLeaf OpflexEpTransitionStatus::detached {2, "detached"};

const Enum::YLeaf VpcPrecType::network {0, "network"};
const Enum::YLeaf VpcPrecType::internet {1, "internet"};
const Enum::YLeaf VpcPrecType::critical {2, "critical"};
const Enum::YLeaf VpcPrecType::flash_override {3, "flash-override"};
const Enum::YLeaf VpcPrecType::flash {4, "flash"};
const Enum::YLeaf VpcPrecType::immediate {5, "immediate"};
const Enum::YLeaf VpcPrecType::priority {6, "priority"};
const Enum::YLeaf VpcPrecType::routine {7, "routine"};

const Enum::YLeaf BgpMaxPfxAct::log {1, "log"};
const Enum::YLeaf BgpMaxPfxAct::shut {2, "shut"};
const Enum::YLeaf BgpMaxPfxAct::restart {3, "restart"};

const Enum::YLeaf AggregateVpcKeepaliveStatus::VpcOobUnknown {0, "VpcOobUnknown"};
const Enum::YLeaf AggregateVpcKeepaliveStatus::VpcOobDisabled {1, "VpcOobDisabled"};
const Enum::YLeaf AggregateVpcKeepaliveStatus::VpcOobPeerAlive {2, "VpcOobPeerAlive"};
const Enum::YLeaf AggregateVpcKeepaliveStatus::VpcOobPeerNotAlive {3, "VpcOobPeerNotAlive"};
const Enum::YLeaf AggregateVpcKeepaliveStatus::VpcOobPeerAliveDomainMismatch {4, "VpcOobPeerAliveDomainMismatch"};
const Enum::YLeaf AggregateVpcKeepaliveStatus::VpcOobSuspended {5, "VpcOobSuspended"};
const Enum::YLeaf AggregateVpcKeepaliveStatus::VpcOobNotOperational {6, "VpcOobNotOperational"};
const Enum::YLeaf AggregateVpcKeepaliveStatus::VpcOobSuspendedVrf {7, "VpcOobSuspendedVrf"};
const Enum::YLeaf AggregateVpcKeepaliveStatus::VpcOobMisconfig {8, "VpcOobMisconfig"};

const Enum::YLeaf L2EtherType::unspecified {0, "unspecified"};
const Enum::YLeaf L2EtherType::arp {2054, "arp"};
const Enum::YLeaf L2EtherType::trill {8947, "trill"};
const Enum::YLeaf L2EtherType::mpls_ucast {34887, "mpls_ucast"};
const Enum::YLeaf L2EtherType::mac_security {35045, "mac_security"};
const Enum::YLeaf L2EtherType::fcoe {35078, "fcoe"};
const Enum::YLeaf L2EtherType::ip {43981, "ip"};

const Enum::YLeaf CdpOperStQual::up {1, "up"};
const Enum::YLeaf CdpOperStQual::admin_down {2, "admin-down"};
const Enum::YLeaf CdpOperStQual::if_down {3, "if-down"};
const Enum::YLeaf CdpOperStQual::unsupported {4, "unsupported"};

const Enum::YLeaf CdpVer::v1 {1, "v1"};
const Enum::YLeaf CdpVer::v2 {2, "v2"};

const Enum::YLeaf NwAdminStProcessStatAutoDiscAdd::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStProcessStatAutoDiscAdd::disabled {2, "disabled"};

const Enum::YLeaf EqptFcotDomLane::basic {0, "basic"};
const Enum::YLeaf EqptFcotDomLane::extGlobal {1, "extGlobal"};
const Enum::YLeaf EqptFcotDomLane::extOptical {2, "extOptical"};

const Enum::YLeaf IpOperSt::unspecified {0, "unspecified"};
const Enum::YLeaf IpOperSt::down {1, "down"};
const Enum::YLeaf IpOperSt::up {2, "up"};
const Enum::YLeaf IpOperSt::failed {3, "failed"};

const Enum::YLeaf L2TrafficMapCfgSt::config_success {0, "config-success"};
const Enum::YLeaf L2TrafficMapCfgSt::config_failure {1, "config-failure"};

const Enum::YLeaf FlowExportVersion::unspecified {0, "unspecified"};
const Enum::YLeaf FlowExportVersion::v5 {1, "v5"};
const Enum::YLeaf FlowExportVersion::v9 {2, "v9"};
const Enum::YLeaf FlowExportVersion::cisco1 {3, "cisco1"};

const Enum::YLeaf BgpLogNbrSt::none {0, "none"};
const Enum::YLeaf BgpLogNbrSt::enable {1, "enable"};
const Enum::YLeaf BgpLogNbrSt::disable {2, "disable"};

const Enum::YLeaf LldpPortIdSubType::long_ {0, "long"};
const Enum::YLeaf LldpPortIdSubType::short_ {1, "short"};

const Enum::YLeaf ActionType::clear {1, "clear"};
const Enum::YLeaf ActionType::reset {2, "reset"};
const Enum::YLeaf ActionType::reload {3, "reload"};
const Enum::YLeaf ActionType::locate {4, "locate"};
const Enum::YLeaf ActionType::install {5, "install"};
const Enum::YLeaf ActionType::test {6, "test"};
const Enum::YLeaf ActionType::collect {7, "collect"};
const Enum::YLeaf ActionType::interface_in_service {8, "interface-in-service"};

const Enum::YLeaf L1DiagsT::none {0, "none"};
const Enum::YLeaf L1DiagsT::dom {1, "dom"};
const Enum::YLeaf L1DiagsT::ddm {2, "ddm"};

const Enum::YLeaf IsisAuthT::clear {1, "clear"};
const Enum::YLeaf IsisAuthT::md5 {2, "md5"};

const Enum::YLeaf CoppMcast::Undefined {0, "Undefined"};
const Enum::YLeaf CoppMcast::dest_miss {1, "dest-miss"};
const Enum::YLeaf CoppMcast::rpf_failure {2, "rpf-failure"};
const Enum::YLeaf CoppMcast::sg_rpf_failure {3, "sg-rpf-failure"};
const Enum::YLeaf CoppMcast::ipv6_dest_miss {4, "ipv6-dest-miss"};
const Enum::YLeaf CoppMcast::ipv6_rpf_failure {5, "ipv6-rpf-failure"};
const Enum::YLeaf CoppMcast::ipv6_sg_rpf_failure {6, "ipv6-sg-rpf-failure"};

const Enum::YLeaf AnalyticsOportSupportT::enable {1, "enable"};
const Enum::YLeaf AnalyticsOportSupportT::disable {0, "disable"};

const Enum::YLeaf IpUrpfT::disabled {0, "disabled"};
const Enum::YLeaf IpUrpfT::strict {1, "strict"};
const Enum::YLeaf IpUrpfT::loose {2, "loose"};
const Enum::YLeaf IpUrpfT::loose_allow_default {3, "loose-allow-default"};

const Enum::YLeaf NbmNbmOifOrigin::UNDEFINED {0, "UNDEFINED"};
const Enum::YLeaf NbmNbmOifOrigin::PROTOCOL {1, "PROTOCOL"};
const Enum::YLeaf NbmNbmOifOrigin::API {2, "API"};
const Enum::YLeaf NbmNbmOifOrigin::API_PROTOCOL {3, "API_PROTOCOL"};

const Enum::YLeaf OspfAlways::no {0, "no"};
const Enum::YLeaf OspfAlways::yes {1, "yes"};

const Enum::YLeaf NgmvpnEhType::bgp {0, "bgp"};
const Enum::YLeaf NgmvpnEhType::mrib {1, "mrib"};
const Enum::YLeaf NgmvpnEhType::m2rib {2, "m2rib"};
const Enum::YLeaf NgmvpnEhType::m6rib {3, "m6rib"};
const Enum::YLeaf NgmvpnEhType::pim {4, "pim"};
const Enum::YLeaf NgmvpnEhType::pim6 {5, "pim6"};
const Enum::YLeaf NgmvpnEhType::hmm {6, "hmm"};
const Enum::YLeaf NgmvpnEhType::isis {7, "isis"};
const Enum::YLeaf NgmvpnEhType::ha {8, "ha"};

const Enum::YLeaf SpanSrcT::port {1, "port"};
const Enum::YLeaf SpanSrcT::encap {2, "encap"};
const Enum::YLeaf SpanSrcT::port_encap {3, "port-encap"};

const Enum::YLeaf CapRuleT::limit {1, "limit"};

const Enum::YLeaf NdMacExtract::none {0, "none"};
const Enum::YLeaf NdMacExtract::nud_phase {1, "nud-phase"};
const Enum::YLeaf NdMacExtract::exclude_nud_phase {2, "exclude-nud-phase"};

const Enum::YLeaf SisfRaGuardDeviceRole::host {1, "host"};
const Enum::YLeaf SisfRaGuardDeviceRole::router {2, "router"};
const Enum::YLeaf SisfRaGuardDeviceRole::switch_ {3, "switch"};
const Enum::YLeaf SisfRaGuardDeviceRole::monitor {4, "monitor"};

const Enum::YLeaf L1AllowMultiTag::enable {1, "enable"};
const Enum::YLeaf L1AllowMultiTag::disable {0, "disable"};

const Enum::YLeaf NwAdminStProcessStatAutoPuntBcast::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStProcessStatAutoPuntBcast::disabled {2, "disabled"};

const Enum::YLeaf Icmpv6EventLogSize::disabled {0, "disabled"};
const Enum::YLeaf Icmpv6EventLogSize::small {1, "small"};
const Enum::YLeaf Icmpv6EventLogSize::medium {2, "medium"};
const Enum::YLeaf Icmpv6EventLogSize::large {3, "large"};

const Enum::YLeaf HmmFwdMode::standard {0, "standard"};
const Enum::YLeaf HmmFwdMode::anycastGW {1, "anycastGW"};
const Enum::YLeaf HmmFwdMode::proxyGW {2, "proxyGW"};

const Enum::YLeaf SegrtAfType::ipv4 {1, "ipv4"};
const Enum::YLeaf SegrtAfType::ipv6 {2, "ipv6"};

const Enum::YLeaf DhcpDAILogType::deny {1, "deny"};
const Enum::YLeaf DhcpDAILogType::permit {2, "permit"};
const Enum::YLeaf DhcpDAILogType::all {3, "all"};
const Enum::YLeaf DhcpDAILogType::inone {5, "inone"};

const Enum::YLeaf OspfNwT::unspecified {0, "unspecified"};
const Enum::YLeaf OspfNwT::p2p {1, "p2p"};
const Enum::YLeaf OspfNwT::bcast {2, "bcast"};

const Enum::YLeaf RtmapRoutePervasive::non_pervasive {0, "non-pervasive"};
const Enum::YLeaf RtmapRoutePervasive::pervasive {1, "pervasive"};
const Enum::YLeaf RtmapRoutePervasive::pervasive_non_ext_bd {2, "pervasive-non-ext-bd"};

const Enum::YLeaf RtmapMetricT::type_1 {1, "type-1"};
const Enum::YLeaf RtmapMetricT::type_2 {2, "type-2"};
const Enum::YLeaf RtmapMetricT::internal {3, "internal"};
const Enum::YLeaf RtmapMetricT::external {4, "external"};

const Enum::YLeaf BgpPeerFabType::fabric_internal {0, "fabric-internal"};
const Enum::YLeaf BgpPeerFabType::fabric_external {1, "fabric-external"};
const Enum::YLeaf BgpPeerFabType::fabric_border_leaf {2, "fabric-border-leaf"};

const Enum::YLeaf EqptSock::unspecified {0, "unspecified"};

const Enum::YLeaf MonitorOperSt::up {1, "up"};
const Enum::YLeaf MonitorOperSt::down {2, "down"};
const Enum::YLeaf MonitorOperSt::failed {3, "failed"};

const Enum::YLeaf RtpfxCriteria::exact {0, "exact"};
const Enum::YLeaf RtpfxCriteria::inexact {1, "inexact"};

const Enum::YLeaf PcSummOperSt::up {0, "up"};
const Enum::YLeaf PcSummOperSt::down {1, "down"};
const Enum::YLeaf PcSummOperSt::module_removed {2, "module-removed"};
const Enum::YLeaf PcSummOperSt::individual {3, "individual"};
const Enum::YLeaf PcSummOperSt::suspended {4, "suspended"};
const Enum::YLeaf PcSummOperSt::hot_standby {5, "hot-standby"};

const Enum::YLeaf BgpPathSt::deleted {0, "deleted"};
const Enum::YLeaf BgpPathSt::staled {1, "staled"};
const Enum::YLeaf BgpPathSt::valid {2, "valid"};
const Enum::YLeaf BgpPathSt::invalid {3, "invalid"};
const Enum::YLeaf BgpPathSt::history {4, "history"};
const Enum::YLeaf BgpPathSt::suppressed {5, "suppressed"};
const Enum::YLeaf BgpPathSt::dampened {6, "dampened"};

const Enum::YLeaf SegrtSrDpType::mpls {1, "mpls"};
const Enum::YLeaf SegrtSrDpType::ipv6 {2, "ipv6"};

const Enum::YLeaf EthpmFcotFlags::unknown {0, "unknown"};
const Enum::YLeaf EthpmFcotFlags::access_failed {1, "access-failed"};
const Enum::YLeaf EthpmFcotFlags::checksum_failed {2, "checksum-failed"};
const Enum::YLeaf EthpmFcotFlags::vendor_crc_failed {3, "vendor-crc-failed"};
const Enum::YLeaf EthpmFcotFlags::sfp_speed_mismatch {4, "sfp-speed-mismatch"};
const Enum::YLeaf EthpmFcotFlags::eth_compalint_failed {5, "eth-compalint-failed"};
const Enum::YLeaf EthpmFcotFlags::unknown_xcvr_type {6, "unknown-xcvr-type"};
const Enum::YLeaf EthpmFcotFlags::emphasis_checksum_failed {7, "emphasis-checksum-failed"};
const Enum::YLeaf EthpmFcotFlags::init_failed {8, "init-failed"};
const Enum::YLeaf EthpmFcotFlags::ok_auth_success_no_md5 {9, "ok-auth-success-no-md5"};
const Enum::YLeaf EthpmFcotFlags::auth_failed {10, "auth-failed"};
const Enum::YLeaf EthpmFcotFlags::ok_delayed_auth_success {11, "ok-delayed-auth-success"};
const Enum::YLeaf EthpmFcotFlags::delayed_auth_failed {12, "delayed-auth-failed"};
const Enum::YLeaf EthpmFcotFlags::ok_no_md5 {13, "ok-no-md5"};
const Enum::YLeaf EthpmFcotFlags::ok {14, "ok"};

const Enum::YLeaf SatmExtChOperSt::unknown {0, "unknown"};
const Enum::YLeaf SatmExtChOperSt::initializing {1, "initializing"};
const Enum::YLeaf SatmExtChOperSt::discovered {2, "discovered"};
const Enum::YLeaf SatmExtChOperSt::connected {3, "connected"};
const Enum::YLeaf SatmExtChOperSt::registering {4, "registering"};
const Enum::YLeaf SatmExtChOperSt::registered {5, "registered"};
const Enum::YLeaf SatmExtChOperSt::ready {6, "ready"};
const Enum::YLeaf SatmExtChOperSt::online_seq {7, "online-seq"};
const Enum::YLeaf SatmExtChOperSt::online {8, "online"};
const Enum::YLeaf SatmExtChOperSt::offline_req {9, "offline-req"};
const Enum::YLeaf SatmExtChOperSt::offline_seq {10, "offline-seq"};
const Enum::YLeaf SatmExtChOperSt::offline {11, "offline"};
const Enum::YLeaf SatmExtChOperSt::img_download {12, "img-download"};
const Enum::YLeaf SatmExtChOperSt::failed {13, "failed"};
const Enum::YLeaf SatmExtChOperSt::removed {14, "removed"};
const Enum::YLeaf SatmExtChOperSt::hl_upg_seq {15, "hl-upg-seq"};
const Enum::YLeaf SatmExtChOperSt::chk_upg_seq {16, "chk-upg-seq"};
const Enum::YLeaf SatmExtChOperSt::upg_start {17, "upg-start"};
const Enum::YLeaf SatmExtChOperSt::hl_upg_idle {18, "hl-upg-idle"};
const Enum::YLeaf SatmExtChOperSt::chk_ins_seq {19, "chk-ins-seq"};
const Enum::YLeaf SatmExtChOperSt::hl_upg_fail {20, "hl-upg-fail"};
const Enum::YLeaf SatmExtChOperSt::aa_upg_rdy {21, "aa-upg-rdy"};
const Enum::YLeaf SatmExtChOperSt::aa_upg_idle {22, "aa-upg-idle"};
const Enum::YLeaf SatmExtChOperSt::aa_upg_done {23, "aa-upg-done"};
const Enum::YLeaf SatmExtChOperSt::aa_upg_fail {24, "aa-upg-fail"};
const Enum::YLeaf SatmExtChOperSt::aa_ver_mismatch {25, "aa-ver-mismatch"};
const Enum::YLeaf SatmExtChOperSt::ch_type_mismatch {26, "ch-type-mismatch"};

const Enum::YLeaf EqptAirDir::unknown {0, "unknown"};
const Enum::YLeaf EqptAirDir::front2back {1, "front2back"};
const Enum::YLeaf EqptAirDir::back2front {2, "back2front"};

const Enum::YLeaf SysmgrFwMode::recovery {1, "recovery"};
const Enum::YLeaf SysmgrFwMode::regular {2, "regular"};

const Enum::YLeaf Icmpv6OperSt::down {0, "down"};
const Enum::YLeaf Icmpv6OperSt::up {1, "up"};
const Enum::YLeaf Icmpv6OperSt::failed {2, "failed"};

const Enum::YLeaf VsanOperSt::up {1, "up"};
const Enum::YLeaf VsanOperSt::down {2, "down"};

const Enum::YLeaf AggregateBfdStatus::unknown {0, "unknown"};
const Enum::YLeaf AggregateBfdStatus::admin_down {1, "admin_down"};
const Enum::YLeaf AggregateBfdStatus::down {2, "down"};
const Enum::YLeaf AggregateBfdStatus::init {3, "init"};
const Enum::YLeaf AggregateBfdStatus::up {4, "up"};

const Enum::YLeaf EqptAsicT::northstar {1, "northstar"};
const Enum::YLeaf EqptAsicT::alpine {2, "alpine"};
const Enum::YLeaf EqptAsicT::bcm {3, "bcm"};
const Enum::YLeaf EqptAsicT::davos {4, "davos"};
const Enum::YLeaf EqptAsicT::sugarbowl {5, "sugarbowl"};
const Enum::YLeaf EqptAsicT::homewood {6, "homewood"};

const Enum::YLeaf ImBreakoutProfile::disabled {0, "disabled"};
const Enum::YLeaf ImBreakoutProfile::Y_50g_2x_only {1, "50g-2x-only"};

const Enum::YLeaf OspfHelperSt::not_helping {1, "not-helping"};
const Enum::YLeaf OspfHelperSt::helping {2, "helping"};

const Enum::YLeaf CoppBurstUnit::Unknown {0, "Unknown"};
const Enum::YLeaf CoppBurstUnit::bytes {1, "bytes"};
const Enum::YLeaf CoppBurstUnit::kbytes {2, "kbytes"};
const Enum::YLeaf CoppBurstUnit::mbytes {3, "mbytes"};
const Enum::YLeaf CoppBurstUnit::packets {4, "packets"};
const Enum::YLeaf CoppBurstUnit::us {5, "us"};
const Enum::YLeaf CoppBurstUnit::ms {6, "ms"};

const Enum::YLeaf FvImmediacy::immediate {1, "immediate"};
const Enum::YLeaf FvImmediacy::lazy {2, "lazy"};

const Enum::YLeaf Pim6EhType::assertRcv {0, "assertRcv"};
const Enum::YLeaf Pim6EhType::bidir {1, "bidir"};
const Enum::YLeaf Pim6EhType::hello {2, "hello"};
const Enum::YLeaf Pim6EhType::joinPrune {3, "joinPrune"};
const Enum::YLeaf Pim6EhType::nullReg {4, "nullReg"};
const Enum::YLeaf Pim6EhType::packet {5, "packet"};
const Enum::YLeaf Pim6EhType::pim6Internal {6, "pim6Internal"};
const Enum::YLeaf Pim6EhType::rp {7, "rp"};
const Enum::YLeaf Pim6EhType::vrf {8, "vrf"};
const Enum::YLeaf Pim6EhType::jpSum {9, "jpSum"};

const Enum::YLeaf L1VoiceVlanType::none {0, "none"};
const Enum::YLeaf L1VoiceVlanType::tagged {1, "tagged"};
const Enum::YLeaf L1VoiceVlanType::dot1p {2, "dot1p"};
const Enum::YLeaf L1VoiceVlanType::untagged {3, "untagged"};

const Enum::YLeaf IsisBwRefUnit::mbps {0, "mbps"};
const Enum::YLeaf IsisBwRefUnit::gbps {1, "gbps"};

const Enum::YLeaf AaaMonitorServerType::disabled {0, "disabled"};
const Enum::YLeaf AaaMonitorServerType::enabled {1, "enabled"};

const Enum::YLeaf OspfAdjChangeLogLevel::none {0, "none"};
const Enum::YLeaf OspfAdjChangeLogLevel::brief {1, "brief"};
const Enum::YLeaf OspfAdjChangeLogLevel::detail {2, "detail"};

const Enum::YLeaf StpLinkType::auto_ {1, "auto"};
const Enum::YLeaf StpLinkType::p2p {2, "p2p"};
const Enum::YLeaf StpLinkType::shared {3, "shared"};

const Enum::YLeaf NwMemAlertLevel::normal {0, "normal"};
const Enum::YLeaf NwMemAlertLevel::minor {1, "minor"};
const Enum::YLeaf NwMemAlertLevel::major_ {2, "major"};
const Enum::YLeaf NwMemAlertLevel::critical {3, "critical"};

const Enum::YLeaf RelnTargetType::name {0, "name"};
const Enum::YLeaf RelnTargetType::mo {1, "mo"};
const Enum::YLeaf RelnTargetType::all {2, "all"};

const Enum::YLeaf QospSchedAlgo::wrr {0, "wrr"};
const Enum::YLeaf QospSchedAlgo::sp {1, "sp"};

const Enum::YLeaf HsrpGrpIpObtainMode::admin {0, "admin"};
const Enum::YLeaf HsrpGrpIpObtainMode::auto_ {1, "auto"};
const Enum::YLeaf HsrpGrpIpObtainMode::learn {2, "learn"};

const Enum::YLeaf ArpAdjOperSt::unspecified {0, "unspecified"};
const Enum::YLeaf ArpAdjOperSt::incomplete {1, "incomplete"};
const Enum::YLeaf ArpAdjOperSt::normal {2, "normal"};

const Enum::YLeaf OspfGrCtrl::planned_only {1, "planned-only"};
const Enum::YLeaf OspfGrCtrl::complete {2, "complete"};
const Enum::YLeaf OspfGrCtrl::disabled {3, "disabled"};

const Enum::YLeaf AaaRuleScopeType::none {0, "none"};
const Enum::YLeaf AaaRuleScopeType::feature {2, "feature"};
const Enum::YLeaf AaaRuleScopeType::feature_group {3, "feature-group"};
const Enum::YLeaf AaaRuleScopeType::oid {21, "oid"};

const Enum::YLeaf AggregateIntfType::unknown {0, "unknown"};
const Enum::YLeaf AggregateIntfType::port {1, "port"};
const Enum::YLeaf AggregateIntfType::port_channel {2, "port-channel"};
const Enum::YLeaf AggregateIntfType::tunnel {3, "tunnel"};
const Enum::YLeaf AggregateIntfType::loopback {4, "loopback"};
const Enum::YLeaf AggregateIntfType::svi {5, "svi"};

const Enum::YLeaf CoppAffix::unknown {0, "unknown"};
const Enum::YLeaf CoppAffix::prefix {1, "prefix"};
const Enum::YLeaf CoppAffix::suffix {2, "suffix"};

const Enum::YLeaf M6ribHoldAdminSt::enabled {1, "enabled"};
const Enum::YLeaf M6ribHoldAdminSt::disabled {2, "disabled"};

const Enum::YLeaf PlatformPstatCfg::PSTAT_DISABLE {0, "PSTAT_DISABLE"};
const Enum::YLeaf PlatformPstatCfg::PSTAT_ENABLE {1, "PSTAT_ENABLE"};
const Enum::YLeaf PlatformPstatCfg::PSTAT_ENABLE_PEAK {2, "PSTAT_ENABLE_PEAK"};

const Enum::YLeaf SisfRaGuardRouterPreferenceMaximum::low {1, "low"};
const Enum::YLeaf SisfRaGuardRouterPreferenceMaximum::medium {2, "medium"};
const Enum::YLeaf SisfRaGuardRouterPreferenceMaximum::high {3, "high"};
const Enum::YLeaf SisfRaGuardRouterPreferenceMaximum::nocheck {4, "nocheck"};

const Enum::YLeaf DatetimeMonth::january {0, "january"};
const Enum::YLeaf DatetimeMonth::february {1, "february"};
const Enum::YLeaf DatetimeMonth::march {2, "march"};
const Enum::YLeaf DatetimeMonth::april {3, "april"};
const Enum::YLeaf DatetimeMonth::may {4, "may"};
const Enum::YLeaf DatetimeMonth::june {5, "june"};
const Enum::YLeaf DatetimeMonth::july {6, "july"};
const Enum::YLeaf DatetimeMonth::august {7, "august"};
const Enum::YLeaf DatetimeMonth::september {8, "september"};
const Enum::YLeaf DatetimeMonth::october {9, "october"};
const Enum::YLeaf DatetimeMonth::november {10, "november"};
const Enum::YLeaf DatetimeMonth::december {11, "december"};

const Enum::YLeaf L3VrfAdminState::shutdown {1, "shutdown"};
const Enum::YLeaf L3VrfAdminState::admin_up {2, "admin-up"};

const Enum::YLeaf CoppIrUnit::Unknown {0, "Unknown"};
const Enum::YLeaf CoppIrUnit::bps {1, "bps"};
const Enum::YLeaf CoppIrUnit::pps {2, "pps"};
const Enum::YLeaf CoppIrUnit::kbps {3, "kbps"};
const Enum::YLeaf CoppIrUnit::mbps {4, "mbps"};
const Enum::YLeaf CoppIrUnit::gbps {5, "gbps"};

const Enum::YLeaf EqptChOperSt::not_operational {0, "not-operational"};
const Enum::YLeaf EqptChOperSt::failed {1, "failed"};
const Enum::YLeaf EqptChOperSt::online {2, "online"};

const Enum::YLeaf BgpAdminSt::enabled {1, "enabled"};
const Enum::YLeaf BgpAdminSt::disabled {2, "disabled"};

const Enum::YLeaf EqptSlotOpSt::empty {0, "empty"};
const Enum::YLeaf EqptSlotOpSt::inserted {1, "inserted"};

const Enum::YLeaf UdldAdminSt::enabled {1, "enabled"};
const Enum::YLeaf UdldAdminSt::disabled {2, "disabled"};

const Enum::YLeaf AaaAccountStatus::active {0, "active"};
const Enum::YLeaf AaaAccountStatus::inactive {1, "inactive"};

const Enum::YLeaf EqptParity::none {0, "none"};
const Enum::YLeaf EqptParity::even {1, "even"};
const Enum::YLeaf EqptParity::odd {2, "odd"};

const Enum::YLeaf SnmpBoolean::no {0, "no"};
const Enum::YLeaf SnmpBoolean::yes {1, "yes"};

const Enum::YLeaf RtextcomScope::transitive {0, "transitive"};
const Enum::YLeaf RtextcomScope::non_transitive {1, "non-transitive"};

const Enum::YLeaf L2Disablefka::not_set {0, "not_set"};
const Enum::YLeaf L2Disablefka::set {1, "set"};

const Enum::YLeaf OspfMaxLsaAct::reject {0, "reject"};
const Enum::YLeaf OspfMaxLsaAct::restart {1, "restart"};
const Enum::YLeaf OspfMaxLsaAct::log {2, "log"};

const Enum::YLeaf DatetimeNtpSrvStatus::unknown {1, "unknown"};
const Enum::YLeaf DatetimeNtpSrvStatus::not_running {2, "not_running"};
const Enum::YLeaf DatetimeNtpSrvStatus::not_synchronized {3, "not_synchronized"};
const Enum::YLeaf DatetimeNtpSrvStatus::synced_local_clock {4, "synced_local_clock"};
const Enum::YLeaf DatetimeNtpSrvStatus::synced_local_hw_refclk {5, "synced_local_hw_refclk"};
const Enum::YLeaf DatetimeNtpSrvStatus::synced_remote_server {6, "synced_remote_server"};

const Enum::YLeaf CompHostState::maintenance {0, "maintenance"};
const Enum::YLeaf CompHostState::connected {1, "connected"};
const Enum::YLeaf CompHostState::noresponse {2, "noresponse"};
const Enum::YLeaf CompHostState::disconnected {3, "disconnected"};
const Enum::YLeaf CompHostState::poweredOn {4, "poweredOn"};
const Enum::YLeaf CompHostState::poweredOff {5, "poweredOff"};
const Enum::YLeaf CompHostState::standBy {6, "standBy"};
const Enum::YLeaf CompHostState::suspended {7, "suspended"};
const Enum::YLeaf CompHostState::unknown {8, "unknown"};

const Enum::YLeaf BootPoap::enable {1, "enable"};
const Enum::YLeaf BootPoap::disable {0, "disable"};

const Enum::YLeaf SnmpSnmpTrapSt::enable {1, "enable"};
const Enum::YLeaf SnmpSnmpTrapSt::disable {2, "disable"};

const Enum::YLeaf ImModeHwProfile::undefined {0, "undefined"};
const Enum::YLeaf ImModeHwProfile::Y_4C {1, "4C"};
const Enum::YLeaf ImModeHwProfile::Y_2C__PLUS__4Q {2, "2C+4Q"};
const Enum::YLeaf ImModeHwProfile::Y_18C {3, "18C"};
const Enum::YLeaf ImModeHwProfile::Y_4C__PLUS__28Q {4, "4C+28Q"};
const Enum::YLeaf ImModeHwProfile::Y_6C__PLUS__24Q {5, "6C+24Q"};

const Enum::YLeaf OspfSgmntRtgMplsOperSt::Disabled {0, "Disabled"};
const Enum::YLeaf OspfSgmntRtgMplsOperSt::Enabled {1, "Enabled"};

const Enum::YLeaf OspfHelperExitQual::none {1, "none"};
const Enum::YLeaf OspfHelperExitQual::in_progress {2, "in-progress"};
const Enum::YLeaf OspfHelperExitQual::completed {3, "completed"};
const Enum::YLeaf OspfHelperExitQual::timed_out {4, "timed-out"};
const Enum::YLeaf OspfHelperExitQual::topology_changed {5, "topology-changed"};

const Enum::YLeaf EqptOpSt::unknown {0, "unknown"};
const Enum::YLeaf EqptOpSt::ok {1, "ok"};
const Enum::YLeaf EqptOpSt::fail {2, "fail"};
const Enum::YLeaf EqptOpSt::absent {3, "absent"};
const Enum::YLeaf EqptOpSt::shut {4, "shut"};
const Enum::YLeaf EqptOpSt::mismatch {5, "mismatch"};

const Enum::YLeaf SyslogTimeStampFormat::microseconds {0, "microseconds"};
const Enum::YLeaf SyslogTimeStampFormat::milliseconds {1, "milliseconds"};
const Enum::YLeaf SyslogTimeStampFormat::seconds {2, "seconds"};

const Enum::YLeaf CoppExceedAction::Undefined {0, "Undefined"};
const Enum::YLeaf CoppExceedAction::transmit {1, "transmit"};
const Enum::YLeaf CoppExceedAction::drop {2, "drop"};

const Enum::YLeaf L2DomType::bd_regular {1, "bd-regular"};
const Enum::YLeaf L2DomType::bd_reserved {2, "bd-reserved"};
const Enum::YLeaf L2DomType::bd_control {3, "bd-control"};
const Enum::YLeaf L2DomType::bd_external {4, "bd-external"};
const Enum::YLeaf L2DomType::ckt_vlan {5, "ckt-vlan"};
const Enum::YLeaf L2DomType::ckt_vxlan {6, "ckt-vxlan"};

const Enum::YLeaf StpProtocol::unknown {0, "unknown"};
const Enum::YLeaf StpProtocol::mstp {1, "mstp"};
const Enum::YLeaf StpProtocol::rstp {2, "rstp"};

const Enum::YLeaf MsdpDbT::route {0, "route"};
const Enum::YLeaf MsdpDbT::source {1, "source"};

const Enum::YLeaf AggregateVpcPeerLinkStatus::VpcPeerNolink {0, "VpcPeerNolink"};
const Enum::YLeaf AggregateVpcPeerLinkStatus::VpcPeerLinkDown {1, "VpcPeerLinkDown"};
const Enum::YLeaf AggregateVpcPeerLinkStatus::VpcPeerOk {2, "VpcPeerOk"};
const Enum::YLeaf AggregateVpcPeerLinkStatus::VpcPeerNotfound {3, "VpcPeerNotfound"};

const Enum::YLeaf CoppViolateAction::Undefined {0, "Undefined"};
const Enum::YLeaf CoppViolateAction::transmit {1, "transmit"};
const Enum::YLeaf CoppViolateAction::drop {2, "drop"};

const Enum::YLeaf L1VdcSt::not_created {0, "not-created"};
const Enum::YLeaf L1VdcSt::created {1, "created"};
const Enum::YLeaf L1VdcSt::cleanup {2, "cleanup"};

const Enum::YLeaf PcHashDist::none {0, "none"};
const Enum::YLeaf PcHashDist::adaptive {1, "adaptive"};
const Enum::YLeaf PcHashDist::fixed {2, "fixed"};

const Enum::YLeaf OspfAuthT::none {0, "none"};
const Enum::YLeaf OspfAuthT::simple {1, "simple"};
const Enum::YLeaf OspfAuthT::md5 {2, "md5"};
const Enum::YLeaf OspfAuthT::unspecified {3, "unspecified"};

const Enum::YLeaf OspfMaxLsaOperStQual::ok {0, "ok"};
const Enum::YLeaf OspfMaxLsaOperStQual::warning {1, "warning"};
const Enum::YLeaf OspfMaxLsaOperStQual::overload {2, "overload"};
const Enum::YLeaf OspfMaxLsaOperStQual::sleep {3, "sleep"};
const Enum::YLeaf OspfMaxLsaOperStQual::reset {4, "reset"};
const Enum::YLeaf OspfMaxLsaOperStQual::perm_sleep {5, "perm-sleep"};

const Enum::YLeaf VpcSummRole::election_not_done {0, "election-not-done"};
const Enum::YLeaf VpcSummRole::cfg_master_oper_master {1, "cfg-master-oper-master"};
const Enum::YLeaf VpcSummRole::cfg_master_oper_slave {2, "cfg-master-oper-slave"};
const Enum::YLeaf VpcSummRole::cfg_slave_oper_master {3, "cfg-slave-oper-master"};
const Enum::YLeaf VpcSummRole::cfg_slave_oper_slave {4, "cfg-slave-oper-slave"};

const Enum::YLeaf BgpEvpnRtType::none {0, "none"};
const Enum::YLeaf BgpEvpnRtType::a_d {1, "a-d"};
const Enum::YLeaf BgpEvpnRtType::mac_ip {2, "mac-ip"};
const Enum::YLeaf BgpEvpnRtType::imet {3, "imet"};
const Enum::YLeaf BgpEvpnRtType::eth_seg {4, "eth-seg"};
const Enum::YLeaf BgpEvpnRtType::ip_pfx {5, "ip-pfx"};

const Enum::YLeaf LacpTxRate::normal {1, "normal"};
const Enum::YLeaf LacpTxRate::fast {2, "fast"};

const Enum::YLeaf L1FECModePhysIfOperFECMode::auto_ {4, "auto"};
const Enum::YLeaf L1FECModePhysIfOperFECMode::rs_fec {2, "rs-fec"};
const Enum::YLeaf L1FECModePhysIfOperFECMode::fc_fec {1, "fc-fec"};
const Enum::YLeaf L1FECModePhysIfOperFECMode::fec_off {3, "fec-off"};
const Enum::YLeaf L1FECModePhysIfOperFECMode::rs_ieee {5, "rs-ieee"};
const Enum::YLeaf L1FECModePhysIfOperFECMode::rs_cons16 {6, "rs-cons16"};
const Enum::YLeaf L1FECModePhysIfOperFECMode::not_available {20, "not-available"};

const Enum::YLeaf PlatformBufferMonitorMd::None {0, "None"};
const Enum::YLeaf PlatformBufferMonitorMd::Unicast {2, "Unicast"};
const Enum::YLeaf PlatformBufferMonitorMd::Multicast {3, "Multicast"};

const Enum::YLeaf StpRootType::none {0, "none"};
const Enum::YLeaf StpRootType::primary {1, "primary"};
const Enum::YLeaf StpRootType::secondary {2, "secondary"};

const Enum::YLeaf ActrlRuleT::tenant {1, "tenant"};
const Enum::YLeaf ActrlRuleT::mgmt {2, "mgmt"};
const Enum::YLeaf ActrlRuleT::snmp {3, "snmp"};
const Enum::YLeaf ActrlRuleT::bd_flood {4, "bd_flood"};
const Enum::YLeaf ActrlRuleT::vrf_default {5, "vrf_default"};
const Enum::YLeaf ActrlRuleT::infra {6, "infra"};

const Enum::YLeaf AggregateConfigSourceType::unknown {0, "unknown"};
const Enum::YLeaf AggregateConfigSourceType::cli {1, "cli"};
const Enum::YLeaf AggregateConfigSourceType::controller {2, "controller"};

const Enum::YLeaf RtmapSetT::reg_community {1, "reg-community"};
const Enum::YLeaf RtmapSetT::ext_gen_community {2, "ext-gen-community"};
const Enum::YLeaf RtmapSetT::rtt_community {3, "rtt-community"};
const Enum::YLeaf RtmapSetT::rt_tag {4, "rt-tag"};
const Enum::YLeaf RtmapSetT::rt_weight {5, "rt-weight"};
const Enum::YLeaf RtmapSetT::local_pref {6, "local-pref"};
const Enum::YLeaf RtmapSetT::metric {7, "metric"};
const Enum::YLeaf RtmapSetT::ospf_nssa {8, "ospf-nssa"};
const Enum::YLeaf RtmapSetT::ospf_fwd_addr {9, "ospf-fwd-addr"};
const Enum::YLeaf RtmapSetT::ip_nh {10, "ip-nh"};
const Enum::YLeaf RtmapSetT::metric_type {11, "metric-type"};
const Enum::YLeaf RtmapSetT::rt_dist {12, "rt-dist"};
const Enum::YLeaf RtmapSetT::nh_pa {13, "nh-pa"};
const Enum::YLeaf RtmapSetT::origin {14, "origin"};
const Enum::YLeaf RtmapSetT::list_community {15, "list-community"};
const Enum::YLeaf RtmapSetT::dampening {16, "dampening"};
const Enum::YLeaf RtmapSetT::extcommunity_cost {17, "extcommunity-cost"};
const Enum::YLeaf RtmapSetT::ip_prec {18, "ip-prec"};
const Enum::YLeaf RtmapSetT::continue_ {19, "continue"};
const Enum::YLeaf RtmapSetT::rt_index {20, "rt-index"};
const Enum::YLeaf RtmapSetT::list_extcommunity {21, "list-extcommunity"};
const Enum::YLeaf RtmapSetT::ipv6_prec {22, "ipv6-prec"};
const Enum::YLeaf RtmapSetT::prepend {23, "prepend"};
const Enum::YLeaf RtmapSetT::lastas {24, "lastas"};
const Enum::YLeaf RtmapSetT::as_pathtag {25, "as-pathtag"};

const Enum::YLeaf EthpmFcotState::unknown {0, "unknown"};
const Enum::YLeaf EthpmFcotState::inserted {1, "inserted"};
const Enum::YLeaf EthpmFcotState::removed {2, "removed"};
const Enum::YLeaf EthpmFcotState::hw_failure {3, "hw-failure"};
const Enum::YLeaf EthpmFcotState::inserted_initializing {4, "inserted-initializing"};

const Enum::YLeaf BgpAdvtMapCondition::none {0, "none"};
const Enum::YLeaf BgpAdvtMapCondition::exist {1, "exist"};
const Enum::YLeaf BgpAdvtMapCondition::non_exist {2, "non-exist"};

const Enum::YLeaf SwpkgsPackageAction::init {0, "init"};
const Enum::YLeaf SwpkgsPackageAction::add {1, "add"};
const Enum::YLeaf SwpkgsPackageAction::activate {2, "activate"};
const Enum::YLeaf SwpkgsPackageAction::add_activate {3, "add-activate"};
const Enum::YLeaf SwpkgsPackageAction::deactivate {4, "deactivate"};
const Enum::YLeaf SwpkgsPackageAction::commit {5, "commit"};
const Enum::YLeaf SwpkgsPackageAction::remove {6, "remove"};

const Enum::YLeaf CompInstType::unknown {0, "unknown"};
const Enum::YLeaf CompInstType::phys {1, "phys"};
const Enum::YLeaf CompInstType::virt {2, "virt"};
const Enum::YLeaf CompInstType::hv {3, "hv"};

const Enum::YLeaf AaaUserRolePrivType::noDataPriv {0, "noDataPriv"};
const Enum::YLeaf AaaUserRolePrivType::readPriv {1, "readPriv"};
const Enum::YLeaf AaaUserRolePrivType::writePriv {2, "writePriv"};

const Enum::YLeaf ActionOperSt::scheduled {0, "scheduled"};
const Enum::YLeaf ActionOperSt::processing {1, "processing"};
const Enum::YLeaf ActionOperSt::completed {2, "completed"};
const Enum::YLeaf ActionOperSt::cancelled {3, "cancelled"};
const Enum::YLeaf ActionOperSt::failed {4, "failed"};
const Enum::YLeaf ActionOperSt::indeterminate {5, "indeterminate"};
const Enum::YLeaf ActionOperSt::suspended {6, "suspended"};
const Enum::YLeaf ActionOperSt::crashsuspect {7, "crashsuspect"};

const Enum::YLeaf M6ribEhType::cli {0, "cli"};
const Enum::YLeaf M6ribEhType::mdt {1, "mdt"};
const Enum::YLeaf M6ribEhType::mfdmDebugs {2, "mfdmDebugs"};
const Enum::YLeaf M6ribEhType::mfdmEvents {3, "mfdmEvents"};
const Enum::YLeaf M6ribEhType::mfdmStats {4, "mfdmStats"};
const Enum::YLeaf M6ribEhType::notyClients {5, "notyClients"};
const Enum::YLeaf M6ribEhType::rib {6, "rib"};
const Enum::YLeaf M6ribEhType::ribSum {7, "ribSum"};
const Enum::YLeaf M6ribEhType::urib {8, "urib"};
const Enum::YLeaf M6ribEhType::vrf {9, "vrf"};

const Enum::YLeaf NdSolicitAcceptValue::none {0, "none"};
const Enum::YLeaf NdSolicitAcceptValue::accept {1, "accept"};
const Enum::YLeaf NdSolicitAcceptValue::no_accept {2, "no-accept"};

const Enum::YLeaf SegrtOperStQual::none {0, "none"};
const Enum::YLeaf SegrtOperStQual::shut {1, "shut"};
const Enum::YLeaf SegrtOperStQual::srgb_cleanup_in_progress {2, "srgb-cleanup-in-progress"};
const Enum::YLeaf SegrtOperStQual::srgb_cleanup_failed {3, "srgb-cleanup-failed"};
const Enum::YLeaf SegrtOperStQual::srgb_alloc_in_progress {4, "srgb-alloc-in-progress"};
const Enum::YLeaf SegrtOperStQual::srgb_alloc_failed {5, "srgb-alloc-failed"};

const Enum::YLeaf BgpPathT::internal {1, "internal"};
const Enum::YLeaf BgpPathT::external {2, "external"};
const Enum::YLeaf BgpPathT::confederation {3, "confederation"};
const Enum::YLeaf BgpPathT::local {4, "local"};
const Enum::YLeaf BgpPathT::aggregate {5, "aggregate"};
const Enum::YLeaf BgpPathT::redistribute {6, "redistribute"};
const Enum::YLeaf BgpPathT::injected {7, "injected"};

const Enum::YLeaf ProcOperState::up {0, "up"};
const Enum::YLeaf ProcOperState::down {1, "down"};

const Enum::YLeaf NdRtPrefForCmd::unspecified {0, "unspecified"};
const Enum::YLeaf NdRtPrefForCmd::low {1, "low"};
const Enum::YLeaf NdRtPrefForCmd::medium {2, "medium"};
const Enum::YLeaf NdRtPrefForCmd::high {3, "high"};

const Enum::YLeaf SnmpCommAcessT::ro {0, "ro"};
const Enum::YLeaf SnmpCommAcessT::rw {1, "rw"};
const Enum::YLeaf SnmpCommAcessT::unspecified {2, "unspecified"};

const Enum::YLeaf SegrtSRGBOperSt::none {0, "none"};
const Enum::YLeaf SegrtSRGBOperSt::in_use {1, "in-use"};
const Enum::YLeaf SegrtSRGBOperSt::alloc_in_progress {2, "alloc-in-progress"};
const Enum::YLeaf SegrtSRGBOperSt::alloc_failed {3, "alloc-failed"};
const Enum::YLeaf SegrtSRGBOperSt::cleanup_in_progress {4, "cleanup-in-progress"};
const Enum::YLeaf SegrtSRGBOperSt::cleanup_failed {5, "cleanup-failed"};

const Enum::YLeaf UdldPortEnable::port_enabled {0, "port-enabled"};
const Enum::YLeaf UdldPortEnable::port_fiber_disabled {1, "port-fiber-disabled"};
const Enum::YLeaf UdldPortEnable::port_default {2, "port-default"};
const Enum::YLeaf UdldPortEnable::port_default_disable {3, "port-default-disable"};

const Enum::YLeaf AnalyticsModeT::analytics {0, "analytics"};
const Enum::YLeaf AnalyticsModeT::netflow {1, "netflow"};

const Enum::YLeaf IgmpEhType::igmpInternal {0, "igmpInternal"};
const Enum::YLeaf IgmpEhType::cli {1, "cli"};
const Enum::YLeaf IgmpEhType::groupDebugs {2, "groupDebugs"};
const Enum::YLeaf IgmpEhType::groupEvents {3, "groupEvents"};
const Enum::YLeaf IgmpEhType::ha {4, "ha"};
const Enum::YLeaf IgmpEhType::intfDebugs {5, "intfDebugs"};
const Enum::YLeaf IgmpEhType::intfEvents {6, "intfEvents"};
const Enum::YLeaf IgmpEhType::mtrace {7, "mtrace"};
const Enum::YLeaf IgmpEhType::mvr {8, "mvr"};
const Enum::YLeaf IgmpEhType::policy {9, "policy"};
const Enum::YLeaf IgmpEhType::vrf {10, "vrf"};
const Enum::YLeaf IgmpEhType::nbm {11, "nbm"};

const Enum::YLeaf L1LayerAggrIfLayer::Layer2 {1, "Layer2"};
const Enum::YLeaf L1LayerAggrIfLayer::Layer3 {2, "Layer3"};
const Enum::YLeaf L1LayerAggrIfLayer::pltfmDfltLayer {3, "pltfmDfltLayer"};

const Enum::YLeaf L2capSubj::unknown {0, "unknown"};
const Enum::YLeaf L2capSubj::vxlan_namespace {1, "vxlan-namespace"};
const Enum::YLeaf L2capSubj::nvgre_namespace {2, "nvgre-namespace"};
const Enum::YLeaf L2capSubj::domain_namespace {3, "domain-namespace"};
const Enum::YLeaf L2capSubj::tunnel_namespace {4, "tunnel-namespace"};

const Enum::YLeaf IpUnnumberedOperStQual::unspecified {0, "unspecified"};
const Enum::YLeaf IpUnnumberedOperStQual::parent_unnumbered {1, "parent-unnumbered"};
const Enum::YLeaf IpUnnumberedOperStQual::child_numbered {2, "child-numbered"};
const Enum::YLeaf IpUnnumberedOperStQual::invalid_source {3, "invalid-source"};
const Enum::YLeaf IpUnnumberedOperStQual::invalid_interface {4, "invalid-interface"};
const Enum::YLeaf IpUnnumberedOperStQual::intf_self_referential {5, "intf-self-referential"};

const Enum::YLeaf L1OperStQual::unknown {0, "unknown"};
const Enum::YLeaf L1OperStQual::up {1, "up"};
const Enum::YLeaf L1OperStQual::admin_down {2, "admin-down"};
const Enum::YLeaf L1OperStQual::link_down {3, "link-down"};
const Enum::YLeaf L1OperStQual::fail {4, "fail"};
const Enum::YLeaf L1OperStQual::no_license {5, "no-license"};
const Enum::YLeaf L1OperStQual::link_up {6, "link-up"};
const Enum::YLeaf L1OperStQual::hw_fail {7, "hw-fail"};
const Enum::YLeaf L1OperStQual::sw_fail {8, "sw-fail"};
const Enum::YLeaf L1OperStQual::err_disabled {9, "err-disabled"};
const Enum::YLeaf L1OperStQual::sfp_missing {10, "sfp-missing"};
const Enum::YLeaf L1OperStQual::loopback_diag_failure {11, "loopback-diag-failure"};
const Enum::YLeaf L1OperStQual::udld_unidir_detected {12, "udld-unidir-detected"};
const Enum::YLeaf L1OperStQual::udld_tx_rx_loop {13, "udld-tx-rx-loop"};
const Enum::YLeaf L1OperStQual::udld_neighbor_mismatch {14, "udld-neighbor-mismatch"};
const Enum::YLeaf L1OperStQual::udld_empty_echo {15, "udld-empty-echo"};
const Enum::YLeaf L1OperStQual::udld_aggressive_mode_link_failed {16, "udld-aggressive-mode-link-failed"};
const Enum::YLeaf L1OperStQual::link_flap_err {17, "link-flap-err"};
const Enum::YLeaf L1OperStQual::err_disabled_ip_conflict {18, "err-disabled-ip-conflict"};
const Enum::YLeaf L1OperStQual::ipqos_dcbxp_compat_failure {19, "ipqos-dcbxp-compat-failure"};
const Enum::YLeaf L1OperStQual::link_failure {20, "link-failure"};
const Enum::YLeaf L1OperStQual::offline {21, "offline"};
const Enum::YLeaf L1OperStQual::initializing {22, "initializing"};
const Enum::YLeaf L1OperStQual::inactive {23, "inactive"};
const Enum::YLeaf L1OperStQual::channel_admin_down {24, "channel-admin-down"};
const Enum::YLeaf L1OperStQual::channel_err_disabled {25, "channel-err-disabled"};
const Enum::YLeaf L1OperStQual::suspended {26, "suspended"};
const Enum::YLeaf L1OperStQual::proto_port_suspend {27, "proto-port-suspend"};
const Enum::YLeaf L1OperStQual::channel_membership_update_in_progress {28, "channel-membership-update-in-progress"};
const Enum::YLeaf L1OperStQual::parent_down {29, "parent-down"};
const Enum::YLeaf L1OperStQual::parent_admin_down {30, "parent-admin-down"};
const Enum::YLeaf L1OperStQual::interface_removed {31, "interface-removed"};
const Enum::YLeaf L1OperStQual::fcot_no_present {32, "fcot-no-present"};
const Enum::YLeaf L1OperStQual::fcot_vendor_not_supported {33, "fcot-vendor-not-supported"};
const Enum::YLeaf L1OperStQual::incompatible_admin_mode {34, "incompatible-admin-mode"};
const Enum::YLeaf L1OperStQual::incompatible_admin_speed {35, "incompatible-admin-speed"};
const Enum::YLeaf L1OperStQual::suspended_by_mode {36, "suspended-by-mode"};
const Enum::YLeaf L1OperStQual::suspended_by_speed {37, "suspended-by-speed"};
const Enum::YLeaf L1OperStQual::domain_max_retransmission_failure {38, "domain-max-retransmission-failure"};
const Enum::YLeaf L1OperStQual::loopback_isolation {39, "loopback-isolation"};
const Enum::YLeaf L1OperStQual::upgrade_in_progress {40, "upgrade-in-progress"};
const Enum::YLeaf L1OperStQual::port_channel_members_down {41, "port-channel-members-down"};
const Enum::YLeaf L1OperStQual::ethernet_link_down {42, "ethernet-link-down"};
const Enum::YLeaf L1OperStQual::ethernet_interface_down {43, "ethernet-interface-down"};
const Enum::YLeaf L1OperStQual::admin_config_change {44, "admin-config-change"};
const Enum::YLeaf L1OperStQual::module_removed {45, "module-removed"};
const Enum::YLeaf L1OperStQual::vrf_unusable {46, "vrf-unusable"};
const Enum::YLeaf L1OperStQual::none {47, "none"};
const Enum::YLeaf L1OperStQual::xcvr_initializing {48, "xcvr-initializing"};
const Enum::YLeaf L1OperStQual::cap_absent {49, "cap-absent"};
const Enum::YLeaf L1OperStQual::sfp_eth_compliant_err {50, "sfp-eth-compliant-err"};
const Enum::YLeaf L1OperStQual::sdp_timeout {51, "sdp-timeout"};
const Enum::YLeaf L1OperStQual::sat_incompat_topo {52, "sat-incompat-topo"};
const Enum::YLeaf L1OperStQual::sat_not_configured {53, "sat-not-configured"};
const Enum::YLeaf L1OperStQual::auth_fail {54, "auth-fail"};
const Enum::YLeaf L1OperStQual::auth_pending {55, "auth-pending"};
const Enum::YLeaf L1OperStQual::suspended_due_to_minlinks {56, "suspended-due-to-minlinks"};
const Enum::YLeaf L1OperStQual::suspended_due_to_no_lacp_pdus {57, "suspended-due-to-no-lacp-pdus"};
const Enum::YLeaf L1OperStQual::sat_fabric_if_down {58, "sat-fabric-if-down"};
const Enum::YLeaf L1OperStQual::invalid_sat_fabric_if {59, "invalid-sat-fabric-if"};
const Enum::YLeaf L1OperStQual::fex_sfp_invalid {60, "fex-sfp-invalid"};
const Enum::YLeaf L1OperStQual::suspend_by_mtu {61, "suspend-by-mtu"};
const Enum::YLeaf L1OperStQual::suspend_by_vpc {62, "suspend-by-vpc"};
const Enum::YLeaf L1OperStQual::router_mac_failure {63, "router-mac-failure"};
const Enum::YLeaf L1OperStQual::xcvr_auth_failed {64, "xcvr-auth-failed"};
const Enum::YLeaf L1OperStQual::non_sticky_externally_disabled {65, "non-sticky-externally-disabled"};
const Enum::YLeaf L1OperStQual::sfp_speed_mismatch {66, "sfp-speed-mismatch"};
const Enum::YLeaf L1OperStQual::fcot_chksum_err {67, "fcot-chksum-err"};
const Enum::YLeaf L1OperStQual::xcvr_invalid {68, "xcvr-invalid"};
const Enum::YLeaf L1OperStQual::vpc_peer_link_down {69, "vpc-peer-link-down"};
const Enum::YLeaf L1OperStQual::vpc_cfg_in_progress {70, "vpc-cfg-in-progress"};
const Enum::YLeaf L1OperStQual::vpc_no_response_from_peer {71, "vpc-no-response-from-peer"};
const Enum::YLeaf L1OperStQual::bpdu_guard_err_disable {72, "bpdu-guard-err-disable"};
const Enum::YLeaf L1OperStQual::hot_standby_in_bundle {73, "hot-standby-in-bundle"};
const Enum::YLeaf L1OperStQual::handshake_fail_errdisable {74, "handshake-fail-errdisable"};
const Enum::YLeaf L1OperStQual::non_participating {75, "non-participating"};
const Enum::YLeaf L1OperStQual::rcf_in_progress {76, "rcf-in-progress"};
const Enum::YLeaf L1OperStQual::elp_failure_isolation {77, "elp-failure-isolation"};
const Enum::YLeaf L1OperStQual::esc_failure_isolation {78, "esc-failure-isolation"};
const Enum::YLeaf L1OperStQual::domain_overlap_isolation {79, "domain-overlap-isolation"};
const Enum::YLeaf L1OperStQual::domain_addr_assign_failure_isolation {80, "domain-addr-assign-failure-isolation"};
const Enum::YLeaf L1OperStQual::domain_other_side_eport_isolated {81, "domain-other-side-eport-isolated"};
const Enum::YLeaf L1OperStQual::domain_invalid_rcf_received {82, "domain-invalid-rcf-received"};
const Enum::YLeaf L1OperStQual::domain_manager_disabled {83, "domain-manager-disabled"};
const Enum::YLeaf L1OperStQual::zone_merge_failure_isolation {84, "zone-merge-failure-isolation"};
const Enum::YLeaf L1OperStQual::vsan_mismatch_isolation {85, "vsan-mismatch-isolation"};
const Enum::YLeaf L1OperStQual::src_port_not_bound {86, "src-port-not-bound"};
const Enum::YLeaf L1OperStQual::suspended_by_wwn {87, "suspended-by-wwn"};
const Enum::YLeaf L1OperStQual::epp_failure {88, "epp-failure"};
const Enum::YLeaf L1OperStQual::port_vsan_mismatch_isolation {89, "port-vsan-mismatch-isolation"};
const Enum::YLeaf L1OperStQual::incompatible_admin_rxbbcredit {90, "incompatible-admin-rxbbcredit"};
const Enum::YLeaf L1OperStQual::incompatible_admin_rxbufsize {91, "incompatible-admin-rxbufsize"};
const Enum::YLeaf L1OperStQual::zone_remote_no_resp_isolation {92, "zone-remote-no-resp-isolation"};
const Enum::YLeaf L1OperStQual::osm_e_port_up {93, "osm-e-port-up"};
const Enum::YLeaf L1OperStQual::osm_non_e_port_up {94, "osm-non-e-port-up"};
const Enum::YLeaf L1OperStQual::peer_fcip_closed_tcp_connection {95, "peer-fcip-closed-tcp-connection"};
const Enum::YLeaf L1OperStQual::peer_fcip_reset_tcp_connection {96, "peer-fcip-reset-tcp-connection"};
const Enum::YLeaf L1OperStQual::tcp_max_retransmissions {97, "tcp-max-retransmissions"};
const Enum::YLeaf L1OperStQual::tcp_keep_alive_timer_expired {98, "tcp-keep-alive-timer-expired"};
const Enum::YLeaf L1OperStQual::tcp_persist_timer_expired {99, "tcp-persist-timer-expired"};
const Enum::YLeaf L1OperStQual::tunnel_src_port_removed {100, "tunnel-src-port-removed"};
const Enum::YLeaf L1OperStQual::tunnel_src_module_not_online {101, "tunnel-src-module-not-online"};
const Enum::YLeaf L1OperStQual::invalid_config {102, "invalid-config"};
const Enum::YLeaf L1OperStQual::port_bind_failure {103, "port-bind-failure"};
const Enum::YLeaf L1OperStQual::fabric_bind_failure {104, "fabric-bind-failure"};
const Enum::YLeaf L1OperStQual::no_trunk_oper_vsans_isolation {105, "no-trunk-oper-vsans-isolation"};
const Enum::YLeaf L1OperStQual::ficon_vsan_down {106, "ficon-vsan-down"};
const Enum::YLeaf L1OperStQual::invalid_attachment {107, "invalid-attachment"};
const Enum::YLeaf L1OperStQual::port_blocked {108, "port-blocked"};
const Enum::YLeaf L1OperStQual::incompatible_admin_rxbbcredit_performance_buf {109, "incompatible-admin-rxbbcredit-performance-buf"};
const Enum::YLeaf L1OperStQual::too_many_invalid_flogis {110, "too-many-invalid-flogis"};
const Enum::YLeaf L1OperStQual::denied_due_to_port_binding {111, "denied-due-to-port-binding"};
const Enum::YLeaf L1OperStQual::elp_failure_revision_mismatch {112, "elp-failure-revision-mismatch"};
const Enum::YLeaf L1OperStQual::elp_failure_classf_param_err {113, "elp-failure-classf-param-err"};
const Enum::YLeaf L1OperStQual::elp_failure_classn_param_err {114, "elp-failure-classn-param-err"};
const Enum::YLeaf L1OperStQual::elp_failure_unknown_flow_ctl_code {115, "elp-failure-unknown-flow-ctl-code"};
const Enum::YLeaf L1OperStQual::elp_failure_invalid_flow_ctl_param {116, "elp-failure-invalid-flow-ctl-param"};
const Enum::YLeaf L1OperStQual::elp_failure_invalid_port_name {117, "elp-failure-invalid-port-name"};
const Enum::YLeaf L1OperStQual::elp_failure_invalid_switch_name {118, "elp-failure-invalid-switch-name"};
const Enum::YLeaf L1OperStQual::elp_failure_ratov_edtov_mismatch {119, "elp-failure-ratov-edtov-mismatch"};
const Enum::YLeaf L1OperStQual::elp_failure_loopback_detected {120, "elp-failure-loopback-detected"};
const Enum::YLeaf L1OperStQual::elp_failure_invalid_tx_bbcredit {121, "elp-failure-invalid-tx-bbcredit"};
const Enum::YLeaf L1OperStQual::elp_failure_invalid_payload_size {122, "elp-failure-invalid-payload-size"};
const Enum::YLeaf L1OperStQual::bundle_miscfg {123, "bundle-miscfg"};
const Enum::YLeaf L1OperStQual::bit_err_rt_thres_exceeded {124, "bit-err-rt-thres-exceeded"};
const Enum::YLeaf L1OperStQual::link_fail_link_reset {125, "link-fail-link-reset"};
const Enum::YLeaf L1OperStQual::link_fail_port_init_failed {126, "link-fail-port-init-failed"};
const Enum::YLeaf L1OperStQual::link_fail_port_unusable {127, "link-fail-port-unusable"};
const Enum::YLeaf L1OperStQual::link_fail_loss_of_signal {128, "link-fail-loss-of-signal"};
const Enum::YLeaf L1OperStQual::link_fail_loss_of_sync {129, "link-fail-loss-of-sync"};
const Enum::YLeaf L1OperStQual::link_fail_nos_rcvd {130, "link-fail-nos-rcvd"};
const Enum::YLeaf L1OperStQual::link_fail_ols_rcvd {131, "link-fail-ols-rcvd"};
const Enum::YLeaf L1OperStQual::link_fail_debounce_timeout {132, "link-fail-debounce-timeout"};
const Enum::YLeaf L1OperStQual::link_fail_lr_rcvd_b2b {133, "link-fail-lr-rcvd-b2b"};
const Enum::YLeaf L1OperStQual::link_fail_credit_loss {134, "link-fail-credit-loss"};
const Enum::YLeaf L1OperStQual::link_fail_rx_que_overflow {135, "link-fail-rx-que-overflow"};
const Enum::YLeaf L1OperStQual::link_fail_too_many_intr {136, "link-fail-too-many-intr"};
const Enum::YLeaf L1OperStQual::link_fail_lip_rcvd_b2b {137, "link-fail-lip-rcvd-b2b"};
const Enum::YLeaf L1OperStQual::link_fail_credit_loss_b2b {138, "link-fail-credit-loss-b2b"};
const Enum::YLeaf L1OperStQual::link_fail_opny_tmo_b2b {139, "link-fail-opny-tmo-b2b"};
const Enum::YLeaf L1OperStQual::link_fail_opny_ret_b2b {140, "link-fail-opny-ret-b2b"};
const Enum::YLeaf L1OperStQual::link_fail_lip_f8_rcvd {141, "link-fail-lip-f8-rcvd"};
const Enum::YLeaf L1OperStQual::link_fail_line_card_port_shutdown {142, "link-fail-line-card-port-shutdown"};
const Enum::YLeaf L1OperStQual::fcsp_authent_failure {143, "fcsp-authent-failure"};
const Enum::YLeaf L1OperStQual::ohms_external_lb_test {144, "ohms-external-lb-test"};
const Enum::YLeaf L1OperStQual::invalid_fabric_binding_exchange {145, "invalid-fabric-binding-exchange"};
const Enum::YLeaf L1OperStQual::tov_mismatch {146, "tov-mismatch"};
const Enum::YLeaf L1OperStQual::ficon_not_enabled {147, "ficon-not-enabled"};
const Enum::YLeaf L1OperStQual::ficon_no_portnumber {148, "ficon-no-portnumber"};
const Enum::YLeaf L1OperStQual::ficon_being_enabled {149, "ficon-being-enabled"};
const Enum::YLeaf L1OperStQual::eport_prohibited {150, "eport-prohibited"};
const Enum::YLeaf L1OperStQual::trunk_not_fully_active {151, "trunk-not-fully-active"};
const Enum::YLeaf L1OperStQual::fabric_binding_swwn_not_found {152, "fabric-binding-swwn-not-found"};
const Enum::YLeaf L1OperStQual::fabric_binding_domain_invalid {153, "fabric-binding-domain-invalid"};
const Enum::YLeaf L1OperStQual::fabric_binding_database_mismatch {154, "fabric-binding-database-mismatch"};
const Enum::YLeaf L1OperStQual::fabric_binding_peer_not_responding {155, "fabric-binding-peer-not-responding"};
const Enum::YLeaf L1OperStQual::tracked_port_down {156, "tracked-port-down"};
const Enum::YLeaf L1OperStQual::ec_suspended_for_loop {157, "ec-suspended-for-loop"};
const Enum::YLeaf L1OperStQual::isolate_bundle_miscfg {158, "isolate-bundle-miscfg"};
const Enum::YLeaf L1OperStQual::peer_not_support_bundles {159, "peer-not-support-bundles"};
const Enum::YLeaf L1OperStQual::port_bringup_isolation {160, "port-bringup-isolation"};
const Enum::YLeaf L1OperStQual::domain_not_allowed_isolation {161, "domain-not-allowed-isolation"};
const Enum::YLeaf L1OperStQual::virtual_ivr_domain_overlap_isolation {162, "virtual-ivr-domain-overlap-isolation"};
const Enum::YLeaf L1OperStQual::out_of_service {163, "out-of-service"};
const Enum::YLeaf L1OperStQual::bundle_stdby {164, "bundle-stdby"};
const Enum::YLeaf L1OperStQual::port_cap_fc_port_connector_type_err {165, "port-cap-fc-port-connector-type-err"};
const Enum::YLeaf L1OperStQual::error_disabled_reinit_limit_reached {166, "error-disabled-reinit-limit-reached"};
const Enum::YLeaf L1OperStQual::ficon_vsan_duplicate_portnum {167, "ficon-vsan-duplicate-portnum"};
const Enum::YLeaf L1OperStQual::internal_rcf_in_progress {168, "internal-rcf-in-progress"};
const Enum::YLeaf L1OperStQual::two_switches_with_same_wwn {169, "two-switches-with-same-wwn"};
const Enum::YLeaf L1OperStQual::invalid_other_princ_efp_req_recd {170, "invalid-other-princ-efp-req-recd"};
const Enum::YLeaf L1OperStQual::domain_isolation_unknown_reason {171, "domain-isolation-unknown-reason"};
const Enum::YLeaf L1OperStQual::elp_failure_all_zero_peer_wwn_rcvd {172, "elp-failure-all-zero-peer-wwn-rcvd"};
const Enum::YLeaf L1OperStQual::prefered_path_isolation {173, "prefered-path-isolation"};
const Enum::YLeaf L1OperStQual::fc_redirect_isolation {174, "fc-redirect-isolation"};
const Enum::YLeaf L1OperStQual::port_act_license_not_available {175, "port-act-license-not-available"};
const Enum::YLeaf L1OperStQual::sdm_isolation {176, "sdm-isolation"};
const Enum::YLeaf L1OperStQual::fcid_allocation_failed {177, "fcid-allocation-failed"};
const Enum::YLeaf L1OperStQual::externally_disabled {178, "externally-disabled"};
const Enum::YLeaf L1OperStQual::fcot_read_error {179, "fcot-read-error"};
const Enum::YLeaf L1OperStQual::port_guard_down_on_link_failure {180, "port-guard-down-on-link-failure"};
const Enum::YLeaf L1OperStQual::incomplete_config {181, "incomplete-config"};
const Enum::YLeaf L1OperStQual::incomplete_tunnel_config {182, "incomplete-tunnel-config"};
const Enum::YLeaf L1OperStQual::hw_programming_failed {183, "hw-programming-failed"};
const Enum::YLeaf L1OperStQual::tunnel_dest_not_reachable {184, "tunnel-dest-not-reachable"};
const Enum::YLeaf L1OperStQual::sfp_invalid {185, "sfp-invalid"};
const Enum::YLeaf L1OperStQual::tunnel_vrf_mismatch {186, "tunnel-vrf-mismatch"};
const Enum::YLeaf L1OperStQual::tunnel_vrf_fw_ref {187, "tunnel-vrf-fw-ref"};
const Enum::YLeaf L1OperStQual::duplicate_tunnel_cfg {188, "duplicate-tunnel-cfg"};
const Enum::YLeaf L1OperStQual::primary_vlan_down {189, "primary-vlan-down"};
const Enum::YLeaf L1OperStQual::dot1x_security_errdisable {190, "dot1x-security-errdisable"};
const Enum::YLeaf L1OperStQual::vf_tagging_capability_err {191, "vf-tagging-capability-err"};
const Enum::YLeaf L1OperStQual::port_disabled {192, "port-disabled"};
const Enum::YLeaf L1OperStQual::tunnel_mode_not_configured {193, "tunnel-mode-not-configured"};
const Enum::YLeaf L1OperStQual::tunnel_source_not_configured {194, "tunnel-source-not-configured"};
const Enum::YLeaf L1OperStQual::tunnel_destination_not_configured {195, "tunnel-destination-not-configured"};
const Enum::YLeaf L1OperStQual::tunnel_unable2resolve_source_ipaddress {196, "tunnel-unable2resolve-source-ipaddress"};
const Enum::YLeaf L1OperStQual::tunnel_unable2resolve_destination_ipaddress {197, "tunnel-unable2resolve-destination-ipaddress"};
const Enum::YLeaf L1OperStQual::tunnel_vrf_is_down {198, "tunnel-vrf-is-down"};
const Enum::YLeaf L1OperStQual::sif_admin_down {199, "sif-admin-down"};
const Enum::YLeaf L1OperStQual::phy_intf_down {200, "phy-intf-down"};
const Enum::YLeaf L1OperStQual::intf_sif_limit_exceeded {201, "intf-sif-limit-exceeded"};
const Enum::YLeaf L1OperStQual::insufficient_power {202, "insufficient-power"};
const Enum::YLeaf L1OperStQual::no_fcoe {203, "no-fcoe"};
const Enum::YLeaf L1OperStQual::dcx_compat_mismatch {204, "dcx-compat-mismatch"};
const Enum::YLeaf L1OperStQual::isolate_bundle_limit_exceeded {205, "isolate-bundle-limit-exceeded"};
const Enum::YLeaf L1OperStQual::sif_not_bound {206, "sif-not-bound"};
const Enum::YLeaf L1OperStQual::err_disable_lacp_miscfg {207, "err-disable-lacp-miscfg"};
const Enum::YLeaf L1OperStQual::errdisabled_pkt_err {208, "errdisabled-pkt-err"};
const Enum::YLeaf L1OperStQual::vlan_vsan_mapping_not_enabled {209, "vlan-vsan-mapping-not-enabled"};
const Enum::YLeaf L1OperStQual::stp_not_forwarding_in_fcoe_mapped_vlan {210, "stp-not-forwarding-in-fcoe-mapped-vlan"};
const Enum::YLeaf L1OperStQual::module_offline {211, "module-offline"};
const Enum::YLeaf L1OperStQual::stp_inconsist_vpc_peerlink_errdisable {212, "stp-inconsist-vpc-peerlink-errdisable"};
const Enum::YLeaf L1OperStQual::set_port_state_failed_errdisable {213, "set-port-state-failed-errdisable"};
const Enum::YLeaf L1OperStQual::tunnel_source_down {214, "tunnel-source-down"};
const Enum::YLeaf L1OperStQual::cdp_info_not_avail {215, "cdp-info-not-avail"};
const Enum::YLeaf L1OperStQual::fcot_clk_rate_mismatch {216, "fcot-clk-rate-mismatch"};
const Enum::YLeaf L1OperStQual::port_guard_down_on_trustsec_violation {217, "port-guard-down-on-trustsec-violation"};
const Enum::YLeaf L1OperStQual::wait_for_flogi {218, "wait-for-flogi"};
const Enum::YLeaf L1OperStQual::npiv_not_enabled_in_upstream {219, "npiv-not-enabled-in-upstream"};
const Enum::YLeaf L1OperStQual::vsan_mismatch_with_upstream_switch_port {220, "vsan-mismatch-with-upstream-switch-port"};
const Enum::YLeaf L1OperStQual::port_guard_bit_error_rate {221, "port-guard-bit-error-rate"};
const Enum::YLeaf L1OperStQual::port_guard_signal_loss {222, "port-guard-signal-loss"};
const Enum::YLeaf L1OperStQual::port_guard_sync_loss {223, "port-guard-sync-loss"};
const Enum::YLeaf L1OperStQual::port_guard_link_reset {224, "port-guard-link-reset"};
const Enum::YLeaf L1OperStQual::port_guard_credit_loss {225, "port-guard-credit-loss"};
const Enum::YLeaf L1OperStQual::ipqos_mgr_policy_app_failed {226, "ipqos-mgr-policy-app-failed"};
const Enum::YLeaf L1OperStQual::pause_rate_limit_errdisable {227, "pause-rate-limit-errdisable"};
const Enum::YLeaf L1OperStQual::lstgrp_uplink_down {228, "lstgrp-uplink-down"};
const Enum::YLeaf L1OperStQual::sticky_down_on_link_failure {229, "sticky-down-on-link-failure"};
const Enum::YLeaf L1OperStQual::dcx_multiple_msap_ids_errdisable {230, "dcx-multiple-msap-ids-errdisable"};
const Enum::YLeaf L1OperStQual::dcx_100_pdus_rcvd_noack_errdisable {231, "dcx-100-pdus-rcvd-noack-errdisable"};
const Enum::YLeaf L1OperStQual::enm_sat_incompat_uplink {232, "enm-sat-incompat-uplink"};
const Enum::YLeaf L1OperStQual::enm_loop_detected {233, "enm-loop-detected"};
const Enum::YLeaf L1OperStQual::sub_group_id_not_assigned {234, "sub-group-id-not-assigned"};
const Enum::YLeaf L1OperStQual::vem_unlicensed {235, "vem-unlicensed"};
const Enum::YLeaf L1OperStQual::profile_not_found {236, "profile-not-found"};
const Enum::YLeaf L1OperStQual::vlan_does_not_exist {237, "vlan-does-not-exist"};
const Enum::YLeaf L1OperStQual::vlan_type {238, "vlan-type"};
const Enum::YLeaf L1OperStQual::vlan_down {239, "vlan-down"};
const Enum::YLeaf L1OperStQual::vpc_peer_upgrade {240, "vpc-peer-upgrade"};
const Enum::YLeaf L1OperStQual::non_cisco_hba_vftag {241, "non-cisco-hba-vftag"};
const Enum::YLeaf L1OperStQual::domain_id_config_mismatch {242, "domain-id-config-mismatch"};
const Enum::YLeaf L1OperStQual::xcvr_absent {243, "xcvr-absent"};
const Enum::YLeaf L1OperStQual::vfc_binding_invalid {244, "vfc-binding-invalid"};
const Enum::YLeaf L1OperStQual::vlan_not_fcoe_enabled {245, "vlan-not-fcoe-enabled"};
const Enum::YLeaf L1OperStQual::pvlan_native_vlan_err {246, "pvlan-native-vlan-err"};
const Enum::YLeaf L1OperStQual::eth_l2_vlan_down {247, "eth-l2-vlan-down"};
const Enum::YLeaf L1OperStQual::eth_intf_invalid_binding {248, "eth-intf-invalid-binding"};
const Enum::YLeaf L1OperStQual::pmon_failure {249, "pmon-failure"};
const Enum::YLeaf L1OperStQual::l3_not_ready {250, "l3-not-ready"};
const Enum::YLeaf L1OperStQual::speed_mismatch {251, "speed-mismatch"};
const Enum::YLeaf L1OperStQual::flowcontrol_mismatch {252, "flowcontrol-mismatch"};
const Enum::YLeaf L1OperStQual::vdc_mode {253, "vdc-mode"};
const Enum::YLeaf L1OperStQual::enm_pin_fail_link_down {254, "enm-pin-fail-link-down"};
const Enum::YLeaf L1OperStQual::inactive_m1_port_fpath_access_vlan {255, "inactive-m1-port-fpath-access-vlan"};

const Enum::YLeaf FirmwareType::controller {0, "controller"};
const Enum::YLeaf FirmwareType::switch_ {1, "switch"};
const Enum::YLeaf FirmwareType::catalog {2, "catalog"};

const Enum::YLeaf DatetimeLoggingLevel::emergency {0, "emergency"};
const Enum::YLeaf DatetimeLoggingLevel::alert {1, "alert"};
const Enum::YLeaf DatetimeLoggingLevel::critical {2, "critical"};
const Enum::YLeaf DatetimeLoggingLevel::error {3, "error"};
const Enum::YLeaf DatetimeLoggingLevel::warning {4, "warning"};
const Enum::YLeaf DatetimeLoggingLevel::notif {5, "notif"};
const Enum::YLeaf DatetimeLoggingLevel::inform {6, "inform"};
const Enum::YLeaf DatetimeLoggingLevel::debug {7, "debug"};

const Enum::YLeaf FcoeAdminSt::enabled {1, "enabled"};
const Enum::YLeaf FcoeAdminSt::disabled {2, "disabled"};

const Enum::YLeaf MonitorDirection::in {1, "in"};
const Enum::YLeaf MonitorDirection::out {2, "out"};
const Enum::YLeaf MonitorDirection::both {3, "both"};
const Enum::YLeaf MonitorDirection::none {4, "none"};

const Enum::YLeaf MonitorMode::access {1, "access"};
const Enum::YLeaf MonitorMode::fabric {2, "fabric"};

const Enum::YLeaf BgpPrivateASControl::none {0, "none"};
const Enum::YLeaf BgpPrivateASControl::remove_exclusive {1, "remove-exclusive"};
const Enum::YLeaf BgpPrivateASControl::remove_all {2, "remove-all"};
const Enum::YLeaf BgpPrivateASControl::replace_as {3, "replace-as"};

const Enum::YLeaf RtcomMode::standard {1, "standard"};
const Enum::YLeaf RtcomMode::regex {2, "regex"};

const Enum::YLeaf AggregateBooleanFlag::no {0, "no"};
const Enum::YLeaf AggregateBooleanFlag::yes {1, "yes"};

const Enum::YLeaf OamEpT::ep {1, "ep"};
const Enum::YLeaf OamEpT::vtep_ep {2, "vtep-ep"};
const Enum::YLeaf OamEpT::node {3, "node"};

const Enum::YLeaf IpqosPolicyType::none {0, "none"};
const Enum::YLeaf IpqosPolicyType::qos {1, "qos"};
const Enum::YLeaf IpqosPolicyType::queuing {2, "queuing"};

const Enum::YLeaf IsisDbT::ls {1, "ls"};
const Enum::YLeaf IsisDbT::rt {2, "rt"};
const Enum::YLeaf IsisDbT::nh {3, "nh"};
const Enum::YLeaf IsisDbT::mcgrp {4, "mcgrp"};
const Enum::YLeaf IsisDbT::fn {5, "fn"};
const Enum::YLeaf IsisDbT::dtep {6, "dtep"};

const Enum::YLeaf L1TrunkLog::default_ {1, "default"};
const Enum::YLeaf L1TrunkLog::enable {2, "enable"};
const Enum::YLeaf L1TrunkLog::disable {3, "disable"};

const Enum::YLeaf IgmpLimitSt::below_thresh {0, "below-thresh"};
const Enum::YLeaf IgmpLimitSt::above_thresh {1, "above-thresh"};
const Enum::YLeaf IgmpLimitSt::exhausted {2, "exhausted"};

const Enum::YLeaf MribHoldAdminSt::enabled {1, "enabled"};
const Enum::YLeaf MribHoldAdminSt::disabled {2, "disabled"};

const Enum::YLeaf L1Medium::broadcast {1, "broadcast"};
const Enum::YLeaf L1Medium::p2p {2, "p2p"};

const Enum::YLeaf RibDbT::rt {1, "rt"};
const Enum::YLeaf RibDbT::nh {2, "nh"};
const Enum::YLeaf RibDbT::adj {3, "adj"};

const Enum::YLeaf CapScope::node {0, "node"};
const Enum::YLeaf CapScope::policy_domain {1, "policy-domain"};
const Enum::YLeaf CapScope::fabric {2, "fabric"};

const Enum::YLeaf Icmpv6LoggingLevel::Emergency {0, "Emergency"};
const Enum::YLeaf Icmpv6LoggingLevel::Alert {1, "Alert"};
const Enum::YLeaf Icmpv6LoggingLevel::Critical {2, "Critical"};
const Enum::YLeaf Icmpv6LoggingLevel::Error {3, "Error"};
const Enum::YLeaf Icmpv6LoggingLevel::Warning {4, "Warning"};
const Enum::YLeaf Icmpv6LoggingLevel::Notice {5, "Notice"};
const Enum::YLeaf Icmpv6LoggingLevel::Informational {6, "Informational"};
const Enum::YLeaf Icmpv6LoggingLevel::Debug {7, "Debug"};

const Enum::YLeaf L1SwitchportMacLearn::disable {0, "disable"};
const Enum::YLeaf L1SwitchportMacLearn::enable {1, "enable"};

const Enum::YLeaf LacpSysRole::primary {1, "primary"};
const Enum::YLeaf LacpSysRole::secondary {2, "secondary"};

const Enum::YLeaf NwAdminStProcessStatAutoDisc::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStProcessStatAutoDisc::disabled {2, "disabled"};

const Enum::YLeaf SnmpNotificationType::traps {1, "traps"};
const Enum::YLeaf SnmpNotificationType::informs {2, "informs"};

const Enum::YLeaf AnalyticsOperSt::enabled {1, "enabled"};
const Enum::YLeaf AnalyticsOperSt::disabled {2, "disabled"};

const Enum::YLeaf MribModeAdminSt::enabled {1, "enabled"};
const Enum::YLeaf MribModeAdminSt::disabled {2, "disabled"};

const Enum::YLeaf EqptPsRdnM::unknown {0, "unknown"};
const Enum::YLeaf EqptPsRdnM::not_supp {1, "not-supp"};
const Enum::YLeaf EqptPsRdnM::rdn {2, "rdn"};
const Enum::YLeaf EqptPsRdnM::comb {3, "comb"};
const Enum::YLeaf EqptPsRdnM::n_rdn {4, "n-rdn"};
const Enum::YLeaf EqptPsRdnM::ps_rdn {5, "ps-rdn"};
const Enum::YLeaf EqptPsRdnM::insrc_rdn {6, "insrc-rdn"};
const Enum::YLeaf EqptPsRdnM::sinin_rdn {7, "sinin-rdn"};
const Enum::YLeaf EqptPsRdnM::comb_force {8, "comb-force"};

const Enum::YLeaf ActionAdminSt::unknown {0, "unknown"};
const Enum::YLeaf ActionAdminSt::start {1, "start"};
const Enum::YLeaf ActionAdminSt::stop {2, "stop"};
const Enum::YLeaf ActionAdminSt::suspend {3, "suspend"};

const Enum::YLeaf BgpRtCtrlOperSt::unresolved {1, "unresolved"};
const Enum::YLeaf BgpRtCtrlOperSt::resolved {2, "resolved"};

const Enum::YLeaf RtleakProto::unspecified {0, "unspecified"};
const Enum::YLeaf RtleakProto::static_ {1, "static"};
const Enum::YLeaf RtleakProto::direct {2, "direct"};
const Enum::YLeaf RtleakProto::bgp {3, "bgp"};
const Enum::YLeaf RtleakProto::isis {4, "isis"};
const Enum::YLeaf RtleakProto::ospf {5, "ospf"};
const Enum::YLeaf RtleakProto::ospfv3 {6, "ospfv3"};
const Enum::YLeaf RtleakProto::eigrp {7, "eigrp"};
const Enum::YLeaf RtleakProto::host {8, "host"};
const Enum::YLeaf RtleakProto::rip {9, "rip"};
const Enum::YLeaf RtleakProto::amt {10, "amt"};
const Enum::YLeaf RtleakProto::lisp {11, "lisp"};
const Enum::YLeaf RtleakProto::hmm {12, "hmm"};
const Enum::YLeaf RtleakProto::am {13, "am"};

const Enum::YLeaf AaaLdapSSLStrictnessLevel::strict {0, "strict"};
const Enum::YLeaf AaaLdapSSLStrictnessLevel::permissive {1, "permissive"};

const Enum::YLeaf PcPortChannelProtocol::unknown {0, "unknown"};
const Enum::YLeaf PcPortChannelProtocol::none {1, "none"};
const Enum::YLeaf PcPortChannelProtocol::lacp {2, "lacp"};

const Enum::YLeaf InstallerInstType::none {-1, "none"};
const Enum::YLeaf InstallerInstType::disruptive {0, "disruptive"};
const Enum::YLeaf InstallerInstType::non_disruptive {1, "non-disruptive"};

const Enum::YLeaf OspfEventType::adj {0, "adj"};
const Enum::YLeaf OspfEventType::internal {1, "internal"};
const Enum::YLeaf OspfEventType::ha {2, "ha"};
const Enum::YLeaf OspfEventType::lsa_flood {3, "lsa-flood"};
const Enum::YLeaf OspfEventType::lsa {4, "lsa"};
const Enum::YLeaf OspfEventType::spf {5, "spf"};
const Enum::YLeaf OspfEventType::redist {6, "redist"};
const Enum::YLeaf OspfEventType::ldp {7, "ldp"};
const Enum::YLeaf OspfEventType::mpls_te {8, "mpls-te"};
const Enum::YLeaf OspfEventType::hello {9, "hello"};
const Enum::YLeaf OspfEventType::rib {10, "rib"};
const Enum::YLeaf OspfEventType::spf_trigger {11, "spf-trigger"};
const Enum::YLeaf OspfEventType::cli {12, "cli"};

const Enum::YLeaf L2MacInfo::standard {0, "standard"};
const Enum::YLeaf L2MacInfo::drop {1, "drop"};
const Enum::YLeaf L2MacInfo::svi_down_flood {2, "svi-down-flood"};
const Enum::YLeaf L2MacInfo::sup_inband_cfsoe {3, "sup-inband-cfsoe"};
const Enum::YLeaf L2MacInfo::vpc_peer_link {4, "vpc-peer-link"};
const Enum::YLeaf L2MacInfo::nve {5, "nve"};
const Enum::YLeaf L2MacInfo::sup_eth {6, "sup-eth"};

const Enum::YLeaf NvoVniTypeT::L2 {1, "L2"};
const Enum::YLeaf NvoVniTypeT::L3 {2, "L3"};

const Enum::YLeaf ArpEventType::cli {0, "cli"};
const Enum::YLeaf ArpEventType::client_events {1, "client-events"};
const Enum::YLeaf ArpEventType::client_errors {2, "client-errors"};
const Enum::YLeaf ArpEventType::control_events {3, "control-events"};
const Enum::YLeaf ArpEventType::internal_events {4, "internal-events"};
const Enum::YLeaf ArpEventType::internal_errors {5, "internal-errors"};
const Enum::YLeaf ArpEventType::high_availability {6, "high-availability"};
const Enum::YLeaf ArpEventType::ip_sync {7, "ip-sync"};
const Enum::YLeaf ArpEventType::local_cache_events {8, "local-cache-events"};
const Enum::YLeaf ArpEventType::local_cache_errors {9, "local-cache-errors"};
const Enum::YLeaf ArpEventType::pkt_messages {10, "pkt-messages"};
const Enum::YLeaf ArpEventType::snmp {11, "snmp"};
const Enum::YLeaf ArpEventType::suppress_events {12, "suppress-events"};
const Enum::YLeaf ArpEventType::suppress_errors {13, "suppress-errors"};
const Enum::YLeaf ArpEventType::sync {14, "sync"};
const Enum::YLeaf ArpEventType::arp_controller_errors {15, "arp-controller-errors"};
const Enum::YLeaf ArpEventType::arp_dme_event {16, "arp-dme-event"};
const Enum::YLeaf ArpEventType::adjacency_control {101, "adjacency-control"};
const Enum::YLeaf ArpEventType::adjacency_errors {102, "adjacency-errors"};
const Enum::YLeaf ArpEventType::adjacency_ipc_events {103, "adjacency-ipc-events"};
const Enum::YLeaf ArpEventType::adjacency_stats {104, "adjacency-stats"};
const Enum::YLeaf ArpEventType::adjacency_high_availability {105, "adjacency-high-availability"};
const Enum::YLeaf ArpEventType::adjacency_cli {106, "adjacency-cli"};
const Enum::YLeaf ArpEventType::adjacency_sdb {107, "adjacency-sdb"};
const Enum::YLeaf ArpEventType::adjacency_snmp {108, "adjacency-snmp"};
const Enum::YLeaf ArpEventType::adjacency_netbroker {109, "adjacency-netbroker"};
const Enum::YLeaf ArpEventType::am_dme_event {110, "am-dme-event"};
const Enum::YLeaf ArpEventType::am_event {111, "am-event"};

const Enum::YLeaf NbmNbmLinkRole::EXTERNAL_LINK {0, "EXTERNAL_LINK"};
const Enum::YLeaf NbmNbmLinkRole::FABRIC_LINK {1, "FABRIC_LINK"};

const Enum::YLeaf PoePoePortmode::Default {0, "Default"};
const Enum::YLeaf PoePoePortmode::never {1, "never"};
const Enum::YLeaf PoePoePortmode::auto_ {2, "auto"};
const Enum::YLeaf PoePoePortmode::static_ {3, "static"};

const Enum::YLeaf RtmapRpTypeT::unspecified {0, "unspecified"};
const Enum::YLeaf RtmapRpTypeT::ASM {1, "ASM"};
const Enum::YLeaf RtmapRpTypeT::Bidir {2, "Bidir"};

const Enum::YLeaf SnmpV3SecLvl::unspecified {0, "unspecified"};
const Enum::YLeaf SnmpV3SecLvl::noauth {1, "noauth"};
const Enum::YLeaf SnmpV3SecLvl::auth {2, "auth"};
const Enum::YLeaf SnmpV3SecLvl::priv {3, "priv"};

const Enum::YLeaf BgpMvpnRtType::none {0, "none"};
const Enum::YLeaf BgpMvpnRtType::interas_ipmsi_ad {1, "interas-ipmsi-ad"};
const Enum::YLeaf BgpMvpnRtType::intraas_ipmsi_ad {2, "intraas-ipmsi-ad"};
const Enum::YLeaf BgpMvpnRtType::spmsi_ad {3, "spmsi-ad"};
const Enum::YLeaf BgpMvpnRtType::leaf_ad {4, "leaf-ad"};
const Enum::YLeaf BgpMvpnRtType::sa_ad {5, "sa-ad"};
const Enum::YLeaf BgpMvpnRtType::shared_c_mcast {6, "shared-c-mcast"};
const Enum::YLeaf BgpMvpnRtType::source_c_mcast {7, "source-c-mcast"};

const Enum::YLeaf MonitorSrcT::port {1, "port"};
const Enum::YLeaf MonitorSrcT::encap {2, "encap"};
const Enum::YLeaf MonitorSrcT::port_encap {3, "port-encap"};

const Enum::YLeaf VpcPeerStQual::success {0, "success"};
const Enum::YLeaf VpcPeerStQual::uplinks_down {1, "uplinks-down"};
const Enum::YLeaf VpcPeerStQual::route_down {2, "route-down"};
const Enum::YLeaf VpcPeerStQual::peer_unrch {3, "peer-unrch"};
const Enum::YLeaf VpcPeerStQual::compat_fail {4, "compat-fail"};
const Enum::YLeaf VpcPeerStQual::election_err {5, "election-err"};
const Enum::YLeaf VpcPeerStQual::oob_not_up {6, "oob-not-up"};

const Enum::YLeaf FlowDirection::unspecified {0, "unspecified"};
const Enum::YLeaf FlowDirection::in {1, "in"};
const Enum::YLeaf FlowDirection::out {2, "out"};
const Enum::YLeaf FlowDirection::both {3, "both"};

const Enum::YLeaf BgpPeerOperSt::unspecified {0, "unspecified"};
const Enum::YLeaf BgpPeerOperSt::illegal {1, "illegal"};
const Enum::YLeaf BgpPeerOperSt::shut {2, "shut"};
const Enum::YLeaf BgpPeerOperSt::idle {3, "idle"};
const Enum::YLeaf BgpPeerOperSt::connect {4, "connect"};
const Enum::YLeaf BgpPeerOperSt::active {5, "active"};
const Enum::YLeaf BgpPeerOperSt::open_sent {6, "open-sent"};
const Enum::YLeaf BgpPeerOperSt::open_confirm {7, "open-confirm"};
const Enum::YLeaf BgpPeerOperSt::established {8, "established"};
const Enum::YLeaf BgpPeerOperSt::closing {9, "closing"};
const Enum::YLeaf BgpPeerOperSt::error {10, "error"};
const Enum::YLeaf BgpPeerOperSt::unknown {11, "unknown"};

const Enum::YLeaf RtctrlRtCtrlDir::in {1, "in"};
const Enum::YLeaf RtctrlRtCtrlDir::out {2, "out"};

const Enum::YLeaf ClimodeT::EXEC {0, "EXEC"};
const Enum::YLeaf ClimodeT::CONFIG {1, "CONFIG"};

const Enum::YLeaf RelnClassId::unspecified {0, "unspecified"};
const Enum::YLeaf RelnClassId::cdpIf {1, "cdpIf"};
const Enum::YLeaf RelnClassId::cnwAggrIf {2, "cnwAggrIf"};
const Enum::YLeaf RelnClassId::cnwPhysIf {3, "cnwPhysIf"};
const Enum::YLeaf RelnClassId::connIf {4, "connIf"};
const Enum::YLeaf RelnClassId::datetimeNtpSrcIf {5, "datetimeNtpSrcIf"};
const Enum::YLeaf RelnClassId::dhcpClientIf {6, "dhcpClientIf"};
const Enum::YLeaf RelnClassId::dhcpDAIIf {7, "dhcpDAIIf"};
const Enum::YLeaf RelnClassId::dhcpIpsgIf {8, "dhcpIpsgIf"};
const Enum::YLeaf RelnClassId::dhcpPseudoIf {9, "dhcpPseudoIf"};
const Enum::YLeaf RelnClassId::dhcpRelayIf {10, "dhcpRelayIf"};
const Enum::YLeaf RelnClassId::dhcpServerIf {11, "dhcpServerIf"};
const Enum::YLeaf RelnClassId::dhcpSnoopIf {12, "dhcpSnoopIf"};
const Enum::YLeaf RelnClassId::dhcpSourceIf {13, "dhcpSourceIf"};
const Enum::YLeaf RelnClassId::dhcpSrcIf {14, "dhcpSrcIf"};
const Enum::YLeaf RelnClassId::dhcpV6SourceIf {15, "dhcpV6SourceIf"};
const Enum::YLeaf RelnClassId::dhcpV6SrcIf {16, "dhcpV6SrcIf"};
const Enum::YLeaf RelnClassId::egressIf {17, "egressIf"};
const Enum::YLeaf RelnClassId::ingressIf {18, "ingressIf"};
const Enum::YLeaf RelnClassId::ipSrcIf {19, "ipSrcIf"};
const Enum::YLeaf RelnClassId::l1EthIf {20, "l1EthIf"};
const Enum::YLeaf RelnClassId::l1PhysIf {21, "l1PhysIf"};
const Enum::YLeaf RelnClassId::l2BrIf {22, "l2BrIf"};
const Enum::YLeaf RelnClassId::l2ExtIf {23, "l2ExtIf"};
const Enum::YLeaf RelnClassId::l2InbandIf {24, "l2InbandIf"};
const Enum::YLeaf RelnClassId::l2VfcIf {25, "l2VfcIf"};
const Enum::YLeaf RelnClassId::l3If {26, "l3If"};
const Enum::YLeaf RelnClassId::l3LbRtdIf {27, "l3LbRtdIf"};
const Enum::YLeaf RelnClassId::lldpIf {28, "lldpIf"};
const Enum::YLeaf RelnClassId::mcpIf {29, "mcpIf"};
const Enum::YLeaf RelnClassId::mgmtMgmtIf {30, "mgmtMgmtIf"};
const Enum::YLeaf RelnClassId::mgmtRtdMgmtIf {31, "mgmtRtdMgmtIf"};
const Enum::YLeaf RelnClassId::nwIf {32, "nwIf"};
const Enum::YLeaf RelnClassId::ospfIf {33, "ospfIf"};
const Enum::YLeaf RelnClassId::ospfv3If {34, "ospfv3If"};
const Enum::YLeaf RelnClassId::pcAggrIf {35, "pcAggrIf"};
const Enum::YLeaf RelnClassId::pktOnPassiveIf {36, "pktOnPassiveIf"};
const Enum::YLeaf RelnClassId::regressIf {37, "regressIf"};
const Enum::YLeaf RelnClassId::rsactiveIf {38, "rsactiveIf"};
const Enum::YLeaf RelnClassId::rtactiveIf {39, "rtactiveIf"};
const Enum::YLeaf RelnClassId::rtlsNodeToIf {40, "rtlsNodeToIf"};
const Enum::YLeaf RelnClassId::srcIf {41, "srcIf"};
const Enum::YLeaf RelnClassId::tunnelIf {42, "tunnelIf"};
const Enum::YLeaf RelnClassId::vpcIf {43, "vpcIf"};
const Enum::YLeaf RelnClassId::l3Inst {44, "l3Inst"};
const Enum::YLeaf RelnClassId::l3EncRtdIf {45, "l3EncRtdIf"};
const Enum::YLeaf RelnClassId::rtregcomRule {46, "rtregcomRule"};
const Enum::YLeaf RelnClassId::rtpfxRule {47, "rtpfxRule"};
const Enum::YLeaf RelnClassId::rtmapMatchRtDst {48, "rtmapMatchRtDst"};

const Enum::YLeaf EthpmErrDisEvent::event_link_flap {0, "event-link-flap"};
const Enum::YLeaf EthpmErrDisEvent::event_udld {1, "event-udld"};
const Enum::YLeaf EthpmErrDisEvent::event_bpduguard {2, "event-bpduguard"};
const Enum::YLeaf EthpmErrDisEvent::event_loopback {3, "event-loopback"};
const Enum::YLeaf EthpmErrDisEvent::event_storm_ctrl {4, "event-storm-ctrl"};
const Enum::YLeaf EthpmErrDisEvent::event_dhcp_rate_lim {5, "event-dhcp-rate-lim"};
const Enum::YLeaf EthpmErrDisEvent::event_arp_inspection {6, "event-arp-inspection"};
const Enum::YLeaf EthpmErrDisEvent::event_sec_violation {7, "event-sec-violation"};
const Enum::YLeaf EthpmErrDisEvent::event_psec_violation {8, "event-psec-violation"};
const Enum::YLeaf EthpmErrDisEvent::event_stp_inconsist_vpc_peerlink {9, "event-stp-inconsist-vpc-peerlink"};
const Enum::YLeaf EthpmErrDisEvent::event_set_port_state_failed {10, "event-set-port-state-failed"};
const Enum::YLeaf EthpmErrDisEvent::event_debug_1 {11, "event-debug-1"};
const Enum::YLeaf EthpmErrDisEvent::event_debug_2 {12, "event-debug-2"};
const Enum::YLeaf EthpmErrDisEvent::event_debug_3 {13, "event-debug-3"};
const Enum::YLeaf EthpmErrDisEvent::event_debug_4 {14, "event-debug-4"};
const Enum::YLeaf EthpmErrDisEvent::event_debug_5 {15, "event-debug-5"};
const Enum::YLeaf EthpmErrDisEvent::event_ip_addr_conflict {16, "event-ip-addr-conflict"};
const Enum::YLeaf EthpmErrDisEvent::event_ipqos_mgr_error {17, "event-ipqos-mgr-error"};
const Enum::YLeaf EthpmErrDisEvent::event_ethpm {18, "event-ethpm"};
const Enum::YLeaf EthpmErrDisEvent::event_ipqos_dcbxp_compat_failure {19, "event-ipqos-dcbxp-compat-failure"};
const Enum::YLeaf EthpmErrDisEvent::event_syserr_based {20, "event-syserr-based"};
const Enum::YLeaf EthpmErrDisEvent::unknown {21, "unknown"};
const Enum::YLeaf EthpmErrDisEvent::event_mcp_loop {22, "event-mcp-loop"};
const Enum::YLeaf EthpmErrDisEvent::event_ep_move {23, "event-ep-move"};
const Enum::YLeaf EthpmErrDisEvent::event_dcbx_no_ack {24, "event-dcbx-no-ack"};

const Enum::YLeaf PlatformQosMinBuffer::all {0, "all"};
const Enum::YLeaf PlatformQosMinBuffer::none {1, "none"};
const Enum::YLeaf PlatformQosMinBuffer::default_ {2, "default"};

const Enum::YLeaf EqptRdSt::unknown {0, "unknown"};
const Enum::YLeaf EqptRdSt::active {1, "active"};
const Enum::YLeaf EqptRdSt::standby {2, "standby"};

const Enum::YLeaf OspfIfOperSt::unknown {0, "unknown"};
const Enum::YLeaf OspfIfOperSt::down {1, "down"};
const Enum::YLeaf OspfIfOperSt::loopback {2, "loopback"};
const Enum::YLeaf OspfIfOperSt::waiting {3, "waiting"};
const Enum::YLeaf OspfIfOperSt::p2p {4, "p2p"};
const Enum::YLeaf OspfIfOperSt::dr {5, "dr"};
const Enum::YLeaf OspfIfOperSt::bdr {6, "bdr"};
const Enum::YLeaf OspfIfOperSt::dr_other {7, "dr-other"};

const Enum::YLeaf L1Duplex::auto_ {1, "auto"};
const Enum::YLeaf L1Duplex::full {2, "full"};
const Enum::YLeaf L1Duplex::half {3, "half"};

const Enum::YLeaf L1PacketTimestampState::disable {0, "disable"};
const Enum::YLeaf L1PacketTimestampState::enable_ingress {1, "enable-ingress"};
const Enum::YLeaf L1PacketTimestampState::enable_egress {2, "enable-egress"};
const Enum::YLeaf L1PacketTimestampState::enable_both {3, "enable-both"};

const Enum::YLeaf AggregateAfT::ipv4_ucast {0, "ipv4-ucast"};
const Enum::YLeaf AggregateAfT::vpnv4_ucast {1, "vpnv4-ucast"};
const Enum::YLeaf AggregateAfT::ipv6_ucast {2, "ipv6-ucast"};
const Enum::YLeaf AggregateAfT::vpnv6_ucast {3, "vpnv6-ucast"};
const Enum::YLeaf AggregateAfT::l2_evpn {4, "l2-evpn"};

const Enum::YLeaf ArpSuppressArpMode::disabled {0, "disabled"};
const Enum::YLeaf ArpSuppressArpMode::l2suppressarp {1, "l2suppressarp"};
const Enum::YLeaf ArpSuppressArpMode::l2l3suppressarp {2, "l2l3suppressarp"};
const Enum::YLeaf ArpSuppressArpMode::invalid {3, "invalid"};

const Enum::YLeaf EqptcapXcvrT::unspecified {0, "unspecified"};
const Enum::YLeaf EqptcapXcvrT::gbic {1, "gbic"};
const Enum::YLeaf EqptcapXcvrT::solder {2, "solder"};
const Enum::YLeaf EqptcapXcvrT::sfp {3, "sfp"};
const Enum::YLeaf EqptcapXcvrT::xbi {4, "xbi"};
const Enum::YLeaf EqptcapXcvrT::xenpak {5, "xenpak"};
const Enum::YLeaf EqptcapXcvrT::xfp {6, "xfp"};
const Enum::YLeaf EqptcapXcvrT::xff {7, "xff"};
const Enum::YLeaf EqptcapXcvrT::xfp_e {8, "xfp-e"};
const Enum::YLeaf EqptcapXcvrT::xpak {9, "xpak"};
const Enum::YLeaf EqptcapXcvrT::x2 {10, "x2"};
const Enum::YLeaf EqptcapXcvrT::dwdm_sfp {11, "dwdm-sfp"};
const Enum::YLeaf EqptcapXcvrT::qsfp {12, "qsfp"};

const Enum::YLeaf L1DceMode::core {1, "core"};
const Enum::YLeaf L1DceMode::edge {2, "edge"};
const Enum::YLeaf L1DceMode::auto_ {3, "auto"};
const Enum::YLeaf L1DceMode::off {4, "off"};

const Enum::YLeaf L1OperSt::unknown {0, "unknown"};
const Enum::YLeaf L1OperSt::down {1, "down"};
const Enum::YLeaf L1OperSt::up {2, "up"};
const Enum::YLeaf L1OperSt::link_up {3, "link-up"};

const Enum::YLeaf ArpLoggingLevel::emergency {0, "emergency"};
const Enum::YLeaf ArpLoggingLevel::alert {1, "alert"};
const Enum::YLeaf ArpLoggingLevel::critical {2, "critical"};
const Enum::YLeaf ArpLoggingLevel::error {3, "error"};
const Enum::YLeaf ArpLoggingLevel::warning {4, "warning"};
const Enum::YLeaf ArpLoggingLevel::notification {5, "notification"};
const Enum::YLeaf ArpLoggingLevel::informational {6, "informational"};
const Enum::YLeaf ArpLoggingLevel::debug {7, "debug"};

const Enum::YLeaf OspfBfdControl::unspecified {0, "unspecified"};
const Enum::YLeaf OspfBfdControl::enabled {1, "enabled"};
const Enum::YLeaf OspfBfdControl::disabled {2, "disabled"};

const Enum::YLeaf BgpSoftReconfigBackup::none {0, "none"};
const Enum::YLeaf BgpSoftReconfigBackup::inbound {1, "inbound"};
const Enum::YLeaf BgpSoftReconfigBackup::inbound_always {2, "inbound-always"};

const Enum::YLeaf StpRoot::primary {1, "primary"};
const Enum::YLeaf StpRoot::secondary {2, "secondary"};

const Enum::YLeaf OpflexDeviceType::unknown {0, "unknown"};
const Enum::YLeaf OpflexDeviceType::n1kv {1, "n1kv"};
const Enum::YLeaf OpflexDeviceType::hyperv {2, "hyperv"};
const Enum::YLeaf OpflexDeviceType::ovs {3, "ovs"};

const Enum::YLeaf EqptAirFilter::absent {0, "absent"};
const Enum::YLeaf EqptAirFilter::present {1, "present"};
const Enum::YLeaf EqptAirFilter::notsupported {2, "notsupported"};

const Enum::YLeaf UdldOperSt::enabled {1, "enabled"};
const Enum::YLeaf UdldOperSt::disabled {2, "disabled"};

const Enum::YLeaf SisfRaGuardOtherConfig::off {0, "off"};
const Enum::YLeaf SisfRaGuardOtherConfig::on {1, "on"};
const Enum::YLeaf SisfRaGuardOtherConfig::nocheck {2, "nocheck"};

const Enum::YLeaf RtfltAction::deny {0, "deny"};
const Enum::YLeaf RtfltAction::permit {1, "permit"};

const Enum::YLeaf BgpLsAttrEntryType::none {0, "none"};
const Enum::YLeaf BgpLsAttrEntryType::peer_node_sid {1101, "peer-node-sid"};
const Enum::YLeaf BgpLsAttrEntryType::peer_adj_sid {1102, "peer-adj-sid"};
const Enum::YLeaf BgpLsAttrEntryType::peer_set_sid {1103, "peer-set-sid"};

const Enum::YLeaf CoppProfT::unknown {0, "unknown"};
const Enum::YLeaf CoppProfT::strict {1, "strict"};
const Enum::YLeaf CoppProfT::moderate {2, "moderate"};
const Enum::YLeaf CoppProfT::dense {4, "dense"};
const Enum::YLeaf CoppProfT::lenient {3, "lenient"};

const Enum::YLeaf BgpTblSt::unknown {0, "unknown"};
const Enum::YLeaf BgpTblSt::up {1, "up"};
const Enum::YLeaf BgpTblSt::down {2, "down"};

const Enum::YLeaf IsisIsT::l1 {1, "l1"};
const Enum::YLeaf IsisIsT::l2 {2, "l2"};
const Enum::YLeaf IsisIsT::l12 {3, "l12"};

const Enum::YLeaf ArpStAdjOperStQual::unspecified {0, "unspecified"};
const Enum::YLeaf ArpStAdjOperStQual::subnet_mismatch {1, "subnet-mismatch"};
const Enum::YLeaf ArpStAdjOperStQual::invalid_mac {2, "invalid-mac"};
const Enum::YLeaf ArpStAdjOperStQual::invalid_ip {3, "invalid-ip"};
const Enum::YLeaf ArpStAdjOperStQual::invalid_vrf {4, "invalid-vrf"};
const Enum::YLeaf ArpStAdjOperStQual::own_mac {5, "own-mac"};
const Enum::YLeaf ArpStAdjOperStQual::if_down {6, "if-down"};
const Enum::YLeaf ArpStAdjOperStQual::up {7, "up"};
const Enum::YLeaf ArpStAdjOperStQual::invalid_if {8, "invalid-if"};
const Enum::YLeaf ArpStAdjOperStQual::invalid_clidata {9, "invalid-clidata"};
const Enum::YLeaf ArpStAdjOperStQual::no_memory {10, "no-memory"};

const Enum::YLeaf SyslogSeverityLevelSeverity::emergencies {0, "emergencies"};
const Enum::YLeaf SyslogSeverityLevelSeverity::alerts {1, "alerts"};
const Enum::YLeaf SyslogSeverityLevelSeverity::critical {2, "critical"};
const Enum::YLeaf SyslogSeverityLevelSeverity::errors {3, "errors"};
const Enum::YLeaf SyslogSeverityLevelSeverity::warnings {4, "warnings"};
const Enum::YLeaf SyslogSeverityLevelSeverity::notifications {5, "notifications"};
const Enum::YLeaf SyslogSeverityLevelSeverity::information {6, "information"};
const Enum::YLeaf SyslogSeverityLevelSeverity::debugging {7, "debugging"};
const Enum::YLeaf SyslogSeverityLevelSeverity::unspecified {8, "unspecified"};

const Enum::YLeaf ArpOpcode::unspecified {0, "unspecified"};
const Enum::YLeaf ArpOpcode::req {1, "req"};
const Enum::YLeaf ArpOpcode::reply {2, "reply"};

const Enum::YLeaf TelemetryAdminState::enabled {1, "enabled"};

const Enum::YLeaf VrrpBfdSessionSt::disabled {0, "disabled"};
const Enum::YLeaf VrrpBfdSessionSt::inactive {1, "inactive"};
const Enum::YLeaf VrrpBfdSessionSt::deleted {2, "deleted"};
const Enum::YLeaf VrrpBfdSessionSt::unknown {3, "unknown"};
const Enum::YLeaf VrrpBfdSessionSt::active {4, "active"};

const Enum::YLeaf EthpmShareState::dedicated {0, "dedicated"};
const Enum::YLeaf EthpmShareState::shared {1, "shared"};

const Enum::YLeaf OspfOperSt::invalid {0, "invalid"};
const Enum::YLeaf OspfOperSt::down {1, "down"};
const Enum::YLeaf OspfOperSt::up {2, "up"};

const Enum::YLeaf InstallerInstErr::none {0, "none"};
const Enum::YLeaf InstallerInstErr::preupg_err1 {1, "preupg-err1"};
const Enum::YLeaf InstallerInstErr::preupg_err2 {2, "preupg-err2"};
const Enum::YLeaf InstallerInstErr::user_abort {3, "user-abort"};

const Enum::YLeaf AaaRulePermissionType::none {0, "none"};
const Enum::YLeaf AaaRulePermissionType::permit {1, "permit"};
const Enum::YLeaf AaaRulePermissionType::deny {2, "deny"};

const Enum::YLeaf NdRtPrefForNdRt::low {0, "low"};
const Enum::YLeaf NdRtPrefForNdRt::medium {1, "medium"};
const Enum::YLeaf NdRtPrefForNdRt::high {2, "high"};

const Enum::YLeaf FirmwareRunningMode::normal {0, "normal"};
const Enum::YLeaf FirmwareRunningMode::recovery {1, "recovery"};

const Enum::YLeaf NvoPeerStateT::Up {1, "Up"};
const Enum::YLeaf NvoPeerStateT::Down {2, "Down"};

const Enum::YLeaf TrackProbeState::reachability {0, "reachability"};
const Enum::YLeaf TrackProbeState::state {1, "state"};

const Enum::YLeaf PcLastSt::successful {0, "successful"};
const Enum::YLeaf PcLastSt::failed {1, "failed"};

const Enum::YLeaf IpmcJoinType::Y_0 {0, "0"};
const Enum::YLeaf IpmcJoinType::Y_1 {1, "1"};

const Enum::YLeaf L1SwitchportVirtualEthernetBridge::disable {0, "disable"};
const Enum::YLeaf L1SwitchportVirtualEthernetBridge::enable {1, "enable"};

const Enum::YLeaf InstallerInstOper::none {0, "none"};
const Enum::YLeaf InstallerInstOper::install {1, "install"};
const Enum::YLeaf InstallerInstOper::impact {2, "impact"};
const Enum::YLeaf InstallerInstOper::abort {3, "abort"};

const Enum::YLeaf AggregateReplicationModeType::unknown {0, "unknown"};
const Enum::YLeaf AggregateReplicationModeType::replicationServer {1, "replicationServer"};
const Enum::YLeaf AggregateReplicationModeType::ingressReplication {2, "ingressReplication"};
const Enum::YLeaf AggregateReplicationModeType::ipMulticast {3, "ipMulticast"};

const Enum::YLeaf L1AutoNeg::on {1, "on"};
const Enum::YLeaf L1AutoNeg::off {2, "off"};
const Enum::YLeaf L1AutoNeg::Y_25G {3, "25G"};

const Enum::YLeaf PoePoePolice::Default {0, "Default"};
const Enum::YLeaf PoePoePolice::errdisable {1, "errdisable"};
const Enum::YLeaf PoePoePolice::log {2, "log"};

const Enum::YLeaf SpanMode::access {1, "access"};
const Enum::YLeaf SpanMode::fabric {2, "fabric"};

const Enum::YLeaf HsrpBiaScopeType::global {1, "global"};
const Enum::YLeaf HsrpBiaScopeType::local {2, "local"};

const Enum::YLeaf NdStAdjOperSt::down {0, "down"};
const Enum::YLeaf NdStAdjOperSt::up {1, "up"};

const Enum::YLeaf CdpDevIdT::none {0, "none"};
const Enum::YLeaf CdpDevIdT::mac {1, "mac"};
const Enum::YLeaf CdpDevIdT::serialNum {2, "serialNum"};
const Enum::YLeaf CdpDevIdT::sysName {3, "sysName"};

const Enum::YLeaf NvoIngReplProtoT::unknown {0, "unknown"};
const Enum::YLeaf NvoIngReplProtoT::bgp {1, "bgp"};
const Enum::YLeaf NvoIngReplProtoT::static_ {2, "static"};

const Enum::YLeaf SisfDeviceRole::node {0, "node"};
const Enum::YLeaf SisfDeviceRole::switch_ {3, "switch"};

const Enum::YLeaf AggregateRttPType::import {1, "import"};
const Enum::YLeaf AggregateRttPType::export_ {2, "export"};

const Enum::YLeaf NwAddrF::ipv4 {1, "ipv4"};
const Enum::YLeaf NwAddrF::ipv6 {2, "ipv6"};
const Enum::YLeaf NwAddrF::mac {3, "mac"};

const Enum::YLeaf RtdmcAuthT::none {0, "none"};
const Enum::YLeaf RtdmcAuthT::ah_md5 {1, "ah-md5"};

const Enum::YLeaf IpqosPolicyDirection::none {0, "none"};
const Enum::YLeaf IpqosPolicyDirection::ingress {1, "ingress"};
const Enum::YLeaf IpqosPolicyDirection::egress {2, "egress"};
const Enum::YLeaf IpqosPolicyDirection::both {3, "both"};

const Enum::YLeaf TunnelifTunnelSrcDirect::enabled {1, "enabled"};
const Enum::YLeaf TunnelifTunnelSrcDirect::disabled {2, "disabled"};

const Enum::YLeaf AggregateConfigStatus::unknown {0, "unknown"};
const Enum::YLeaf AggregateConfigStatus::configReady {1, "configReady"};
const Enum::YLeaf AggregateConfigStatus::configNotReady {2, "configNotReady"};
const Enum::YLeaf AggregateConfigStatus::configPurgeInProgress {4, "configPurgeInProgress"};

const Enum::YLeaf SegrtOperSt::disabled {0, "disabled"};
const Enum::YLeaf SegrtOperSt::enabled {1, "enabled"};
const Enum::YLeaf SegrtOperSt::ha_in_progress {2, "ha-in-progress"};

const Enum::YLeaf MonAdminState::enabled {1, "enabled"};
const Enum::YLeaf MonAdminState::disabled {2, "disabled"};

const Enum::YLeaf MplsstaticAfT::ipv4_ucast {1, "ipv4-ucast"};
const Enum::YLeaf MplsstaticAfT::ipv6_ucast {2, "ipv6-ucast"};

const Enum::YLeaf TrackRouteOwner::none {0, "none"};
const Enum::YLeaf TrackRouteOwner::hmm {1, "hmm"};

const Enum::YLeaf VsanAdminSt::active {1, "active"};
const Enum::YLeaf VsanAdminSt::suspended {2, "suspended"};

const Enum::YLeaf FcCreateState::created {0, "created"};
const Enum::YLeaf FcCreateState::removed {1, "removed"};

const Enum::YLeaf QosPrio::unspecified {0, "unspecified"};
const Enum::YLeaf QosPrio::level3 {1, "level3"};
const Enum::YLeaf QosPrio::level2 {2, "level2"};
const Enum::YLeaf QosPrio::level1 {3, "level1"};
const Enum::YLeaf QosPrio::policy_plane {4, "policy-plane"};
const Enum::YLeaf QosPrio::control_plane {5, "control-plane"};
const Enum::YLeaf QosPrio::span {6, "span"};

const Enum::YLeaf IsisOperSt::unknown {0, "unknown"};
const Enum::YLeaf IsisOperSt::initializing {1, "initializing"};
const Enum::YLeaf IsisOperSt::ok {2, "ok"};
const Enum::YLeaf IsisOperSt::failed {3, "failed"};

const Enum::YLeaf NbmNbmRcvOwner::IGMP {0, "IGMP"};
const Enum::YLeaf NbmNbmRcvOwner::STATIC {1, "STATIC"};
const Enum::YLeaf NbmNbmRcvOwner::PIM {2, "PIM"};
const Enum::YLeaf NbmNbmRcvOwner::NBM_STATIC {4, "NBM-STATIC"};

const Enum::YLeaf NbmNbmFlowPolicerEn::DISABLED {0, "DISABLED"};
const Enum::YLeaf NbmNbmFlowPolicerEn::ENABLED {1, "ENABLED"};

const Enum::YLeaf TrackIntfProtocolType::none {0, "none"};
const Enum::YLeaf TrackIntfProtocolType::ipv4_routing {1, "ipv4-routing"};
const Enum::YLeaf TrackIntfProtocolType::ipv6_routing {2, "ipv6-routing"};
const Enum::YLeaf TrackIntfProtocolType::line_protocol {3, "line-protocol"};

const Enum::YLeaf MsdpOperSt::inactive {0, "inactive"};
const Enum::YLeaf MsdpOperSt::down {1, "down"};
const Enum::YLeaf MsdpOperSt::admin_down {2, "admin-down"};
const Enum::YLeaf MsdpOperSt::connecting {3, "connecting"};
const Enum::YLeaf MsdpOperSt::listening {4, "listening"};
const Enum::YLeaf MsdpOperSt::established {5, "established"};

const Enum::YLeaf L1AdminSt::down {1, "down"};
const Enum::YLeaf L1AdminSt::up {2, "up"};

const Enum::YLeaf L3CtxT::oob_mgmt {1, "oob-mgmt"};
const Enum::YLeaf L3CtxT::inb_mgmt {2, "inb-mgmt"};
const Enum::YLeaf L3CtxT::tenant {3, "tenant"};

const Enum::YLeaf AdjacencyDbT::ip {1, "ip"};
const Enum::YLeaf AdjacencyDbT::ipv6 {2, "ipv6"};

const Enum::YLeaf AaaKeyEncUserPass::unspecified {255, "unspecified"};
const Enum::YLeaf AaaKeyEncUserPass::clear {0, "clear"};
const Enum::YLeaf AaaKeyEncUserPass::Encrypt {5, "Encrypt"};

const Enum::YLeaf L3VrfGsdbCtxType::vrf {1, "vrf"};
const Enum::YLeaf L3VrfGsdbCtxType::if_ {2, "if"};
const Enum::YLeaf L3VrfGsdbCtxType::table {3, "table"};
const Enum::YLeaf L3VrfGsdbCtxType::if_table {4, "if-table"};
const Enum::YLeaf L3VrfGsdbCtxType::if_list {5, "if-list"};
const Enum::YLeaf L3VrfGsdbCtxType::purge {6, "purge"};
const Enum::YLeaf L3VrfGsdbCtxType::vpnid {7, "vpnid"};
const Enum::YLeaf L3VrfGsdbCtxType::source_of_origin {8, "source-of-origin"};
const Enum::YLeaf L3VrfGsdbCtxType::route_limits {9, "route-limits"};

const Enum::YLeaf PimBfdInstSt::enabled {1, "enabled"};
const Enum::YLeaf PimBfdInstSt::disabled {2, "disabled"};
const Enum::YLeaf PimBfdInstSt::none {0, "none"};

const Enum::YLeaf ArpDbT::ip {1, "ip"};
const Enum::YLeaf ArpDbT::supcache {2, "supcache"};

const Enum::YLeaf ConftmplTemplateType::unknown {0, "unknown"};
const Enum::YLeaf ConftmplTemplateType::vrf {1, "vrf"};
const Enum::YLeaf ConftmplTemplateType::vlan {2, "vlan"};
const Enum::YLeaf ConftmplTemplateType::intf {3, "intf"};

const Enum::YLeaf L1Mode::access {1, "access"};
const Enum::YLeaf L1Mode::trunk {2, "trunk"};
const Enum::YLeaf L1Mode::fex_fabric {3, "fex-fabric"};
const Enum::YLeaf L1Mode::dot1q_tunnel {4, "dot1q-tunnel"};
const Enum::YLeaf L1Mode::promiscuous {5, "promiscuous"};
const Enum::YLeaf L1Mode::host {6, "host"};
const Enum::YLeaf L1Mode::trunk_secondary {7, "trunk_secondary"};
const Enum::YLeaf L1Mode::trunk_promiscuous {8, "trunk_promiscuous"};

const Enum::YLeaf L2BridgeMode::ip {1, "ip"};
const Enum::YLeaf L2BridgeMode::mac {2, "mac"};

const Enum::YLeaf VpcOperSt::unknown {0, "unknown"};
const Enum::YLeaf VpcOperSt::down {1, "down"};
const Enum::YLeaf VpcOperSt::up {2, "up"};
const Enum::YLeaf VpcOperSt::noCfg {3, "noCfg"};

const Enum::YLeaf ImMode100M::disabled {0, "disabled"};
const Enum::YLeaf ImMode100M::enabled {1, "enabled"};

const Enum::YLeaf RtcomComT::regular {1, "regular"};
const Enum::YLeaf RtcomComT::extended {2, "extended"};

const Enum::YLeaf L2DomMode::CE {1, "CE"};
const Enum::YLeaf L2DomMode::FabricPath {2, "FabricPath"};

const Enum::YLeaf BgpAsnPropagation::none {0, "none"};
const Enum::YLeaf BgpAsnPropagation::no_prepend {1, "no-prepend"};
const Enum::YLeaf BgpAsnPropagation::replace_as {2, "replace-as"};
const Enum::YLeaf BgpAsnPropagation::dual_as {3, "dual-as"};

const Enum::YLeaf IpqosStatsState::enabled {0, "enabled"};
const Enum::YLeaf IpqosStatsState::disabled {1, "disabled"};

const Enum::YLeaf BgpDomOperSt::unknown {0, "unknown"};
const Enum::YLeaf BgpDomOperSt::up {1, "up"};
const Enum::YLeaf BgpDomOperSt::down {2, "down"};

const Enum::YLeaf TelemetryCompression::disabled {0, "disabled"};
const Enum::YLeaf TelemetryCompression::gzip {1, "gzip"};

const Enum::YLeaf BgpPfxSidAttrEntryType::none {0, "none"};
const Enum::YLeaf BgpPfxSidAttrEntryType::label_index {1, "label-index"};
const Enum::YLeaf BgpPfxSidAttrEntryType::ipv6_sid {2, "ipv6-sid"};
const Enum::YLeaf BgpPfxSidAttrEntryType::origin_srgb {3, "origin-srgb"};

const Enum::YLeaf EqptLedType::unknown {0, "unknown"};
const Enum::YLeaf EqptLedType::status {1, "status"};
const Enum::YLeaf EqptLedType::system {2, "system"};
const Enum::YLeaf EqptLedType::active {3, "active"};
const Enum::YLeaf EqptLedType::power {4, "power"};
const Enum::YLeaf EqptLedType::battery {5, "battery"};
const Enum::YLeaf EqptLedType::lc_status {6, "lc-status"};
const Enum::YLeaf EqptLedType::sup_status {7, "sup-status"};
const Enum::YLeaf EqptLedType::fc_status {8, "fc-status"};
const Enum::YLeaf EqptLedType::fan_status {9, "fan-status"};
const Enum::YLeaf EqptLedType::pwr_status {10, "pwr-status"};

const Enum::YLeaf PlatformFabricSpeed::DEFAULT {0, "DEFAULT"};
const Enum::YLeaf PlatformFabricSpeed::FABRIC_SPEED_40G {1, "FABRIC_SPEED_40G"};

const Enum::YLeaf McastFiltMode::include {1, "include"};
const Enum::YLeaf McastFiltMode::exclude {2, "exclude"};

const Enum::YLeaf NbmNbmGroupRangeType::ASM {0, "ASM"};
const Enum::YLeaf NbmNbmGroupRangeType::SSM {1, "SSM"};

const Enum::YLeaf StpMode::mst {1, "mst"};
const Enum::YLeaf StpMode::pvrst {2, "pvrst"};

const Enum::YLeaf AaaRuleAccessType::none {0, "none"};
const Enum::YLeaf AaaRuleAccessType::read {1, "read"};
const Enum::YLeaf AaaRuleAccessType::read_write {2, "read-write"};
const Enum::YLeaf AaaRuleAccessType::command {3, "command"};

const Enum::YLeaf SnmpPrivTypeT::no {0, "no"};
const Enum::YLeaf SnmpPrivTypeT::des {1, "des"};
const Enum::YLeaf SnmpPrivTypeT::aes128 {2, "aes128"};

const Enum::YLeaf RtctrlRttPType::import {1, "import"};
const Enum::YLeaf RtctrlRttPType::export_ {2, "export"};

const Enum::YLeaf OspfPassiveControl::unspecified {0, "unspecified"};
const Enum::YLeaf OspfPassiveControl::enabled {1, "enabled"};
const Enum::YLeaf OspfPassiveControl::disabled {2, "disabled"};

const Enum::YLeaf ProcOperSt::intr_sleep {0, "intr-sleep"};
const Enum::YLeaf ProcOperSt::stopped {1, "stopped"};
const Enum::YLeaf ProcOperSt::unintr_sleep {2, "unintr-sleep"};
const Enum::YLeaf ProcOperSt::running {3, "running"};
const Enum::YLeaf ProcOperSt::dead {4, "dead"};
const Enum::YLeaf ProcOperSt::defunct {5, "defunct"};

const Enum::YLeaf NwAdminStIfStatPortUnreach::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStIfStatPortUnreach::disabled {2, "disabled"};

const Enum::YLeaf InstallerInstEnum::yes {0, "yes"};
const Enum::YLeaf InstallerInstEnum::no {1, "no"};

const Enum::YLeaf BgpAsSegT::sequence {1, "sequence"};
const Enum::YLeaf BgpAsSegT::set {2, "set"};

const Enum::YLeaf DatetimeNTPPeerMode::unspecified {0, "unspecified"};
const Enum::YLeaf DatetimeNTPPeerMode::symmetricActive {1, "symmetricActive"};
const Enum::YLeaf DatetimeNTPPeerMode::symmetricPassive {2, "symmetricPassive"};
const Enum::YLeaf DatetimeNTPPeerMode::client {3, "client"};
const Enum::YLeaf DatetimeNTPPeerMode::server {4, "server"};
const Enum::YLeaf DatetimeNTPPeerMode::broadcast {5, "broadcast"};
const Enum::YLeaf DatetimeNTPPeerMode::reservedControl {6, "reservedControl"};
const Enum::YLeaf DatetimeNTPPeerMode::reservedPrivate {7, "reservedPrivate"};

const Enum::YLeaf VpcParamType::unknown {0, "unknown"};
const Enum::YLeaf VpcParamType::type_1 {1, "type-1"};
const Enum::YLeaf VpcParamType::type_2 {2, "type-2"};

const Enum::YLeaf AaaBoolean::no {0, "no"};
const Enum::YLeaf AaaBoolean::yes {1, "yes"};

const Enum::YLeaf AnalyticsCollVersion::v5 {1, "v5"};
const Enum::YLeaf AnalyticsCollVersion::v9 {2, "v9"};
const Enum::YLeaf AnalyticsCollVersion::cisco_v1 {3, "cisco-v1"};

const Enum::YLeaf CoppIcmp::Undefined {0, "Undefined"};
const Enum::YLeaf CoppIcmp::redirect {1, "redirect"};
const Enum::YLeaf CoppIcmp::unreachable {2, "unreachable"};

const Enum::YLeaf MonitorDbT::ipep_resolve {1, "ipep-resolve"};

const Enum::YLeaf IpqosBurstRateUnit::unspecified {0, "unspecified"};
const Enum::YLeaf IpqosBurstRateUnit::bytes {1, "bytes"};
const Enum::YLeaf IpqosBurstRateUnit::kbytes {2, "kbytes"};
const Enum::YLeaf IpqosBurstRateUnit::mbytes {3, "mbytes"};
const Enum::YLeaf IpqosBurstRateUnit::ms {4, "ms"};
const Enum::YLeaf IpqosBurstRateUnit::us {5, "us"};
const Enum::YLeaf IpqosBurstRateUnit::packets {6, "packets"};

const Enum::YLeaf L1capSubj::unknown {0, "unknown"};
const Enum::YLeaf L1capSubj::pc_namespace {1, "pc-namespace"};
const Enum::YLeaf L1capSubj::ethport {2, "ethport"};

const Enum::YLeaf AggregateFabFwdMode::standard {0, "standard"};
const Enum::YLeaf AggregateFabFwdMode::anycastgw {1, "anycastgw"};
const Enum::YLeaf AggregateFabFwdMode::proxygw {2, "proxygw"};

const Enum::YLeaf BgpRtCtrlDir::in {1, "in"};
const Enum::YLeaf BgpRtCtrlDir::out {2, "out"};

const Enum::YLeaf IpLoadShareFormat::disabled {1, "disabled"};
const Enum::YLeaf IpLoadShareFormat::destPort {2, "destPort"};
const Enum::YLeaf IpLoadShareFormat::srcDest {3, "srcDest"};
const Enum::YLeaf IpLoadShareFormat::srcDestGre {4, "srcDestGre"};
const Enum::YLeaf IpLoadShareFormat::srcDestPort {5, "srcDestPort"};
const Enum::YLeaf IpLoadShareFormat::source {6, "source"};
const Enum::YLeaf IpLoadShareFormat::srcDestGTPU {7, "srcDestGTPU"};

const Enum::YLeaf AaaRealmDomainAuthRealm::local {0, "local"};
const Enum::YLeaf AaaRealmDomainAuthRealm::radius {1, "radius"};
const Enum::YLeaf AaaRealmDomainAuthRealm::tacacs {2, "tacacs"};
const Enum::YLeaf AaaRealmDomainAuthRealm::ldap {3, "ldap"};
const Enum::YLeaf AaaRealmDomainAuthRealm::none {4, "none"};

const Enum::YLeaf EqptSensorT::cpu {1, "cpu"};
const Enum::YLeaf EqptSensorT::inlet {2, "inlet"};
const Enum::YLeaf EqptSensorT::outlet {3, "outlet"};
const Enum::YLeaf EqptSensorT::hotswap {4, "hotswap"};
const Enum::YLeaf EqptSensorT::dimm {5, "dimm"};
const Enum::YLeaf EqptSensorT::phy {6, "phy"};
const Enum::YLeaf EqptSensorT::sfp {7, "sfp"};
const Enum::YLeaf EqptSensorT::qsfp {8, "qsfp"};
const Enum::YLeaf EqptSensorT::asic {9, "asic"};
const Enum::YLeaf EqptSensorT::pch {10, "pch"};
const Enum::YLeaf EqptSensorT::cpu_crm {11, "cpu-crm"};
const Enum::YLeaf EqptSensorT::asic_vrm {12, "asic-vrm"};
const Enum::YLeaf EqptSensorT::x86 {18, "x86"};
const Enum::YLeaf EqptSensorT::arm {19, "arm"};
const Enum::YLeaf EqptSensorT::die {20, "die"};

const Enum::YLeaf SysmgrSupSt::unknown {0, "unknown"};
const Enum::YLeaf SysmgrSupSt::active {1, "active"};
const Enum::YLeaf SysmgrSupSt::hot_stdby {2, "hot-stdby"};
const Enum::YLeaf SysmgrSupSt::cold_stdby {3, "cold-stdby"};
const Enum::YLeaf SysmgrSupSt::offline {4, "offline"};
const Enum::YLeaf SysmgrSupSt::normal {5, "normal"};
const Enum::YLeaf SysmgrSupSt::non_dis_upg {6, "non-dis-upg"};

const Enum::YLeaf L1LinkLog::default_ {1, "default"};
const Enum::YLeaf L1LinkLog::enable {2, "enable"};
const Enum::YLeaf L1LinkLog::disable {3, "disable"};

const Enum::YLeaf L1EEEState::enable {1, "enable"};
const Enum::YLeaf L1EEEState::disable {2, "disable"};
const Enum::YLeaf L1EEEState::disagreed {3, "disagreed"};
const Enum::YLeaf L1EEEState::not_applicable {4, "not-applicable"};

const Enum::YLeaf EthpmTrunkStatus::unknown {0, "unknown"};
const Enum::YLeaf EthpmTrunkStatus::trunking {1, "trunking"};
const Enum::YLeaf EthpmTrunkStatus::fabricpath {2, "fabricpath"};
const Enum::YLeaf EthpmTrunkStatus::not_trunking {3, "not-trunking"};
const Enum::YLeaf EthpmTrunkStatus::trunk_bundle {4, "trunk-bundle"};
const Enum::YLeaf EthpmTrunkStatus::fabric_bundle {5, "fabric-bundle"};
const Enum::YLeaf EthpmTrunkStatus::no_trunk_bundle {6, "no-trunk-bundle"};

const Enum::YLeaf StpPriority::Y_0 {0, "0"};
const Enum::YLeaf StpPriority::Y_4096 {1, "4096"};
const Enum::YLeaf StpPriority::Y_8192 {2, "8192"};
const Enum::YLeaf StpPriority::Y_12288 {3, "12288"};
const Enum::YLeaf StpPriority::Y_16384 {4, "16384"};
const Enum::YLeaf StpPriority::Y_20480 {5, "20480"};
const Enum::YLeaf StpPriority::Y_24576 {6, "24576"};
const Enum::YLeaf StpPriority::Y_28672 {7, "28672"};
const Enum::YLeaf StpPriority::Y_32768 {8, "32768"};
const Enum::YLeaf StpPriority::Y_36864 {9, "36864"};
const Enum::YLeaf StpPriority::Y_40960 {10, "40960"};
const Enum::YLeaf StpPriority::Y_45056 {11, "45056"};
const Enum::YLeaf StpPriority::Y_49152 {12, "49152"};
const Enum::YLeaf StpPriority::Y_53248 {13, "53248"};
const Enum::YLeaf StpPriority::Y_57344 {14, "57344"};
const Enum::YLeaf StpPriority::Y_61440 {15, "61440"};

const Enum::YLeaf IpAddrOperStQual::unspecified {0, "unspecified"};
const Enum::YLeaf IpAddrOperStQual::up {1, "up"};
const Enum::YLeaf IpAddrOperStQual::subnet_overlap {2, "subnet-overlap"};
const Enum::YLeaf IpAddrOperStQual::no_primary {3, "no-primary"};
const Enum::YLeaf IpAddrOperStQual::if_down {4, "if-down"};
const Enum::YLeaf IpAddrOperStQual::addr_exists {5, "addr-exists"};
const Enum::YLeaf IpAddrOperStQual::invalid_vrf {6, "invalid-vrf"};
const Enum::YLeaf IpAddrOperStQual::static_rt_nh {7, "static-rt-nh"};
const Enum::YLeaf IpAddrOperStQual::lb_addr {8, "lb-addr"};
const Enum::YLeaf IpAddrOperStQual::invalid_ll_use {9, "invalid-ll-use"};
const Enum::YLeaf IpAddrOperStQual::no_glbl_addr {10, "no-glbl-addr"};
const Enum::YLeaf IpAddrOperStQual::no_ll_addr {11, "no-ll-addr"};
const Enum::YLeaf IpAddrOperStQual::dad_in_progress {12, "dad-in-progress"};
const Enum::YLeaf IpAddrOperStQual::dad_failed {13, "dad-failed"};
const Enum::YLeaf IpAddrOperStQual::invalid_mask_len {14, "invalid-mask-len"};
const Enum::YLeaf IpAddrOperStQual::l2_intf_err {15, "l2-intf-err"};
const Enum::YLeaf IpAddrOperStQual::super_intf_err {16, "super-intf-err"};
const Enum::YLeaf IpAddrOperStQual::invalid_ll {17, "invalid-ll"};
const Enum::YLeaf IpAddrOperStQual::if_init_err {18, "if-init-err"};
const Enum::YLeaf IpAddrOperStQual::ifindex_err {19, "ifindex-err"};
const Enum::YLeaf IpAddrOperStQual::invalid_eui64 {20, "invalid-eui64"};
const Enum::YLeaf IpAddrOperStQual::lladdr_create_fail {21, "lladdr-create-fail"};
const Enum::YLeaf IpAddrOperStQual::DAD_tentative {22, "DAD-tentative"};
const Enum::YLeaf IpAddrOperStQual::DAD_lcl_duplicate {23, "DAD-lcl-duplicate"};
const Enum::YLeaf IpAddrOperStQual::DAD_duplicate {24, "DAD-duplicate"};
const Enum::YLeaf IpAddrOperStQual::DAD_preferred {25, "DAD-preferred"};
const Enum::YLeaf IpAddrOperStQual::DAD_deprecated {26, "DAD-deprecated"};
const Enum::YLeaf IpAddrOperStQual::DAD_invalid {27, "DAD-invalid"};
const Enum::YLeaf IpAddrOperStQual::multiple_lladdr {28, "multiple-lladdr"};
const Enum::YLeaf IpAddrOperStQual::invalid_tunnel {29, "invalid-tunnel"};
const Enum::YLeaf IpAddrOperStQual::lladdr_invalid_tunnel {30, "lladdr-invalid-tunnel"};

const Enum::YLeaf SnmpPrivType::none {0, "none"};
const Enum::YLeaf SnmpPrivType::des {1, "des"};
const Enum::YLeaf SnmpPrivType::aes_128 {2, "aes-128"};

const Enum::YLeaf NpvExtIfFsmSt::no_transition {0, "no-transition"};
const Enum::YLeaf NpvExtIfFsmSt::no_change {1, "no-change"};
const Enum::YLeaf NpvExtIfFsmSt::any {2, "any"};
const Enum::YLeaf NpvExtIfFsmSt::down {3, "down"};
const Enum::YLeaf NpvExtIfFsmSt::preinit_done {4, "preinit-done"};
const Enum::YLeaf NpvExtIfFsmSt::wait_flogi_response {5, "wait-flogi-response"};
const Enum::YLeaf NpvExtIfFsmSt::up {6, "up"};
const Enum::YLeaf NpvExtIfFsmSt::flogi_failed {7, "flogi-failed"};
const Enum::YLeaf NpvExtIfFsmSt::wait_fcid_add {8, "wait-fcid-add"};
const Enum::YLeaf NpvExtIfFsmSt::wait_fcid_del {9, "wait-fcid-del"};
const Enum::YLeaf NpvExtIfFsmSt::wait_ns_registration {10, "wait-ns-registration"};
const Enum::YLeaf NpvExtIfFsmSt::flogi_fail_retry {11, "flogi-fail-retry"};
const Enum::YLeaf NpvExtIfFsmSt::wait_for_vsan_up {12, "wait-for-vsan-up"};
const Enum::YLeaf NpvExtIfFsmSt::wait_lc_port_config {13, "wait-lc-port-config"};
const Enum::YLeaf NpvExtIfFsmSt::pc_member_add {14, "pc-member-add"};
const Enum::YLeaf NpvExtIfFsmSt::pc_member_del {15, "pc-member-del"};

const Enum::YLeaf BfdTrkMbrLnk::enable {1, "enable"};
const Enum::YLeaf BfdTrkMbrLnk::disable {0, "disable"};

const Enum::YLeaf OspfAdjOperSt::unknown {0, "unknown"};
const Enum::YLeaf OspfAdjOperSt::down {1, "down"};
const Enum::YLeaf OspfAdjOperSt::attempt {2, "attempt"};
const Enum::YLeaf OspfAdjOperSt::initializing {3, "initializing"};
const Enum::YLeaf OspfAdjOperSt::two_way {4, "two-way"};
const Enum::YLeaf OspfAdjOperSt::exstart {5, "exstart"};
const Enum::YLeaf OspfAdjOperSt::exchange {6, "exchange"};
const Enum::YLeaf OspfAdjOperSt::loading {7, "loading"};
const Enum::YLeaf OspfAdjOperSt::full {8, "full"};
const Enum::YLeaf OspfAdjOperSt::self {9, "self"};

const Enum::YLeaf FvImmediacy_::immediate {1, "immediate"};
const Enum::YLeaf FvImmediacy_::lazy {2, "lazy"};

const Enum::YLeaf AaaKeyEncTacacsPlusProviderKeyEnc::Y_0 {0, "0"};
const Enum::YLeaf AaaKeyEncTacacsPlusProviderKeyEnc::Y_6 {6, "6"};
const Enum::YLeaf AaaKeyEncTacacsPlusProviderKeyEnc::Y_7 {7, "7"};
const Enum::YLeaf AaaKeyEncTacacsPlusProviderKeyEnc::inherit_from_global {255, "inherit-from-global"};

const Enum::YLeaf OspfBwRefUnit::mbps {0, "mbps"};
const Enum::YLeaf OspfBwRefUnit::gbps {1, "gbps"};

const Enum::YLeaf InbandTelemetryModeT::inbandtelemetry {0, "inbandtelemetry"};
const Enum::YLeaf InbandTelemetryModeT::postcard {1, "postcard"};

const Enum::YLeaf IsisHelloPadT::always {1, "always"};
const Enum::YLeaf IsisHelloPadT::transient {2, "transient"};
const Enum::YLeaf IsisHelloPadT::never {3, "never"};

const Enum::YLeaf TunnelifTunnelMode::gre__FWD_SLASH__ip {1, "gre/ip"};
const Enum::YLeaf TunnelifTunnelMode::gre__FWD_SLASH__ipv6 {6, "gre/ipv6"};
const Enum::YLeaf TunnelifTunnelMode::ipip__FWD_SLASH__ip {7, "ipip/ip"};
const Enum::YLeaf TunnelifTunnelMode::ipip__FWD_SLASH__ipv6 {8, "ipip/ipv6"};
const Enum::YLeaf TunnelifTunnelMode::ipip__FWD_SLASH__dcapany__FWD_SLASH__ip {9, "ipip/dcapany/ip"};
const Enum::YLeaf TunnelifTunnelMode::ipip__FWD_SLASH__dcapany__FWD_SLASH__ipv6 {10, "ipip/dcapany/ipv6"};
const Enum::YLeaf TunnelifTunnelMode::ipv6ip {11, "ipv6ip"};
const Enum::YLeaf TunnelifTunnelMode::ipv6ip__FWD_SLASH__dcapany {12, "ipv6ip/dcapany"};
const Enum::YLeaf TunnelifTunnelMode::ipv6ipv6 {13, "ipv6ipv6"};
const Enum::YLeaf TunnelifTunnelMode::ipv6ipv6__FWD_SLASH__dcapany {14, "ipv6ipv6/dcapany"};

const Enum::YLeaf RtdmcDbT::rp {0, "rp"};
const Enum::YLeaf RtdmcDbT::grange {1, "grange"};
const Enum::YLeaf RtdmcDbT::route {2, "route"};
const Enum::YLeaf RtdmcDbT::dynrpsrc {3, "dynrpsrc"};
const Enum::YLeaf RtdmcDbT::gstats {4, "gstats"};
const Enum::YLeaf RtdmcDbT::vrf {5, "vrf"};
const Enum::YLeaf RtdmcDbT::ifrec {6, "ifrec"};
const Enum::YLeaf RtdmcDbT::grpoif {7, "grpoif"};
const Enum::YLeaf RtdmcDbT::group {8, "group"};
const Enum::YLeaf RtdmcDbT::ifstats {9, "ifstats"};
const Enum::YLeaf RtdmcDbT::peer {10, "peer"};
const Enum::YLeaf RtdmcDbT::rphash {11, "rphash"};
const Enum::YLeaf RtdmcDbT::df {12, "df"};
const Enum::YLeaf RtdmcDbT::bf {13, "bf"};
const Enum::YLeaf RtdmcDbT::embedrp {14, "embedrp"};
const Enum::YLeaf RtdmcDbT::syslog {15, "syslog"};
const Enum::YLeaf RtdmcDbT::vrfdetail {16, "vrfdetail"};

const Enum::YLeaf NdRouterPreference::Medium {0, "Medium"};
const Enum::YLeaf NdRouterPreference::High {1, "High"};
const Enum::YLeaf NdRouterPreference::Reserved {2, "Reserved"};
const Enum::YLeaf NdRouterPreference::Low {3, "Low"};

const Enum::YLeaf BgpEgressPeerEng::none {0, "none"};
const Enum::YLeaf BgpEgressPeerEng::enabled {1, "enabled"};
const Enum::YLeaf BgpEgressPeerEng::enabled_adj_sid {2, "enabled-adj-sid"};

const Enum::YLeaf TopNodeRole::unsupported {0, "unsupported"};
const Enum::YLeaf TopNodeRole::controller {1, "controller"};
const Enum::YLeaf TopNodeRole::leaf {2, "leaf"};
const Enum::YLeaf TopNodeRole::spine {3, "spine"};
const Enum::YLeaf TopNodeRole::vleaf {4, "vleaf"};
const Enum::YLeaf TopNodeRole::vip {5, "vip"};
const Enum::YLeaf TopNodeRole::protection_chain {6, "protection-chain"};

const Enum::YLeaf SviMedium::bcast {0, "bcast"};
const Enum::YLeaf SviMedium::p2p {1, "p2p"};

const Enum::YLeaf TunnelifTunnelPMTUD::enabled {1, "enabled"};
const Enum::YLeaf TunnelifTunnelPMTUD::disabled {2, "disabled"};

const Enum::YLeaf PlatformBufferMonitorSt::Enable {1, "Enable"};
const Enum::YLeaf PlatformBufferMonitorSt::Disable {0, "Disable"};

const Enum::YLeaf InstallerInstModType::nxos_supervisor {0, "nxos-supervisor"};
const Enum::YLeaf InstallerInstModType::lc {1, "lc"};
const Enum::YLeaf InstallerInstModType::fex {2, "fex"};
const Enum::YLeaf InstallerInstModType::bios {3, "bios"};
const Enum::YLeaf InstallerInstModType::lcn9k {4, "lcn9k"};
const Enum::YLeaf InstallerInstModType::unknown {-1, "unknown"};

const Enum::YLeaf SisfSecurityLevel::glean {0, "glean"};
const Enum::YLeaf SisfSecurityLevel::inspect {1, "inspect"};
const Enum::YLeaf SisfSecurityLevel::guard {2, "guard"};

const Enum::YLeaf SisfDhcpflag::on {0, "on"};
const Enum::YLeaf SisfDhcpflag::off {1, "off"};

const Enum::YLeaf PlatformInfraVlanForce::Disable {0, "Disable"};
const Enum::YLeaf PlatformInfraVlanForce::Enable {1, "Enable"};

const Enum::YLeaf SnmpSmplType::unspecified {0, "unspecified"};
const Enum::YLeaf SnmpSmplType::absolute {1, "absolute"};
const Enum::YLeaf SnmpSmplType::delta {2, "delta"};

const Enum::YLeaf AnalyticsDefPolicyT::permit {0, "permit"};
const Enum::YLeaf AnalyticsDefPolicyT::deny {1, "deny"};

const Enum::YLeaf SpanDbT::ipep_resolve {1, "ipep-resolve"};

const Enum::YLeaf VrrpGroupSt::init {0, "init"};
const Enum::YLeaf VrrpGroupSt::backup {1, "backup"};
const Enum::YLeaf VrrpGroupSt::master {2, "master"};

const Enum::YLeaf EthpmSyslogInfo::default_ {0, "default"};
const Enum::YLeaf EthpmSyslogInfo::info_1 {1, "info-1"};

const Enum::YLeaf VsanLbType::src_dst_id {1, "src-dst-id"};
const Enum::YLeaf VsanLbType::src_dst_ox_id {2, "src-dst-ox-id"};

const Enum::YLeaf OspfLsaLeakOperSt::Inactive {0, "Inactive"};
const Enum::YLeaf OspfLsaLeakOperSt::active {1, "active"};

const Enum::YLeaf L1PortTypeFabric::no {0, "no"};
const Enum::YLeaf L1PortTypeFabric::yes {1, "yes"};

const Enum::YLeaf RtleakCtrl::unspecified {0, "unspecified"};
const Enum::YLeaf RtleakCtrl::warning {1, "warning"};
const Enum::YLeaf RtleakCtrl::withdraw {2, "withdraw"};

const Enum::YLeaf PcOperSt::up {0, "up"};
const Enum::YLeaf PcOperSt::down {1, "down"};
const Enum::YLeaf PcOperSt::bringup_in_progress {2, "bringup-in-progress"};
const Enum::YLeaf PcOperSt::module_removed {3, "module-removed"};

const Enum::YLeaf AaaKeyEncRadiusProviderKeyEnc::Y_0 {0, "0"};
const Enum::YLeaf AaaKeyEncRadiusProviderKeyEnc::Y_6 {6, "6"};
const Enum::YLeaf AaaKeyEncRadiusProviderKeyEnc::Y_7 {7, "7"};
const Enum::YLeaf AaaKeyEncRadiusProviderKeyEnc::inherit_from_global {255, "inherit-from-global"};

const Enum::YLeaf TelemetryEncoding::GPB {1, "GPB"};
const Enum::YLeaf TelemetryEncoding::JSON {2, "JSON"};
const Enum::YLeaf TelemetryEncoding::XML {3, "XML"};

const Enum::YLeaf CoppRdrct::Undefined {0, "Undefined"};
const Enum::YLeaf CoppRdrct::arp_inspect {1, "arp-inspect"};
const Enum::YLeaf CoppRdrct::dhcp_snoop {2, "dhcp-snoop"};

const Enum::YLeaf EqptMemT::unk {0, "unk"};
const Enum::YLeaf EqptMemT::dimm {1, "dimm"};
const Enum::YLeaf EqptMemT::flash {2, "flash"};
const Enum::YLeaf EqptMemT::sprom {3, "sprom"};

const Enum::YLeaf CapRaiseFaultState::nominal {0, "nominal"};
const Enum::YLeaf CapRaiseFaultState::ruleHasLess {1, "ruleHasLess"};
const Enum::YLeaf CapRaiseFaultState::ruleHasMore {2, "ruleHasMore"};

const Enum::YLeaf BgpPeerType::ibgp {1, "ibgp"};
const Enum::YLeaf BgpPeerType::ebgp {2, "ebgp"};

const Enum::YLeaf NetflowDirectionT::in {1, "in"};
const Enum::YLeaf NetflowDirectionT::out {2, "out"};
const Enum::YLeaf NetflowDirectionT::both {3, "both"};

const Enum::YLeaf PlatformRoutingMode::DEFAULT {0, "DEFAULT"};
const Enum::YLeaf PlatformRoutingMode::NON_HIER_DEFAULT {1, "NON_HIER_DEFAULT"};
const Enum::YLeaf PlatformRoutingMode::NON_HIER_MAX_L3 {2, "NON_HIER_MAX_L3"};
const Enum::YLeaf PlatformRoutingMode::MAX_HOST {3, "MAX_HOST"};
const Enum::YLeaf PlatformRoutingMode::TOR_MAX_L3 {4, "TOR_MAX_L3"};
const Enum::YLeaf PlatformRoutingMode::DEFAULT_64B {5, "DEFAULT_64B"};
const Enum::YLeaf PlatformRoutingMode::NON_HIER_MAX_L3_64B {6, "NON_HIER_MAX_L3_64B"};
const Enum::YLeaf PlatformRoutingMode::TOR_MAX_L3_64B {7, "TOR_MAX_L3_64B"};
const Enum::YLeaf PlatformRoutingMode::TOR_MAX_L2 {8, "TOR_MAX_L2"};
const Enum::YLeaf PlatformRoutingMode::TOR_MAX_L2L3 {9, "TOR_MAX_L2L3"};
const Enum::YLeaf PlatformRoutingMode::TOR_TEMPLATE_OVL_HOST_SCALE {21, "TOR_TEMPLATE_OVL_HOST_SCALE"};
const Enum::YLeaf PlatformRoutingMode::TEMPLATE_LPM_HEAVY {22, "TEMPLATE_LPM_HEAVY"};
const Enum::YLeaf PlatformRoutingMode::TOR_TEMPLATE_LPM_SCALE_V6_64 {23, "TOR_TEMPLATE_LPM_SCALE_V6_64"};
const Enum::YLeaf PlatformRoutingMode::TOR_TEMPLATE_DUAL_STACK_HOST_SCALE {24, "TOR_TEMPLATE_DUAL_STACK_HOST_SCALE"};
const Enum::YLeaf PlatformRoutingMode::TEMPLATE_DYNAMIC_TRIE_SCALE {25, "TEMPLATE_DYNAMIC_TRIE_SCALE"};
const Enum::YLeaf PlatformRoutingMode::TEMPLATE_MULTICAST_HEAVY {26, "TEMPLATE_MULTICAST_HEAVY"};
const Enum::YLeaf PlatformRoutingMode::TEMPLATE_VXLAN_SCALE {27, "TEMPLATE_VXLAN_SCALE"};
const Enum::YLeaf PlatformRoutingMode::TEMPLATE_MPLS_SCALE {28, "TEMPLATE_MPLS_SCALE"};
const Enum::YLeaf PlatformRoutingMode::TEMPLATE_IPV6_LPM_HEAVY {29, "TEMPLATE_IPV6_LPM_HEAVY"};
const Enum::YLeaf PlatformRoutingMode::TEMPLATE_MULTICAST_EXT_HEAVY {31, "TEMPLATE_MULTICAST_EXT_HEAVY"};

const Enum::YLeaf IpqosRateUnit::unspecified {0, "unspecified"};
const Enum::YLeaf IpqosRateUnit::bps {1, "bps"};
const Enum::YLeaf IpqosRateUnit::kbps {2, "kbps"};
const Enum::YLeaf IpqosRateUnit::mbps {3, "mbps"};
const Enum::YLeaf IpqosRateUnit::gbps {4, "gbps"};
const Enum::YLeaf IpqosRateUnit::pps {5, "pps"};
const Enum::YLeaf IpqosRateUnit::pct {6, "pct"};

const Enum::YLeaf MplsOperSt::down {0, "down"};
const Enum::YLeaf MplsOperSt::up {1, "up"};

const Enum::YLeaf NbmNbmPermit::UNDEFINED {0, "UNDEFINED"};
const Enum::YLeaf NbmNbmPermit::DENIED {1, "DENIED"};
const Enum::YLeaf NbmNbmPermit::ALLOWED {2, "ALLOWED"};

const Enum::YLeaf FmInstOperState::enabled {1, "enabled"};
const Enum::YLeaf FmInstOperState::disabled {2, "disabled"};
const Enum::YLeaf FmInstOperState::enabled_not_running {3, "enabled-not-running"};

const Enum::YLeaf CfsAdminSt::enabled {1, "enabled"};
const Enum::YLeaf CfsAdminSt::disabled {2, "disabled"};

const Enum::YLeaf PimIfdbT::stats {0, "stats"};
const Enum::YLeaf PimIfdbT::adj {1, "adj"};
const Enum::YLeaf PimIfdbT::prop {2, "prop"};

const Enum::YLeaf L2CreateState::created {1, "created"};
const Enum::YLeaf L2CreateState::removed {2, "removed"};
const Enum::YLeaf L2CreateState::deleted_and_stale {3, "deleted-and-stale"};

const Enum::YLeaf VpcTosType::min_delay {0, "min-delay"};
const Enum::YLeaf VpcTosType::max_throughput {1, "max-throughput"};
const Enum::YLeaf VpcTosType::max_reliability {2, "max-reliability"};
const Enum::YLeaf VpcTosType::min_monetary_cost {3, "min-monetary-cost"};
const Enum::YLeaf VpcTosType::normal {4, "normal"};

const Enum::YLeaf IpmcVer::unspecified {0, "unspecified"};
const Enum::YLeaf IpmcVer::Y_2 {2, "2"};
const Enum::YLeaf IpmcVer::Y_3 {3, "3"};

const Enum::YLeaf NbmNbmEndpointRole::UNKNOWN {0, "UNKNOWN"};
const Enum::YLeaf NbmNbmEndpointRole::ARP {1, "ARP"};
const Enum::YLeaf NbmNbmEndpointRole::RECEIVER {2, "RECEIVER"};
const Enum::YLeaf NbmNbmEndpointRole::RECEIVER_ARP {3, "RECEIVER_ARP"};
const Enum::YLeaf NbmNbmEndpointRole::SENDER {4, "SENDER"};
const Enum::YLeaf NbmNbmEndpointRole::SENDER_ARP {5, "SENDER_ARP"};
const Enum::YLeaf NbmNbmEndpointRole::SENDER_RECEIVER {6, "SENDER_RECEIVER"};
const Enum::YLeaf NbmNbmEndpointRole::SENDER_RECEIVER_ARP {7, "SENDER_RECEIVER_ARP"};

const Enum::YLeaf SisfNdpflag::on {0, "on"};
const Enum::YLeaf SisfNdpflag::off {1, "off"};

const Enum::YLeaf AggregateCtrlrType::unknown {0, "unknown"};
const Enum::YLeaf AggregateCtrlrType::l2_vxlan {1, "l2-vxlan"};
const Enum::YLeaf AggregateCtrlrType::vxlan {2, "vxlan"};

const Enum::YLeaf RtdmcBfdOperSt::down {0, "down"};
const Enum::YLeaf RtdmcBfdOperSt::rem_pend {1, "rem-pend"};
const Enum::YLeaf RtdmcBfdOperSt::up {2, "up"};

const Enum::YLeaf NetflowCollVersion::v5 {1, "v5"};
const Enum::YLeaf NetflowCollVersion::v9 {2, "v9"};
const Enum::YLeaf NetflowCollVersion::cisco_v1 {3, "cisco-v1"};

const Enum::YLeaf SrteEncapsulationType::mpls {0, "mpls"};

const Enum::YLeaf FmOperState::enabled {1, "enabled"};
const Enum::YLeaf FmOperState::disabled {2, "disabled"};

const Enum::YLeaf L1Beacon::on {1, "on"};
const Enum::YLeaf L1Beacon::off {2, "off"};

const Enum::YLeaf BgpPmsiTunType::none {0, "none"};
const Enum::YLeaf BgpPmsiTunType::ingress_repl {1, "ingress-repl"};

const Enum::YLeaf AaaClear::no {0, "no"};
const Enum::YLeaf AaaClear::yes {1, "yes"};

const Enum::YLeaf EqptPsuFanDir::front2back {0, "front2back"};
const Enum::YLeaf EqptPsuFanDir::back2front {1, "back2front"};
const Enum::YLeaf EqptPsuFanDir::notused {2, "notused"};

const Enum::YLeaf SyslogFacility::kern {0, "kern"};
const Enum::YLeaf SyslogFacility::user {1, "user"};
const Enum::YLeaf SyslogFacility::mail {2, "mail"};
const Enum::YLeaf SyslogFacility::daemon {3, "daemon"};
const Enum::YLeaf SyslogFacility::auth {4, "auth"};
const Enum::YLeaf SyslogFacility::syslog {5, "syslog"};
const Enum::YLeaf SyslogFacility::lpr {6, "lpr"};
const Enum::YLeaf SyslogFacility::news {7, "news"};
const Enum::YLeaf SyslogFacility::uucp {8, "uucp"};
const Enum::YLeaf SyslogFacility::cron {9, "cron"};
const Enum::YLeaf SyslogFacility::authpriv {10, "authpriv"};
const Enum::YLeaf SyslogFacility::ftp {11, "ftp"};
const Enum::YLeaf SyslogFacility::local0 {16, "local0"};
const Enum::YLeaf SyslogFacility::local1 {17, "local1"};
const Enum::YLeaf SyslogFacility::local2 {18, "local2"};
const Enum::YLeaf SyslogFacility::local3 {19, "local3"};
const Enum::YLeaf SyslogFacility::local4 {20, "local4"};
const Enum::YLeaf SyslogFacility::local5 {21, "local5"};
const Enum::YLeaf SyslogFacility::local6 {22, "local6"};
const Enum::YLeaf SyslogFacility::local7 {23, "local7"};

const Enum::YLeaf RegressEnumT::val1 {1, "val1"};
const Enum::YLeaf RegressEnumT::val2 {2, "val2"};
const Enum::YLeaf RegressEnumT::val3 {3, "val3"};

const Enum::YLeaf EqptVSrc::unknown {0, "unknown"};
const Enum::YLeaf EqptVSrc::Y_110v {1, "110v"};
const Enum::YLeaf EqptVSrc::Y_220v {2, "220v"};

const Enum::YLeaf AggregateConfTmplStatus::inactive {0, "inactive"};
const Enum::YLeaf AggregateConfTmplStatus::active {1, "active"};
const Enum::YLeaf AggregateConfTmplStatus::failed {2, "failed"};

const Enum::YLeaf RibDomOperSt::up {1, "up"};
const Enum::YLeaf RibDomOperSt::down_pending {2, "down-pending"};
const Enum::YLeaf RibDomOperSt::purged {3, "purged"};
const Enum::YLeaf RibDomOperSt::down {4, "down"};
const Enum::YLeaf RibDomOperSt::del_pending {5, "del-pending"};
const Enum::YLeaf RibDomOperSt::deleted {6, "deleted"};

const Enum::YLeaf IpqosProtocol::unspecified {0, "unspecified"};
const Enum::YLeaf IpqosProtocol::arp {1, "arp"};
const Enum::YLeaf IpqosProtocol::bridging {2, "bridging"};
const Enum::YLeaf IpqosProtocol::cdp {3, "cdp"};
const Enum::YLeaf IpqosProtocol::dhcp {7, "dhcp"};
const Enum::YLeaf IpqosProtocol::isis {8, "isis"};
const Enum::YLeaf IpqosProtocol::fcoe {14, "fcoe"};

const Enum::YLeaf BfdAfT::ipv4 {1, "ipv4"};
const Enum::YLeaf BfdAfT::ipv6 {2, "ipv6"};

const Enum::YLeaf AaaRadSrvUseType::Auth {0, "Auth"};
const Enum::YLeaf AaaRadSrvUseType::Author {1, "Author"};
const Enum::YLeaf AaaRadSrvUseType::Acc {2, "Acc"};
const Enum::YLeaf AaaRadSrvUseType::All {3, "All"};

const Enum::YLeaf OspfBfdOperSt::down {0, "down"};
const Enum::YLeaf OspfBfdOperSt::up {1, "up"};

const Enum::YLeaf StpPathcostOp::auto_ {0, "auto"};
const Enum::YLeaf StpPathcostOp::short_ {1, "short"};
const Enum::YLeaf StpPathcostOp::long_ {2, "long"};

const Enum::YLeaf EqptSlotT::unknown {0, "unknown"};
const Enum::YLeaf EqptSlotT::supslot {1, "supslot"};
const Enum::YLeaf EqptSlotT::lcslot {2, "lcslot"};
const Enum::YLeaf EqptSlotT::fcslot {3, "fcslot"};
const Enum::YLeaf EqptSlotT::scslot {4, "scslot"};
const Enum::YLeaf EqptSlotT::extchslot {5, "extchslot"};
const Enum::YLeaf EqptSlotT::psuslot {6, "psuslot"};
const Enum::YLeaf EqptSlotT::fantray {7, "fantray"};
const Enum::YLeaf EqptSlotT::bslot {8, "bslot"};
const Enum::YLeaf EqptSlotT::nslot {9, "nslot"};

const Enum::YLeaf NetflowModeT::netflow {0, "netflow"};

const Enum::YLeaf L1TxT::unknown {1, "unknown"};
const Enum::YLeaf L1TxT::LL {2, "LL"};
const Enum::YLeaf L1TxT::SN {3, "SN"};
const Enum::YLeaf L1TxT::LC {4, "LC"};
const Enum::YLeaf L1TxT::EL {5, "EL"};
const Enum::YLeaf L1TxT::Y_10GBASE_SR {6, "10GBASE-SR"};
const Enum::YLeaf L1TxT::Y_10GBASE_LR {7, "10GBASE-LR"};
const Enum::YLeaf L1TxT::Y_10GBASE_ER {8, "10GBASE-ER"};
const Enum::YLeaf L1TxT::Y_10GBASE_LX4 {9, "10GBASE-LX4"};
const Enum::YLeaf L1TxT::Y_10GBASE_SW {10, "10GBASE-SW"};
const Enum::YLeaf L1TxT::Y_10GBASE_LW {11, "10GBASE-LW"};
const Enum::YLeaf L1TxT::Y_10GBASE_EW {12, "10GBASE-EW"};

const Enum::YLeaf ArpEventLogSize::disabled {0, "disabled"};
const Enum::YLeaf ArpEventLogSize::small {1, "small"};
const Enum::YLeaf ArpEventLogSize::medium {2, "medium"};
const Enum::YLeaf ArpEventLogSize::large {3, "large"};

const Enum::YLeaf VpcRole::election_not_done {0, "election-not-done"};
const Enum::YLeaf VpcRole::master {1, "master"};
const Enum::YLeaf VpcRole::slave {2, "slave"};

const Enum::YLeaf McpOperSt::init {0, "init"};
const Enum::YLeaf McpOperSt::up {1, "up"};
const Enum::YLeaf McpOperSt::down {3, "down"};

const Enum::YLeaf OspfFlagStatus::set {0, "set"};
const Enum::YLeaf OspfFlagStatus::clear {1, "clear"};

const Enum::YLeaf RtdmcAdjOperSt::up {0, "up"};
const Enum::YLeaf RtdmcAdjOperSt::inactive {1, "inactive"};

const Enum::YLeaf BgpPeerGrSt::na {1, "na"};
const Enum::YLeaf BgpPeerGrSt::reset {2, "reset"};
const Enum::YLeaf BgpPeerGrSt::up {3, "up"};

const Enum::YLeaf BgpAdvertL2vpnEvpn::enabled {1, "enabled"};
const Enum::YLeaf BgpAdvertL2vpnEvpn::disabled {0, "disabled"};

const Enum::YLeaf MribEhType::cli {0, "cli"};
const Enum::YLeaf MribEhType::mdt {1, "mdt"};
const Enum::YLeaf MribEhType::mfdmDebugs {2, "mfdmDebugs"};
const Enum::YLeaf MribEhType::mfdmEvents {3, "mfdmEvents"};
const Enum::YLeaf MribEhType::mfdmStats {4, "mfdmStats"};
const Enum::YLeaf MribEhType::notyClients {5, "notyClients"};
const Enum::YLeaf MribEhType::rib {6, "rib"};
const Enum::YLeaf MribEhType::ribSum {7, "ribSum"};
const Enum::YLeaf MribEhType::urib {8, "urib"};
const Enum::YLeaf MribEhType::vrf {9, "vrf"};
const Enum::YLeaf MribEhType::nbm {10, "nbm"};

const Enum::YLeaf AaaProviderState::unknown {0, "unknown"};
const Enum::YLeaf AaaProviderState::operable {1, "operable"};
const Enum::YLeaf AaaProviderState::inoperable {2, "inoperable"};

const Enum::YLeaf AclActionType::invalid {0, "invalid"};
const Enum::YLeaf AclActionType::permit {1, "permit"};
const Enum::YLeaf AclActionType::deny {2, "deny"};
const Enum::YLeaf AclActionType::copy {3, "copy"};
const Enum::YLeaf AclActionType::divert {4, "divert"};
const Enum::YLeaf AclActionType::redirect {5, "redirect"};

const Enum::YLeaf MonitorErSpanVer::ver2 {2, "ver2"};
const Enum::YLeaf MonitorErSpanVer::ver3 {3, "ver3"};

const Enum::YLeaf StpVpcState::none {0, "none"};
const Enum::YLeaf StpVpcState::vPCPeerlink {1, "vPCPeerlink"};
const Enum::YLeaf StpVpcState::vPC {2, "vPC"};

const Enum::YLeaf DhcpClIfOperSt::unspecified {0, "unspecified"};
const Enum::YLeaf DhcpClIfOperSt::init {1, "init"};
const Enum::YLeaf DhcpClIfOperSt::discover {2, "discover"};
const Enum::YLeaf DhcpClIfOperSt::requesting {3, "requesting"};
const Enum::YLeaf DhcpClIfOperSt::addr_rcvd {4, "addr-rcvd"};
const Enum::YLeaf DhcpClIfOperSt::failed {5, "failed"};
const Enum::YLeaf DhcpClIfOperSt::request_timedout {6, "request-timedout"};
const Enum::YLeaf DhcpClIfOperSt::down {7, "down"};

const Enum::YLeaf NgoamXcPortState::down {0, "down"};
const Enum::YLeaf NgoamXcPortState::up {1, "up"};
const Enum::YLeaf NgoamXcPortState::errDisabled {2, "errDisabled"};

const Enum::YLeaf AaaPwdPolicy::enable {0, "enable"};
const Enum::YLeaf AaaPwdPolicy::disable {1, "disable"};

const Enum::YLeaf TunnelEncapT::unknown {0, "unknown"};
const Enum::YLeaf TunnelEncapT::vxlan {1, "vxlan"};
const Enum::YLeaf TunnelEncapT::ivxlan {2, "ivxlan"};
const Enum::YLeaf TunnelEncapT::nvgre {3, "nvgre"};

const Enum::YLeaf OspfVrfLiteControl::unspecified {0, "unspecified"};
const Enum::YLeaf OspfVrfLiteControl::l3vpn {1, "l3vpn"};
const Enum::YLeaf OspfVrfLiteControl::evpn {2, "evpn"};

const Enum::YLeaf PlatformPcLbAlgo::PC_LB_ALGO_DLB {1, "PC_LB_ALGO_DLB"};
const Enum::YLeaf PlatformPcLbAlgo::PC_LB_ALGO_RTAG7 {2, "PC_LB_ALGO_RTAG7"};
const Enum::YLeaf PlatformPcLbAlgo::PC_LB_ALGO_RTAG7_MURMUR {3, "PC_LB_ALGO_RTAG7_MURMUR"};
const Enum::YLeaf PlatformPcLbAlgo::PC_LB_ALGO_RTAG7_LOCAL_CRC {4, "PC_LB_ALGO_RTAG7_LOCAL_CRC"};
const Enum::YLeaf PlatformPcLbAlgo::PC_LB_ALGO_DYNAMIC_PIN {5, "PC_LB_ALGO_DYNAMIC_PIN"};

const Enum::YLeaf NdDbT::adj {1, "adj"};

const Enum::YLeaf RtmapCriteria::exact {1, "exact"};
const Enum::YLeaf RtmapCriteria::sub_group {2, "sub-group"};

const Enum::YLeaf BgpMode::fabric {1, "fabric"};
const Enum::YLeaf BgpMode::external {2, "external"};

const Enum::YLeaf RtmapAdminSt::enabled {1, "enabled"};
const Enum::YLeaf RtmapAdminSt::disabled {2, "disabled"};

const Enum::YLeaf BfdOperSt::admin_down {0, "admin-down"};
const Enum::YLeaf BfdOperSt::down {1, "down"};
const Enum::YLeaf BfdOperSt::init {2, "init"};
const Enum::YLeaf BfdOperSt::up {3, "up"};

const Enum::YLeaf CoppMatchT::Undefined {0, "Undefined"};
const Enum::YLeaf CoppMatchT::access_group {1, "access-group"};
const Enum::YLeaf CoppMatchT::redirect {2, "redirect"};
const Enum::YLeaf CoppMatchT::exception {3, "exception"};
const Enum::YLeaf CoppMatchT::protocol {4, "protocol"};

const Enum::YLeaf TunnelifTunnelOption::unknown {0, "unknown"};
const Enum::YLeaf TunnelifTunnelOption::del_on_fail {1, "del_on_fail"};
const Enum::YLeaf TunnelifTunnelOption::usr_cfg_mtu {2, "usr_cfg_mtu"};

const Enum::YLeaf IsisMetricStyle::narrow {1, "narrow"};
const Enum::YLeaf IsisMetricStyle::wide {2, "wide"};
const Enum::YLeaf IsisMetricStyle::transition {3, "transition"};

const Enum::YLeaf QosTenantPrio::unspecified {0, "unspecified"};
const Enum::YLeaf QosTenantPrio::level3 {1, "level3"};
const Enum::YLeaf QosTenantPrio::level2 {2, "level2"};
const Enum::YLeaf QosTenantPrio::level1 {3, "level1"};

const Enum::YLeaf RtmapRouteT::external {1, "external"};
const Enum::YLeaf RtmapRouteT::internal {2, "internal"};
const Enum::YLeaf RtmapRouteT::ospf_inter_area {3, "ospf-inter-area"};
const Enum::YLeaf RtmapRouteT::ospf_intra_area {4, "ospf-intra-area"};
const Enum::YLeaf RtmapRouteT::isis_l1 {5, "isis-l1"};
const Enum::YLeaf RtmapRouteT::isis_l2 {6, "isis-l2"};
const Enum::YLeaf RtmapRouteT::local {7, "local"};
const Enum::YLeaf RtmapRouteT::ospf_nssa_external {8, "ospf-nssa-external"};
const Enum::YLeaf RtmapRouteT::ospf_type1 {9, "ospf-type1"};
const Enum::YLeaf RtmapRouteT::ospf_type2 {10, "ospf-type2"};

const Enum::YLeaf PcPortChannelType::ethernet {0, "ethernet"};

const Enum::YLeaf NbmNbmFlowOperEn::NOOP {0, "NOOP"};
const Enum::YLeaf NbmNbmFlowOperEn::ROUTE_ADD {1, "ROUTE_ADD"};
const Enum::YLeaf NbmNbmFlowOperEn::ROUTE_DEL {2, "ROUTE_DEL"};
const Enum::YLeaf NbmNbmFlowOperEn::UPD_ADD_OIF {3, "UPD_ADD_OIF"};
const Enum::YLeaf NbmNbmFlowOperEn::UPD_DEL_OIF {4, "UPD_DEL_OIF"};
const Enum::YLeaf NbmNbmFlowOperEn::LOC_ADD_OIF {5, "LOC_ADD_OIF"};
const Enum::YLeaf NbmNbmFlowOperEn::LOC_DEL_OIF {6, "LOC_DEL_OIF"};
const Enum::YLeaf NbmNbmFlowOperEn::UPD_IIF {7, "UPD_IIF"};
const Enum::YLeaf NbmNbmFlowOperEn::DENY_POLICY_SRC {8, "DENY_POLICY_SRC"};
const Enum::YLeaf NbmNbmFlowOperEn::SRC_DISCOVERY {9, "SRC_DISCOVERY"};
const Enum::YLeaf NbmNbmFlowOperEn::SRC_DISC_STOP {10, "SRC_DISC_STOP"};
const Enum::YLeaf NbmNbmFlowOperEn::Y_11 {11, "11"};
const Enum::YLeaf NbmNbmFlowOperEn::Y_12 {12, "12"};
const Enum::YLeaf NbmNbmFlowOperEn::Y_13_UNUSED {13, "13-UNUSED"};
const Enum::YLeaf NbmNbmFlowOperEn::Y_14 {14, "14"};
const Enum::YLeaf NbmNbmFlowOperEn::ALLOW_POLICY_SRC {15, "ALLOW_POLICY_SRC"};
const Enum::YLeaf NbmNbmFlowOperEn::DENY_POLICY_RCV {16, "DENY_POLICY_RCV"};
const Enum::YLeaf NbmNbmFlowOperEn::ALLOW_POLICY_RCV {17, "ALLOW_POLICY_RCV"};
const Enum::YLeaf NbmNbmFlowOperEn::Y_18 {18, "18"};
const Enum::YLeaf NbmNbmFlowOperEn::Y_19 {19, "19"};
const Enum::YLeaf NbmNbmFlowOperEn::Y_20 {20, "20"};

const Enum::YLeaf NvoMultisiteIngReplStateT::disable {1, "disable"};
const Enum::YLeaf NvoMultisiteIngReplStateT::enable {2, "enable"};

const Enum::YLeaf McastfwdEhType::internal {0, "internal"};
const Enum::YLeaf McastfwdEhType::cli {1, "cli"};
const Enum::YLeaf McastfwdEhType::packet {2, "packet"};
const Enum::YLeaf McastfwdEhType::vrf {3, "vrf"};
const Enum::YLeaf McastfwdEhType::l2 {4, "l2"};
const Enum::YLeaf McastfwdEhType::nbm {5, "nbm"};

const Enum::YLeaf MonTransport::none {0, "none"};
const Enum::YLeaf MonTransport::tcp {1, "tcp"};
const Enum::YLeaf MonTransport::udp {2, "udp"};
const Enum::YLeaf MonTransport::all {3, "all"};
const Enum::YLeaf MonTransport::tls {4, "tls"};

const Enum::YLeaf NpvSrvIfFsmSt::no_transition {0, "no-transition"};
const Enum::YLeaf NpvSrvIfFsmSt::no_change {1, "no-change"};
const Enum::YLeaf NpvSrvIfFsmSt::any {2, "any"};
const Enum::YLeaf NpvSrvIfFsmSt::if_down {3, "if-down"};
const Enum::YLeaf NpvSrvIfFsmSt::wait_ext_if {4, "wait-ext-if"};
const Enum::YLeaf NpvSrvIfFsmSt::wait_flogi {5, "wait-flogi"};
const Enum::YLeaf NpvSrvIfFsmSt::if_up {6, "if-up"};
const Enum::YLeaf NpvSrvIfFsmSt::flogi_cleanup {7, "flogi-cleanup"};
const Enum::YLeaf NpvSrvIfFsmSt::wait_fc_add {8, "wait-fc-add"};
const Enum::YLeaf NpvSrvIfFsmSt::wait_fc_del {9, "wait-fc-del"};
const Enum::YLeaf NpvSrvIfFsmSt::wait_ext_if_stable {10, "wait-ext-if-stable"};

const Enum::YLeaf SysmgrSupT::local {0, "local"};
const Enum::YLeaf SysmgrSupT::remote {1, "remote"};

const Enum::YLeaf IsisOverloadAdminSt::off {0, "off"};
const Enum::YLeaf IsisOverloadAdminSt::always_on {1, "always-on"};
const Enum::YLeaf IsisOverloadAdminSt::bootup {2, "bootup"};
const Enum::YLeaf IsisOverloadAdminSt::bgp_converge {3, "bgp-converge"};
const Enum::YLeaf IsisOverloadAdminSt::bgp_converge_max_wait {4, "bgp-converge-max-wait"};

const Enum::YLeaf AggregateIngressRepProtocolType::unknown {0, "unknown"};
const Enum::YLeaf AggregateIngressRepProtocolType::static_ {1, "static"};
const Enum::YLeaf AggregateIngressRepProtocolType::bgp {2, "bgp"};

const Enum::YLeaf MsdpEhType::cli {0, "cli"};
const Enum::YLeaf MsdpEhType::events {1, "events"};
const Enum::YLeaf MsdpEhType::msdpInternal {2, "msdpInternal"};
const Enum::YLeaf MsdpEhType::routes {3, "routes"};
const Enum::YLeaf MsdpEhType::tcp {4, "tcp"};

const Enum::YLeaf BgpLsNlriType::none {0, "none"};
const Enum::YLeaf BgpLsNlriType::node {1, "node"};
const Enum::YLeaf BgpLsNlriType::link {2, "link"};
const Enum::YLeaf BgpLsNlriType::ipv4_topo {3, "ipv4-topo"};
const Enum::YLeaf BgpLsNlriType::ipv6_topo {4, "ipv6-topo"};

const Enum::YLeaf RtmapSetCriteria::none {1, "none"};
const Enum::YLeaf RtmapSetCriteria::append {2, "append"};
const Enum::YLeaf RtmapSetCriteria::replace {3, "replace"};
const Enum::YLeaf RtmapSetCriteria::igp {4, "igp"};
const Enum::YLeaf RtmapSetCriteria::pre_bestpath {5, "pre-bestpath"};

const Enum::YLeaf EqptSensorOpSt::fail {0, "fail"};
const Enum::YLeaf EqptSensorOpSt::normal {1, "normal"};
const Enum::YLeaf EqptSensorOpSt::minor {2, "minor"};
const Enum::YLeaf EqptSensorOpSt::major_ {3, "major"};
const Enum::YLeaf EqptSensorOpSt::absent {4, "absent"};
const Enum::YLeaf EqptSensorOpSt::bad_asic {5, "bad-asic"};

const Enum::YLeaf SpanOperSt::unspecified {0, "unspecified"};
const Enum::YLeaf SpanOperSt::up {1, "up"};
const Enum::YLeaf SpanOperSt::down {2, "down"};
const Enum::YLeaf SpanOperSt::failed {3, "failed"};
const Enum::YLeaf SpanOperSt::partial {4, "partial"};

const Enum::YLeaf BgpLsAdminSt::inactive {0, "inactive"};
const Enum::YLeaf BgpLsAdminSt::active {1, "active"};

const Enum::YLeaf BgpPwdType::Y_0 {0, "0"};
const Enum::YLeaf BgpPwdType::Y_3 {3, "3"};
const Enum::YLeaf BgpPwdType::Y_7 {7, "7"};
const Enum::YLeaf BgpPwdType::LINE {5, "LINE"};

const Enum::YLeaf SisfRaGuardManagedConfig::off {0, "off"};
const Enum::YLeaf SisfRaGuardManagedConfig::on {1, "on"};
const Enum::YLeaf SisfRaGuardManagedConfig::nocheck {2, "nocheck"};

const Enum::YLeaf BgpShutStQual::unspecified {0, "unspecified"};
const Enum::YLeaf BgpShutStQual::admin {1, "admin"};
const Enum::YLeaf BgpShutStQual::no_mem {2, "no-mem"};
const Enum::YLeaf BgpShutStQual::exceeded_pfxlimit {3, "exceeded-pfxlimit"};
const Enum::YLeaf BgpShutStQual::admin_up {4, "admin-up"};
const Enum::YLeaf BgpShutStQual::no_affinity {5, "no-affinity"};

const Enum::YLeaf AnalyticsDirectionT::in {1, "in"};
const Enum::YLeaf AnalyticsDirectionT::out {2, "out"};
const Enum::YLeaf AnalyticsDirectionT::both {3, "both"};

const Enum::YLeaf TunnelAdminSt::up {1, "up"};
const Enum::YLeaf TunnelAdminSt::down {2, "down"};

const Enum::YLeaf QospOperSt::enabled {1, "enabled"};
const Enum::YLeaf QospOperSt::disabled {2, "disabled"};

const Enum::YLeaf StpPortState::unknown {0, "unknown"};
const Enum::YLeaf StpPortState::discarding {1, "discarding"};
const Enum::YLeaf StpPortState::learning {2, "learning"};
const Enum::YLeaf StpPortState::forwarding {3, "forwarding"};
const Enum::YLeaf StpPortState::disabled {4, "disabled"};

const Enum::YLeaf BgpLsProtoId::none {0, "none"};
const Enum::YLeaf BgpLsProtoId::isis_l1 {1, "isis-l1"};
const Enum::YLeaf BgpLsProtoId::isis_l2 {2, "isis-l2"};
const Enum::YLeaf BgpLsProtoId::ospf_v2 {3, "ospf-v2"};
const Enum::YLeaf BgpLsProtoId::direct {4, "direct"};
const Enum::YLeaf BgpLsProtoId::static_ {5, "static"};
const Enum::YLeaf BgpLsProtoId::ospf_v3 {6, "ospf-v3"};
const Enum::YLeaf BgpLsProtoId::epe {7, "epe"};

const Enum::YLeaf FsetOperState::none {0, "none"};
const Enum::YLeaf FsetOperState::enabled {1, "enabled"};
const Enum::YLeaf FsetOperState::disabled {2, "disabled"};
const Enum::YLeaf FsetOperState::installed {3, "installed"};
const Enum::YLeaf FsetOperState::uninstalled {4, "uninstalled"};

const Enum::YLeaf DatetimeProvT::peer {0, "peer"};
const Enum::YLeaf DatetimeProvT::server {1, "server"};
const Enum::YLeaf DatetimeProvT::invalid {2, "invalid"};

const Enum::YLeaf GoldResult::untested {1, "untested"};
const Enum::YLeaf GoldResult::failure {2, "failure"};
const Enum::YLeaf GoldResult::not_complete {3, "not-complete"};
const Enum::YLeaf GoldResult::aborted {4, "aborted"};
const Enum::YLeaf GoldResult::success {5, "success"};
const Enum::YLeaf GoldResult::error_disabled {6, "error-disabled"};
const Enum::YLeaf GoldResult::error_ignore {7, "error-ignore"};
const Enum::YLeaf GoldResult::error_disabled_w_no {8, "error-disabled-w-no"};
const Enum::YLeaf GoldResult::unavailable {9, "unavailable"};

const Enum::YLeaf NwAdminStProcessStatNullBcast::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStProcessStatNullBcast::disabled {2, "disabled"};

const Enum::YLeaf CoppMatchOption::Unknown {0, "Unknown"};
const Enum::YLeaf CoppMatchOption::MatchAny {1, "MatchAny"};
const Enum::YLeaf CoppMatchOption::MatchAll {2, "MatchAll"};

const Enum::YLeaf OspfAreaT::regular {1, "regular"};
const Enum::YLeaf OspfAreaT::stub {2, "stub"};
const Enum::YLeaf OspfAreaT::nssa {3, "nssa"};

const Enum::YLeaf ActrlDirection::uni_dir {1, "uni-dir"};
const Enum::YLeaf ActrlDirection::bi_dir {2, "bi-dir"};

const Enum::YLeaf IpmcsnoopFwdMode::ip {1, "ip"};
const Enum::YLeaf IpmcsnoopFwdMode::mac {2, "mac"};

const Enum::YLeaf L1Module::lc {0, "lc"};
const Enum::YLeaf L1Module::sup {1, "sup"};

const Enum::YLeaf AdjacencyAdjOperSt::unspecified {0, "unspecified"};
const Enum::YLeaf AdjacencyAdjOperSt::incomplete {1, "incomplete"};
const Enum::YLeaf AdjacencyAdjOperSt::normal {2, "normal"};

const Enum::YLeaf NvoMultisiteTrackingT::unknown {0, "unknown"};
const Enum::YLeaf NvoMultisiteTrackingT::dci {1, "dci"};
const Enum::YLeaf NvoMultisiteTrackingT::fabric {2, "fabric"};

const Enum::YLeaf L2fmLearning::enable {1, "enable"};
const Enum::YLeaf L2fmLearning::disable {0, "disable"};

const Enum::YLeaf StpAdminSt::enabled {1, "enabled"};
const Enum::YLeaf StpAdminSt::disabled {2, "disabled"};

const Enum::YLeaf AggregateResourceStatus::unknown {0, "unknown"};
const Enum::YLeaf AggregateResourceStatus::vlanCreated {1, "vlanCreated"};
const Enum::YLeaf AggregateResourceStatus::vlanFailed {2, "vlanFailed"};
const Enum::YLeaf AggregateResourceStatus::vnidCreated {3, "vnidCreated"};
const Enum::YLeaf AggregateResourceStatus::vnidFailed {4, "vnidFailed"};
const Enum::YLeaf AggregateResourceStatus::vlansCarved {5, "vlansCarved"};
const Enum::YLeaf AggregateResourceStatus::vlansNotCarved {6, "vlansNotCarved"};
const Enum::YLeaf AggregateResourceStatus::vnidCreationReceived {7, "vnidCreationReceived"};
const Enum::YLeaf AggregateResourceStatus::myTEPIPPublished {101, "myTEPIPPublished"};
const Enum::YLeaf AggregateResourceStatus::controllerIntfNotCarved {201, "controllerIntfNotCarved"};
const Enum::YLeaf AggregateResourceStatus::controllerIntfCarved {202, "controllerIntfCarved"};

const Enum::YLeaf ImBreakoutMapT::no_breakout {0, "no-breakout"};
const Enum::YLeaf ImBreakoutMapT::Y_10g_4x {5, "10g-4x"};
const Enum::YLeaf ImBreakoutMapT::Y_10g_2x {9, "10g-2x"};
const Enum::YLeaf ImBreakoutMapT::Y_25g_4x {8, "25g-4x"};
const Enum::YLeaf ImBreakoutMapT::Y_50g_2x {7, "50g-2x"};

const Enum::YLeaf IpSwitchPktTarget::disabled {0, "disabled"};
const Enum::YLeaf IpSwitchPktTarget::all {1, "all"};
const Enum::YLeaf IpSwitchPktTarget::lla {2, "lla"};

const Enum::YLeaf InstallerStage::preupg_copy_image {0, "preupg-copy-image"};
const Enum::YLeaf InstallerStage::preupg_initializing {1, "preupg-initializing"};
const Enum::YLeaf InstallerStage::preupg_verifying_images {3, "preupg-verifying_images"};
const Enum::YLeaf InstallerStage::preupg_runtime_check {6, "preupg-runtime-check"};
const Enum::YLeaf InstallerStage::preupg_sync_image {7, "preupg-sync-image"};
const Enum::YLeaf InstallerStage::upgrade_upg_fex {9, "upgrade-upg-fex"};
const Enum::YLeaf InstallerStage::upgrade_upg_lc {10, "upgrade-upg-lc"};
const Enum::YLeaf InstallerStage::preupg_conf_sync {11, "preupg-conf-sync"};
const Enum::YLeaf InstallerStage::preupg_set_boot {12, "preupg-set-boot"};
const Enum::YLeaf InstallerStage::preupg_force_dnld {13, "preupg-force-dnld"};
const Enum::YLeaf InstallerStage::preupg_wait_mod {14, "preupg-wait-mod"};
const Enum::YLeaf InstallerStage::preupg_convert_startup {15, "preupg-convert-startup"};
const Enum::YLeaf InstallerStage::preupg_save_sup_state {16, "preupg-save-sup-state"};
const Enum::YLeaf InstallerStage::upgrade_kexec {17, "upgrade-kexec"};
const Enum::YLeaf InstallerStage::preupg_pre_upg_notif {19, "preupg-pre-upg-notif"};
const Enum::YLeaf InstallerStage::preupg_mod_support_check {20, "preupg-mod-support-check"};
const Enum::YLeaf InstallerStage::preupg_Checks {21, "preupg-Checks"};
const Enum::YLeaf InstallerStage::upgrade_upg_bios {22, "upgrade-upg-bios"};
const Enum::YLeaf InstallerStage::upgrade_upg_cmp {23, "upgrade-upg-cmp"};
const Enum::YLeaf InstallerStage::upgrade_notification {24, "upgrade-notification"};
const Enum::YLeaf InstallerStage::preupg_save_mts_state {25, "preupg-save-mts-state"};
const Enum::YLeaf InstallerStage::success {26, "success"};
const Enum::YLeaf InstallerStage::failed {27, "failed"};
const Enum::YLeaf InstallerStage::not_started {28, "not-started"};
const Enum::YLeaf InstallerStage::upgrade_sup_state_verification {29, "upgrade-sup-state-verification"};
const Enum::YLeaf InstallerStage::upgrade_switchover_notif {30, "upgrade-switchover-notif"};
const Enum::YLeaf InstallerStage::upgrade_standby_container_start {31, "upgrade-standby-container-start"};
const Enum::YLeaf InstallerStage::user_abort {32, "user-abort"};

const Enum::YLeaf OspfIfType::unspecified {0, "unspecified"};
const Enum::YLeaf OspfIfType::loopback {1, "loopback"};
const Enum::YLeaf OspfIfType::p2p {2, "p2p"};
const Enum::YLeaf OspfIfType::p2mp {3, "p2mp"};
const Enum::YLeaf OspfIfType::nbma {4, "nbma"};
const Enum::YLeaf OspfIfType::bcast {5, "bcast"};

const Enum::YLeaf NwEntOperSt::unknown {0, "unknown"};
const Enum::YLeaf NwEntOperSt::enabled {1, "enabled"};
const Enum::YLeaf NwEntOperSt::disabled {2, "disabled"};
const Enum::YLeaf NwEntOperSt::initializing {3, "initializing"};
const Enum::YLeaf NwEntOperSt::failed {4, "failed"};

const Enum::YLeaf PlatformLatencyMonitorSt::Enable {1, "Enable"};
const Enum::YLeaf PlatformLatencyMonitorSt::Disable {0, "Disable"};

const Enum::YLeaf QospECN::disabled {0, "disabled"};
const Enum::YLeaf QospECN::enabled {1, "enabled"};

const Enum::YLeaf NgoamOamChannel::invalid {0, "invalid"};
const Enum::YLeaf NgoamOamChannel::tissa {2, "tissa"};

const Enum::YLeaf TunnelifTunnelOperStQual::unknown {0, "unknown"};
const Enum::YLeaf TunnelifTunnelOperStQual::none {1, "none"};
const Enum::YLeaf TunnelifTunnelOperStQual::initing {2, "initing"};
const Enum::YLeaf TunnelifTunnelOperStQual::incomp_conf {3, "incomp-conf"};
const Enum::YLeaf TunnelifTunnelOperStQual::dup_conf {4, "dup-conf"};
const Enum::YLeaf TunnelifTunnelOperStQual::no_mode {5, "no-mode"};
const Enum::YLeaf TunnelifTunnelOperStQual::admin_down {6, "admin-down"};
const Enum::YLeaf TunnelifTunnelOperStQual::src_down {7, "src-down"};
const Enum::YLeaf TunnelifTunnelOperStQual::src_unres {8, "src-unres"};
const Enum::YLeaf TunnelifTunnelOperStQual::no_dest {9, "no-dest"};
const Enum::YLeaf TunnelifTunnelOperStQual::desip_unres {10, "desip-unres"};
const Enum::YLeaf TunnelifTunnelOperStQual::dest_unreach {11, "dest-unreach"};
const Enum::YLeaf TunnelifTunnelOperStQual::vrf_mismatch {12, "vrf-mismatch"};
const Enum::YLeaf TunnelifTunnelOperStQual::vrf_fwdref {13, "vrf-fwdref"};
const Enum::YLeaf TunnelifTunnelOperStQual::vrf_down {14, "vrf-down"};
const Enum::YLeaf TunnelifTunnelOperStQual::mtu_error {15, "mtu-error"};
const Enum::YLeaf TunnelifTunnelOperStQual::hwprog_fail {16, "hwprog-fail"};
const Enum::YLeaf TunnelifTunnelOperStQual::no_src {17, "no-src"};

const Enum::YLeaf AggregateIntfAssignMode::dedicated {0, "dedicated"};
const Enum::YLeaf AggregateIntfAssignMode::shared {1, "shared"};

const Enum::YLeaf Icmpv6EventType::cli {0, "cli"};
const Enum::YLeaf Icmpv6EventType::errors {1, "errors"};
const Enum::YLeaf Icmpv6EventType::highAvailability {2, "highAvailability"};
const Enum::YLeaf Icmpv6EventType::icmpv6_internal {3, "icmpv6-internal"};
const Enum::YLeaf Icmpv6EventType::ipv6SyncEvent {4, "ipv6SyncEvent"};
const Enum::YLeaf Icmpv6EventType::mldDebug {5, "mldDebug"};
const Enum::YLeaf Icmpv6EventType::mldEvent {6, "mldEvent"};
const Enum::YLeaf Icmpv6EventType::nd {7, "nd"};
const Enum::YLeaf Icmpv6EventType::sync_event {8, "sync-event"};
const Enum::YLeaf Icmpv6EventType::vrf {9, "vrf"};

const Enum::YLeaf GoldBootLevel::bypass {0, "bypass"};
const Enum::YLeaf GoldBootLevel::complete {1, "complete"};

const Enum::YLeaf EqptPoweroffSt::no {0, "no"};
const Enum::YLeaf EqptPoweroffSt::yes {1, "yes"};

const Enum::YLeaf SwpkgsPackageActionResult::success {0, "success"};
const Enum::YLeaf SwpkgsPackageActionResult::failed {1, "failed"};
const Enum::YLeaf SwpkgsPackageActionResult::not_available {2, "not-available"};

const Enum::YLeaf NvoCfgSrcT::unknown {0, "unknown"};
const Enum::YLeaf NvoCfgSrcT::cli {1, "cli"};
const Enum::YLeaf NvoCfgSrcT::controller {2, "controller"};

const Enum::YLeaf NbmNbmBwUnitEn::UNSPECIFIED {0, "UNSPECIFIED"};
const Enum::YLeaf NbmNbmBwUnitEn::KBPS {1, "KBPS"};
const Enum::YLeaf NbmNbmBwUnitEn::MBPS {2, "MBPS"};
const Enum::YLeaf NbmNbmBwUnitEn::GBPS {3, "GBPS"};

const Enum::YLeaf VrrpAdminSt::disabled {1, "disabled"};
const Enum::YLeaf VrrpAdminSt::enabled {2, "enabled"};

const Enum::YLeaf StpBPDUGuard::default_ {0, "default"};
const Enum::YLeaf StpBPDUGuard::enable {1, "enable"};
const Enum::YLeaf StpBPDUGuard::disable {2, "disable"};

const Enum::YLeaf EqptAdSt::unknown {0, "unknown"};
const Enum::YLeaf EqptAdSt::enabled {1, "enabled"};
const Enum::YLeaf EqptAdSt::disabled {2, "disabled"};

const Enum::YLeaf L1Layer::Layer2 {1, "Layer2"};
const Enum::YLeaf L1Layer::Layer3 {2, "Layer3"};

const Enum::YLeaf ScrtchpdAction::create {1, "create"};
const Enum::YLeaf ScrtchpdAction::delete_ {2, "delete"};

const Enum::YLeaf IpqosQueueLimitUnit::none {0, "none"};
const Enum::YLeaf IpqosQueueLimitUnit::packets {1, "packets"};
const Enum::YLeaf IpqosQueueLimitUnit::bytes {2, "bytes"};
const Enum::YLeaf IpqosQueueLimitUnit::kbytes {3, "kbytes"};
const Enum::YLeaf IpqosQueueLimitUnit::mbytes {4, "mbytes"};
const Enum::YLeaf IpqosQueueLimitUnit::gbytes {5, "gbytes"};
const Enum::YLeaf IpqosQueueLimitUnit::ms {6, "ms"};
const Enum::YLeaf IpqosQueueLimitUnit::us {7, "us"};
const Enum::YLeaf IpqosQueueLimitUnit::perc {8, "perc"};

const Enum::YLeaf AnalyticsCModeT::aci {0, "aci"};
const Enum::YLeaf AnalyticsCModeT::standalone {1, "standalone"};

const Enum::YLeaf TestOperSt::fail {0, "fail"};
const Enum::YLeaf TestOperSt::indeterminate {1, "indeterminate"};
const Enum::YLeaf TestOperSt::interrupted {2, "interrupted"};
const Enum::YLeaf TestOperSt::pending {3, "pending"};
const Enum::YLeaf TestOperSt::not_supp {4, "not-supp"};
const Enum::YLeaf TestOperSt::not_acc {5, "not-acc"};
const Enum::YLeaf TestOperSt::pass {6, "pass"};
const Enum::YLeaf TestOperSt::not_tested {7, "not-tested"};

const Enum::YLeaf BgpOrigin::igp {1, "igp"};
const Enum::YLeaf BgpOrigin::egp {2, "egp"};
const Enum::YLeaf BgpOrigin::incomplete {3, "incomplete"};

const Enum::YLeaf GoldModuleDiagStatus::fail {0, "fail"};
const Enum::YLeaf GoldModuleDiagStatus::pass {1, "pass"};
const Enum::YLeaf GoldModuleDiagStatus::untested {2, "untested"};

const Enum::YLeaf NvoSuppressARPT::off {0, "off"};
const Enum::YLeaf NvoSuppressARPT::enabled {1, "enabled"};
const Enum::YLeaf NvoSuppressARPT::disabled {2, "disabled"};

const Enum::YLeaf EpmDbT::ep {1, "ep"};

const Enum::YLeaf LldpAdminSt::enabled {1, "enabled"};
const Enum::YLeaf LldpAdminSt::disabled {2, "disabled"};

const Enum::YLeaf IpqosThreshUnit::none {0, "none"};
const Enum::YLeaf IpqosThreshUnit::packets {1, "packets"};
const Enum::YLeaf IpqosThreshUnit::bytes {2, "bytes"};
const Enum::YLeaf IpqosThreshUnit::kbytes {3, "kbytes"};
const Enum::YLeaf IpqosThreshUnit::mbytes {4, "mbytes"};

const Enum::YLeaf OspfEventLogSize::disabled {0, "disabled"};
const Enum::YLeaf OspfEventLogSize::small {1, "small"};
const Enum::YLeaf OspfEventLogSize::medium {2, "medium"};
const Enum::YLeaf OspfEventLogSize::large {3, "large"};

const Enum::YLeaf NbmNbmPolicyType::SENDER {0, "SENDER"};
const Enum::YLeaf NbmNbmPolicyType::RECEIVER {1, "RECEIVER"};
const Enum::YLeaf NbmNbmPolicyType::PIM {2, "PIM"};

const Enum::YLeaf NgoamXcState::Active {0, "Active"};
const Enum::YLeaf NgoamXcState::DB {1, "DB"};
const Enum::YLeaf NgoamXcState::HB {2, "HB"};
const Enum::YLeaf NgoamXcState::RD {4, "RD"};
const Enum::YLeaf NgoamXcState::LD {8, "LD"};
const Enum::YLeaf NgoamXcState::DB__FWD_SLASH__HB {3, "DB/HB"};
const Enum::YLeaf NgoamXcState::RD__FWD_SLASH__HB {6, "RD/HB"};
const Enum::YLeaf NgoamXcState::DB__FWD_SLASH__HB__FWD_SLASH__RD {7, "DB/HB/RD"};
const Enum::YLeaf NgoamXcState::DB__FWD_SLASH__LD {9, "DB/LD"};
const Enum::YLeaf NgoamXcState::HB__FWD_SLASH__LD {10, "HB/LD"};
const Enum::YLeaf NgoamXcState::DB__FWD_SLASH__HB__FWD_SLASH__LD {11, "DB/HB/LD"};
const Enum::YLeaf NgoamXcState::RD__FWD_SLASH__LD {12, "RD/LD"};
const Enum::YLeaf NgoamXcState::DB__FWD_SLASH__RD__FWD_SLASH__LD {13, "DB/RD/LD"};
const Enum::YLeaf NgoamXcState::HB__FWD_SLASH__RD__FWD_SLASH__LD {14, "HB/RD/LD"};
const Enum::YLeaf NgoamXcState::DB__FWD_SLASH__HB__FWD_SLASH__RD__FWD_SLASH__LD {15, "DB/HB/RD/LD"};

const Enum::YLeaf RtdmcBfdInstSt::enabled {1, "enabled"};
const Enum::YLeaf RtdmcBfdInstSt::disabled {2, "disabled"};
const Enum::YLeaf RtdmcBfdInstSt::none {0, "none"};

const Enum::YLeaf StpRootMode::enabled {1, "enabled"};
const Enum::YLeaf StpRootMode::disabled {0, "disabled"};

const Enum::YLeaf NwAdminStIfStatDirectBcast::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStIfStatDirectBcast::disabled {2, "disabled"};

const Enum::YLeaf CompInstType_::unknown {0, "unknown"};
const Enum::YLeaf CompInstType_::phys {1, "phys"};
const Enum::YLeaf CompInstType_::virt {2, "virt"};
const Enum::YLeaf CompInstType_::hv {3, "hv"};

const Enum::YLeaf BgpStReason::none {0, "none"};
const Enum::YLeaf BgpStReason::no_mem {1, "no-mem"};

const Enum::YLeaf OpflexHbStatus::unknown {0, "unknown"};
const Enum::YLeaf OpflexHbStatus::invalid_dvs {1, "invalid-dvs"};
const Enum::YLeaf OpflexHbStatus::valid_dvs {2, "valid-dvs"};

const Enum::YLeaf AclHttpOptionType::get {1, "get"};
const Enum::YLeaf AclHttpOptionType::put {2, "put"};
const Enum::YLeaf AclHttpOptionType::head {3, "head"};
const Enum::YLeaf AclHttpOptionType::post {4, "post"};
const Enum::YLeaf AclHttpOptionType::delete_ {5, "delete"};
const Enum::YLeaf AclHttpOptionType::trace {6, "trace"};
const Enum::YLeaf AclHttpOptionType::connect {7, "connect"};
const Enum::YLeaf AclHttpOptionType::invalid {0, "invalid"};

const Enum::YLeaf BgpBmpSt::enabled {0, "enabled"};
const Enum::YLeaf BgpBmpSt::disabled {1, "disabled"};

const Enum::YLeaf RtleakRtCtrlDir::in {0, "in"};
const Enum::YLeaf RtleakRtCtrlDir::out {1, "out"};

const Enum::YLeaf IpmcsnoopMrouteType::static_ {0, "static"};
const Enum::YLeaf IpmcsnoopMrouteType::dynamic {1, "dynamic"};
const Enum::YLeaf IpmcsnoopMrouteType::internal {2, "internal"};
const Enum::YLeaf IpmcsnoopMrouteType::fabpath {3, "fabpath"};
const Enum::YLeaf IpmcsnoopMrouteType::vpc {4, "vpc"};
const Enum::YLeaf IpmcsnoopMrouteType::coLearned {5, "coLearned"};
const Enum::YLeaf IpmcsnoopMrouteType::peerLearned {6, "peerLearned"};
const Enum::YLeaf IpmcsnoopMrouteType::userConf {7, "userConf"};

const Enum::YLeaf L1EEELatency::variable {1, "variable"};
const Enum::YLeaf L1EEELatency::constant {2, "constant"};

const Enum::YLeaf VpcPeerSt::noCfg {0, "noCfg"};
const Enum::YLeaf VpcPeerSt::down {1, "down"};
const Enum::YLeaf VpcPeerSt::up {2, "up"};

const Enum::YLeaf NwAdminStIfStatLocalProxyArp::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStIfStatLocalProxyArp::disabled {2, "disabled"};

const Enum::YLeaf BootImageVerify::enable {1, "enable"};
const Enum::YLeaf BootImageVerify::disable {0, "disable"};

const Enum::YLeaf IpmcsnoopMacType::Y__STAR__ {0, "*"};
const Enum::YLeaf IpmcsnoopMacType::G {1, "G"};
const Enum::YLeaf IpmcsnoopMacType::R {2, "R"};
const Enum::YLeaf IpmcsnoopMacType::O {3, "O"};
const Enum::YLeaf IpmcsnoopMacType::IGMP {4, "IGMP"};

const Enum::YLeaf SysmgrFwT::bios {1, "bios"};
const Enum::YLeaf SysmgrFwT::kickstart {2, "kickstart"};
const Enum::YLeaf SysmgrFwT::system {3, "system"};

const Enum::YLeaf IpqosPoliceAction::unspecified {0, "unspecified"};
const Enum::YLeaf IpqosPoliceAction::transmit {1, "transmit"};
const Enum::YLeaf IpqosPoliceAction::drop {2, "drop"};
const Enum::YLeaf IpqosPoliceAction::set_cos_transmit {3, "set-cos-transmit"};
const Enum::YLeaf IpqosPoliceAction::set_dscp_transmit {4, "set-dscp-transmit"};
const Enum::YLeaf IpqosPoliceAction::set_prec_transmit {5, "set-prec-transmit"};
const Enum::YLeaf IpqosPoliceAction::set_qos_transmit {6, "set-qos-transmit"};

const Enum::YLeaf PkiCsyncElementType::exclude {0, "exclude"};
const Enum::YLeaf PkiCsyncElementType::include {1, "include"};

const Enum::YLeaf RtdmcPolicyDirType::none {0, "none"};
const Enum::YLeaf RtdmcPolicyDirType::in {1, "in"};
const Enum::YLeaf RtdmcPolicyDirType::out {2, "out"};

const Enum::YLeaf L2DomAdminSt::suspend {1, "suspend"};
const Enum::YLeaf L2DomAdminSt::active {2, "active"};

const Enum::YLeaf AggregateVpcOperStatus::down {0, "down"};
const Enum::YLeaf AggregateVpcOperStatus::up {1, "up"};

const Enum::YLeaf EqptPwrState::unknown {0, "unknown"};
const Enum::YLeaf EqptPwrState::off {1, "off"};
const Enum::YLeaf EqptPwrState::on {2, "on"};
const Enum::YLeaf EqptPwrState::deny {3, "deny"};
const Enum::YLeaf EqptPwrState::multi_boot_fail {4, "multi-boot-fail"};

const Enum::YLeaf NvoHostLearnModeT::DP {1, "DP"};
const Enum::YLeaf NvoHostLearnModeT::CP {2, "CP"};
const Enum::YLeaf NvoHostLearnModeT::Ctrlr {3, "Ctrlr"};

const Enum::YLeaf AggregateOperState::unknown {0, "unknown"};
const Enum::YLeaf AggregateOperState::up {1, "up"};
const Enum::YLeaf AggregateOperState::down {2, "down"};

const Enum::YLeaf OpflexEppDownloadHint::unknown {0, "unknown"};
const Enum::YLeaf OpflexEppDownloadHint::always {1, "always"};
const Enum::YLeaf OpflexEppDownloadHint::optimal {2, "optimal"};

const Enum::YLeaf SnmpLogEnableType::no {0, "no"};
const Enum::YLeaf SnmpLogEnableType::yes {1, "yes"};

const Enum::YLeaf IsisPassiveIntfT::l1 {1, "l1"};
const Enum::YLeaf IsisPassiveIntfT::l2 {2, "l2"};
const Enum::YLeaf IsisPassiveIntfT::l12 {3, "l12"};
const Enum::YLeaf IsisPassiveIntfT::inherit {4, "inherit"};

const Enum::YLeaf SysmgrOperDataMode::init {1, "init"};
const Enum::YLeaf SysmgrOperDataMode::publish {2, "publish"};
const Enum::YLeaf SysmgrOperDataMode::done {4, "done"};

const Enum::YLeaf NdVaddrClientState::ICMPV6_CLIENT_STATE_INACTIVE {0, "ICMPV6_CLIENT_STATE_INACTIVE"};
const Enum::YLeaf NdVaddrClientState::ICMPV6_CLIENT_STATE_ACTIVE {1, "ICMPV6_CLIENT_STATE_ACTIVE"};
const Enum::YLeaf NdVaddrClientState::ICMPV6_CLIENT_STATE_ANYCAST_INACTIVE {2, "ICMPV6_CLIENT_STATE_ANYCAST_INACTIVE"};

const Enum::YLeaf PlatformPoweroffSt::no {0, "no"};
const Enum::YLeaf PlatformPoweroffSt::yes {1, "yes"};

const Enum::YLeaf OspfSegRtControl::unspecified {0, "unspecified"};
const Enum::YLeaf OspfSegRtControl::mpls {1, "mpls"};
const Enum::YLeaf OspfSegRtControl::disable {2, "disable"};

const Enum::YLeaf ProcCpuHistoryDurationName::last60seconds {1, "last60seconds"};

const Enum::YLeaf OspfDbT::ls {1, "ls"};
const Enum::YLeaf OspfDbT::rt {2, "rt"};
const Enum::YLeaf OspfDbT::nh {3, "nh"};

const Enum::YLeaf BdDefaultSVIAutoState::disable {0, "disable"};
const Enum::YLeaf BdDefaultSVIAutoState::enable {1, "enable"};

const Enum::YLeaf RtmapOriginT::egp {1, "egp"};
const Enum::YLeaf RtmapOriginT::igp {2, "igp"};
const Enum::YLeaf RtmapOriginT::incomplete {3, "incomplete"};

const Enum::YLeaf DatetimeAdminState::enabled {1, "enabled"};
const Enum::YLeaf DatetimeAdminState::disabled {2, "disabled"};

const Enum::YLeaf EqptArchCPUArch::x86_32 {1, "x86_32"};
const Enum::YLeaf EqptArchCPUArch::x86_64 {2, "x86_64"};
const Enum::YLeaf EqptArchCPUArch::any {0, "any"};

const Enum::YLeaf MsdpAuthT::none {0, "none"};
const Enum::YLeaf MsdpAuthT::md5 {1, "md5"};

const Enum::YLeaf RtmapAction::deny {0, "deny"};
const Enum::YLeaf RtmapAction::permit {1, "permit"};

const Enum::YLeaf RtmapPrecName::routine {0, "routine"};
const Enum::YLeaf RtmapPrecName::priority {1, "priority"};
const Enum::YLeaf RtmapPrecName::immediate {2, "immediate"};
const Enum::YLeaf RtmapPrecName::flash {3, "flash"};
const Enum::YLeaf RtmapPrecName::flash_override {4, "flash-override"};
const Enum::YLeaf RtmapPrecName::critical {5, "critical"};
const Enum::YLeaf RtmapPrecName::internet {6, "internet"};
const Enum::YLeaf RtmapPrecName::network {7, "network"};

const Enum::YLeaf AaaKeyEnc::Y_0 {0, "0"};
const Enum::YLeaf AaaKeyEnc::Y_6 {6, "6"};
const Enum::YLeaf AaaKeyEnc::Y_7 {7, "7"};

const Enum::YLeaf NvoHostReachT::Flood_and_learn {0, "Flood-and-learn"};
const Enum::YLeaf NvoHostReachT::bgp {1, "bgp"};
const Enum::YLeaf NvoHostReachT::controller {2, "controller"};
const Enum::YLeaf NvoHostReachT::openflow {3, "openflow"};
const Enum::YLeaf NvoHostReachT::openflowIR {4, "openflowIR"};

const Enum::YLeaf SviOperStQual::unknown {0, "unknown"};
const Enum::YLeaf SviOperStQual::admin_shut {1, "admin-shut"};
const Enum::YLeaf SviOperStQual::no_vlan {2, "no-vlan"};
const Enum::YLeaf SviOperStQual::bad_vlan_t {3, "bad-vlan_t"};
const Enum::YLeaf SviOperStQual::vlan_down {4, "vlan-down"};
const Enum::YLeaf SviOperStQual::hwprog_flfm {5, "hwprog-flfm"};
const Enum::YLeaf SviOperStQual::hwprog_fles {6, "hwprog-fles"};
const Enum::YLeaf SviOperStQual::oos {7, "oos"};
const Enum::YLeaf SviOperStQual::reinit {8, "reinit"};
const Enum::YLeaf SviOperStQual::mtuprog_fail {9, "mtuprog-fail"};
const Enum::YLeaf SviOperStQual::vrf_unusable {10, "vrf-unusable"};
const Enum::YLeaf SviOperStQual::l2st_change {11, "l2st-change"};
const Enum::YLeaf SviOperStQual::suspended {12, "suspended"};
const Enum::YLeaf SviOperStQual::macalloc_fail {13, "macalloc-fail"};
const Enum::YLeaf SviOperStQual::nonrouted_vdc {14, "nonrouted-vdc"};
const Enum::YLeaf SviOperStQual::int_vlan_create_fail {15, "int-vlan-create-fail"};
const Enum::YLeaf SviOperStQual::inbMgmt_cfg_fail {16, "inbMgmt-cfg-fail"};

const Enum::YLeaf SyslogSeverity::emergencies {0, "emergencies"};
const Enum::YLeaf SyslogSeverity::alerts {1, "alerts"};
const Enum::YLeaf SyslogSeverity::critical {2, "critical"};
const Enum::YLeaf SyslogSeverity::errors {3, "errors"};
const Enum::YLeaf SyslogSeverity::warnings {4, "warnings"};
const Enum::YLeaf SyslogSeverity::notifications {5, "notifications"};
const Enum::YLeaf SyslogSeverity::information {6, "information"};
const Enum::YLeaf SyslogSeverity::debugging {7, "debugging"};

const Enum::YLeaf L1BufferBoost::disable {0, "disable"};
const Enum::YLeaf L1BufferBoost::enable {1, "enable"};

const Enum::YLeaf BfdDiagCode::none {0, "none"};
const Enum::YLeaf BfdDiagCode::detect_timeout {1, "detect-timeout"};
const Enum::YLeaf BfdDiagCode::echo_fail {2, "echo-fail"};
const Enum::YLeaf BfdDiagCode::nbr_signal_down {3, "nbr-signal-down"};
const Enum::YLeaf BfdDiagCode::fwd_plane_reset {4, "fwd-plane-reset"};
const Enum::YLeaf BfdDiagCode::path_down {5, "path-down"};
const Enum::YLeaf BfdDiagCode::concat_path_down {6, "concat-path-down"};
const Enum::YLeaf BfdDiagCode::admin_down {7, "admin-down"};
const Enum::YLeaf BfdDiagCode::rev_concat_path_down {8, "rev-concat-path-down"};

const Enum::YLeaf TunnelOperSt::up {1, "up"};
const Enum::YLeaf TunnelOperSt::down {2, "down"};

const Enum::YLeaf PlatformHwProfile::Default {0, "Default"};
const Enum::YLeaf PlatformHwProfile::QS_PORT_MODE_64X10G {1, "QS_PORT_MODE_64X10G"};
const Enum::YLeaf PlatformHwProfile::QS_PORT_MODE_48X10G_4X40G {2, "QS_PORT_MODE_48X10G_4X40G"};
const Enum::YLeaf PlatformHwProfile::QS_PORT_MODE_52X10G_3X40g {3, "QS_PORT_MODE_52X10G_3X40g"};
const Enum::YLeaf PlatformHwProfile::QS_PORT_MODE_56X10G_2X40G {4, "QS_PORT_MODE_56X10G_2X40G"};
const Enum::YLeaf PlatformHwProfile::QS_PORT_MODE_60X10G_1X40G {5, "QS_PORT_MODE_60X10G_1X40G"};
const Enum::YLeaf PlatformHwProfile::QS_PORT_MODE {6, "QS_PORT_MODE"};
const Enum::YLeaf PlatformHwProfile::QG_PORT_MODE_32X10G_8X40G {9, "QG_PORT_MODE_32X10G_8X40G"};
const Enum::YLeaf PlatformHwProfile::QG_PORT_MODE_16X40G {10, "QG_PORT_MODE_16X40G"};
const Enum::YLeaf PlatformHwProfile::QG_PORT_MODE_16X10G_12X40G {11, "QG_PORT_MODE_16X10G_12X40G"};
const Enum::YLeaf PlatformHwProfile::QG_PORT_MODE_8X10G_14X40G {12, "QG_PORT_MODE_8X10G_14X40G"};
const Enum::YLeaf PlatformHwProfile::NEP_PORT_MODE_32X40G {13, "NEP_PORT_MODE_32X40G"};
const Enum::YLeaf PlatformHwProfile::NEP_PORT_MODE_24X40G {14, "NEP_PORT_MODE_24X40G"};
const Enum::YLeaf PlatformHwProfile::NEP_PORT_MODE_26X40G {15, "NEP_PORT_MODE_26X40G"};
const Enum::YLeaf PlatformHwProfile::NEP_PORT_MODE_32X40G_FIXED {16, "NEP_PORT_MODE_32X40G_FIXED"};
const Enum::YLeaf PlatformHwProfile::QI2_PORT_MODE_72X10G {17, "QI2_PORT_MODE_72X10G"};
const Enum::YLeaf PlatformHwProfile::QI2_PORT_MODE_48X10G_6x40G {18, "QI2_PORT_MODE_48X10G_6x40G"};
const Enum::YLeaf PlatformHwProfile::QI2_PORT_MODE_BKOUT {19, "QI2_PORT_MODE_BKOUT"};
const Enum::YLeaf PlatformHwProfile::DV_PORT_MODE_48X25G_4X100G {20, "DV_PORT_MODE_48X25G_4X100G"};
const Enum::YLeaf PlatformHwProfile::DV_PORT_MODE_48X25G_2X100G_4X40G {21, "DV_PORT_MODE_48X25G_2X100G_4X40G"};
const Enum::YLeaf PlatformHwProfile::PB_PORT_MODE_48X10G_6X100G {22, "PB_PORT_MODE_48X10G_6X100G"};
const Enum::YLeaf PlatformHwProfile::PB_PORT_MODE_48X10G_4X100G_2X40G {23, "PB_PORT_MODE_48X10G_4X100G_2X40G"};
const Enum::YLeaf PlatformHwProfile::FOST_PORT_MODE_28X40G_4X100G {26, "FOST_PORT_MODE_28X40G_4X100G"};
const Enum::YLeaf PlatformHwProfile::FOST_PORT_MODE_18X100G {27, "FOST_PORT_MODE_18X100G"};
const Enum::YLeaf PlatformHwProfile::FOST_PORT_MODE_24X40G_6X100G {28, "FOST_PORT_MODE_24X40G_6X100G"};
const Enum::YLeaf PlatformHwProfile::TET_PORT_MODE_64X100G {29, "TET_PORT_MODE_64X100G"};
const Enum::YLeaf PlatformHwProfile::TET_PORT_MODE_96X25G_32X100G {30, "TET_PORT_MODE_96X25G_32X100G"};
const Enum::YLeaf PlatformHwProfile::TET_PORT_MODE_128X25G {31, "TET_PORT_MODE_128X25G"};

const Enum::YLeaf PcPCHashDist::none {0, "none"};
const Enum::YLeaf PcPCHashDist::adaptive {1, "adaptive"};
const Enum::YLeaf PcPCHashDist::fixed {2, "fixed"};

const Enum::YLeaf NetflowFltType::ipv4 {1, "ipv4"};
const Enum::YLeaf NetflowFltType::ipv6 {2, "ipv6"};
const Enum::YLeaf NetflowFltType::ce {3, "ce"};

const Enum::YLeaf L1SwitchingSt::disabled {0, "disabled"};
const Enum::YLeaf L1SwitchingSt::enabled {1, "enabled"};

const Enum::YLeaf NwAdminStIfStatIpUnreach::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStIfStatIpUnreach::disabled {2, "disabled"};

const Enum::YLeaf OspfNssaTransRole::always {1, "always"};
const Enum::YLeaf OspfNssaTransRole::candidate {2, "candidate"};
const Enum::YLeaf OspfNssaTransRole::never {3, "never"};

const Enum::YLeaf IpqosStatsType::none {0, "none"};
const Enum::YLeaf IpqosStatsType::matchCMap {1, "matchCMap"};
const Enum::YLeaf IpqosStatsType::MTU {2, "MTU"};
const Enum::YLeaf IpqosStatsType::setAction {3, "setAction"};
const Enum::YLeaf IpqosStatsType::pause {4, "pause"};
const Enum::YLeaf IpqosStatsType::bw {5, "bw"};
const Enum::YLeaf IpqosStatsType::bwRem {6, "bwRem"};
const Enum::YLeaf IpqosStatsType::shape {7, "shape"};
const Enum::YLeaf IpqosStatsType::prio {8, "prio"};
const Enum::YLeaf IpqosStatsType::randomDetect {9, "randomDetect"};
const Enum::YLeaf IpqosStatsType::queuing {10, "queuing"};
const Enum::YLeaf IpqosStatsType::police {11, "police"};
const Enum::YLeaf IpqosStatsType::qlimit {12, "qlimit"};
const Enum::YLeaf IpqosStatsType::microburst {13, "microburst"};

const Enum::YLeaf M6ribDbT::client {0, "client"};
const Enum::YLeaf M6ribDbT::memest {1, "memest"};
const Enum::YLeaf M6ribDbT::vrf {2, "vrf"};

const Enum::YLeaf CdpDuplex::unknown {0, "unknown"};
const Enum::YLeaf CdpDuplex::half {1, "half"};
const Enum::YLeaf CdpDuplex::full {2, "full"};

const Enum::YLeaf RelnState::unformed {0, "unformed"};
const Enum::YLeaf RelnState::formed {1, "formed"};
const Enum::YLeaf RelnState::missing_target {2, "missing-target"};
const Enum::YLeaf RelnState::invalid_target {4, "invalid-target"};

const Enum::YLeaf AaaProviderGroupProtocol::tacacs {0, "tacacs"};
const Enum::YLeaf AaaProviderGroupProtocol::radius {1, "radius"};
const Enum::YLeaf AaaProviderGroupProtocol::ldap {2, "ldap"};

const Enum::YLeaf L2AssocOperSt::oper {0, "oper"};
const Enum::YLeaf L2AssocOperSt::non_oper {1, "non-oper"};

const Enum::YLeaf ProcProcessType::unknown {0, "unknown"};
const Enum::YLeaf ProcProcessType::non_sysmgr {1, "non-sysmgr"};
const Enum::YLeaf ProcProcessType::vdc_local {2, "vdc-local"};
const Enum::YLeaf ProcProcessType::vdc_global {3, "vdc-global"};
const Enum::YLeaf ProcProcessType::vdc_unaware {4, "vdc-unaware"};
const Enum::YLeaf ProcProcessType::not_running {5, "not-running"};
const Enum::YLeaf ProcProcessType::terminated_etc {6, "terminated-etc"};

const Enum::YLeaf HsrpGroupAf::ipv4 {1, "ipv4"};
const Enum::YLeaf HsrpGroupAf::ipv6 {2, "ipv6"};

const Enum::YLeaf NvoMultisiteStateT::enabled {1, "enabled"};

const Enum::YLeaf NwAdminStIfStatMRouting::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStIfStatMRouting::disabled {2, "disabled"};

const Enum::YLeaf PkiModulus::mod512 {512, "mod512"};
const Enum::YLeaf PkiModulus::mod1024 {1024, "mod1024"};
const Enum::YLeaf PkiModulus::mod1536 {1536, "mod1536"};
const Enum::YLeaf PkiModulus::mod2048 {2048, "mod2048"};

const Enum::YLeaf NbmNbmFaultType::NONE {0, "NONE"};
const Enum::YLeaf NbmNbmFaultType::POLICYDENIED {1, "POLICYDENIED"};
const Enum::YLeaf NbmNbmFaultType::POLICYDENIEDSENDER {2, "POLICYDENIEDSENDER"};
const Enum::YLeaf NbmNbmFaultType::POLICYDENIEDRECEIVER {3, "POLICYDENIEDRECEIVER"};
const Enum::YLeaf NbmNbmFaultType::RESOURCEUNAVAIL {4, "RESOURCEUNAVAIL"};
const Enum::YLeaf NbmNbmFaultType::POLICERUNAVAIL {5, "POLICERUNAVAIL"};
const Enum::YLeaf NbmNbmFaultType::BWUNAVAIL {6, "BWUNAVAIL"};
const Enum::YLeaf NbmNbmFaultType::EXTBWUNAVAIL {7, "EXTBWUNAVAIL"};
const Enum::YLeaf NbmNbmFaultType::FLOWPOLUNAVAIL {8, "FLOWPOLUNAVAIL"};
const Enum::YLeaf NbmNbmFaultType::NOUCASTROUTE {9, "NOUCASTROUTE"};
const Enum::YLeaf NbmNbmFaultType::FLOWLIMITREACHED {10, "FLOWLIMITREACHED"};
const Enum::YLeaf NbmNbmFaultType::EXTFLOWLIMITREACHED {11, "EXTFLOWLIMITREACHED"};
const Enum::YLeaf NbmNbmFaultType::EXTPOLICYDENIED {12, "EXTPOLICYDENIED"};
const Enum::YLeaf NbmNbmFaultType::EXTPOLICERUNAVAIL {13, "EXTPOLICERUNAVAIL"};
const Enum::YLeaf NbmNbmFaultType::BADIFSTATE {14, "BADIFSTATE"};

const Enum::YLeaf StpBpdufilter::default_ {0, "default"};
const Enum::YLeaf StpBpdufilter::enable {1, "enable"};
const Enum::YLeaf StpBpdufilter::disable {2, "disable"};

const Enum::YLeaf Vrrpv3VrAf::ipv4 {1, "ipv4"};
const Enum::YLeaf Vrrpv3VrAf::ipv6 {2, "ipv6"};

const Enum::YLeaf RtdmcDfStates::unknown {0, "unknown"};
const Enum::YLeaf RtdmcDfStates::offer {1, "offer"};
const Enum::YLeaf RtdmcDfStates::lose {2, "lose"};
const Enum::YLeaf RtdmcDfStates::winner {3, "winner"};
const Enum::YLeaf RtdmcDfStates::backoff {4, "backoff"};

const Enum::YLeaf L1OperStQual_::unknown {0, "unknown"};
const Enum::YLeaf L1OperStQual_::up {1, "up"};
const Enum::YLeaf L1OperStQual_::admin_down {2, "admin-down"};
const Enum::YLeaf L1OperStQual_::link_down {3, "link-down"};
const Enum::YLeaf L1OperStQual_::fail {4, "fail"};
const Enum::YLeaf L1OperStQual_::no_license {5, "no-license"};
const Enum::YLeaf L1OperStQual_::link_up {6, "link-up"};
const Enum::YLeaf L1OperStQual_::hw_fail {7, "hw-fail"};
const Enum::YLeaf L1OperStQual_::sw_fail {8, "sw-fail"};
const Enum::YLeaf L1OperStQual_::err_disabled {9, "err-disabled"};
const Enum::YLeaf L1OperStQual_::sfp_missing {10, "sfp-missing"};
const Enum::YLeaf L1OperStQual_::loopback_diag_failure {11, "loopback-diag-failure"};
const Enum::YLeaf L1OperStQual_::udld_unidir_detected {12, "udld-unidir-detected"};
const Enum::YLeaf L1OperStQual_::udld_tx_rx_loop {13, "udld-tx-rx-loop"};
const Enum::YLeaf L1OperStQual_::udld_neighbor_mismatch {14, "udld-neighbor-mismatch"};
const Enum::YLeaf L1OperStQual_::udld_empty_echo {15, "udld-empty-echo"};
const Enum::YLeaf L1OperStQual_::udld_aggressive_mode_link_failed {16, "udld-aggressive-mode-link-failed"};
const Enum::YLeaf L1OperStQual_::link_flap_err {17, "link-flap-err"};
const Enum::YLeaf L1OperStQual_::err_disabled_ip_conflict {18, "err-disabled-ip-conflict"};
const Enum::YLeaf L1OperStQual_::ipqos_dcbxp_compat_failure {19, "ipqos-dcbxp-compat-failure"};
const Enum::YLeaf L1OperStQual_::link_failure {20, "link-failure"};
const Enum::YLeaf L1OperStQual_::offline {21, "offline"};
const Enum::YLeaf L1OperStQual_::initializing {22, "initializing"};
const Enum::YLeaf L1OperStQual_::inactive {23, "inactive"};
const Enum::YLeaf L1OperStQual_::channel_admin_down {24, "channel-admin-down"};
const Enum::YLeaf L1OperStQual_::channel_err_disabled {25, "channel-err-disabled"};
const Enum::YLeaf L1OperStQual_::suspended {26, "suspended"};
const Enum::YLeaf L1OperStQual_::proto_port_suspend {27, "proto-port-suspend"};
const Enum::YLeaf L1OperStQual_::channel_membership_update_in_progress {28, "channel-membership-update-in-progress"};
const Enum::YLeaf L1OperStQual_::parent_down {29, "parent-down"};
const Enum::YLeaf L1OperStQual_::parent_admin_down {30, "parent-admin-down"};
const Enum::YLeaf L1OperStQual_::interface_removed {31, "interface-removed"};
const Enum::YLeaf L1OperStQual_::fcot_no_present {32, "fcot-no-present"};
const Enum::YLeaf L1OperStQual_::fcot_vendor_not_supported {33, "fcot-vendor-not-supported"};
const Enum::YLeaf L1OperStQual_::incompatible_admin_mode {34, "incompatible-admin-mode"};
const Enum::YLeaf L1OperStQual_::incompatible_admin_speed {35, "incompatible-admin-speed"};
const Enum::YLeaf L1OperStQual_::suspended_by_mode {36, "suspended-by-mode"};
const Enum::YLeaf L1OperStQual_::suspended_by_speed {37, "suspended-by-speed"};
const Enum::YLeaf L1OperStQual_::domain_max_retransmission_failure {38, "domain-max-retransmission-failure"};
const Enum::YLeaf L1OperStQual_::loopback_isolation {39, "loopback-isolation"};
const Enum::YLeaf L1OperStQual_::upgrade_in_progress {40, "upgrade-in-progress"};
const Enum::YLeaf L1OperStQual_::port_channel_members_down {41, "port-channel-members-down"};
const Enum::YLeaf L1OperStQual_::ethernet_link_down {42, "ethernet-link-down"};
const Enum::YLeaf L1OperStQual_::ethernet_interface_down {43, "ethernet-interface-down"};
const Enum::YLeaf L1OperStQual_::admin_config_change {44, "admin-config-change"};
const Enum::YLeaf L1OperStQual_::module_removed {45, "module-removed"};
const Enum::YLeaf L1OperStQual_::vrf_unusable {46, "vrf-unusable"};
const Enum::YLeaf L1OperStQual_::none {47, "none"};
const Enum::YLeaf L1OperStQual_::xcvr_initializing {48, "xcvr-initializing"};
const Enum::YLeaf L1OperStQual_::cap_absent {49, "cap-absent"};
const Enum::YLeaf L1OperStQual_::sfp_eth_compliant_err {50, "sfp-eth-compliant-err"};
const Enum::YLeaf L1OperStQual_::sdp_timeout {51, "sdp-timeout"};
const Enum::YLeaf L1OperStQual_::sat_incompat_topo {52, "sat-incompat-topo"};
const Enum::YLeaf L1OperStQual_::sat_not_configured {53, "sat-not-configured"};
const Enum::YLeaf L1OperStQual_::auth_fail {54, "auth-fail"};
const Enum::YLeaf L1OperStQual_::auth_pending {55, "auth-pending"};
const Enum::YLeaf L1OperStQual_::suspended_due_to_minlinks {56, "suspended-due-to-minlinks"};
const Enum::YLeaf L1OperStQual_::suspended_due_to_no_lacp_pdus {57, "suspended-due-to-no-lacp-pdus"};
const Enum::YLeaf L1OperStQual_::sat_fabric_if_down {58, "sat-fabric-if-down"};
const Enum::YLeaf L1OperStQual_::invalid_sat_fabric_if {59, "invalid-sat-fabric-if"};
const Enum::YLeaf L1OperStQual_::fex_sfp_invalid {60, "fex-sfp-invalid"};
const Enum::YLeaf L1OperStQual_::suspend_by_mtu {61, "suspend-by-mtu"};
const Enum::YLeaf L1OperStQual_::suspend_by_vpc {62, "suspend-by-vpc"};
const Enum::YLeaf L1OperStQual_::router_mac_failure {63, "router-mac-failure"};
const Enum::YLeaf L1OperStQual_::xcvr_auth_failed {64, "xcvr-auth-failed"};
const Enum::YLeaf L1OperStQual_::non_sticky_externally_disabled {65, "non-sticky-externally-disabled"};
const Enum::YLeaf L1OperStQual_::sfp_speed_mismatch {66, "sfp-speed-mismatch"};
const Enum::YLeaf L1OperStQual_::fcot_chksum_err {67, "fcot-chksum-err"};
const Enum::YLeaf L1OperStQual_::xcvr_invalid {68, "xcvr-invalid"};
const Enum::YLeaf L1OperStQual_::vpc_peer_link_down {69, "vpc-peer-link-down"};
const Enum::YLeaf L1OperStQual_::vpc_cfg_in_progress {70, "vpc-cfg-in-progress"};
const Enum::YLeaf L1OperStQual_::vpc_no_response_from_peer {71, "vpc-no-response-from-peer"};
const Enum::YLeaf L1OperStQual_::bpdu_guard_err_disable {72, "bpdu-guard-err-disable"};
const Enum::YLeaf L1OperStQual_::hot_standby_in_bundle {73, "hot-standby-in-bundle"};
const Enum::YLeaf L1OperStQual_::handshake_fail_errdisable {74, "handshake-fail-errdisable"};
const Enum::YLeaf L1OperStQual_::non_participating {75, "non-participating"};
const Enum::YLeaf L1OperStQual_::rcf_in_progress {76, "rcf-in-progress"};
const Enum::YLeaf L1OperStQual_::elp_failure_isolation {77, "elp-failure-isolation"};
const Enum::YLeaf L1OperStQual_::esc_failure_isolation {78, "esc-failure-isolation"};
const Enum::YLeaf L1OperStQual_::domain_overlap_isolation {79, "domain-overlap-isolation"};
const Enum::YLeaf L1OperStQual_::domain_addr_assign_failure_isolation {80, "domain-addr-assign-failure-isolation"};
const Enum::YLeaf L1OperStQual_::domain_other_side_eport_isolated {81, "domain-other-side-eport-isolated"};
const Enum::YLeaf L1OperStQual_::domain_invalid_rcf_received {82, "domain-invalid-rcf-received"};
const Enum::YLeaf L1OperStQual_::domain_manager_disabled {83, "domain-manager-disabled"};
const Enum::YLeaf L1OperStQual_::zone_merge_failure_isolation {84, "zone-merge-failure-isolation"};
const Enum::YLeaf L1OperStQual_::vsan_mismatch_isolation {85, "vsan-mismatch-isolation"};
const Enum::YLeaf L1OperStQual_::src_port_not_bound {86, "src-port-not-bound"};
const Enum::YLeaf L1OperStQual_::suspended_by_wwn {87, "suspended-by-wwn"};
const Enum::YLeaf L1OperStQual_::epp_failure {88, "epp-failure"};
const Enum::YLeaf L1OperStQual_::port_vsan_mismatch_isolation {89, "port-vsan-mismatch-isolation"};
const Enum::YLeaf L1OperStQual_::incompatible_admin_rxbbcredit {90, "incompatible-admin-rxbbcredit"};
const Enum::YLeaf L1OperStQual_::incompatible_admin_rxbufsize {91, "incompatible-admin-rxbufsize"};
const Enum::YLeaf L1OperStQual_::zone_remote_no_resp_isolation {92, "zone-remote-no-resp-isolation"};
const Enum::YLeaf L1OperStQual_::osm_e_port_up {93, "osm-e-port-up"};
const Enum::YLeaf L1OperStQual_::osm_non_e_port_up {94, "osm-non-e-port-up"};
const Enum::YLeaf L1OperStQual_::peer_fcip_closed_tcp_connection {95, "peer-fcip-closed-tcp-connection"};
const Enum::YLeaf L1OperStQual_::peer_fcip_reset_tcp_connection {96, "peer-fcip-reset-tcp-connection"};
const Enum::YLeaf L1OperStQual_::tcp_max_retransmissions {97, "tcp-max-retransmissions"};
const Enum::YLeaf L1OperStQual_::tcp_keep_alive_timer_expired {98, "tcp-keep-alive-timer-expired"};
const Enum::YLeaf L1OperStQual_::tcp_persist_timer_expired {99, "tcp-persist-timer-expired"};
const Enum::YLeaf L1OperStQual_::tunnel_src_port_removed {100, "tunnel-src-port-removed"};
const Enum::YLeaf L1OperStQual_::tunnel_src_module_not_online {101, "tunnel-src-module-not-online"};
const Enum::YLeaf L1OperStQual_::invalid_config {102, "invalid-config"};
const Enum::YLeaf L1OperStQual_::port_bind_failure {103, "port-bind-failure"};
const Enum::YLeaf L1OperStQual_::fabric_bind_failure {104, "fabric-bind-failure"};
const Enum::YLeaf L1OperStQual_::no_trunk_oper_vsans_isolation {105, "no-trunk-oper-vsans-isolation"};
const Enum::YLeaf L1OperStQual_::ficon_vsan_down {106, "ficon-vsan-down"};
const Enum::YLeaf L1OperStQual_::invalid_attachment {107, "invalid-attachment"};
const Enum::YLeaf L1OperStQual_::port_blocked {108, "port-blocked"};
const Enum::YLeaf L1OperStQual_::incompatible_admin_rxbbcredit_performance_buf {109, "incompatible-admin-rxbbcredit-performance-buf"};
const Enum::YLeaf L1OperStQual_::too_many_invalid_flogis {110, "too-many-invalid-flogis"};
const Enum::YLeaf L1OperStQual_::denied_due_to_port_binding {111, "denied-due-to-port-binding"};
const Enum::YLeaf L1OperStQual_::elp_failure_revision_mismatch {112, "elp-failure-revision-mismatch"};
const Enum::YLeaf L1OperStQual_::elp_failure_classf_param_err {113, "elp-failure-classf-param-err"};
const Enum::YLeaf L1OperStQual_::elp_failure_classn_param_err {114, "elp-failure-classn-param-err"};
const Enum::YLeaf L1OperStQual_::elp_failure_unknown_flow_ctl_code {115, "elp-failure-unknown-flow-ctl-code"};
const Enum::YLeaf L1OperStQual_::elp_failure_invalid_flow_ctl_param {116, "elp-failure-invalid-flow-ctl-param"};
const Enum::YLeaf L1OperStQual_::elp_failure_invalid_port_name {117, "elp-failure-invalid-port-name"};
const Enum::YLeaf L1OperStQual_::elp_failure_invalid_switch_name {118, "elp-failure-invalid-switch-name"};
const Enum::YLeaf L1OperStQual_::elp_failure_ratov_edtov_mismatch {119, "elp-failure-ratov-edtov-mismatch"};
const Enum::YLeaf L1OperStQual_::elp_failure_loopback_detected {120, "elp-failure-loopback-detected"};
const Enum::YLeaf L1OperStQual_::elp_failure_invalid_tx_bbcredit {121, "elp-failure-invalid-tx-bbcredit"};
const Enum::YLeaf L1OperStQual_::elp_failure_invalid_payload_size {122, "elp-failure-invalid-payload-size"};
const Enum::YLeaf L1OperStQual_::bundle_miscfg {123, "bundle-miscfg"};
const Enum::YLeaf L1OperStQual_::bit_err_rt_thres_exceeded {124, "bit-err-rt-thres-exceeded"};
const Enum::YLeaf L1OperStQual_::link_fail_link_reset {125, "link-fail-link-reset"};
const Enum::YLeaf L1OperStQual_::link_fail_port_init_failed {126, "link-fail-port-init-failed"};
const Enum::YLeaf L1OperStQual_::link_fail_port_unusable {127, "link-fail-port-unusable"};
const Enum::YLeaf L1OperStQual_::link_fail_loss_of_signal {128, "link-fail-loss-of-signal"};
const Enum::YLeaf L1OperStQual_::link_fail_loss_of_sync {129, "link-fail-loss-of-sync"};
const Enum::YLeaf L1OperStQual_::link_fail_nos_rcvd {130, "link-fail-nos-rcvd"};
const Enum::YLeaf L1OperStQual_::link_fail_ols_rcvd {131, "link-fail-ols-rcvd"};
const Enum::YLeaf L1OperStQual_::link_fail_debounce_timeout {132, "link-fail-debounce-timeout"};
const Enum::YLeaf L1OperStQual_::link_fail_lr_rcvd_b2b {133, "link-fail-lr-rcvd-b2b"};
const Enum::YLeaf L1OperStQual_::link_fail_credit_loss {134, "link-fail-credit-loss"};
const Enum::YLeaf L1OperStQual_::link_fail_rx_que_overflow {135, "link-fail-rx-que-overflow"};
const Enum::YLeaf L1OperStQual_::link_fail_too_many_intr {136, "link-fail-too-many-intr"};
const Enum::YLeaf L1OperStQual_::link_fail_lip_rcvd_b2b {137, "link-fail-lip-rcvd-b2b"};
const Enum::YLeaf L1OperStQual_::link_fail_credit_loss_b2b {138, "link-fail-credit-loss-b2b"};
const Enum::YLeaf L1OperStQual_::link_fail_opny_tmo_b2b {139, "link-fail-opny-tmo-b2b"};
const Enum::YLeaf L1OperStQual_::link_fail_opny_ret_b2b {140, "link-fail-opny-ret-b2b"};
const Enum::YLeaf L1OperStQual_::link_fail_lip_f8_rcvd {141, "link-fail-lip-f8-rcvd"};
const Enum::YLeaf L1OperStQual_::link_fail_line_card_port_shutdown {142, "link-fail-line-card-port-shutdown"};
const Enum::YLeaf L1OperStQual_::fcsp_authent_failure {143, "fcsp-authent-failure"};
const Enum::YLeaf L1OperStQual_::ohms_external_lb_test {144, "ohms-external-lb-test"};
const Enum::YLeaf L1OperStQual_::invalid_fabric_binding_exchange {145, "invalid-fabric-binding-exchange"};
const Enum::YLeaf L1OperStQual_::tov_mismatch {146, "tov-mismatch"};
const Enum::YLeaf L1OperStQual_::ficon_not_enabled {147, "ficon-not-enabled"};
const Enum::YLeaf L1OperStQual_::ficon_no_portnumber {148, "ficon-no-portnumber"};
const Enum::YLeaf L1OperStQual_::ficon_being_enabled {149, "ficon-being-enabled"};
const Enum::YLeaf L1OperStQual_::eport_prohibited {150, "eport-prohibited"};
const Enum::YLeaf L1OperStQual_::trunk_not_fully_active {151, "trunk-not-fully-active"};
const Enum::YLeaf L1OperStQual_::fabric_binding_swwn_not_found {152, "fabric-binding-swwn-not-found"};
const Enum::YLeaf L1OperStQual_::fabric_binding_domain_invalid {153, "fabric-binding-domain-invalid"};
const Enum::YLeaf L1OperStQual_::fabric_binding_database_mismatch {154, "fabric-binding-database-mismatch"};
const Enum::YLeaf L1OperStQual_::fabric_binding_peer_not_responding {155, "fabric-binding-peer-not-responding"};
const Enum::YLeaf L1OperStQual_::tracked_port_down {156, "tracked-port-down"};
const Enum::YLeaf L1OperStQual_::ec_suspended_for_loop {157, "ec-suspended-for-loop"};
const Enum::YLeaf L1OperStQual_::isolate_bundle_miscfg {158, "isolate-bundle-miscfg"};
const Enum::YLeaf L1OperStQual_::peer_not_support_bundles {159, "peer-not-support-bundles"};
const Enum::YLeaf L1OperStQual_::port_bringup_isolation {160, "port-bringup-isolation"};
const Enum::YLeaf L1OperStQual_::domain_not_allowed_isolation {161, "domain-not-allowed-isolation"};
const Enum::YLeaf L1OperStQual_::virtual_ivr_domain_overlap_isolation {162, "virtual-ivr-domain-overlap-isolation"};
const Enum::YLeaf L1OperStQual_::out_of_service {163, "out-of-service"};
const Enum::YLeaf L1OperStQual_::bundle_stdby {164, "bundle-stdby"};
const Enum::YLeaf L1OperStQual_::port_cap_fc_port_connector_type_err {165, "port-cap-fc-port-connector-type-err"};
const Enum::YLeaf L1OperStQual_::error_disabled_reinit_limit_reached {166, "error-disabled-reinit-limit-reached"};
const Enum::YLeaf L1OperStQual_::ficon_vsan_duplicate_portnum {167, "ficon-vsan-duplicate-portnum"};
const Enum::YLeaf L1OperStQual_::internal_rcf_in_progress {168, "internal-rcf-in-progress"};
const Enum::YLeaf L1OperStQual_::two_switches_with_same_wwn {169, "two-switches-with-same-wwn"};
const Enum::YLeaf L1OperStQual_::invalid_other_princ_efp_req_recd {170, "invalid-other-princ-efp-req-recd"};
const Enum::YLeaf L1OperStQual_::domain_isolation_unknown_reason {171, "domain-isolation-unknown-reason"};
const Enum::YLeaf L1OperStQual_::elp_failure_all_zero_peer_wwn_rcvd {172, "elp-failure-all-zero-peer-wwn-rcvd"};
const Enum::YLeaf L1OperStQual_::prefered_path_isolation {173, "prefered-path-isolation"};
const Enum::YLeaf L1OperStQual_::fc_redirect_isolation {174, "fc-redirect-isolation"};
const Enum::YLeaf L1OperStQual_::port_act_license_not_available {175, "port-act-license-not-available"};
const Enum::YLeaf L1OperStQual_::sdm_isolation {176, "sdm-isolation"};
const Enum::YLeaf L1OperStQual_::fcid_allocation_failed {177, "fcid-allocation-failed"};
const Enum::YLeaf L1OperStQual_::externally_disabled {178, "externally-disabled"};
const Enum::YLeaf L1OperStQual_::fcot_read_error {179, "fcot-read-error"};
const Enum::YLeaf L1OperStQual_::port_guard_down_on_link_failure {180, "port-guard-down-on-link-failure"};
const Enum::YLeaf L1OperStQual_::incomplete_config {181, "incomplete-config"};
const Enum::YLeaf L1OperStQual_::incomplete_tunnel_config {182, "incomplete-tunnel-config"};
const Enum::YLeaf L1OperStQual_::hw_programming_failed {183, "hw-programming-failed"};
const Enum::YLeaf L1OperStQual_::tunnel_dest_not_reachable {184, "tunnel-dest-not-reachable"};
const Enum::YLeaf L1OperStQual_::sfp_invalid {185, "sfp-invalid"};
const Enum::YLeaf L1OperStQual_::tunnel_vrf_mismatch {186, "tunnel-vrf-mismatch"};
const Enum::YLeaf L1OperStQual_::tunnel_vrf_fw_ref {187, "tunnel-vrf-fw-ref"};
const Enum::YLeaf L1OperStQual_::duplicate_tunnel_cfg {188, "duplicate-tunnel-cfg"};
const Enum::YLeaf L1OperStQual_::primary_vlan_down {189, "primary-vlan-down"};
const Enum::YLeaf L1OperStQual_::dot1x_security_errdisable {190, "dot1x-security-errdisable"};
const Enum::YLeaf L1OperStQual_::vf_tagging_capability_err {191, "vf-tagging-capability-err"};
const Enum::YLeaf L1OperStQual_::port_disabled {192, "port-disabled"};
const Enum::YLeaf L1OperStQual_::tunnel_mode_not_configured {193, "tunnel-mode-not-configured"};
const Enum::YLeaf L1OperStQual_::tunnel_source_not_configured {194, "tunnel-source-not-configured"};
const Enum::YLeaf L1OperStQual_::tunnel_destination_not_configured {195, "tunnel-destination-not-configured"};
const Enum::YLeaf L1OperStQual_::tunnel_unable2resolve_source_ipaddress {196, "tunnel-unable2resolve-source-ipaddress"};
const Enum::YLeaf L1OperStQual_::tunnel_unable2resolve_destination_ipaddress {197, "tunnel-unable2resolve-destination-ipaddress"};
const Enum::YLeaf L1OperStQual_::tunnel_vrf_is_down {198, "tunnel-vrf-is-down"};
const Enum::YLeaf L1OperStQual_::sif_admin_down {199, "sif-admin-down"};
const Enum::YLeaf L1OperStQual_::phy_intf_down {200, "phy-intf-down"};
const Enum::YLeaf L1OperStQual_::intf_sif_limit_exceeded {201, "intf-sif-limit-exceeded"};
const Enum::YLeaf L1OperStQual_::insufficient_power {202, "insufficient-power"};
const Enum::YLeaf L1OperStQual_::no_fcoe {203, "no-fcoe"};
const Enum::YLeaf L1OperStQual_::dcx_compat_mismatch {204, "dcx-compat-mismatch"};
const Enum::YLeaf L1OperStQual_::isolate_bundle_limit_exceeded {205, "isolate-bundle-limit-exceeded"};
const Enum::YLeaf L1OperStQual_::sif_not_bound {206, "sif-not-bound"};
const Enum::YLeaf L1OperStQual_::err_disable_lacp_miscfg {207, "err-disable-lacp-miscfg"};
const Enum::YLeaf L1OperStQual_::errdisabled_pkt_err {208, "errdisabled-pkt-err"};
const Enum::YLeaf L1OperStQual_::vlan_vsan_mapping_not_enabled {209, "vlan-vsan-mapping-not-enabled"};
const Enum::YLeaf L1OperStQual_::stp_not_forwarding_in_fcoe_mapped_vlan {210, "stp-not-forwarding-in-fcoe-mapped-vlan"};
const Enum::YLeaf L1OperStQual_::module_offline {211, "module-offline"};
const Enum::YLeaf L1OperStQual_::stp_inconsist_vpc_peerlink_errdisable {212, "stp-inconsist-vpc-peerlink-errdisable"};
const Enum::YLeaf L1OperStQual_::set_port_state_failed_errdisable {213, "set-port-state-failed-errdisable"};
const Enum::YLeaf L1OperStQual_::tunnel_source_down {214, "tunnel-source-down"};
const Enum::YLeaf L1OperStQual_::cdp_info_not_avail {215, "cdp-info-not-avail"};
const Enum::YLeaf L1OperStQual_::fcot_clk_rate_mismatch {216, "fcot-clk-rate-mismatch"};
const Enum::YLeaf L1OperStQual_::port_guard_down_on_trustsec_violation {217, "port-guard-down-on-trustsec-violation"};
const Enum::YLeaf L1OperStQual_::wait_for_flogi {218, "wait-for-flogi"};
const Enum::YLeaf L1OperStQual_::npiv_not_enabled_in_upstream {219, "npiv-not-enabled-in-upstream"};
const Enum::YLeaf L1OperStQual_::vsan_mismatch_with_upstream_switch_port {220, "vsan-mismatch-with-upstream-switch-port"};
const Enum::YLeaf L1OperStQual_::port_guard_bit_error_rate {221, "port-guard-bit-error-rate"};
const Enum::YLeaf L1OperStQual_::port_guard_signal_loss {222, "port-guard-signal-loss"};
const Enum::YLeaf L1OperStQual_::port_guard_sync_loss {223, "port-guard-sync-loss"};
const Enum::YLeaf L1OperStQual_::port_guard_link_reset {224, "port-guard-link-reset"};
const Enum::YLeaf L1OperStQual_::port_guard_credit_loss {225, "port-guard-credit-loss"};
const Enum::YLeaf L1OperStQual_::ipqos_mgr_policy_app_failed {226, "ipqos-mgr-policy-app-failed"};
const Enum::YLeaf L1OperStQual_::pause_rate_limit_errdisable {227, "pause-rate-limit-errdisable"};
const Enum::YLeaf L1OperStQual_::lstgrp_uplink_down {228, "lstgrp-uplink-down"};
const Enum::YLeaf L1OperStQual_::sticky_down_on_link_failure {229, "sticky-down-on-link-failure"};
const Enum::YLeaf L1OperStQual_::dcx_multiple_msap_ids_errdisable {230, "dcx-multiple-msap-ids-errdisable"};
const Enum::YLeaf L1OperStQual_::dcx_100_pdus_rcvd_noack_errdisable {231, "dcx-100-pdus-rcvd-noack-errdisable"};
const Enum::YLeaf L1OperStQual_::enm_sat_incompat_uplink {232, "enm-sat-incompat-uplink"};
const Enum::YLeaf L1OperStQual_::enm_loop_detected {233, "enm-loop-detected"};
const Enum::YLeaf L1OperStQual_::sub_group_id_not_assigned {234, "sub-group-id-not-assigned"};
const Enum::YLeaf L1OperStQual_::vem_unlicensed {235, "vem-unlicensed"};
const Enum::YLeaf L1OperStQual_::profile_not_found {236, "profile-not-found"};
const Enum::YLeaf L1OperStQual_::vlan_does_not_exist {237, "vlan-does-not-exist"};
const Enum::YLeaf L1OperStQual_::vlan_type {238, "vlan-type"};
const Enum::YLeaf L1OperStQual_::vlan_down {239, "vlan-down"};
const Enum::YLeaf L1OperStQual_::vpc_peer_upgrade {240, "vpc-peer-upgrade"};
const Enum::YLeaf L1OperStQual_::non_cisco_hba_vftag {241, "non-cisco-hba-vftag"};
const Enum::YLeaf L1OperStQual_::domain_id_config_mismatch {242, "domain-id-config-mismatch"};
const Enum::YLeaf L1OperStQual_::xcvr_absent {243, "xcvr-absent"};
const Enum::YLeaf L1OperStQual_::vfc_binding_invalid {244, "vfc-binding-invalid"};
const Enum::YLeaf L1OperStQual_::vlan_not_fcoe_enabled {245, "vlan-not-fcoe-enabled"};
const Enum::YLeaf L1OperStQual_::pvlan_native_vlan_err {246, "pvlan-native-vlan-err"};
const Enum::YLeaf L1OperStQual_::eth_l2_vlan_down {247, "eth-l2-vlan-down"};
const Enum::YLeaf L1OperStQual_::eth_intf_invalid_binding {248, "eth-intf-invalid-binding"};
const Enum::YLeaf L1OperStQual_::pmon_failure {249, "pmon-failure"};
const Enum::YLeaf L1OperStQual_::l3_not_ready {250, "l3-not-ready"};
const Enum::YLeaf L1OperStQual_::speed_mismatch {251, "speed-mismatch"};
const Enum::YLeaf L1OperStQual_::flowcontrol_mismatch {252, "flowcontrol-mismatch"};
const Enum::YLeaf L1OperStQual_::vdc_mode {253, "vdc-mode"};
const Enum::YLeaf L1OperStQual_::enm_pin_fail_link_down {254, "enm-pin-fail-link-down"};
const Enum::YLeaf L1OperStQual_::inactive_m1_port_fpath_access_vlan {255, "inactive-m1-port-fpath-access-vlan"};

const Enum::YLeaf SyslogOriginIdType::unknown {0, "unknown"};
const Enum::YLeaf SyslogOriginIdType::hostname {1, "hostname"};
const Enum::YLeaf SyslogOriginIdType::ip {2, "ip"};
const Enum::YLeaf SyslogOriginIdType::string {3, "string"};

const Enum::YLeaf RtmapMatchT::reg_community {1, "reg-community"};
const Enum::YLeaf RtmapMatchT::ext_community {2, "ext-community"};
const Enum::YLeaf RtmapMatchT::rt_dst {3, "rt-dst"};
const Enum::YLeaf RtmapMatchT::rt_nh {4, "rt-nh"};
const Enum::YLeaf RtmapMatchT::rt_src {5, "rt-src"};
const Enum::YLeaf RtmapMatchT::rt_type {6, "rt-type"};
const Enum::YLeaf RtmapMatchT::rt_tag {7, "rt-tag"};
const Enum::YLeaf RtmapMatchT::rt_pervasive {8, "rt-pervasive"};
const Enum::YLeaf RtmapMatchT::as_path {9, "as-path"};
const Enum::YLeaf RtmapMatchT::rt_dst_v6 {10, "rt-dst-v6"};
const Enum::YLeaf RtmapMatchT::rt_asn {11, "rt-asn"};
const Enum::YLeaf RtmapMatchT::rt_if {12, "rt-if"};
const Enum::YLeaf RtmapMatchT::rt_metric {13, "rt-metric"};
const Enum::YLeaf RtmapMatchT::src_proto {14, "src-proto"};
const Enum::YLeaf RtmapMatchT::rt_ospf {15, "rt-ospf"};
const Enum::YLeaf RtmapMatchT::rt_nh_v6 {16, "rt-nh-v6"};
const Enum::YLeaf RtmapMatchT::rt_src_v6 {17, "rt-src-v6"};
const Enum::YLeaf RtmapMatchT::rt_ipv4_mcast {18, "rt-ipv4-mcast"};
const Enum::YLeaf RtmapMatchT::rt_ipv6_mcast {19, "rt-ipv6-mcast"};

const Enum::YLeaf L3capSubj::unknown {0, "unknown"};
const Enum::YLeaf L3capSubj::vrf_namespace {1, "vrf-namespace"};
const Enum::YLeaf L3capSubj::lb_namespace {2, "lb-namespace"};
const Enum::YLeaf L3capSubj::rdnn_namespace {3, "rdnn-namespace"};

const Enum::YLeaf VpcCompatSt::pass {0, "pass"};
const Enum::YLeaf VpcCompatSt::fail {1, "fail"};
const Enum::YLeaf VpcCompatSt::notDone {2, "notDone"};

const Enum::YLeaf MockMode::Repeated {0, "Repeated"};
const Enum::YLeaf MockMode::Once {1, "Once"};

const Enum::YLeaf L1PktT::bcast {1, "bcast"};
const Enum::YLeaf L1PktT::unk_ucast {2, "unk-ucast"};
const Enum::YLeaf L1PktT::mcast {3, "mcast"};
const Enum::YLeaf L1PktT::all {4, "all"};

const Enum::YLeaf SpanDirection::in {1, "in"};
const Enum::YLeaf SpanDirection::out {2, "out"};
const Enum::YLeaf SpanDirection::both {3, "both"};

const Enum::YLeaf L2PvlanTypes::default_ {0, "default"};
const Enum::YLeaf L2PvlanTypes::primary {1, "primary"};
const Enum::YLeaf L2PvlanTypes::community {2, "community"};
const Enum::YLeaf L2PvlanTypes::isolated {3, "isolated"};

const Enum::YLeaf EqptColor::no_color {0, "no-color"};
const Enum::YLeaf EqptColor::green {1, "green"};
const Enum::YLeaf EqptColor::yellow {2, "yellow"};
const Enum::YLeaf EqptColor::amber {3, "amber"};
const Enum::YLeaf EqptColor::red {4, "red"};
const Enum::YLeaf EqptColor::blue {5, "blue"};

const Enum::YLeaf L1Mdix::auto_ {1, "auto"};
const Enum::YLeaf L1Mdix::mdi {2, "mdi"};
const Enum::YLeaf L1Mdix::mdi_x {3, "mdi-x"};

const Enum::YLeaf TrackRouteState::reachability {0, "reachability"};

const Enum::YLeaf QospCongAlgo::wred {0, "wred"};
const Enum::YLeaf QospCongAlgo::tail_drop {1, "tail-drop"};

const Enum::YLeaf HmmBoolean::no {0, "no"};
const Enum::YLeaf HmmBoolean::yes {1, "yes"};

const Enum::YLeaf L1FECMode::auto_ {4, "auto"};
const Enum::YLeaf L1FECMode::rs_fec {2, "rs-fec"};
const Enum::YLeaf L1FECMode::fc_fec {1, "fc-fec"};
const Enum::YLeaf L1FECMode::fec_off {3, "fec-off"};
const Enum::YLeaf L1FECMode::rs_ieee {5, "rs-ieee"};
const Enum::YLeaf L1FECMode::rs_cons16 {6, "rs-cons16"};

const Enum::YLeaf MsdpSource::none {0, "none"};
const Enum::YLeaf MsdpSource::pflist {1, "pflist"};
const Enum::YLeaf MsdpSource::rtmap {2, "rtmap"};

const Enum::YLeaf EqptAcc::read_only {0, "read-only"};
const Enum::YLeaf EqptAcc::read_write {1, "read-write"};

const Enum::YLeaf BgpSummaryOnly::enabled {1, "enabled"};
const Enum::YLeaf BgpSummaryOnly::disabled {0, "disabled"};

const Enum::YLeaf PoePoePriority::low {0, "low"};
const Enum::YLeaf PoePoePriority::high {1, "high"};

const Enum::YLeaf L1Dot1qEtherType::Y_0x8100 {1, "0x8100"};
const Enum::YLeaf L1Dot1qEtherType::Y_0x88A8 {2, "0x88A8"};
const Enum::YLeaf L1Dot1qEtherType::Y_0x9100 {3, "0x9100"};
const Enum::YLeaf L1Dot1qEtherType::any {4, "any"};

const Enum::YLeaf DatetimeClockProtocol::unspecified {0, "unspecified"};
const Enum::YLeaf DatetimeClockProtocol::ptp {1, "ptp"};
const Enum::YLeaf DatetimeClockProtocol::ntp {2, "ntp"};
const Enum::YLeaf DatetimeClockProtocol::none {3, "none"};

const Enum::YLeaf SwpkgsOperState::none {0, "none"};
const Enum::YLeaf SwpkgsOperState::inactive {1, "inactive"};
const Enum::YLeaf SwpkgsOperState::activated {2, "activated"};
const Enum::YLeaf SwpkgsOperState::deactivated {3, "deactivated"};
const Enum::YLeaf SwpkgsOperState::committed {4, "committed"};

const Enum::YLeaf L2XConnect::enable {1, "enable"};
const Enum::YLeaf L2XConnect::disable {0, "disable"};

const Enum::YLeaf L1EEELpi::aggressive {1, "aggressive"};
const Enum::YLeaf L1EEELpi::normal {2, "normal"};

const Enum::YLeaf ConftmplOperationType::create {1, "create"};
const Enum::YLeaf ConftmplOperationType::delete_ {2, "delete"};

const Enum::YLeaf TrackListObj::none {0, "none"};
const Enum::YLeaf TrackListObj::and_ {1, "and"};
const Enum::YLeaf TrackListObj::or_ {2, "or"};
const Enum::YLeaf TrackListObj::percentage {3, "percentage"};
const Enum::YLeaf TrackListObj::weight {4, "weight"};

const Enum::YLeaf NvoVniStateT::Up {1, "Up"};
const Enum::YLeaf NvoVniStateT::Down {2, "Down"};

const Enum::YLeaf InbandTelemetryProfile::endpoint {0, "endpoint"};
const Enum::YLeaf InbandTelemetryProfile::transit {1, "transit"};

const Enum::YLeaf UdldPktDirection::send {0, "send"};
const Enum::YLeaf UdldPktDirection::recv {1, "recv"};

const Enum::YLeaf NwOSSum::failed {0, "failed"};
const Enum::YLeaf NwOSSum::initializing {1, "initializing"};
const Enum::YLeaf NwOSSum::resetting {2, "resetting"};
const Enum::YLeaf NwOSSum::degraded {3, "degraded"};
const Enum::YLeaf NwOSSum::ok {4, "ok"};

const Enum::YLeaf PlatformSwitchingMode::DEFAULT {0, "DEFAULT"};
const Enum::YLeaf PlatformSwitchingMode::STORE_FORWARD {1, "STORE_FORWARD"};

const Enum::YLeaf SisfDhcpGuardDeviceRole::client {0, "client"};
const Enum::YLeaf SisfDhcpGuardDeviceRole::server {1, "server"};
const Enum::YLeaf SisfDhcpGuardDeviceRole::monitor {2, "monitor"};

const Enum::YLeaf CdpOperSt::up {1, "up"};
const Enum::YLeaf CdpOperSt::down {2, "down"};

const Enum::YLeaf Ipv6IPv6EventType::ipv6Event {0, "ipv6Event"};
const Enum::YLeaf Ipv6IPv6EventType::bfdEvent {1, "bfdEvent"};
const Enum::YLeaf Ipv6IPv6EventType::syslog {2, "syslog"};
const Enum::YLeaf Ipv6IPv6EventType::ipc {3, "ipc"};
const Enum::YLeaf Ipv6IPv6EventType::snmp {4, "snmp"};
const Enum::YLeaf Ipv6IPv6EventType::highAvailability {5, "highAvailability"};
const Enum::YLeaf Ipv6IPv6EventType::sdb {6, "sdb"};

const Enum::YLeaf TraceroutePathT::external {1, "external"};
const Enum::YLeaf TraceroutePathT::internal {2, "internal"};

const Enum::YLeaf StpIfMode::default_ {0, "default"};
const Enum::YLeaf StpIfMode::edge {1, "edge"};
const Enum::YLeaf StpIfMode::network {2, "network"};
const Enum::YLeaf StpIfMode::normal {3, "normal"};
const Enum::YLeaf StpIfMode::trunk {4, "trunk"};

const Enum::YLeaf RelnResolverType::mo {1, "mo"};
const Enum::YLeaf RelnResolverType::service {2, "service"};
const Enum::YLeaf RelnResolverType::local {3, "local"};

const Enum::YLeaf L2Mode::F {0, "F"};
const Enum::YLeaf L2Mode::NP {1, "NP"};
const Enum::YLeaf L2Mode::E {2, "E"};
const Enum::YLeaf L2Mode::TF {3, "TF"};
const Enum::YLeaf L2Mode::TNP {4, "TNP"};

const Enum::YLeaf SisfNonGlobalTracking::default_ {0, "default"};
const Enum::YLeaf SisfNonGlobalTracking::disable {1, "disable"};
const Enum::YLeaf SisfNonGlobalTracking::enable {2, "enable"};

const Enum::YLeaf OspfActive::no {0, "no"};
const Enum::YLeaf OspfActive::yes {1, "yes"};

const Enum::YLeaf SviOperSt::unknown {0, "unknown"};
const Enum::YLeaf SviOperSt::up {1, "up"};
const Enum::YLeaf SviOperSt::down {2, "down"};
const Enum::YLeaf SviOperSt::shutdown {3, "shutdown"};
const Enum::YLeaf SviOperSt::out_of_srvc {4, "out-of-srvc"};

const Enum::YLeaf PcMode::on {0, "on"};
const Enum::YLeaf PcMode::static_ {1, "static"};
const Enum::YLeaf PcMode::active {2, "active"};
const Enum::YLeaf PcMode::passive {3, "passive"};
const Enum::YLeaf PcMode::mac_pin {4, "mac-pin"};

const Enum::YLeaf DatetimeClockFormat::Y_24hours {0, "24hours"};
const Enum::YLeaf DatetimeClockFormat::Y_12hours {1, "12hours"};

const Enum::YLeaf EqptEjSt::open {0, "open"};
const Enum::YLeaf EqptEjSt::closed {1, "closed"};

const Enum::YLeaf L1RouterMacIpv6Extract::disable {0, "disable"};
const Enum::YLeaf L1RouterMacIpv6Extract::enable {1, "enable"};

const Enum::YLeaf IpqosQoSMatchType::match_any {0, "match-any"};
const Enum::YLeaf IpqosQoSMatchType::match_all {1, "match-all"};
const Enum::YLeaf IpqosQoSMatchType::match_first {2, "match-first"};

const Enum::YLeaf HsrpAuthT::simple {1, "simple"};
const Enum::YLeaf HsrpAuthT::md5 {2, "md5"};

const Enum::YLeaf TestTrig::unspecified {0, "unspecified"};
const Enum::YLeaf TestTrig::on_demand {1, "on-demand"};
const Enum::YLeaf TestTrig::boot {2, "boot"};
const Enum::YLeaf TestTrig::forever {4, "forever"};

const Enum::YLeaf StpPortRole::unknown {0, "unknown"};
const Enum::YLeaf StpPortRole::root {1, "root"};
const Enum::YLeaf StpPortRole::alternate {2, "alternate"};
const Enum::YLeaf StpPortRole::designated {3, "designated"};
const Enum::YLeaf StpPortRole::backup {4, "backup"};
const Enum::YLeaf StpPortRole::master {5, "master"};

const Enum::YLeaf CompNicState::down {0, "down"};
const Enum::YLeaf CompNicState::up {1, "up"};

const Enum::YLeaf SegrtSidValueType::index_ {1, "index"};
const Enum::YLeaf SegrtSidValueType::absolute {2, "absolute"};

const Enum::YLeaf PlatformTuple::Disable {0, "Disable"};
const Enum::YLeaf PlatformTuple::Enable {1, "Enable"};

const Enum::YLeaf L1Speed::unknown {0, "unknown"};
const Enum::YLeaf L1Speed::Y_100M {2, "100M"};
const Enum::YLeaf L1Speed::Y_1G {3, "1G"};
const Enum::YLeaf L1Speed::Y_10G {4, "10G"};
const Enum::YLeaf L1Speed::Y_40G {5, "40G"};
const Enum::YLeaf L1Speed::auto_ {6, "auto"};
const Enum::YLeaf L1Speed::auto_100M {7, "auto_100M"};
const Enum::YLeaf L1Speed::auto_100M_1G {8, "auto_100M_1G"};
const Enum::YLeaf L1Speed::Y_100G {9, "100G"};
const Enum::YLeaf L1Speed::Y_25G {10, "25G"};
const Enum::YLeaf L1Speed::Y_10M {11, "10M"};
const Enum::YLeaf L1Speed::Y_50G {12, "50G"};

const Enum::YLeaf StpModeType::edge {1, "edge"};
const Enum::YLeaf StpModeType::network {2, "network"};
const Enum::YLeaf StpModeType::normal {3, "normal"};

const Enum::YLeaf EthpmFcotType::unknown {0, "unknown"};
const Enum::YLeaf EthpmFcotType::xfp {1, "xfp"};
const Enum::YLeaf EthpmFcotType::x2 {2, "x2"};
const Enum::YLeaf EthpmFcotType::dummy {3, "dummy"};
const Enum::YLeaf EthpmFcotType::sfp {4, "sfp"};
const Enum::YLeaf EthpmFcotType::qsfp {5, "qsfp"};
const Enum::YLeaf EthpmFcotType::cfp_40g {6, "cfp-40g"};
const Enum::YLeaf EthpmFcotType::cfp_100g {7, "cfp-100g"};
const Enum::YLeaf EthpmFcotType::cfp {8, "cfp"};
const Enum::YLeaf EthpmFcotType::qsfp28 {9, "qsfp28"};

const Enum::YLeaf VrrpGroupStQual::up {0, "up"};
const Enum::YLeaf VrrpGroupStQual::down {1, "down"};
const Enum::YLeaf VrrpGroupStQual::no_primary_vip {2, "no-primary-vip"};
const Enum::YLeaf VrrpGroupStQual::admin_down {3, "admin-down"};
const Enum::YLeaf VrrpGroupStQual::interface_down {4, "interface-down"};
const Enum::YLeaf VrrpGroupStQual::no_intf_ip_cfgd {5, "no-intf-ip-cfgd"};
const Enum::YLeaf VrrpGroupStQual::no_vrf_info_for_intf {6, "no-vrf-info-for-intf"};
const Enum::YLeaf VrrpGroupStQual::bd_not_allocated {7, "bd-not-allocated"};
const Enum::YLeaf VrrpGroupStQual::vmac_not_added {8, "vmac-not-added"};
const Enum::YLeaf VrrpGroupStQual::invalid_vip {9, "invalid-vip"};
const Enum::YLeaf VrrpGroupStQual::IfIp_vip_subnet_mismatch {10, "IfIp-vip-subnet-mismatch"};
const Enum::YLeaf VrrpGroupStQual::internal_error {11, "internal_error"};

const Enum::YLeaf AaaCmdType::config {0, "config"};
const Enum::YLeaf AaaCmdType::exec {1, "exec"};

const Enum::YLeaf BgpAfT::ipv4_ucast {1, "ipv4-ucast"};
const Enum::YLeaf BgpAfT::ipv4_mcast {2, "ipv4-mcast"};
const Enum::YLeaf BgpAfT::vpnv4_ucast {3, "vpnv4-ucast"};
const Enum::YLeaf BgpAfT::ipv6_ucast {5, "ipv6-ucast"};
const Enum::YLeaf BgpAfT::ipv6_mcast {6, "ipv6-mcast"};
const Enum::YLeaf BgpAfT::vpnv6_ucast {7, "vpnv6-ucast"};
const Enum::YLeaf BgpAfT::l2vpn_evpn {9, "l2vpn-evpn"};
const Enum::YLeaf BgpAfT::ipv4_lucast {10, "ipv4-lucast"};
const Enum::YLeaf BgpAfT::ipv6_lucast {11, "ipv6-lucast"};
const Enum::YLeaf BgpAfT::lnkstate {12, "lnkstate"};
const Enum::YLeaf BgpAfT::ipv4_mvpn {13, "ipv4-mvpn"};
const Enum::YLeaf BgpAfT::ipv6_mvpn {14, "ipv6-mvpn"};
const Enum::YLeaf BgpAfT::l2vpn_vpls {15, "l2vpn-vpls"};
const Enum::YLeaf BgpAfT::ipv4_mdt {16, "ipv4-mdt"};
const Enum::YLeaf BgpAfT::vpnv6_mcast {8, "vpnv6-mcast"};

const Enum::YLeaf TrackAf::none {0, "none"};
const Enum::YLeaf TrackAf::ipv4 {1, "ipv4"};
const Enum::YLeaf TrackAf::ipv6 {2, "ipv6"};

const Enum::YLeaf EqptExtChSt::unknown {0, "unknown"};
const Enum::YLeaf EqptExtChSt::initializing {1, "initializing"};
const Enum::YLeaf EqptExtChSt::discovered {2, "discovered"};
const Enum::YLeaf EqptExtChSt::connected {3, "connected"};
const Enum::YLeaf EqptExtChSt::reg {4, "reg"};
const Enum::YLeaf EqptExtChSt::regDone {5, "regDone"};
const Enum::YLeaf EqptExtChSt::ready {6, "ready"};
const Enum::YLeaf EqptExtChSt::onlSeq {7, "onlSeq"};
const Enum::YLeaf EqptExtChSt::online {8, "online"};
const Enum::YLeaf EqptExtChSt::offReq {9, "offReq"};
const Enum::YLeaf EqptExtChSt::offSeq {10, "offSeq"};
const Enum::YLeaf EqptExtChSt::offline {11, "offline"};
const Enum::YLeaf EqptExtChSt::imgDld {12, "imgDld"};
const Enum::YLeaf EqptExtChSt::failed {13, "failed"};
const Enum::YLeaf EqptExtChSt::removed {14, "removed"};
const Enum::YLeaf EqptExtChSt::hlUpgSeq {15, "hlUpgSeq"};
const Enum::YLeaf EqptExtChSt::chkUpgSeq {16, "chkUpgSeq"};
const Enum::YLeaf EqptExtChSt::svStates {17, "svStates"};
const Enum::YLeaf EqptExtChSt::hlUpgIdle {18, "hlUpgIdle"};
const Enum::YLeaf EqptExtChSt::chkInsSeq {19, "chkInsSeq"};
const Enum::YLeaf EqptExtChSt::hlUpgFail {20, "hlUpgFail"};
const Enum::YLeaf EqptExtChSt::aaUpgRdy {21, "aaUpgRdy"};
const Enum::YLeaf EqptExtChSt::aaUpgIdle {22, "aaUpgIdle"};
const Enum::YLeaf EqptExtChSt::aaUpgOver {23, "aaUpgOver"};
const Enum::YLeaf EqptExtChSt::aaUpgFail {24, "aaUpgFail"};
const Enum::YLeaf EqptExtChSt::aaVersMismatch {25, "aaVersMismatch"};
const Enum::YLeaf EqptExtChSt::ExtChTypeMismatch {26, "ExtChTypeMismatch"};

const Enum::YLeaf TelemetryDataSource::DME {1, "DME"};
const Enum::YLeaf TelemetryDataSource::NX_API {3, "NX-API"};
const Enum::YLeaf TelemetryDataSource::YANG {4, "YANG"};
const Enum::YLeaf TelemetryDataSource::DEFAULT {16, "DEFAULT"};

const Enum::YLeaf FcAdminSt::down {1, "down"};
const Enum::YLeaf FcAdminSt::up {2, "up"};

const Enum::YLeaf SnmpAuthTypeT::no {0, "no"};
const Enum::YLeaf SnmpAuthTypeT::md5 {1, "md5"};
const Enum::YLeaf SnmpAuthTypeT::sha {2, "sha"};

const Enum::YLeaf FmAdminState::enabled {1, "enabled"};
const Enum::YLeaf FmAdminState::disabled {2, "disabled"};

const Enum::YLeaf SpanOperStQual::active {1, "active"};
const Enum::YLeaf SpanOperStQual::no_hw_res {2, "no-hw-res"};
const Enum::YLeaf SpanOperStQual::no_oper_src_dst {3, "no-oper-src-dst"};
const Enum::YLeaf SpanOperStQual::error {4, "error"};
const Enum::YLeaf SpanOperStQual::no_src {5, "no-src"};
const Enum::YLeaf SpanOperStQual::no_dst {6, "no-dst"};
const Enum::YLeaf SpanOperStQual::no_src_dst {7, "no-src-dst"};
const Enum::YLeaf SpanOperStQual::shut {8, "shut"};
const Enum::YLeaf SpanOperStQual::invalid_dst_mode {9, "invalid-dst-mode"};
const Enum::YLeaf SpanOperStQual::invalid_src_mode {10, "invalid-src-mode"};
const Enum::YLeaf SpanOperStQual::invalid_vrf {11, "invalid-vrf"};
const Enum::YLeaf SpanOperStQual::invalid_ip {12, "invalid-ip"};
const Enum::YLeaf SpanOperStQual::no_route {13, "no-route"};
const Enum::YLeaf SpanOperStQual::no_eg_intf {14, "no-eg-intf"};
const Enum::YLeaf SpanOperStQual::hw_err {15, "hw-err"};

const Enum::YLeaf AnalyticsConfigLatencyResFactorT::enable {1, "enable"};
const Enum::YLeaf AnalyticsConfigLatencyResFactorT::disable {0, "disable"};

const Enum::YLeaf L1PhyLayer::ethernet {2, "ethernet"};
const Enum::YLeaf L1PhyLayer::sup_inband {4, "sup-inband"};
const Enum::YLeaf L1PhyLayer::eobc {5, "eobc"};
const Enum::YLeaf L1PhyLayer::mgmt {6, "mgmt"};
const Enum::YLeaf L1PhyLayer::max {8, "max"};

const Enum::YLeaf OspfPathT::intra {1, "intra"};
const Enum::YLeaf OspfPathT::discard_int {2, "discard-int"};
const Enum::YLeaf OspfPathT::inter {3, "inter"};
const Enum::YLeaf OspfPathT::discard_ext {4, "discard-ext"};
const Enum::YLeaf OspfPathT::ext1 {5, "ext1"};
const Enum::YLeaf OspfPathT::nssa1 {6, "nssa1"};
const Enum::YLeaf OspfPathT::ext2 {7, "ext2"};
const Enum::YLeaf OspfPathT::nssa2 {8, "nssa2"};

const Enum::YLeaf OspfMaxLsaOperSt::ok {0, "ok"};
const Enum::YLeaf OspfMaxLsaOperSt::threshold_exceeded {1, "threshold-exceeded"};

const Enum::YLeaf L1IntfT::phy {1, "phy"};
const Enum::YLeaf L1IntfT::phy_shared {2, "phy-shared"};

const Enum::YLeaf L2NativeT::regular {0, "regular"};
const Enum::YLeaf L2NativeT::native {1, "native"};
const Enum::YLeaf L2NativeT::untagged {2, "untagged"};

const Enum::YLeaf OpflexDevOperState::unknown {0, "unknown"};
const Enum::YLeaf OpflexDevOperState::online {1, "online"};
const Enum::YLeaf OpflexDevOperState::offline {2, "offline"};
const Enum::YLeaf OpflexDevOperState::identified {3, "identified"};
const Enum::YLeaf OpflexDevOperState::compatible {4, "compatible"};
const Enum::YLeaf OpflexDevOperState::incompatible {5, "incompatible"};

const Enum::YLeaf BgpEhType::none {0, "none"};
const Enum::YLeaf BgpEhType::cli {1, "cli"};
const Enum::YLeaf BgpEhType::events {2, "events"};
const Enum::YLeaf BgpEhType::periodic {3, "periodic"};
const Enum::YLeaf BgpEhType::detail {4, "detail"};
const Enum::YLeaf BgpEhType::errors {5, "errors"};
const Enum::YLeaf BgpEhType::objstore {6, "objstore"};

const Enum::YLeaf L2TrunkMode::off {0, "off"};
const Enum::YLeaf L2TrunkMode::on {1, "on"};
const Enum::YLeaf L2TrunkMode::auto_ {2, "auto"};

const Enum::YLeaf SrteMetric::none {0, "none"};
const Enum::YLeaf SrteMetric::te {1, "te"};
const Enum::YLeaf SrteMetric::igp {2, "igp"};

const Enum::YLeaf AclVAclActionType::invalid {0, "invalid"};
const Enum::YLeaf AclVAclActionType::forward {1, "forward"};
const Enum::YLeaf AclVAclActionType::drop {2, "drop"};
const Enum::YLeaf AclVAclActionType::redirect {3, "redirect"};

const Enum::YLeaf EqptPortT::unknown {0, "unknown"};
const Enum::YLeaf EqptPortT::eobc {1, "eobc"};
const Enum::YLeaf EqptPortT::mgmt {2, "mgmt"};
const Enum::YLeaf EqptPortT::fab {3, "fab"};
const Enum::YLeaf EqptPortT::leaf {4, "leaf"};
const Enum::YLeaf EqptPortT::extchhp {5, "extchhp"};
const Enum::YLeaf EqptPortT::extchfp {6, "extchfp"};

const Enum::YLeaf OspfLsaT::router {1, "router"};
const Enum::YLeaf OspfLsaT::nw {2, "nw"};
const Enum::YLeaf OspfLsaT::summary {3, "summary"};
const Enum::YLeaf OspfLsaT::asbr {4, "asbr"};
const Enum::YLeaf OspfLsaT::ext {5, "ext"};
const Enum::YLeaf OspfLsaT::nssa {7, "nssa"};
const Enum::YLeaf OspfLsaT::link_opq {9, "link-opq"};
const Enum::YLeaf OspfLsaT::area_opq {10, "area-opq"};
const Enum::YLeaf OspfLsaT::as_opq {11, "as-opq"};

const Enum::YLeaf SysmgrCfgMode::init {1, "init"};
const Enum::YLeaf SysmgrCfgMode::replay {2, "replay"};
const Enum::YLeaf SysmgrCfgMode::done {4, "done"};

const Enum::YLeaf ArpStAdjOperSt::down {0, "down"};
const Enum::YLeaf ArpStAdjOperSt::up {1, "up"};
const Enum::YLeaf ArpStAdjOperSt::unspecified {10, "unspecified"};

const Enum::YLeaf L1SpeedGroup::unknown {0, "unknown"};
const Enum::YLeaf L1SpeedGroup::Y_1000 {3, "1000"};
const Enum::YLeaf L1SpeedGroup::Y_25000 {10, "25000"};
const Enum::YLeaf L1SpeedGroup::Y_10000 {4, "10000"};
const Enum::YLeaf L1SpeedGroup::Y_40000 {5, "40000"};
const Enum::YLeaf L1SpeedGroup::auto_ {6, "auto"};

const Enum::YLeaf OspfNssaTransSt::enabled {1, "enabled"};
const Enum::YLeaf OspfNssaTransSt::elected {2, "elected"};
const Enum::YLeaf OspfNssaTransSt::disabled {3, "disabled"};

const Enum::YLeaf L2DomOperSt::up {1, "up"};
const Enum::YLeaf L2DomOperSt::down {2, "down"};
const Enum::YLeaf L2DomOperSt::unknown {3, "unknown"};

const Enum::YLeaf EqptBaudRate::Y_300 {1, "300"};
const Enum::YLeaf EqptBaudRate::Y_1200 {2, "1200"};
const Enum::YLeaf EqptBaudRate::Y_2400 {3, "2400"};
const Enum::YLeaf EqptBaudRate::Y_4800 {4, "4800"};
const Enum::YLeaf EqptBaudRate::Y_9600 {5, "9600"};
const Enum::YLeaf EqptBaudRate::Y_38400 {6, "38400"};
const Enum::YLeaf EqptBaudRate::Y_57600 {7, "57600"};
const Enum::YLeaf EqptBaudRate::Y_115200 {8, "115200"};

const Enum::YLeaf AcBankT::even {1, "even"};
const Enum::YLeaf AcBankT::Odd {2, "Odd"};

const Enum::YLeaf FvPcEnfPref::enforced {1, "enforced"};
const Enum::YLeaf FvPcEnfPref::unenforced {2, "unenforced"};

const Enum::YLeaf HsrpHsrpVersion::v1 {1, "v1"};
const Enum::YLeaf HsrpHsrpVersion::v2 {2, "v2"};

const Enum::YLeaf NvoEvpnMcastStT::enabled {1, "enabled"};

const Enum::YLeaf EqptCardT::unknown {0, "unknown"};
const Enum::YLeaf EqptCardT::supervisor {1, "supervisor"};
const Enum::YLeaf EqptCardT::linecard {2, "linecard"};
const Enum::YLeaf EqptCardT::fabriccard {3, "fabriccard"};
const Enum::YLeaf EqptCardT::sysctrlcard {4, "sysctrlcard"};
const Enum::YLeaf EqptCardT::extchcard {5, "extchcard"};
const Enum::YLeaf EqptCardT::fan_tray {6, "fan-tray"};
const Enum::YLeaf EqptCardT::power_supply {7, "power-supply"};

const Enum::YLeaf L3VrfOperState::up {1, "up"};
const Enum::YLeaf L3VrfOperState::down {2, "down"};

const Enum::YLeaf NvoReplModeT::unknown {0, "unknown"};
const Enum::YLeaf NvoReplModeT::replicationServer {1, "replicationServer"};
const Enum::YLeaf NvoReplModeT::ingressReplication {2, "ingressReplication"};

const Enum::YLeaf IpmcsnoopDbT::group {1, "group"};
const Enum::YLeaf IpmcsnoopDbT::fabric_mcgrp {2, "fabric-mcgrp"};
const Enum::YLeaf IpmcsnoopDbT::querier {3, "querier"};
const Enum::YLeaf IpmcsnoopDbT::mrouter {4, "mrouter"};
const Enum::YLeaf IpmcsnoopDbT::snoopstats {5, "snoopstats"};
const Enum::YLeaf IpmcsnoopDbT::policy {6, "policy"};
const Enum::YLeaf IpmcsnoopDbT::snoop {7, "snoop"};
const Enum::YLeaf IpmcsnoopDbT::exptrack {8, "exptrack"};
const Enum::YLeaf IpmcsnoopDbT::stats {9, "stats"};
const Enum::YLeaf IpmcsnoopDbT::mac {10, "mac"};
const Enum::YLeaf IpmcsnoopDbT::macoif {11, "macoif"};

const Enum::YLeaf CoppConformAction::Undefined {0, "Undefined"};
const Enum::YLeaf CoppConformAction::transmit {1, "transmit"};
const Enum::YLeaf CoppConformAction::drop {2, "drop"};

const Enum::YLeaf PimEhType::assert {0, "assert"};
const Enum::YLeaf PimEhType::bidir {1, "bidir"};
const Enum::YLeaf PimEhType::cli {2, "cli"};
const Enum::YLeaf PimEhType::dataRegRecv {3, "dataRegRecv"};
const Enum::YLeaf PimEhType::hello {4, "hello"};
const Enum::YLeaf PimEhType::joinPrune {5, "joinPrune"};
const Enum::YLeaf PimEhType::mrib {6, "mrib"};
const Enum::YLeaf PimEhType::nullReg {7, "nullReg"};
const Enum::YLeaf PimEhType::packet {8, "packet"};
const Enum::YLeaf PimEhType::nbm {9, "nbm"};
const Enum::YLeaf PimEhType::pimInternal {10, "pimInternal"};
const Enum::YLeaf PimEhType::pimLib {11, "pimLib"};
const Enum::YLeaf PimEhType::rp {12, "rp"};
const Enum::YLeaf PimEhType::txlist {13, "txlist"};
const Enum::YLeaf PimEhType::vpc {14, "vpc"};
const Enum::YLeaf PimEhType::vrf {15, "vrf"};
const Enum::YLeaf PimEhType::jpSum {16, "jpSum"};
const Enum::YLeaf PimEhType::jpTw {17, "jpTw"};

const Enum::YLeaf NwAdminStIfStatProxyArp::enabled {1, "enabled"};
const Enum::YLeaf NwAdminStIfStatProxyArp::disabled {2, "disabled"};

const Enum::YLeaf FmcastOperSt::active {1, "active"};
const Enum::YLeaf FmcastOperSt::inactive {2, "inactive"};

const Enum::YLeaf FirmwareRunningOperSt::ok {0, "ok"};
const Enum::YLeaf FirmwareRunningOperSt::ver_mismatch {1, "ver-mismatch"};

const Enum::YLeaf SyslogOperState::unknown {0, "unknown"};
const Enum::YLeaf SyslogOperState::available {1, "available"};
const Enum::YLeaf SyslogOperState::errored {2, "errored"};

const Enum::YLeaf L1SnmpTrapSt::enable {1, "enable"};
const Enum::YLeaf L1SnmpTrapSt::disable {2, "disable"};

const Enum::YLeaf NdAdjOperSt::unspecified {0, "unspecified"};
const Enum::YLeaf NdAdjOperSt::incomplete {1, "incomplete"};
const Enum::YLeaf NdAdjOperSt::normal {2, "normal"};

const Enum::YLeaf NbmNbmNoYes::NO {0, "NO"};
const Enum::YLeaf NbmNbmNoYes::YES {1, "YES"};
const Enum::YLeaf NbmNbmNoYes::NA {2, "NA"};

const Enum::YLeaf BfdAuthT::none {0, "none"};
const Enum::YLeaf BfdAuthT::sha1 {4, "sha1"};
const Enum::YLeaf BfdAuthT::met_sha1 {5, "met-sha1"};


}
}

