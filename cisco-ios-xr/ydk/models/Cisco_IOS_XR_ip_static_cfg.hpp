#ifndef _CISCO_IOS_XR_IP_STATIC_CFG_
#define _CISCO_IOS_XR_IP_STATIC_CFG_

#include <memory>
#include <vector>
#include <string>
#include "ydk/types.hpp"
#include "ydk/errors.hpp"

namespace ydk {
namespace Cisco_IOS_XR_ip_static_cfg {

class RouterStatic : public Entity
{
    public:
        RouterStatic();
        ~RouterStatic();

        bool has_data() const override;
        bool has_operation() const override;
        EntityPath get_entity_path(Entity* parent) const override;
        std::string get_segment_path() const override;
        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, std::string value) override;
        std::map<std::string, Entity*> & get_children() override;
        std::unique_ptr<Entity> clone_ptr() override;



    class Vrfs : public Entity
    {
        public:
            Vrfs();
            ~Vrfs();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;



        class Vrf : public Entity
        {
            public:
                Vrf();
                ~Vrf();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


                YLeaf vrf_name; //type: string

            class AddressFamily : public Entity
            {
                public:
                    AddressFamily();
                    ~AddressFamily();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;



                class Vrfipv4 : public Entity
                {
                    public:
                        Vrfipv4();
                        ~Vrfipv4();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class VrfUnicast : public Entity
                    {
                        public:
                            VrfUnicast();
                            ~VrfUnicast();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Topologies : public Entity
                        {
                            public:
                                Topologies();
                                ~Topologies();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Topology : public Entity
                            {
                                public:
                                    Topology();
                                    ~Topology();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf topology_name; //type: string

                                class VrfPrefixTopologies : public Entity
                                {
                                    public:
                                        VrfPrefixTopologies();
                                        ~VrfPrefixTopologies();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfPrefixTopology : public Entity
                                    {
                                        public:
                                            VrfPrefixTopology();
                                            ~VrfPrefixTopology();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf prefix; //type: string
                                            YLeaf prefix_length; //type: uint32

                                        class VrfRoute : public Entity
                                        {
                                            public:
                                                VrfRoute();
                                                ~VrfRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfNextHopTable();
                                                    ~VrfNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                        class VrfRecurseRoutes : public Entity
                                        {
                                            public:
                                                VrfRecurseRoutes();
                                                ~VrfRecurseRoutes();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfRecurseRoute : public Entity
                                            {
                                                public:
                                                    VrfRecurseRoute();
                                                    ~VrfRecurseRoute();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf vrf_name; //type: string

                                                class VrfRecursiveNextHopTable : public Entity
                                                {
                                                    public:
                                                        VrfRecursiveNextHopTable();
                                                        ~VrfRecursiveNextHopTable();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;



                                                    class VrfNextHopInterfaceName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopInterfaceName();
                                                            ~VrfNextHopInterfaceName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf interface_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopInterfaceNameNextHopAddress();
                                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf interface_name; //type: string
                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                    class VrfNextHopNextHopAddress : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopNextHopAddress();
                                                            ~VrfNextHopNextHopAddress();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopNextHopAddressExplicitPathName();
                                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf explicit_path_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                    class VrfNextHopExplicitPathName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopExplicitPathName();
                                                            ~VrfNextHopExplicitPathName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf explicit_path_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                        class VrfSegRoute : public Entity
                                        {
                                            public:
                                                VrfSegRoute();
                                                ~VrfSegRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class SegmentRouteNextHopTable : public Entity
                                            {
                                                public:
                                                    SegmentRouteNextHopTable();
                                                    ~SegmentRouteNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies> vrf_prefix_topologies;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology> > topology;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies


                        class VrfPrefixes : public Entity
                        {
                            public:
                                VrfPrefixes();
                                ~VrfPrefixes();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefix : public Entity
                            {
                                public:
                                    VrfPrefix();
                                    ~VrfPrefix();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32

                                class VrfRoute : public Entity
                                {
                                    public:
                                        VrfRoute();
                                        ~VrfRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopTable : public Entity
                                    {
                                        public:
                                            VrfNextHopTable();
                                            ~VrfNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute


                                class VrfRecurseRoutes : public Entity
                                {
                                    public:
                                        VrfRecurseRoutes();
                                        ~VrfRecurseRoutes();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfRecurseRoute : public Entity
                                    {
                                        public:
                                            VrfRecurseRoute();
                                            ~VrfRecurseRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf vrf_name; //type: string

                                        class VrfRecursiveNextHopTable : public Entity
                                        {
                                            public:
                                                VrfRecursiveNextHopTable();
                                                ~VrfRecursiveNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes


                                class VrfSegRoute : public Entity
                                {
                                    public:
                                        VrfSegRoute();
                                        ~VrfSegRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class SegmentRouteNextHopTable : public Entity
                                    {
                                        public:
                                            SegmentRouteNextHopTable();
                                            ~SegmentRouteNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes> vrf_recurse_routes;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute> vrf_route;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute> vrf_seg_route;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix> > vrf_prefix;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes


                        class DefaultTopology : public Entity
                        {
                            public:
                                DefaultTopology();
                                ~DefaultTopology();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefixTopologies : public Entity
                            {
                                public:
                                    VrfPrefixTopologies();
                                    ~VrfPrefixTopologies();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfPrefixTopology : public Entity
                                {
                                    public:
                                        VrfPrefixTopology();
                                        ~VrfPrefixTopology();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32

                                    class VrfRoute : public Entity
                                    {
                                        public:
                                            VrfRoute();
                                            ~VrfRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopTable : public Entity
                                        {
                                            public:
                                                VrfNextHopTable();
                                                ~VrfNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                    class VrfRecurseRoutes : public Entity
                                    {
                                        public:
                                            VrfRecurseRoutes();
                                            ~VrfRecurseRoutes();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfRecurseRoute : public Entity
                                        {
                                            public:
                                                VrfRecurseRoute();
                                                ~VrfRecurseRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf vrf_name; //type: string

                                            class VrfRecursiveNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfRecursiveNextHopTable();
                                                    ~VrfRecursiveNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                    class VrfSegRoute : public Entity
                                    {
                                        public:
                                            VrfSegRoute();
                                            ~VrfSegRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class SegmentRouteNextHopTable : public Entity
                                        {
                                            public:
                                                SegmentRouteNextHopTable();
                                                ~SegmentRouteNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies> vrf_prefix_topologies;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology


                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology> default_topology;
                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies> topologies;
                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes> vrf_prefixes;


                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast


                    class VrfMulticast : public Entity
                    {
                        public:
                            VrfMulticast();
                            ~VrfMulticast();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Topologies : public Entity
                        {
                            public:
                                Topologies();
                                ~Topologies();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Topology : public Entity
                            {
                                public:
                                    Topology();
                                    ~Topology();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf topology_name; //type: string

                                class VrfPrefixTopologies : public Entity
                                {
                                    public:
                                        VrfPrefixTopologies();
                                        ~VrfPrefixTopologies();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfPrefixTopology : public Entity
                                    {
                                        public:
                                            VrfPrefixTopology();
                                            ~VrfPrefixTopology();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf prefix; //type: string
                                            YLeaf prefix_length; //type: uint32

                                        class VrfRoute : public Entity
                                        {
                                            public:
                                                VrfRoute();
                                                ~VrfRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfNextHopTable();
                                                    ~VrfNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                        class VrfRecurseRoutes : public Entity
                                        {
                                            public:
                                                VrfRecurseRoutes();
                                                ~VrfRecurseRoutes();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfRecurseRoute : public Entity
                                            {
                                                public:
                                                    VrfRecurseRoute();
                                                    ~VrfRecurseRoute();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf vrf_name; //type: string

                                                class VrfRecursiveNextHopTable : public Entity
                                                {
                                                    public:
                                                        VrfRecursiveNextHopTable();
                                                        ~VrfRecursiveNextHopTable();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;



                                                    class VrfNextHopInterfaceName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopInterfaceName();
                                                            ~VrfNextHopInterfaceName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf interface_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopInterfaceNameNextHopAddress();
                                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf interface_name; //type: string
                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                    class VrfNextHopNextHopAddress : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopNextHopAddress();
                                                            ~VrfNextHopNextHopAddress();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopNextHopAddressExplicitPathName();
                                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf explicit_path_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                    class VrfNextHopExplicitPathName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopExplicitPathName();
                                                            ~VrfNextHopExplicitPathName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf explicit_path_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                        class VrfSegRoute : public Entity
                                        {
                                            public:
                                                VrfSegRoute();
                                                ~VrfSegRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class SegmentRouteNextHopTable : public Entity
                                            {
                                                public:
                                                    SegmentRouteNextHopTable();
                                                    ~SegmentRouteNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies> vrf_prefix_topologies;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology> > topology;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies


                        class VrfPrefixes : public Entity
                        {
                            public:
                                VrfPrefixes();
                                ~VrfPrefixes();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefix : public Entity
                            {
                                public:
                                    VrfPrefix();
                                    ~VrfPrefix();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32

                                class VrfRoute : public Entity
                                {
                                    public:
                                        VrfRoute();
                                        ~VrfRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopTable : public Entity
                                    {
                                        public:
                                            VrfNextHopTable();
                                            ~VrfNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute


                                class VrfRecurseRoutes : public Entity
                                {
                                    public:
                                        VrfRecurseRoutes();
                                        ~VrfRecurseRoutes();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfRecurseRoute : public Entity
                                    {
                                        public:
                                            VrfRecurseRoute();
                                            ~VrfRecurseRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf vrf_name; //type: string

                                        class VrfRecursiveNextHopTable : public Entity
                                        {
                                            public:
                                                VrfRecursiveNextHopTable();
                                                ~VrfRecursiveNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes


                                class VrfSegRoute : public Entity
                                {
                                    public:
                                        VrfSegRoute();
                                        ~VrfSegRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class SegmentRouteNextHopTable : public Entity
                                    {
                                        public:
                                            SegmentRouteNextHopTable();
                                            ~SegmentRouteNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes> vrf_recurse_routes;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute> vrf_route;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute> vrf_seg_route;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix> > vrf_prefix;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes


                        class DefaultTopology : public Entity
                        {
                            public:
                                DefaultTopology();
                                ~DefaultTopology();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefixTopologies : public Entity
                            {
                                public:
                                    VrfPrefixTopologies();
                                    ~VrfPrefixTopologies();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfPrefixTopology : public Entity
                                {
                                    public:
                                        VrfPrefixTopology();
                                        ~VrfPrefixTopology();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32

                                    class VrfRoute : public Entity
                                    {
                                        public:
                                            VrfRoute();
                                            ~VrfRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopTable : public Entity
                                        {
                                            public:
                                                VrfNextHopTable();
                                                ~VrfNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                    class VrfRecurseRoutes : public Entity
                                    {
                                        public:
                                            VrfRecurseRoutes();
                                            ~VrfRecurseRoutes();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfRecurseRoute : public Entity
                                        {
                                            public:
                                                VrfRecurseRoute();
                                                ~VrfRecurseRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf vrf_name; //type: string

                                            class VrfRecursiveNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfRecursiveNextHopTable();
                                                    ~VrfRecursiveNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                    class VrfSegRoute : public Entity
                                    {
                                        public:
                                            VrfSegRoute();
                                            ~VrfSegRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class SegmentRouteNextHopTable : public Entity
                                        {
                                            public:
                                                SegmentRouteNextHopTable();
                                                ~SegmentRouteNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies> vrf_prefix_topologies;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology


                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology> default_topology;
                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies> topologies;
                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes> vrf_prefixes;


                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast


                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfMulticast> vrf_multicast;
                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4::VrfUnicast> vrf_unicast;


                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4


                class Vrfipv6 : public Entity
                {
                    public:
                        Vrfipv6();
                        ~Vrfipv6();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class VrfUnicast : public Entity
                    {
                        public:
                            VrfUnicast();
                            ~VrfUnicast();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Topologies : public Entity
                        {
                            public:
                                Topologies();
                                ~Topologies();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Topology : public Entity
                            {
                                public:
                                    Topology();
                                    ~Topology();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf topology_name; //type: string

                                class VrfPrefixTopologies : public Entity
                                {
                                    public:
                                        VrfPrefixTopologies();
                                        ~VrfPrefixTopologies();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfPrefixTopology : public Entity
                                    {
                                        public:
                                            VrfPrefixTopology();
                                            ~VrfPrefixTopology();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf prefix; //type: string
                                            YLeaf prefix_length; //type: uint32

                                        class VrfRoute : public Entity
                                        {
                                            public:
                                                VrfRoute();
                                                ~VrfRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfNextHopTable();
                                                    ~VrfNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                        class VrfRecurseRoutes : public Entity
                                        {
                                            public:
                                                VrfRecurseRoutes();
                                                ~VrfRecurseRoutes();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfRecurseRoute : public Entity
                                            {
                                                public:
                                                    VrfRecurseRoute();
                                                    ~VrfRecurseRoute();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf vrf_name; //type: string

                                                class VrfRecursiveNextHopTable : public Entity
                                                {
                                                    public:
                                                        VrfRecursiveNextHopTable();
                                                        ~VrfRecursiveNextHopTable();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;



                                                    class VrfNextHopInterfaceName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopInterfaceName();
                                                            ~VrfNextHopInterfaceName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf interface_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopInterfaceNameNextHopAddress();
                                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf interface_name; //type: string
                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                    class VrfNextHopNextHopAddress : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopNextHopAddress();
                                                            ~VrfNextHopNextHopAddress();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopNextHopAddressExplicitPathName();
                                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf explicit_path_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                    class VrfNextHopExplicitPathName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopExplicitPathName();
                                                            ~VrfNextHopExplicitPathName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf explicit_path_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                        class VrfSegRoute : public Entity
                                        {
                                            public:
                                                VrfSegRoute();
                                                ~VrfSegRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class SegmentRouteNextHopTable : public Entity
                                            {
                                                public:
                                                    SegmentRouteNextHopTable();
                                                    ~SegmentRouteNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies> vrf_prefix_topologies;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology> > topology;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies


                        class VrfPrefixes : public Entity
                        {
                            public:
                                VrfPrefixes();
                                ~VrfPrefixes();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefix : public Entity
                            {
                                public:
                                    VrfPrefix();
                                    ~VrfPrefix();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32

                                class VrfRoute : public Entity
                                {
                                    public:
                                        VrfRoute();
                                        ~VrfRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopTable : public Entity
                                    {
                                        public:
                                            VrfNextHopTable();
                                            ~VrfNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute


                                class VrfRecurseRoutes : public Entity
                                {
                                    public:
                                        VrfRecurseRoutes();
                                        ~VrfRecurseRoutes();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfRecurseRoute : public Entity
                                    {
                                        public:
                                            VrfRecurseRoute();
                                            ~VrfRecurseRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf vrf_name; //type: string

                                        class VrfRecursiveNextHopTable : public Entity
                                        {
                                            public:
                                                VrfRecursiveNextHopTable();
                                                ~VrfRecursiveNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes


                                class VrfSegRoute : public Entity
                                {
                                    public:
                                        VrfSegRoute();
                                        ~VrfSegRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class SegmentRouteNextHopTable : public Entity
                                    {
                                        public:
                                            SegmentRouteNextHopTable();
                                            ~SegmentRouteNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes> vrf_recurse_routes;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute> vrf_route;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute> vrf_seg_route;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix> > vrf_prefix;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes


                        class DefaultTopology : public Entity
                        {
                            public:
                                DefaultTopology();
                                ~DefaultTopology();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefixTopologies : public Entity
                            {
                                public:
                                    VrfPrefixTopologies();
                                    ~VrfPrefixTopologies();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfPrefixTopology : public Entity
                                {
                                    public:
                                        VrfPrefixTopology();
                                        ~VrfPrefixTopology();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32

                                    class VrfRoute : public Entity
                                    {
                                        public:
                                            VrfRoute();
                                            ~VrfRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopTable : public Entity
                                        {
                                            public:
                                                VrfNextHopTable();
                                                ~VrfNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                    class VrfRecurseRoutes : public Entity
                                    {
                                        public:
                                            VrfRecurseRoutes();
                                            ~VrfRecurseRoutes();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfRecurseRoute : public Entity
                                        {
                                            public:
                                                VrfRecurseRoute();
                                                ~VrfRecurseRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf vrf_name; //type: string

                                            class VrfRecursiveNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfRecursiveNextHopTable();
                                                    ~VrfRecursiveNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                    class VrfSegRoute : public Entity
                                    {
                                        public:
                                            VrfSegRoute();
                                            ~VrfSegRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class SegmentRouteNextHopTable : public Entity
                                        {
                                            public:
                                                SegmentRouteNextHopTable();
                                                ~SegmentRouteNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies> vrf_prefix_topologies;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology


                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology> default_topology;
                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies> topologies;
                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes> vrf_prefixes;


                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast


                    class VrfMulticast : public Entity
                    {
                        public:
                            VrfMulticast();
                            ~VrfMulticast();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Topologies : public Entity
                        {
                            public:
                                Topologies();
                                ~Topologies();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Topology : public Entity
                            {
                                public:
                                    Topology();
                                    ~Topology();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf topology_name; //type: string

                                class VrfPrefixTopologies : public Entity
                                {
                                    public:
                                        VrfPrefixTopologies();
                                        ~VrfPrefixTopologies();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfPrefixTopology : public Entity
                                    {
                                        public:
                                            VrfPrefixTopology();
                                            ~VrfPrefixTopology();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf prefix; //type: string
                                            YLeaf prefix_length; //type: uint32

                                        class VrfRoute : public Entity
                                        {
                                            public:
                                                VrfRoute();
                                                ~VrfRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfNextHopTable();
                                                    ~VrfNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                        class VrfRecurseRoutes : public Entity
                                        {
                                            public:
                                                VrfRecurseRoutes();
                                                ~VrfRecurseRoutes();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfRecurseRoute : public Entity
                                            {
                                                public:
                                                    VrfRecurseRoute();
                                                    ~VrfRecurseRoute();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf vrf_name; //type: string

                                                class VrfRecursiveNextHopTable : public Entity
                                                {
                                                    public:
                                                        VrfRecursiveNextHopTable();
                                                        ~VrfRecursiveNextHopTable();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;



                                                    class VrfNextHopInterfaceName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopInterfaceName();
                                                            ~VrfNextHopInterfaceName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf interface_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopInterfaceNameNextHopAddress();
                                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf interface_name; //type: string
                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                    class VrfNextHopNextHopAddress : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopNextHopAddress();
                                                            ~VrfNextHopNextHopAddress();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopNextHopAddressExplicitPathName();
                                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf next_hop_address; //type: string
                                                            YLeaf explicit_path_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                    class VrfNextHopExplicitPathName : public Entity
                                                    {
                                                        public:
                                                            VrfNextHopExplicitPathName();
                                                            ~VrfNextHopExplicitPathName();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf explicit_path_name; //type: string
                                                            YLeaf bfd_fast_detect; //type: boolean
                                                            YLeaf minimum_interval; //type: uint32
                                                            YLeaf detect_multiplier; //type: uint32
                                                            YLeaf metric; //type: uint32
                                                            YLeaf tag; //type: uint32
                                                            YLeaf permanent; //type: boolean
                                                            YLeaf vrf_lable; //type: uint32
                                                            YLeaf tunnel_id; //type: uint32
                                                            YLeaf object_name; //type: string
                                                            YLeaf description; //type: string
                                                            YLeaf load_metric; //type: uint32



                                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                        class VrfSegRoute : public Entity
                                        {
                                            public:
                                                VrfSegRoute();
                                                ~VrfSegRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class SegmentRouteNextHopTable : public Entity
                                            {
                                                public:
                                                    SegmentRouteNextHopTable();
                                                    ~SegmentRouteNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies> vrf_prefix_topologies;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology> > topology;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies


                        class VrfPrefixes : public Entity
                        {
                            public:
                                VrfPrefixes();
                                ~VrfPrefixes();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefix : public Entity
                            {
                                public:
                                    VrfPrefix();
                                    ~VrfPrefix();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32

                                class VrfRoute : public Entity
                                {
                                    public:
                                        VrfRoute();
                                        ~VrfRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopTable : public Entity
                                    {
                                        public:
                                            VrfNextHopTable();
                                            ~VrfNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute


                                class VrfRecurseRoutes : public Entity
                                {
                                    public:
                                        VrfRecurseRoutes();
                                        ~VrfRecurseRoutes();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfRecurseRoute : public Entity
                                    {
                                        public:
                                            VrfRecurseRoute();
                                            ~VrfRecurseRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf vrf_name; //type: string

                                        class VrfRecursiveNextHopTable : public Entity
                                        {
                                            public:
                                                VrfRecursiveNextHopTable();
                                                ~VrfRecursiveNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes


                                class VrfSegRoute : public Entity
                                {
                                    public:
                                        VrfSegRoute();
                                        ~VrfSegRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class SegmentRouteNextHopTable : public Entity
                                    {
                                        public:
                                            SegmentRouteNextHopTable();
                                            ~SegmentRouteNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes> vrf_recurse_routes;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute> vrf_route;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute> vrf_seg_route;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix> > vrf_prefix;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes


                        class DefaultTopology : public Entity
                        {
                            public:
                                DefaultTopology();
                                ~DefaultTopology();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefixTopologies : public Entity
                            {
                                public:
                                    VrfPrefixTopologies();
                                    ~VrfPrefixTopologies();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfPrefixTopology : public Entity
                                {
                                    public:
                                        VrfPrefixTopology();
                                        ~VrfPrefixTopology();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32

                                    class VrfRoute : public Entity
                                    {
                                        public:
                                            VrfRoute();
                                            ~VrfRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopTable : public Entity
                                        {
                                            public:
                                                VrfNextHopTable();
                                                ~VrfNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                    class VrfRecurseRoutes : public Entity
                                    {
                                        public:
                                            VrfRecurseRoutes();
                                            ~VrfRecurseRoutes();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfRecurseRoute : public Entity
                                        {
                                            public:
                                                VrfRecurseRoute();
                                                ~VrfRecurseRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf vrf_name; //type: string

                                            class VrfRecursiveNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfRecursiveNextHopTable();
                                                    ~VrfRecursiveNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                    class VrfSegRoute : public Entity
                                    {
                                        public:
                                            VrfSegRoute();
                                            ~VrfSegRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class SegmentRouteNextHopTable : public Entity
                                        {
                                            public:
                                                SegmentRouteNextHopTable();
                                                ~SegmentRouteNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                            }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies> vrf_prefix_topologies;


                        }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology


                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology> default_topology;
                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies> topologies;
                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes> vrf_prefixes;


                    }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast


                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfMulticast> vrf_multicast;
                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6::VrfUnicast> vrf_unicast;


                }; // RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6


                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv4> vrfipv4;
                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily::Vrfipv6> vrfipv6;


            }; // RouterStatic::Vrfs::Vrf::AddressFamily


                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf::AddressFamily> address_family;


        }; // RouterStatic::Vrfs::Vrf


            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs::Vrf> > vrf;


    }; // RouterStatic::Vrfs


    class DefaultVrf : public Entity
    {
        public:
            DefaultVrf();
            ~DefaultVrf();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;



        class AddressFamily : public Entity
        {
            public:
                AddressFamily();
                ~AddressFamily();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;



            class Vrfipv4 : public Entity
            {
                public:
                    Vrfipv4();
                    ~Vrfipv4();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;



                class VrfUnicast : public Entity
                {
                    public:
                        VrfUnicast();
                        ~VrfUnicast();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class Topologies : public Entity
                    {
                        public:
                            Topologies();
                            ~Topologies();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Topology : public Entity
                        {
                            public:
                                Topology();
                                ~Topology();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf topology_name; //type: string

                            class VrfPrefixTopologies : public Entity
                            {
                                public:
                                    VrfPrefixTopologies();
                                    ~VrfPrefixTopologies();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfPrefixTopology : public Entity
                                {
                                    public:
                                        VrfPrefixTopology();
                                        ~VrfPrefixTopology();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32

                                    class VrfRoute : public Entity
                                    {
                                        public:
                                            VrfRoute();
                                            ~VrfRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopTable : public Entity
                                        {
                                            public:
                                                VrfNextHopTable();
                                                ~VrfNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                    class VrfRecurseRoutes : public Entity
                                    {
                                        public:
                                            VrfRecurseRoutes();
                                            ~VrfRecurseRoutes();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfRecurseRoute : public Entity
                                        {
                                            public:
                                                VrfRecurseRoute();
                                                ~VrfRecurseRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf vrf_name; //type: string

                                            class VrfRecursiveNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfRecursiveNextHopTable();
                                                    ~VrfRecursiveNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                    class VrfSegRoute : public Entity
                                    {
                                        public:
                                            VrfSegRoute();
                                            ~VrfSegRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class SegmentRouteNextHopTable : public Entity
                                        {
                                            public:
                                                SegmentRouteNextHopTable();
                                                ~SegmentRouteNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology::VrfPrefixTopologies> vrf_prefix_topologies;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies::Topology> > topology;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies


                    class VrfPrefixes : public Entity
                    {
                        public:
                            VrfPrefixes();
                            ~VrfPrefixes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class VrfPrefix : public Entity
                        {
                            public:
                                VrfPrefix();
                                ~VrfPrefix();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf prefix_length; //type: uint32

                            class VrfRoute : public Entity
                            {
                                public:
                                    VrfRoute();
                                    ~VrfRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfNextHopTable : public Entity
                                {
                                    public:
                                        VrfNextHopTable();
                                        ~VrfNextHopTable();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopInterfaceName : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceName();
                                            ~VrfNextHopInterfaceName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceNameNextHopAddress();
                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                    class VrfNextHopNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddress();
                                            ~VrfNextHopNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddressExplicitPathName();
                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                    class VrfNextHopExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopExplicitPathName();
                                            ~VrfNextHopExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute


                            class VrfRecurseRoutes : public Entity
                            {
                                public:
                                    VrfRecurseRoutes();
                                    ~VrfRecurseRoutes();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfRecurseRoute : public Entity
                                {
                                    public:
                                        VrfRecurseRoute();
                                        ~VrfRecurseRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf vrf_name; //type: string

                                    class VrfRecursiveNextHopTable : public Entity
                                    {
                                        public:
                                            VrfRecursiveNextHopTable();
                                            ~VrfRecursiveNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes


                            class VrfSegRoute : public Entity
                            {
                                public:
                                    VrfSegRoute();
                                    ~VrfSegRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class SegmentRouteNextHopTable : public Entity
                                {
                                    public:
                                        SegmentRouteNextHopTable();
                                        ~SegmentRouteNextHopTable();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopInterfaceName : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceName();
                                            ~VrfNextHopInterfaceName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceNameNextHopAddress();
                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                    class VrfNextHopNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddress();
                                            ~VrfNextHopNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddressExplicitPathName();
                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                    class VrfNextHopExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopExplicitPathName();
                                            ~VrfNextHopExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes> vrf_recurse_routes;
                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute> vrf_route;
                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute> vrf_seg_route;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes::VrfPrefix> > vrf_prefix;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes


                    class DefaultTopology : public Entity
                    {
                        public:
                            DefaultTopology();
                            ~DefaultTopology();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class VrfPrefixTopologies : public Entity
                        {
                            public:
                                VrfPrefixTopologies();
                                ~VrfPrefixTopologies();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefixTopology : public Entity
                            {
                                public:
                                    VrfPrefixTopology();
                                    ~VrfPrefixTopology();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32

                                class VrfRoute : public Entity
                                {
                                    public:
                                        VrfRoute();
                                        ~VrfRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopTable : public Entity
                                    {
                                        public:
                                            VrfNextHopTable();
                                            ~VrfNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                class VrfRecurseRoutes : public Entity
                                {
                                    public:
                                        VrfRecurseRoutes();
                                        ~VrfRecurseRoutes();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfRecurseRoute : public Entity
                                    {
                                        public:
                                            VrfRecurseRoute();
                                            ~VrfRecurseRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf vrf_name; //type: string

                                        class VrfRecursiveNextHopTable : public Entity
                                        {
                                            public:
                                                VrfRecursiveNextHopTable();
                                                ~VrfRecursiveNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                class VrfSegRoute : public Entity
                                {
                                    public:
                                        VrfSegRoute();
                                        ~VrfSegRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class SegmentRouteNextHopTable : public Entity
                                    {
                                        public:
                                            SegmentRouteNextHopTable();
                                            ~SegmentRouteNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies


                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology::VrfPrefixTopologies> vrf_prefix_topologies;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology


                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::DefaultTopology> default_topology;
                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::Topologies> topologies;
                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast::VrfPrefixes> vrf_prefixes;


                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast


                class VrfMulticast : public Entity
                {
                    public:
                        VrfMulticast();
                        ~VrfMulticast();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class Topologies : public Entity
                    {
                        public:
                            Topologies();
                            ~Topologies();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Topology : public Entity
                        {
                            public:
                                Topology();
                                ~Topology();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf topology_name; //type: string

                            class VrfPrefixTopologies : public Entity
                            {
                                public:
                                    VrfPrefixTopologies();
                                    ~VrfPrefixTopologies();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfPrefixTopology : public Entity
                                {
                                    public:
                                        VrfPrefixTopology();
                                        ~VrfPrefixTopology();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32

                                    class VrfRoute : public Entity
                                    {
                                        public:
                                            VrfRoute();
                                            ~VrfRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopTable : public Entity
                                        {
                                            public:
                                                VrfNextHopTable();
                                                ~VrfNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                    class VrfRecurseRoutes : public Entity
                                    {
                                        public:
                                            VrfRecurseRoutes();
                                            ~VrfRecurseRoutes();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfRecurseRoute : public Entity
                                        {
                                            public:
                                                VrfRecurseRoute();
                                                ~VrfRecurseRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf vrf_name; //type: string

                                            class VrfRecursiveNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfRecursiveNextHopTable();
                                                    ~VrfRecursiveNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                    class VrfSegRoute : public Entity
                                    {
                                        public:
                                            VrfSegRoute();
                                            ~VrfSegRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class SegmentRouteNextHopTable : public Entity
                                        {
                                            public:
                                                SegmentRouteNextHopTable();
                                                ~SegmentRouteNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology::VrfPrefixTopologies> vrf_prefix_topologies;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies::Topology> > topology;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies


                    class VrfPrefixes : public Entity
                    {
                        public:
                            VrfPrefixes();
                            ~VrfPrefixes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class VrfPrefix : public Entity
                        {
                            public:
                                VrfPrefix();
                                ~VrfPrefix();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf prefix_length; //type: uint32

                            class VrfRoute : public Entity
                            {
                                public:
                                    VrfRoute();
                                    ~VrfRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfNextHopTable : public Entity
                                {
                                    public:
                                        VrfNextHopTable();
                                        ~VrfNextHopTable();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopInterfaceName : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceName();
                                            ~VrfNextHopInterfaceName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceNameNextHopAddress();
                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                    class VrfNextHopNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddress();
                                            ~VrfNextHopNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddressExplicitPathName();
                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                    class VrfNextHopExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopExplicitPathName();
                                            ~VrfNextHopExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute


                            class VrfRecurseRoutes : public Entity
                            {
                                public:
                                    VrfRecurseRoutes();
                                    ~VrfRecurseRoutes();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfRecurseRoute : public Entity
                                {
                                    public:
                                        VrfRecurseRoute();
                                        ~VrfRecurseRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf vrf_name; //type: string

                                    class VrfRecursiveNextHopTable : public Entity
                                    {
                                        public:
                                            VrfRecursiveNextHopTable();
                                            ~VrfRecursiveNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes


                            class VrfSegRoute : public Entity
                            {
                                public:
                                    VrfSegRoute();
                                    ~VrfSegRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class SegmentRouteNextHopTable : public Entity
                                {
                                    public:
                                        SegmentRouteNextHopTable();
                                        ~SegmentRouteNextHopTable();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopInterfaceName : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceName();
                                            ~VrfNextHopInterfaceName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceNameNextHopAddress();
                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                    class VrfNextHopNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddress();
                                            ~VrfNextHopNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddressExplicitPathName();
                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                    class VrfNextHopExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopExplicitPathName();
                                            ~VrfNextHopExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes> vrf_recurse_routes;
                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute> vrf_route;
                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute> vrf_seg_route;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes::VrfPrefix> > vrf_prefix;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes


                    class DefaultTopology : public Entity
                    {
                        public:
                            DefaultTopology();
                            ~DefaultTopology();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class VrfPrefixTopologies : public Entity
                        {
                            public:
                                VrfPrefixTopologies();
                                ~VrfPrefixTopologies();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefixTopology : public Entity
                            {
                                public:
                                    VrfPrefixTopology();
                                    ~VrfPrefixTopology();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32

                                class VrfRoute : public Entity
                                {
                                    public:
                                        VrfRoute();
                                        ~VrfRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopTable : public Entity
                                    {
                                        public:
                                            VrfNextHopTable();
                                            ~VrfNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                class VrfRecurseRoutes : public Entity
                                {
                                    public:
                                        VrfRecurseRoutes();
                                        ~VrfRecurseRoutes();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfRecurseRoute : public Entity
                                    {
                                        public:
                                            VrfRecurseRoute();
                                            ~VrfRecurseRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf vrf_name; //type: string

                                        class VrfRecursiveNextHopTable : public Entity
                                        {
                                            public:
                                                VrfRecursiveNextHopTable();
                                                ~VrfRecursiveNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                class VrfSegRoute : public Entity
                                {
                                    public:
                                        VrfSegRoute();
                                        ~VrfSegRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class SegmentRouteNextHopTable : public Entity
                                    {
                                        public:
                                            SegmentRouteNextHopTable();
                                            ~SegmentRouteNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies


                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology::VrfPrefixTopologies> vrf_prefix_topologies;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology


                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::DefaultTopology> default_topology;
                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::Topologies> topologies;
                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast::VrfPrefixes> vrf_prefixes;


                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast


                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfMulticast> vrf_multicast;
                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4::VrfUnicast> vrf_unicast;


            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv4


            class Vrfipv6 : public Entity
            {
                public:
                    Vrfipv6();
                    ~Vrfipv6();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;



                class VrfUnicast : public Entity
                {
                    public:
                        VrfUnicast();
                        ~VrfUnicast();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class Topologies : public Entity
                    {
                        public:
                            Topologies();
                            ~Topologies();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Topology : public Entity
                        {
                            public:
                                Topology();
                                ~Topology();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf topology_name; //type: string

                            class VrfPrefixTopologies : public Entity
                            {
                                public:
                                    VrfPrefixTopologies();
                                    ~VrfPrefixTopologies();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfPrefixTopology : public Entity
                                {
                                    public:
                                        VrfPrefixTopology();
                                        ~VrfPrefixTopology();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32

                                    class VrfRoute : public Entity
                                    {
                                        public:
                                            VrfRoute();
                                            ~VrfRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopTable : public Entity
                                        {
                                            public:
                                                VrfNextHopTable();
                                                ~VrfNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                    class VrfRecurseRoutes : public Entity
                                    {
                                        public:
                                            VrfRecurseRoutes();
                                            ~VrfRecurseRoutes();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfRecurseRoute : public Entity
                                        {
                                            public:
                                                VrfRecurseRoute();
                                                ~VrfRecurseRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf vrf_name; //type: string

                                            class VrfRecursiveNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfRecursiveNextHopTable();
                                                    ~VrfRecursiveNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                    class VrfSegRoute : public Entity
                                    {
                                        public:
                                            VrfSegRoute();
                                            ~VrfSegRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class SegmentRouteNextHopTable : public Entity
                                        {
                                            public:
                                                SegmentRouteNextHopTable();
                                                ~SegmentRouteNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology::VrfPrefixTopologies> vrf_prefix_topologies;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies::Topology> > topology;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies


                    class VrfPrefixes : public Entity
                    {
                        public:
                            VrfPrefixes();
                            ~VrfPrefixes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class VrfPrefix : public Entity
                        {
                            public:
                                VrfPrefix();
                                ~VrfPrefix();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf prefix_length; //type: uint32

                            class VrfRoute : public Entity
                            {
                                public:
                                    VrfRoute();
                                    ~VrfRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfNextHopTable : public Entity
                                {
                                    public:
                                        VrfNextHopTable();
                                        ~VrfNextHopTable();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopInterfaceName : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceName();
                                            ~VrfNextHopInterfaceName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceNameNextHopAddress();
                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                    class VrfNextHopNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddress();
                                            ~VrfNextHopNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddressExplicitPathName();
                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                    class VrfNextHopExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopExplicitPathName();
                                            ~VrfNextHopExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute


                            class VrfRecurseRoutes : public Entity
                            {
                                public:
                                    VrfRecurseRoutes();
                                    ~VrfRecurseRoutes();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfRecurseRoute : public Entity
                                {
                                    public:
                                        VrfRecurseRoute();
                                        ~VrfRecurseRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf vrf_name; //type: string

                                    class VrfRecursiveNextHopTable : public Entity
                                    {
                                        public:
                                            VrfRecursiveNextHopTable();
                                            ~VrfRecursiveNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes


                            class VrfSegRoute : public Entity
                            {
                                public:
                                    VrfSegRoute();
                                    ~VrfSegRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class SegmentRouteNextHopTable : public Entity
                                {
                                    public:
                                        SegmentRouteNextHopTable();
                                        ~SegmentRouteNextHopTable();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopInterfaceName : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceName();
                                            ~VrfNextHopInterfaceName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceNameNextHopAddress();
                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                    class VrfNextHopNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddress();
                                            ~VrfNextHopNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddressExplicitPathName();
                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                    class VrfNextHopExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopExplicitPathName();
                                            ~VrfNextHopExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes> vrf_recurse_routes;
                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfRoute> vrf_route;
                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix::VrfSegRoute> vrf_seg_route;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes::VrfPrefix> > vrf_prefix;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes


                    class DefaultTopology : public Entity
                    {
                        public:
                            DefaultTopology();
                            ~DefaultTopology();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class VrfPrefixTopologies : public Entity
                        {
                            public:
                                VrfPrefixTopologies();
                                ~VrfPrefixTopologies();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefixTopology : public Entity
                            {
                                public:
                                    VrfPrefixTopology();
                                    ~VrfPrefixTopology();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32

                                class VrfRoute : public Entity
                                {
                                    public:
                                        VrfRoute();
                                        ~VrfRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopTable : public Entity
                                    {
                                        public:
                                            VrfNextHopTable();
                                            ~VrfNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                class VrfRecurseRoutes : public Entity
                                {
                                    public:
                                        VrfRecurseRoutes();
                                        ~VrfRecurseRoutes();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfRecurseRoute : public Entity
                                    {
                                        public:
                                            VrfRecurseRoute();
                                            ~VrfRecurseRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf vrf_name; //type: string

                                        class VrfRecursiveNextHopTable : public Entity
                                        {
                                            public:
                                                VrfRecursiveNextHopTable();
                                                ~VrfRecursiveNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                class VrfSegRoute : public Entity
                                {
                                    public:
                                        VrfSegRoute();
                                        ~VrfSegRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class SegmentRouteNextHopTable : public Entity
                                    {
                                        public:
                                            SegmentRouteNextHopTable();
                                            ~SegmentRouteNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies


                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology::VrfPrefixTopologies> vrf_prefix_topologies;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology


                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::DefaultTopology> default_topology;
                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::Topologies> topologies;
                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast::VrfPrefixes> vrf_prefixes;


                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast


                class VrfMulticast : public Entity
                {
                    public:
                        VrfMulticast();
                        ~VrfMulticast();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class Topologies : public Entity
                    {
                        public:
                            Topologies();
                            ~Topologies();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Topology : public Entity
                        {
                            public:
                                Topology();
                                ~Topology();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf topology_name; //type: string

                            class VrfPrefixTopologies : public Entity
                            {
                                public:
                                    VrfPrefixTopologies();
                                    ~VrfPrefixTopologies();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfPrefixTopology : public Entity
                                {
                                    public:
                                        VrfPrefixTopology();
                                        ~VrfPrefixTopology();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32

                                    class VrfRoute : public Entity
                                    {
                                        public:
                                            VrfRoute();
                                            ~VrfRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopTable : public Entity
                                        {
                                            public:
                                                VrfNextHopTable();
                                                ~VrfNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                    class VrfRecurseRoutes : public Entity
                                    {
                                        public:
                                            VrfRecurseRoutes();
                                            ~VrfRecurseRoutes();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfRecurseRoute : public Entity
                                        {
                                            public:
                                                VrfRecurseRoute();
                                                ~VrfRecurseRoute();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf vrf_name; //type: string

                                            class VrfRecursiveNextHopTable : public Entity
                                            {
                                                public:
                                                    VrfRecursiveNextHopTable();
                                                    ~VrfRecursiveNextHopTable();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class VrfNextHopInterfaceName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceName();
                                                        ~VrfNextHopInterfaceName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                                class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopInterfaceNameNextHopAddress();
                                                        ~VrfNextHopInterfaceNameNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf interface_name; //type: string
                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                                class VrfNextHopNextHopAddress : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddress();
                                                        ~VrfNextHopNextHopAddress();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                                class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopNextHopAddressExplicitPathName();
                                                        ~VrfNextHopNextHopAddressExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf next_hop_address; //type: string
                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                                class VrfNextHopExplicitPathName : public Entity
                                                {
                                                    public:
                                                        VrfNextHopExplicitPathName();
                                                        ~VrfNextHopExplicitPathName();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf explicit_path_name; //type: string
                                                        YLeaf bfd_fast_detect; //type: boolean
                                                        YLeaf minimum_interval; //type: uint32
                                                        YLeaf detect_multiplier; //type: uint32
                                                        YLeaf metric; //type: uint32
                                                        YLeaf tag; //type: uint32
                                                        YLeaf permanent; //type: boolean
                                                        YLeaf vrf_lable; //type: uint32
                                                        YLeaf tunnel_id; //type: uint32
                                                        YLeaf object_name; //type: string
                                                        YLeaf description; //type: string
                                                        YLeaf load_metric; //type: uint32



                                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                    class VrfSegRoute : public Entity
                                    {
                                        public:
                                            VrfSegRoute();
                                            ~VrfSegRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class SegmentRouteNextHopTable : public Entity
                                        {
                                            public:
                                                SegmentRouteNextHopTable();
                                                ~SegmentRouteNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology::VrfPrefixTopologies> vrf_prefix_topologies;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies::Topology> > topology;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies


                    class VrfPrefixes : public Entity
                    {
                        public:
                            VrfPrefixes();
                            ~VrfPrefixes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class VrfPrefix : public Entity
                        {
                            public:
                                VrfPrefix();
                                ~VrfPrefix();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf prefix_length; //type: uint32

                            class VrfRoute : public Entity
                            {
                                public:
                                    VrfRoute();
                                    ~VrfRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfNextHopTable : public Entity
                                {
                                    public:
                                        VrfNextHopTable();
                                        ~VrfNextHopTable();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopInterfaceName : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceName();
                                            ~VrfNextHopInterfaceName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceNameNextHopAddress();
                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                    class VrfNextHopNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddress();
                                            ~VrfNextHopNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddressExplicitPathName();
                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                    class VrfNextHopExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopExplicitPathName();
                                            ~VrfNextHopExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute


                            class VrfRecurseRoutes : public Entity
                            {
                                public:
                                    VrfRecurseRoutes();
                                    ~VrfRecurseRoutes();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class VrfRecurseRoute : public Entity
                                {
                                    public:
                                        VrfRecurseRoute();
                                        ~VrfRecurseRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf vrf_name; //type: string

                                    class VrfRecursiveNextHopTable : public Entity
                                    {
                                        public:
                                            VrfRecursiveNextHopTable();
                                            ~VrfRecursiveNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes


                            class VrfSegRoute : public Entity
                            {
                                public:
                                    VrfSegRoute();
                                    ~VrfSegRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class SegmentRouteNextHopTable : public Entity
                                {
                                    public:
                                        SegmentRouteNextHopTable();
                                        ~SegmentRouteNextHopTable();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopInterfaceName : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceName();
                                            ~VrfNextHopInterfaceName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                    class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopInterfaceNameNextHopAddress();
                                            ~VrfNextHopInterfaceNameNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_name; //type: string
                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                    class VrfNextHopNextHopAddress : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddress();
                                            ~VrfNextHopNextHopAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                    class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopNextHopAddressExplicitPathName();
                                            ~VrfNextHopNextHopAddressExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf next_hop_address; //type: string
                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                    class VrfNextHopExplicitPathName : public Entity
                                    {
                                        public:
                                            VrfNextHopExplicitPathName();
                                            ~VrfNextHopExplicitPathName();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf explicit_path_name; //type: string
                                            YLeaf bfd_fast_detect; //type: boolean
                                            YLeaf minimum_interval; //type: uint32
                                            YLeaf detect_multiplier; //type: uint32
                                            YLeaf metric; //type: uint32
                                            YLeaf tag; //type: uint32
                                            YLeaf permanent; //type: boolean
                                            YLeaf vrf_lable; //type: uint32
                                            YLeaf tunnel_id; //type: uint32
                                            YLeaf object_name; //type: string
                                            YLeaf description; //type: string
                                            YLeaf load_metric; //type: uint32



                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute


                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRecurseRoutes> vrf_recurse_routes;
                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfRoute> vrf_route;
                                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix::VrfSegRoute> vrf_seg_route;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes::VrfPrefix> > vrf_prefix;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes


                    class DefaultTopology : public Entity
                    {
                        public:
                            DefaultTopology();
                            ~DefaultTopology();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class VrfPrefixTopologies : public Entity
                        {
                            public:
                                VrfPrefixTopologies();
                                ~VrfPrefixTopologies();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VrfPrefixTopology : public Entity
                            {
                                public:
                                    VrfPrefixTopology();
                                    ~VrfPrefixTopology();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32

                                class VrfRoute : public Entity
                                {
                                    public:
                                        VrfRoute();
                                        ~VrfRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfNextHopTable : public Entity
                                    {
                                        public:
                                            VrfNextHopTable();
                                            ~VrfNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute::VrfNextHopTable> vrf_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute


                                class VrfRecurseRoutes : public Entity
                                {
                                    public:
                                        VrfRecurseRoutes();
                                        ~VrfRecurseRoutes();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class VrfRecurseRoute : public Entity
                                    {
                                        public:
                                            VrfRecurseRoute();
                                            ~VrfRecurseRoute();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf vrf_name; //type: string

                                        class VrfRecursiveNextHopTable : public Entity
                                        {
                                            public:
                                                VrfRecursiveNextHopTable();
                                                ~VrfRecursiveNextHopTable();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class VrfNextHopInterfaceName : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceName();
                                                    ~VrfNextHopInterfaceName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName


                                            class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopInterfaceNameNextHopAddress();
                                                    ~VrfNextHopInterfaceNameNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf interface_name; //type: string
                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                            class VrfNextHopNextHopAddress : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddress();
                                                    ~VrfNextHopNextHopAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress


                                            class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopNextHopAddressExplicitPathName();
                                                    ~VrfNextHopNextHopAddressExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf next_hop_address; //type: string
                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                            class VrfNextHopExplicitPathName : public Entity
                                            {
                                                public:
                                                    VrfNextHopExplicitPathName();
                                                    ~VrfNextHopExplicitPathName();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf explicit_path_name; //type: string
                                                    YLeaf bfd_fast_detect; //type: boolean
                                                    YLeaf minimum_interval; //type: uint32
                                                    YLeaf detect_multiplier; //type: uint32
                                                    YLeaf metric; //type: uint32
                                                    YLeaf tag; //type: uint32
                                                    YLeaf permanent; //type: boolean
                                                    YLeaf vrf_lable; //type: uint32
                                                    YLeaf tunnel_id; //type: uint32
                                                    YLeaf object_name; //type: string
                                                    YLeaf description; //type: string
                                                    YLeaf load_metric; //type: uint32



                                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable


                                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute::VrfRecursiveNextHopTable> vrf_recursive_next_hop_table;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes::VrfRecurseRoute> > vrf_recurse_route;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes


                                class VrfSegRoute : public Entity
                                {
                                    public:
                                        VrfSegRoute();
                                        ~VrfSegRoute();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class SegmentRouteNextHopTable : public Entity
                                    {
                                        public:
                                            SegmentRouteNextHopTable();
                                            ~SegmentRouteNextHopTable();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class VrfNextHopInterfaceName : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceName();
                                                ~VrfNextHopInterfaceName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName


                                        class VrfNextHopInterfaceNameNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopInterfaceNameNextHopAddress();
                                                ~VrfNextHopInterfaceNameNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf interface_name; //type: string
                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress


                                        class VrfNextHopNextHopAddress : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddress();
                                                ~VrfNextHopNextHopAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress


                                        class VrfNextHopNextHopAddressExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopNextHopAddressExplicitPathName();
                                                ~VrfNextHopNextHopAddressExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf next_hop_address; //type: string
                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName


                                        class VrfNextHopExplicitPathName : public Entity
                                        {
                                            public:
                                                VrfNextHopExplicitPathName();
                                                ~VrfNextHopExplicitPathName();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf explicit_path_name; //type: string
                                                YLeaf bfd_fast_detect; //type: boolean
                                                YLeaf minimum_interval; //type: uint32
                                                YLeaf detect_multiplier; //type: uint32
                                                YLeaf metric; //type: uint32
                                                YLeaf tag; //type: uint32
                                                YLeaf permanent; //type: boolean
                                                YLeaf vrf_lable; //type: uint32
                                                YLeaf tunnel_id; //type: uint32
                                                YLeaf object_name; //type: string
                                                YLeaf description; //type: string
                                                YLeaf load_metric; //type: uint32



                                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopExplicitPathName> > vrf_next_hop_explicit_path_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceName> > vrf_next_hop_interface_name;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopInterfaceNameNextHopAddress> > vrf_next_hop_interface_name_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddress> > vrf_next_hop_next_hop_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable::VrfNextHopNextHopAddressExplicitPathName> > vrf_next_hop_next_hop_address_explicit_path_name;


                                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable


                                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute::SegmentRouteNextHopTable> segment_route_next_hop_table;


                                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute


                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRecurseRoutes> vrf_recurse_routes;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfRoute> vrf_route;
                                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology::VrfSegRoute> vrf_seg_route;


                            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies::VrfPrefixTopology> > vrf_prefix_topology;


                        }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies


                            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology::VrfPrefixTopologies> vrf_prefix_topologies;


                    }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology


                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::DefaultTopology> default_topology;
                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::Topologies> topologies;
                        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast::VrfPrefixes> vrf_prefixes;


                }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast


                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfMulticast> vrf_multicast;
                    std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6::VrfUnicast> vrf_unicast;


            }; // RouterStatic::DefaultVrf::AddressFamily::Vrfipv6


                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv4> vrfipv4;
                std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily::Vrfipv6> vrfipv6;


        }; // RouterStatic::DefaultVrf::AddressFamily


            std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf::AddressFamily> address_family;


    }; // RouterStatic::DefaultVrf


    class MaximumRoutes : public Entity
    {
        public:
            MaximumRoutes();
            ~MaximumRoutes();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


            YLeaf ipv6_routes; //type: uint32
            YLeaf ipv4_routes; //type: uint32



    }; // RouterStatic::MaximumRoutes


        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::DefaultVrf> default_vrf;
        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::MaximumRoutes> maximum_routes;
        std::unique_ptr<Cisco_IOS_XR_ip_static_cfg::RouterStatic::Vrfs> vrfs;


}; // RouterStatic



}
}

#endif /* _CISCO_IOS_XR_IP_STATIC_CFG_ */

