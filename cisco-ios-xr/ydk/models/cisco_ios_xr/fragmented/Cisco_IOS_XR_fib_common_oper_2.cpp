
#include <sstream>
#include <iostream>
#include <ydk/entity_util.hpp>
#include "bundle_info.hpp"
#include "generated_entity_lookup.hpp"
#include "Cisco_IOS_XR_fib_common_oper_2.hpp"
#include "Cisco_IOS_XR_fib_common_oper_3.hpp"

using namespace ydk;

namespace cisco_ios_xr {
namespace Cisco_IOS_XR_fib_common_oper {

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-local-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgresses()
{

    yang_name = "nh-info-remote-detail-hardware-egresses"; yang_parent_name = "nh-info-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::~NhInfoRemoteDetailHardwareEgresses()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::has_data() const
{
    for (std::size_t index=0; index<nh_info_remote_detail_hardware_egress.size(); index++)
    {
        if(nh_info_remote_detail_hardware_egress[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::has_operation() const
{
    for (std::size_t index=0; index<nh_info_remote_detail_hardware_egress.size(); index++)
    {
        if(nh_info_remote_detail_hardware_egress[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-detail-hardware-egresses";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-remote-detail-hardware-egress")
    {
        for(auto const & c : nh_info_remote_detail_hardware_egress)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress>();
        c->parent = this;
        nh_info_remote_detail_hardware_egress.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_remote_detail_hardware_egress)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-remote-detail-hardware-egress")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoRemoteDetailHardwareEgress()
    :
    nh_address{YType::str, "nh-address"},
    nh_interface_name{YType::str, "nh-interface-name"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-remote-detail-hardware-egress"; yang_parent_name = "nh-info-remote-detail-hardware-egresses"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::~NhInfoRemoteDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::has_data() const
{
    return nh_address.is_set
	|| nh_interface_name.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "nh-address" || name == "nh-interface-name" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-remote-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-remote-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress()
    :
    nh_info_special_discard_detail_hardware_egress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress>())
	,nh_info_special_drop_detail_hardware_egress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress>())
	,nh_info_special_null_detail_hardware_egress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress>())
	,nh_info_special_punt_detail_hardware_egress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress>())
{
    nh_info_special_discard_detail_hardware_egress->parent = this;
    nh_info_special_drop_detail_hardware_egress->parent = this;
    nh_info_special_null_detail_hardware_egress->parent = this;
    nh_info_special_punt_detail_hardware_egress->parent = this;

    yang_name = "nh-info-special-detail-hardware-egress"; yang_parent_name = "nh-info-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::~NhInfoSpecialDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::has_data() const
{
    return (nh_info_special_discard_detail_hardware_egress !=  nullptr && nh_info_special_discard_detail_hardware_egress->has_data())
	|| (nh_info_special_drop_detail_hardware_egress !=  nullptr && nh_info_special_drop_detail_hardware_egress->has_data())
	|| (nh_info_special_null_detail_hardware_egress !=  nullptr && nh_info_special_null_detail_hardware_egress->has_data())
	|| (nh_info_special_punt_detail_hardware_egress !=  nullptr && nh_info_special_punt_detail_hardware_egress->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_special_discard_detail_hardware_egress !=  nullptr && nh_info_special_discard_detail_hardware_egress->has_operation())
	|| (nh_info_special_drop_detail_hardware_egress !=  nullptr && nh_info_special_drop_detail_hardware_egress->has_operation())
	|| (nh_info_special_null_detail_hardware_egress !=  nullptr && nh_info_special_null_detail_hardware_egress->has_operation())
	|| (nh_info_special_punt_detail_hardware_egress !=  nullptr && nh_info_special_punt_detail_hardware_egress->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-special-discard-detail-hardware-egress")
    {
        if(nh_info_special_discard_detail_hardware_egress == nullptr)
        {
            nh_info_special_discard_detail_hardware_egress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress>();
        }
        return nh_info_special_discard_detail_hardware_egress;
    }

    if(child_yang_name == "nh-info-special-drop-detail-hardware-egress")
    {
        if(nh_info_special_drop_detail_hardware_egress == nullptr)
        {
            nh_info_special_drop_detail_hardware_egress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress>();
        }
        return nh_info_special_drop_detail_hardware_egress;
    }

    if(child_yang_name == "nh-info-special-null-detail-hardware-egress")
    {
        if(nh_info_special_null_detail_hardware_egress == nullptr)
        {
            nh_info_special_null_detail_hardware_egress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress>();
        }
        return nh_info_special_null_detail_hardware_egress;
    }

    if(child_yang_name == "nh-info-special-punt-detail-hardware-egress")
    {
        if(nh_info_special_punt_detail_hardware_egress == nullptr)
        {
            nh_info_special_punt_detail_hardware_egress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress>();
        }
        return nh_info_special_punt_detail_hardware_egress;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_special_discard_detail_hardware_egress != nullptr)
    {
        children["nh-info-special-discard-detail-hardware-egress"] = nh_info_special_discard_detail_hardware_egress;
    }

    if(nh_info_special_drop_detail_hardware_egress != nullptr)
    {
        children["nh-info-special-drop-detail-hardware-egress"] = nh_info_special_drop_detail_hardware_egress;
    }

    if(nh_info_special_null_detail_hardware_egress != nullptr)
    {
        children["nh-info-special-null-detail-hardware-egress"] = nh_info_special_null_detail_hardware_egress;
    }

    if(nh_info_special_punt_detail_hardware_egress != nullptr)
    {
        children["nh-info-special-punt-detail-hardware-egress"] = nh_info_special_punt_detail_hardware_egress;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-special-discard-detail-hardware-egress" || name == "nh-info-special-drop-detail-hardware-egress" || name == "nh-info-special-null-detail-hardware-egress" || name == "nh-info-special-punt-detail-hardware-egress")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-discard-detail-hardware-egress"; yang_parent_name = "nh-info-special-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::~NhInfoSpecialDiscardDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-discard-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-discard-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-discard-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-drop-detail-hardware-egress"; yang_parent_name = "nh-info-special-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::~NhInfoSpecialDropDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-drop-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-drop-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-drop-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-null-detail-hardware-egress"; yang_parent_name = "nh-info-special-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::~NhInfoSpecialNullDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-null-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-null-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-null-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-punt-detail-hardware-egress"; yang_parent_name = "nh-info-special-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::~NhInfoSpecialPuntDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-punt-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-punt-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-punt-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoDetailHardwareIngress()
    :
    nh_info_local_detail_hardware_ingresses(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses>())
	,nh_info_remote_detail_hardware_ingresses(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses>())
	,nh_info_special_detail_hardware_ingress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress>())
{
    nh_info_local_detail_hardware_ingresses->parent = this;
    nh_info_remote_detail_hardware_ingresses->parent = this;
    nh_info_special_detail_hardware_ingress->parent = this;

    yang_name = "nh-info-detail-hardware-ingress"; yang_parent_name = "vrf"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::~NhInfoDetailHardwareIngress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::has_data() const
{
    return (nh_info_local_detail_hardware_ingresses !=  nullptr && nh_info_local_detail_hardware_ingresses->has_data())
	|| (nh_info_remote_detail_hardware_ingresses !=  nullptr && nh_info_remote_detail_hardware_ingresses->has_data())
	|| (nh_info_special_detail_hardware_ingress !=  nullptr && nh_info_special_detail_hardware_ingress->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_local_detail_hardware_ingresses !=  nullptr && nh_info_local_detail_hardware_ingresses->has_operation())
	|| (nh_info_remote_detail_hardware_ingresses !=  nullptr && nh_info_remote_detail_hardware_ingresses->has_operation())
	|| (nh_info_special_detail_hardware_ingress !=  nullptr && nh_info_special_detail_hardware_ingress->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-detail-hardware-ingress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-local-detail-hardware-ingresses")
    {
        if(nh_info_local_detail_hardware_ingresses == nullptr)
        {
            nh_info_local_detail_hardware_ingresses = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses>();
        }
        return nh_info_local_detail_hardware_ingresses;
    }

    if(child_yang_name == "nh-info-remote-detail-hardware-ingresses")
    {
        if(nh_info_remote_detail_hardware_ingresses == nullptr)
        {
            nh_info_remote_detail_hardware_ingresses = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses>();
        }
        return nh_info_remote_detail_hardware_ingresses;
    }

    if(child_yang_name == "nh-info-special-detail-hardware-ingress")
    {
        if(nh_info_special_detail_hardware_ingress == nullptr)
        {
            nh_info_special_detail_hardware_ingress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress>();
        }
        return nh_info_special_detail_hardware_ingress;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_local_detail_hardware_ingresses != nullptr)
    {
        children["nh-info-local-detail-hardware-ingresses"] = nh_info_local_detail_hardware_ingresses;
    }

    if(nh_info_remote_detail_hardware_ingresses != nullptr)
    {
        children["nh-info-remote-detail-hardware-ingresses"] = nh_info_remote_detail_hardware_ingresses;
    }

    if(nh_info_special_detail_hardware_ingress != nullptr)
    {
        children["nh-info-special-detail-hardware-ingress"] = nh_info_special_detail_hardware_ingress;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-local-detail-hardware-ingresses" || name == "nh-info-remote-detail-hardware-ingresses" || name == "nh-info-special-detail-hardware-ingress")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngresses()
{

    yang_name = "nh-info-local-detail-hardware-ingresses"; yang_parent_name = "nh-info-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::~NhInfoLocalDetailHardwareIngresses()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::has_data() const
{
    for (std::size_t index=0; index<nh_info_local_detail_hardware_ingress.size(); index++)
    {
        if(nh_info_local_detail_hardware_ingress[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::has_operation() const
{
    for (std::size_t index=0; index<nh_info_local_detail_hardware_ingress.size(); index++)
    {
        if(nh_info_local_detail_hardware_ingress[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-detail-hardware-ingresses";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-local-detail-hardware-ingress")
    {
        for(auto const & c : nh_info_local_detail_hardware_ingress)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress>();
        c->parent = this;
        nh_info_local_detail_hardware_ingress.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_local_detail_hardware_ingress)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-local-detail-hardware-ingress")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoLocalDetailHardwareIngress()
    :
    nh_address{YType::str, "nh-address"},
    nh_interface_name{YType::str, "nh-interface-name"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-local-detail-hardware-ingress"; yang_parent_name = "nh-info-local-detail-hardware-ingresses"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::~NhInfoLocalDetailHardwareIngress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::has_data() const
{
    return nh_address.is_set
	|| nh_interface_name.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-detail-hardware-ingress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "nh-address" || name == "nh-interface-name" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-local-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-local-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoLocalDetailHardwareIngresses::NhInfoLocalDetailHardwareIngress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngresses()
{

    yang_name = "nh-info-remote-detail-hardware-ingresses"; yang_parent_name = "nh-info-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::~NhInfoRemoteDetailHardwareIngresses()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::has_data() const
{
    for (std::size_t index=0; index<nh_info_remote_detail_hardware_ingress.size(); index++)
    {
        if(nh_info_remote_detail_hardware_ingress[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::has_operation() const
{
    for (std::size_t index=0; index<nh_info_remote_detail_hardware_ingress.size(); index++)
    {
        if(nh_info_remote_detail_hardware_ingress[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-detail-hardware-ingresses";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-remote-detail-hardware-ingress")
    {
        for(auto const & c : nh_info_remote_detail_hardware_ingress)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress>();
        c->parent = this;
        nh_info_remote_detail_hardware_ingress.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_remote_detail_hardware_ingress)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-remote-detail-hardware-ingress")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoRemoteDetailHardwareIngress()
    :
    nh_address{YType::str, "nh-address"},
    nh_interface_name{YType::str, "nh-interface-name"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-remote-detail-hardware-ingress"; yang_parent_name = "nh-info-remote-detail-hardware-ingresses"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::~NhInfoRemoteDetailHardwareIngress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::has_data() const
{
    return nh_address.is_set
	|| nh_interface_name.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-detail-hardware-ingress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "nh-address" || name == "nh-interface-name" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-remote-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-remote-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoRemoteDetailHardwareIngresses::NhInfoRemoteDetailHardwareIngress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress()
    :
    nh_info_special_discard_detail_hardware_ingress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress>())
	,nh_info_special_drop_detail_hardware_ingress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress>())
	,nh_info_special_null_detail_hardware_ingress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress>())
	,nh_info_special_punt_detail_hardware_ingress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress>())
{
    nh_info_special_discard_detail_hardware_ingress->parent = this;
    nh_info_special_drop_detail_hardware_ingress->parent = this;
    nh_info_special_null_detail_hardware_ingress->parent = this;
    nh_info_special_punt_detail_hardware_ingress->parent = this;

    yang_name = "nh-info-special-detail-hardware-ingress"; yang_parent_name = "nh-info-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::~NhInfoSpecialDetailHardwareIngress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::has_data() const
{
    return (nh_info_special_discard_detail_hardware_ingress !=  nullptr && nh_info_special_discard_detail_hardware_ingress->has_data())
	|| (nh_info_special_drop_detail_hardware_ingress !=  nullptr && nh_info_special_drop_detail_hardware_ingress->has_data())
	|| (nh_info_special_null_detail_hardware_ingress !=  nullptr && nh_info_special_null_detail_hardware_ingress->has_data())
	|| (nh_info_special_punt_detail_hardware_ingress !=  nullptr && nh_info_special_punt_detail_hardware_ingress->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_special_discard_detail_hardware_ingress !=  nullptr && nh_info_special_discard_detail_hardware_ingress->has_operation())
	|| (nh_info_special_drop_detail_hardware_ingress !=  nullptr && nh_info_special_drop_detail_hardware_ingress->has_operation())
	|| (nh_info_special_null_detail_hardware_ingress !=  nullptr && nh_info_special_null_detail_hardware_ingress->has_operation())
	|| (nh_info_special_punt_detail_hardware_ingress !=  nullptr && nh_info_special_punt_detail_hardware_ingress->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-detail-hardware-ingress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-special-discard-detail-hardware-ingress")
    {
        if(nh_info_special_discard_detail_hardware_ingress == nullptr)
        {
            nh_info_special_discard_detail_hardware_ingress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress>();
        }
        return nh_info_special_discard_detail_hardware_ingress;
    }

    if(child_yang_name == "nh-info-special-drop-detail-hardware-ingress")
    {
        if(nh_info_special_drop_detail_hardware_ingress == nullptr)
        {
            nh_info_special_drop_detail_hardware_ingress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress>();
        }
        return nh_info_special_drop_detail_hardware_ingress;
    }

    if(child_yang_name == "nh-info-special-null-detail-hardware-ingress")
    {
        if(nh_info_special_null_detail_hardware_ingress == nullptr)
        {
            nh_info_special_null_detail_hardware_ingress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress>();
        }
        return nh_info_special_null_detail_hardware_ingress;
    }

    if(child_yang_name == "nh-info-special-punt-detail-hardware-ingress")
    {
        if(nh_info_special_punt_detail_hardware_ingress == nullptr)
        {
            nh_info_special_punt_detail_hardware_ingress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress>();
        }
        return nh_info_special_punt_detail_hardware_ingress;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_special_discard_detail_hardware_ingress != nullptr)
    {
        children["nh-info-special-discard-detail-hardware-ingress"] = nh_info_special_discard_detail_hardware_ingress;
    }

    if(nh_info_special_drop_detail_hardware_ingress != nullptr)
    {
        children["nh-info-special-drop-detail-hardware-ingress"] = nh_info_special_drop_detail_hardware_ingress;
    }

    if(nh_info_special_null_detail_hardware_ingress != nullptr)
    {
        children["nh-info-special-null-detail-hardware-ingress"] = nh_info_special_null_detail_hardware_ingress;
    }

    if(nh_info_special_punt_detail_hardware_ingress != nullptr)
    {
        children["nh-info-special-punt-detail-hardware-ingress"] = nh_info_special_punt_detail_hardware_ingress;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-special-discard-detail-hardware-ingress" || name == "nh-info-special-drop-detail-hardware-ingress" || name == "nh-info-special-null-detail-hardware-ingress" || name == "nh-info-special-punt-detail-hardware-ingress")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-discard-detail-hardware-ingress"; yang_parent_name = "nh-info-special-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::~NhInfoSpecialDiscardDetailHardwareIngress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-discard-detail-hardware-ingress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-discard-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-discard-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-drop-detail-hardware-ingress"; yang_parent_name = "nh-info-special-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::~NhInfoSpecialDropDetailHardwareIngress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-drop-detail-hardware-ingress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-drop-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-drop-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDropDetailHardwareIngress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-null-detail-hardware-ingress"; yang_parent_name = "nh-info-special-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::~NhInfoSpecialNullDetailHardwareIngress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-null-detail-hardware-ingress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-null-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-null-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialNullDetailHardwareIngress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-punt-detail-hardware-ingress"; yang_parent_name = "nh-info-special-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::~NhInfoSpecialPuntDetailHardwareIngress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-punt-detail-hardware-ingress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-punt-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-punt-detail-hardware-ingress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialPuntDetailHardwareIngress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::Summary()
    :
    cef_route_drops{YType::uint32, "cef-route-drops"},
    cef_version_mismatch_route_drops{YType::uint64, "cef-version-mismatch-route-drops"},
    cefl_bl_recycled_routes{YType::uint32, "cefl-bl-recycled-routes"},
    delete_cache_num_entries{YType::uint32, "delete-cache-num-entries"},
    existing_leaves_revisions{YType::uint32, "existing-leaves-revisions"},
    extended_prefixes{YType::uint32, "extended-prefixes"},
    fib_default_prefix{YType::uint32, "fib-default-prefix"},
    fib_default_prefix_mask_length{YType::uint32, "fib-default-prefix-mask-length"},
    forwarding_elements{YType::uint32, "forwarding-elements"},
    imposition_prefixes{YType::uint32, "imposition-prefixes"},
    incomplete_next_hops{YType::uint32, "incomplete-next-hops"},
    ldi_backwalks{YType::uint32, "ldi-backwalks"},
    leaves_used_bytes{YType::uint32, "leaves-used-bytes"},
    lisp_eid_prefixes{YType::uint32, "lisp-eid-prefixes"},
    lisp_eid_valid_prefixes{YType::uint32, "lisp-eid-valid-prefixes"},
    lisp_rloc_objects{YType::uint32, "lisp-rloc-objects"},
    load_balancing{YType::enumeration, "load-balancing"},
    load_sharing_elements{YType::uint32, "load-sharing-elements"},
    load_sharing_references{YType::uint64, "load-sharing-references"},
    max_resolution_timer{YType::uint32, "max-resolution-timer"},
    new_unresolve_entries{YType::uint32, "new-unresolve-entries"},
    next_hops{YType::uint32, "next-hops"},
    old_unresolve_entries{YType::uint32, "old-unresolve-entries"},
    prefix{YType::str, "prefix"},
    prefix_in_place_modifications{YType::uint32, "prefix-in-place-modifications"},
    reresolve_entries{YType::uint32, "reresolve-entries"},
    resolution_timer{YType::uint32, "resolution-timer"},
    routes{YType::uint32, "routes"},
    slow_process_timer{YType::uint32, "slow-process-timer"},
    ss_drop_pl_count{YType::uint32, "ss-drop-pl-count"},
    ss_prot_route_count{YType::uint32, "ss-prot-route-count"},
    ss_tbl_id{YType::uint32, "ss-tbl-id"},
    ss_tbl_id_ptr{YType::uint32, "ss-tbl-id-ptr"},
    ss_vr_id{YType::uint32, "ss-vr-id"},
    ss_vrf_id{YType::uint32, "ss-vrf-id"},
    ss_vxlan_ltep_ifh{YType::str, "ss-vxlan-ltep-ifh"},
    stale_prefix_deletes{YType::uint32, "stale-prefix-deletes"},
    total_load_share_element_bytes{YType::uint32, "total-load-share-element-bytes"},
    unresolve_entries{YType::uint32, "unresolve-entries"}
    	,
    cross_shared_load_sharing_element(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement>())
	,exclusive_load_sharing_element(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement>())
	,label_shared_load_sharing_element(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement>())
	,prefix_masklen_distribution(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution>())
	,shared_load_sharing_element(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement>())
{
    cross_shared_load_sharing_element->parent = this;
    exclusive_load_sharing_element->parent = this;
    label_shared_load_sharing_element->parent = this;
    prefix_masklen_distribution->parent = this;
    shared_load_sharing_element->parent = this;

    yang_name = "summary"; yang_parent_name = "vrf"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::~Summary()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::has_data() const
{
    return cef_route_drops.is_set
	|| cef_version_mismatch_route_drops.is_set
	|| cefl_bl_recycled_routes.is_set
	|| delete_cache_num_entries.is_set
	|| existing_leaves_revisions.is_set
	|| extended_prefixes.is_set
	|| fib_default_prefix.is_set
	|| fib_default_prefix_mask_length.is_set
	|| forwarding_elements.is_set
	|| imposition_prefixes.is_set
	|| incomplete_next_hops.is_set
	|| ldi_backwalks.is_set
	|| leaves_used_bytes.is_set
	|| lisp_eid_prefixes.is_set
	|| lisp_eid_valid_prefixes.is_set
	|| lisp_rloc_objects.is_set
	|| load_balancing.is_set
	|| load_sharing_elements.is_set
	|| load_sharing_references.is_set
	|| max_resolution_timer.is_set
	|| new_unresolve_entries.is_set
	|| next_hops.is_set
	|| old_unresolve_entries.is_set
	|| prefix.is_set
	|| prefix_in_place_modifications.is_set
	|| reresolve_entries.is_set
	|| resolution_timer.is_set
	|| routes.is_set
	|| slow_process_timer.is_set
	|| ss_drop_pl_count.is_set
	|| ss_prot_route_count.is_set
	|| ss_tbl_id.is_set
	|| ss_tbl_id_ptr.is_set
	|| ss_vr_id.is_set
	|| ss_vrf_id.is_set
	|| ss_vxlan_ltep_ifh.is_set
	|| stale_prefix_deletes.is_set
	|| total_load_share_element_bytes.is_set
	|| unresolve_entries.is_set
	|| (cross_shared_load_sharing_element !=  nullptr && cross_shared_load_sharing_element->has_data())
	|| (exclusive_load_sharing_element !=  nullptr && exclusive_load_sharing_element->has_data())
	|| (label_shared_load_sharing_element !=  nullptr && label_shared_load_sharing_element->has_data())
	|| (prefix_masklen_distribution !=  nullptr && prefix_masklen_distribution->has_data())
	|| (shared_load_sharing_element !=  nullptr && shared_load_sharing_element->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cef_route_drops.yfilter)
	|| ydk::is_set(cef_version_mismatch_route_drops.yfilter)
	|| ydk::is_set(cefl_bl_recycled_routes.yfilter)
	|| ydk::is_set(delete_cache_num_entries.yfilter)
	|| ydk::is_set(existing_leaves_revisions.yfilter)
	|| ydk::is_set(extended_prefixes.yfilter)
	|| ydk::is_set(fib_default_prefix.yfilter)
	|| ydk::is_set(fib_default_prefix_mask_length.yfilter)
	|| ydk::is_set(forwarding_elements.yfilter)
	|| ydk::is_set(imposition_prefixes.yfilter)
	|| ydk::is_set(incomplete_next_hops.yfilter)
	|| ydk::is_set(ldi_backwalks.yfilter)
	|| ydk::is_set(leaves_used_bytes.yfilter)
	|| ydk::is_set(lisp_eid_prefixes.yfilter)
	|| ydk::is_set(lisp_eid_valid_prefixes.yfilter)
	|| ydk::is_set(lisp_rloc_objects.yfilter)
	|| ydk::is_set(load_balancing.yfilter)
	|| ydk::is_set(load_sharing_elements.yfilter)
	|| ydk::is_set(load_sharing_references.yfilter)
	|| ydk::is_set(max_resolution_timer.yfilter)
	|| ydk::is_set(new_unresolve_entries.yfilter)
	|| ydk::is_set(next_hops.yfilter)
	|| ydk::is_set(old_unresolve_entries.yfilter)
	|| ydk::is_set(prefix.yfilter)
	|| ydk::is_set(prefix_in_place_modifications.yfilter)
	|| ydk::is_set(reresolve_entries.yfilter)
	|| ydk::is_set(resolution_timer.yfilter)
	|| ydk::is_set(routes.yfilter)
	|| ydk::is_set(slow_process_timer.yfilter)
	|| ydk::is_set(ss_drop_pl_count.yfilter)
	|| ydk::is_set(ss_prot_route_count.yfilter)
	|| ydk::is_set(ss_tbl_id.yfilter)
	|| ydk::is_set(ss_tbl_id_ptr.yfilter)
	|| ydk::is_set(ss_vr_id.yfilter)
	|| ydk::is_set(ss_vrf_id.yfilter)
	|| ydk::is_set(ss_vxlan_ltep_ifh.yfilter)
	|| ydk::is_set(stale_prefix_deletes.yfilter)
	|| ydk::is_set(total_load_share_element_bytes.yfilter)
	|| ydk::is_set(unresolve_entries.yfilter)
	|| (cross_shared_load_sharing_element !=  nullptr && cross_shared_load_sharing_element->has_operation())
	|| (exclusive_load_sharing_element !=  nullptr && exclusive_load_sharing_element->has_operation())
	|| (label_shared_load_sharing_element !=  nullptr && label_shared_load_sharing_element->has_operation())
	|| (prefix_masklen_distribution !=  nullptr && prefix_masklen_distribution->has_operation())
	|| (shared_load_sharing_element !=  nullptr && shared_load_sharing_element->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "summary";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cef_route_drops.is_set || is_set(cef_route_drops.yfilter)) leaf_name_data.push_back(cef_route_drops.get_name_leafdata());
    if (cef_version_mismatch_route_drops.is_set || is_set(cef_version_mismatch_route_drops.yfilter)) leaf_name_data.push_back(cef_version_mismatch_route_drops.get_name_leafdata());
    if (cefl_bl_recycled_routes.is_set || is_set(cefl_bl_recycled_routes.yfilter)) leaf_name_data.push_back(cefl_bl_recycled_routes.get_name_leafdata());
    if (delete_cache_num_entries.is_set || is_set(delete_cache_num_entries.yfilter)) leaf_name_data.push_back(delete_cache_num_entries.get_name_leafdata());
    if (existing_leaves_revisions.is_set || is_set(existing_leaves_revisions.yfilter)) leaf_name_data.push_back(existing_leaves_revisions.get_name_leafdata());
    if (extended_prefixes.is_set || is_set(extended_prefixes.yfilter)) leaf_name_data.push_back(extended_prefixes.get_name_leafdata());
    if (fib_default_prefix.is_set || is_set(fib_default_prefix.yfilter)) leaf_name_data.push_back(fib_default_prefix.get_name_leafdata());
    if (fib_default_prefix_mask_length.is_set || is_set(fib_default_prefix_mask_length.yfilter)) leaf_name_data.push_back(fib_default_prefix_mask_length.get_name_leafdata());
    if (forwarding_elements.is_set || is_set(forwarding_elements.yfilter)) leaf_name_data.push_back(forwarding_elements.get_name_leafdata());
    if (imposition_prefixes.is_set || is_set(imposition_prefixes.yfilter)) leaf_name_data.push_back(imposition_prefixes.get_name_leafdata());
    if (incomplete_next_hops.is_set || is_set(incomplete_next_hops.yfilter)) leaf_name_data.push_back(incomplete_next_hops.get_name_leafdata());
    if (ldi_backwalks.is_set || is_set(ldi_backwalks.yfilter)) leaf_name_data.push_back(ldi_backwalks.get_name_leafdata());
    if (leaves_used_bytes.is_set || is_set(leaves_used_bytes.yfilter)) leaf_name_data.push_back(leaves_used_bytes.get_name_leafdata());
    if (lisp_eid_prefixes.is_set || is_set(lisp_eid_prefixes.yfilter)) leaf_name_data.push_back(lisp_eid_prefixes.get_name_leafdata());
    if (lisp_eid_valid_prefixes.is_set || is_set(lisp_eid_valid_prefixes.yfilter)) leaf_name_data.push_back(lisp_eid_valid_prefixes.get_name_leafdata());
    if (lisp_rloc_objects.is_set || is_set(lisp_rloc_objects.yfilter)) leaf_name_data.push_back(lisp_rloc_objects.get_name_leafdata());
    if (load_balancing.is_set || is_set(load_balancing.yfilter)) leaf_name_data.push_back(load_balancing.get_name_leafdata());
    if (load_sharing_elements.is_set || is_set(load_sharing_elements.yfilter)) leaf_name_data.push_back(load_sharing_elements.get_name_leafdata());
    if (load_sharing_references.is_set || is_set(load_sharing_references.yfilter)) leaf_name_data.push_back(load_sharing_references.get_name_leafdata());
    if (max_resolution_timer.is_set || is_set(max_resolution_timer.yfilter)) leaf_name_data.push_back(max_resolution_timer.get_name_leafdata());
    if (new_unresolve_entries.is_set || is_set(new_unresolve_entries.yfilter)) leaf_name_data.push_back(new_unresolve_entries.get_name_leafdata());
    if (next_hops.is_set || is_set(next_hops.yfilter)) leaf_name_data.push_back(next_hops.get_name_leafdata());
    if (old_unresolve_entries.is_set || is_set(old_unresolve_entries.yfilter)) leaf_name_data.push_back(old_unresolve_entries.get_name_leafdata());
    if (prefix.is_set || is_set(prefix.yfilter)) leaf_name_data.push_back(prefix.get_name_leafdata());
    if (prefix_in_place_modifications.is_set || is_set(prefix_in_place_modifications.yfilter)) leaf_name_data.push_back(prefix_in_place_modifications.get_name_leafdata());
    if (reresolve_entries.is_set || is_set(reresolve_entries.yfilter)) leaf_name_data.push_back(reresolve_entries.get_name_leafdata());
    if (resolution_timer.is_set || is_set(resolution_timer.yfilter)) leaf_name_data.push_back(resolution_timer.get_name_leafdata());
    if (routes.is_set || is_set(routes.yfilter)) leaf_name_data.push_back(routes.get_name_leafdata());
    if (slow_process_timer.is_set || is_set(slow_process_timer.yfilter)) leaf_name_data.push_back(slow_process_timer.get_name_leafdata());
    if (ss_drop_pl_count.is_set || is_set(ss_drop_pl_count.yfilter)) leaf_name_data.push_back(ss_drop_pl_count.get_name_leafdata());
    if (ss_prot_route_count.is_set || is_set(ss_prot_route_count.yfilter)) leaf_name_data.push_back(ss_prot_route_count.get_name_leafdata());
    if (ss_tbl_id.is_set || is_set(ss_tbl_id.yfilter)) leaf_name_data.push_back(ss_tbl_id.get_name_leafdata());
    if (ss_tbl_id_ptr.is_set || is_set(ss_tbl_id_ptr.yfilter)) leaf_name_data.push_back(ss_tbl_id_ptr.get_name_leafdata());
    if (ss_vr_id.is_set || is_set(ss_vr_id.yfilter)) leaf_name_data.push_back(ss_vr_id.get_name_leafdata());
    if (ss_vrf_id.is_set || is_set(ss_vrf_id.yfilter)) leaf_name_data.push_back(ss_vrf_id.get_name_leafdata());
    if (ss_vxlan_ltep_ifh.is_set || is_set(ss_vxlan_ltep_ifh.yfilter)) leaf_name_data.push_back(ss_vxlan_ltep_ifh.get_name_leafdata());
    if (stale_prefix_deletes.is_set || is_set(stale_prefix_deletes.yfilter)) leaf_name_data.push_back(stale_prefix_deletes.get_name_leafdata());
    if (total_load_share_element_bytes.is_set || is_set(total_load_share_element_bytes.yfilter)) leaf_name_data.push_back(total_load_share_element_bytes.get_name_leafdata());
    if (unresolve_entries.is_set || is_set(unresolve_entries.yfilter)) leaf_name_data.push_back(unresolve_entries.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "cross-shared-load-sharing-element")
    {
        if(cross_shared_load_sharing_element == nullptr)
        {
            cross_shared_load_sharing_element = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement>();
        }
        return cross_shared_load_sharing_element;
    }

    if(child_yang_name == "exclusive-load-sharing-element")
    {
        if(exclusive_load_sharing_element == nullptr)
        {
            exclusive_load_sharing_element = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement>();
        }
        return exclusive_load_sharing_element;
    }

    if(child_yang_name == "label-shared-load-sharing-element")
    {
        if(label_shared_load_sharing_element == nullptr)
        {
            label_shared_load_sharing_element = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement>();
        }
        return label_shared_load_sharing_element;
    }

    if(child_yang_name == "prefix-masklen-distribution")
    {
        if(prefix_masklen_distribution == nullptr)
        {
            prefix_masklen_distribution = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution>();
        }
        return prefix_masklen_distribution;
    }

    if(child_yang_name == "shared-load-sharing-element")
    {
        if(shared_load_sharing_element == nullptr)
        {
            shared_load_sharing_element = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement>();
        }
        return shared_load_sharing_element;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(cross_shared_load_sharing_element != nullptr)
    {
        children["cross-shared-load-sharing-element"] = cross_shared_load_sharing_element;
    }

    if(exclusive_load_sharing_element != nullptr)
    {
        children["exclusive-load-sharing-element"] = exclusive_load_sharing_element;
    }

    if(label_shared_load_sharing_element != nullptr)
    {
        children["label-shared-load-sharing-element"] = label_shared_load_sharing_element;
    }

    if(prefix_masklen_distribution != nullptr)
    {
        children["prefix-masklen-distribution"] = prefix_masklen_distribution;
    }

    if(shared_load_sharing_element != nullptr)
    {
        children["shared-load-sharing-element"] = shared_load_sharing_element;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cef-route-drops")
    {
        cef_route_drops = value;
        cef_route_drops.value_namespace = name_space;
        cef_route_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cef-version-mismatch-route-drops")
    {
        cef_version_mismatch_route_drops = value;
        cef_version_mismatch_route_drops.value_namespace = name_space;
        cef_version_mismatch_route_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cefl-bl-recycled-routes")
    {
        cefl_bl_recycled_routes = value;
        cefl_bl_recycled_routes.value_namespace = name_space;
        cefl_bl_recycled_routes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "delete-cache-num-entries")
    {
        delete_cache_num_entries = value;
        delete_cache_num_entries.value_namespace = name_space;
        delete_cache_num_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "existing-leaves-revisions")
    {
        existing_leaves_revisions = value;
        existing_leaves_revisions.value_namespace = name_space;
        existing_leaves_revisions.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extended-prefixes")
    {
        extended_prefixes = value;
        extended_prefixes.value_namespace = name_space;
        extended_prefixes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-default-prefix")
    {
        fib_default_prefix = value;
        fib_default_prefix.value_namespace = name_space;
        fib_default_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-default-prefix-mask-length")
    {
        fib_default_prefix_mask_length = value;
        fib_default_prefix_mask_length.value_namespace = name_space;
        fib_default_prefix_mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forwarding-elements")
    {
        forwarding_elements = value;
        forwarding_elements.value_namespace = name_space;
        forwarding_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "imposition-prefixes")
    {
        imposition_prefixes = value;
        imposition_prefixes.value_namespace = name_space;
        imposition_prefixes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "incomplete-next-hops")
    {
        incomplete_next_hops = value;
        incomplete_next_hops.value_namespace = name_space;
        incomplete_next_hops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-backwalks")
    {
        ldi_backwalks = value;
        ldi_backwalks.value_namespace = name_space;
        ldi_backwalks.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "leaves-used-bytes")
    {
        leaves_used_bytes = value;
        leaves_used_bytes.value_namespace = name_space;
        leaves_used_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-eid-prefixes")
    {
        lisp_eid_prefixes = value;
        lisp_eid_prefixes.value_namespace = name_space;
        lisp_eid_prefixes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-eid-valid-prefixes")
    {
        lisp_eid_valid_prefixes = value;
        lisp_eid_valid_prefixes.value_namespace = name_space;
        lisp_eid_valid_prefixes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-rloc-objects")
    {
        lisp_rloc_objects = value;
        lisp_rloc_objects.value_namespace = name_space;
        lisp_rloc_objects.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-balancing")
    {
        load_balancing = value;
        load_balancing.value_namespace = name_space;
        load_balancing.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-sharing-elements")
    {
        load_sharing_elements = value;
        load_sharing_elements.value_namespace = name_space;
        load_sharing_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-sharing-references")
    {
        load_sharing_references = value;
        load_sharing_references.value_namespace = name_space;
        load_sharing_references.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-resolution-timer")
    {
        max_resolution_timer = value;
        max_resolution_timer.value_namespace = name_space;
        max_resolution_timer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "new-unresolve-entries")
    {
        new_unresolve_entries = value;
        new_unresolve_entries.value_namespace = name_space;
        new_unresolve_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hops")
    {
        next_hops = value;
        next_hops.value_namespace = name_space;
        next_hops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "old-unresolve-entries")
    {
        old_unresolve_entries = value;
        old_unresolve_entries.value_namespace = name_space;
        old_unresolve_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix")
    {
        prefix = value;
        prefix.value_namespace = name_space;
        prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-in-place-modifications")
    {
        prefix_in_place_modifications = value;
        prefix_in_place_modifications.value_namespace = name_space;
        prefix_in_place_modifications.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "reresolve-entries")
    {
        reresolve_entries = value;
        reresolve_entries.value_namespace = name_space;
        reresolve_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "resolution-timer")
    {
        resolution_timer = value;
        resolution_timer.value_namespace = name_space;
        resolution_timer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "routes")
    {
        routes = value;
        routes.value_namespace = name_space;
        routes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "slow-process-timer")
    {
        slow_process_timer = value;
        slow_process_timer.value_namespace = name_space;
        slow_process_timer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-drop-pl-count")
    {
        ss_drop_pl_count = value;
        ss_drop_pl_count.value_namespace = name_space;
        ss_drop_pl_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-prot-route-count")
    {
        ss_prot_route_count = value;
        ss_prot_route_count.value_namespace = name_space;
        ss_prot_route_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-tbl-id")
    {
        ss_tbl_id = value;
        ss_tbl_id.value_namespace = name_space;
        ss_tbl_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-tbl-id-ptr")
    {
        ss_tbl_id_ptr = value;
        ss_tbl_id_ptr.value_namespace = name_space;
        ss_tbl_id_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-vr-id")
    {
        ss_vr_id = value;
        ss_vr_id.value_namespace = name_space;
        ss_vr_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-vrf-id")
    {
        ss_vrf_id = value;
        ss_vrf_id.value_namespace = name_space;
        ss_vrf_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-vxlan-ltep-ifh")
    {
        ss_vxlan_ltep_ifh = value;
        ss_vxlan_ltep_ifh.value_namespace = name_space;
        ss_vxlan_ltep_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "stale-prefix-deletes")
    {
        stale_prefix_deletes = value;
        stale_prefix_deletes.value_namespace = name_space;
        stale_prefix_deletes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-share-element-bytes")
    {
        total_load_share_element_bytes = value;
        total_load_share_element_bytes.value_namespace = name_space;
        total_load_share_element_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unresolve-entries")
    {
        unresolve_entries = value;
        unresolve_entries.value_namespace = name_space;
        unresolve_entries.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cef-route-drops")
    {
        cef_route_drops.yfilter = yfilter;
    }
    if(value_path == "cef-version-mismatch-route-drops")
    {
        cef_version_mismatch_route_drops.yfilter = yfilter;
    }
    if(value_path == "cefl-bl-recycled-routes")
    {
        cefl_bl_recycled_routes.yfilter = yfilter;
    }
    if(value_path == "delete-cache-num-entries")
    {
        delete_cache_num_entries.yfilter = yfilter;
    }
    if(value_path == "existing-leaves-revisions")
    {
        existing_leaves_revisions.yfilter = yfilter;
    }
    if(value_path == "extended-prefixes")
    {
        extended_prefixes.yfilter = yfilter;
    }
    if(value_path == "fib-default-prefix")
    {
        fib_default_prefix.yfilter = yfilter;
    }
    if(value_path == "fib-default-prefix-mask-length")
    {
        fib_default_prefix_mask_length.yfilter = yfilter;
    }
    if(value_path == "forwarding-elements")
    {
        forwarding_elements.yfilter = yfilter;
    }
    if(value_path == "imposition-prefixes")
    {
        imposition_prefixes.yfilter = yfilter;
    }
    if(value_path == "incomplete-next-hops")
    {
        incomplete_next_hops.yfilter = yfilter;
    }
    if(value_path == "ldi-backwalks")
    {
        ldi_backwalks.yfilter = yfilter;
    }
    if(value_path == "leaves-used-bytes")
    {
        leaves_used_bytes.yfilter = yfilter;
    }
    if(value_path == "lisp-eid-prefixes")
    {
        lisp_eid_prefixes.yfilter = yfilter;
    }
    if(value_path == "lisp-eid-valid-prefixes")
    {
        lisp_eid_valid_prefixes.yfilter = yfilter;
    }
    if(value_path == "lisp-rloc-objects")
    {
        lisp_rloc_objects.yfilter = yfilter;
    }
    if(value_path == "load-balancing")
    {
        load_balancing.yfilter = yfilter;
    }
    if(value_path == "load-sharing-elements")
    {
        load_sharing_elements.yfilter = yfilter;
    }
    if(value_path == "load-sharing-references")
    {
        load_sharing_references.yfilter = yfilter;
    }
    if(value_path == "max-resolution-timer")
    {
        max_resolution_timer.yfilter = yfilter;
    }
    if(value_path == "new-unresolve-entries")
    {
        new_unresolve_entries.yfilter = yfilter;
    }
    if(value_path == "next-hops")
    {
        next_hops.yfilter = yfilter;
    }
    if(value_path == "old-unresolve-entries")
    {
        old_unresolve_entries.yfilter = yfilter;
    }
    if(value_path == "prefix")
    {
        prefix.yfilter = yfilter;
    }
    if(value_path == "prefix-in-place-modifications")
    {
        prefix_in_place_modifications.yfilter = yfilter;
    }
    if(value_path == "reresolve-entries")
    {
        reresolve_entries.yfilter = yfilter;
    }
    if(value_path == "resolution-timer")
    {
        resolution_timer.yfilter = yfilter;
    }
    if(value_path == "routes")
    {
        routes.yfilter = yfilter;
    }
    if(value_path == "slow-process-timer")
    {
        slow_process_timer.yfilter = yfilter;
    }
    if(value_path == "ss-drop-pl-count")
    {
        ss_drop_pl_count.yfilter = yfilter;
    }
    if(value_path == "ss-prot-route-count")
    {
        ss_prot_route_count.yfilter = yfilter;
    }
    if(value_path == "ss-tbl-id")
    {
        ss_tbl_id.yfilter = yfilter;
    }
    if(value_path == "ss-tbl-id-ptr")
    {
        ss_tbl_id_ptr.yfilter = yfilter;
    }
    if(value_path == "ss-vr-id")
    {
        ss_vr_id.yfilter = yfilter;
    }
    if(value_path == "ss-vrf-id")
    {
        ss_vrf_id.yfilter = yfilter;
    }
    if(value_path == "ss-vxlan-ltep-ifh")
    {
        ss_vxlan_ltep_ifh.yfilter = yfilter;
    }
    if(value_path == "stale-prefix-deletes")
    {
        stale_prefix_deletes.yfilter = yfilter;
    }
    if(value_path == "total-load-share-element-bytes")
    {
        total_load_share_element_bytes.yfilter = yfilter;
    }
    if(value_path == "unresolve-entries")
    {
        unresolve_entries.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cross-shared-load-sharing-element" || name == "exclusive-load-sharing-element" || name == "label-shared-load-sharing-element" || name == "prefix-masklen-distribution" || name == "shared-load-sharing-element" || name == "cef-route-drops" || name == "cef-version-mismatch-route-drops" || name == "cefl-bl-recycled-routes" || name == "delete-cache-num-entries" || name == "existing-leaves-revisions" || name == "extended-prefixes" || name == "fib-default-prefix" || name == "fib-default-prefix-mask-length" || name == "forwarding-elements" || name == "imposition-prefixes" || name == "incomplete-next-hops" || name == "ldi-backwalks" || name == "leaves-used-bytes" || name == "lisp-eid-prefixes" || name == "lisp-eid-valid-prefixes" || name == "lisp-rloc-objects" || name == "load-balancing" || name == "load-sharing-elements" || name == "load-sharing-references" || name == "max-resolution-timer" || name == "new-unresolve-entries" || name == "next-hops" || name == "old-unresolve-entries" || name == "prefix" || name == "prefix-in-place-modifications" || name == "reresolve-entries" || name == "resolution-timer" || name == "routes" || name == "slow-process-timer" || name == "ss-drop-pl-count" || name == "ss-prot-route-count" || name == "ss-tbl-id" || name == "ss-tbl-id-ptr" || name == "ss-vr-id" || name == "ss-vrf-id" || name == "ss-vxlan-ltep-ifh" || name == "stale-prefix-deletes" || name == "total-load-share-element-bytes" || name == "unresolve-entries")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement::CrossSharedLoadSharingElement()
    :
    platform_shared_load_info_elements{YType::uint32, "platform-shared-load-info-elements"},
    platform_shared_path_list_elements{YType::uint32, "platform-shared-path-list-elements"},
    recursive_load_info_elements{YType::uint32, "recursive-load-info-elements"},
    recursive_path_list_elements{YType::uint32, "recursive-path-list-elements"},
    retry_path_list_elements{YType::uint32, "retry-path-list-elements"},
    total_load_info_elements{YType::uint32, "total-load-info-elements"},
    total_load_sharing_element_bytes{YType::uint32, "total-load-sharing-element-bytes"},
    total_load_sharing_element_references{YType::uint64, "total-load-sharing-element-references"},
    total_path_list_elements{YType::uint32, "total-path-list-elements"},
    xpl_load_info_elements{YType::uint32, "xpl-load-info-elements"}
{

    yang_name = "cross-shared-load-sharing-element"; yang_parent_name = "summary"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement::~CrossSharedLoadSharingElement()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement::has_data() const
{
    return platform_shared_load_info_elements.is_set
	|| platform_shared_path_list_elements.is_set
	|| recursive_load_info_elements.is_set
	|| recursive_path_list_elements.is_set
	|| retry_path_list_elements.is_set
	|| total_load_info_elements.is_set
	|| total_load_sharing_element_bytes.is_set
	|| total_load_sharing_element_references.is_set
	|| total_path_list_elements.is_set
	|| xpl_load_info_elements.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(platform_shared_load_info_elements.yfilter)
	|| ydk::is_set(platform_shared_path_list_elements.yfilter)
	|| ydk::is_set(recursive_load_info_elements.yfilter)
	|| ydk::is_set(recursive_path_list_elements.yfilter)
	|| ydk::is_set(retry_path_list_elements.yfilter)
	|| ydk::is_set(total_load_info_elements.yfilter)
	|| ydk::is_set(total_load_sharing_element_bytes.yfilter)
	|| ydk::is_set(total_load_sharing_element_references.yfilter)
	|| ydk::is_set(total_path_list_elements.yfilter)
	|| ydk::is_set(xpl_load_info_elements.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cross-shared-load-sharing-element";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (platform_shared_load_info_elements.is_set || is_set(platform_shared_load_info_elements.yfilter)) leaf_name_data.push_back(platform_shared_load_info_elements.get_name_leafdata());
    if (platform_shared_path_list_elements.is_set || is_set(platform_shared_path_list_elements.yfilter)) leaf_name_data.push_back(platform_shared_path_list_elements.get_name_leafdata());
    if (recursive_load_info_elements.is_set || is_set(recursive_load_info_elements.yfilter)) leaf_name_data.push_back(recursive_load_info_elements.get_name_leafdata());
    if (recursive_path_list_elements.is_set || is_set(recursive_path_list_elements.yfilter)) leaf_name_data.push_back(recursive_path_list_elements.get_name_leafdata());
    if (retry_path_list_elements.is_set || is_set(retry_path_list_elements.yfilter)) leaf_name_data.push_back(retry_path_list_elements.get_name_leafdata());
    if (total_load_info_elements.is_set || is_set(total_load_info_elements.yfilter)) leaf_name_data.push_back(total_load_info_elements.get_name_leafdata());
    if (total_load_sharing_element_bytes.is_set || is_set(total_load_sharing_element_bytes.yfilter)) leaf_name_data.push_back(total_load_sharing_element_bytes.get_name_leafdata());
    if (total_load_sharing_element_references.is_set || is_set(total_load_sharing_element_references.yfilter)) leaf_name_data.push_back(total_load_sharing_element_references.get_name_leafdata());
    if (total_path_list_elements.is_set || is_set(total_path_list_elements.yfilter)) leaf_name_data.push_back(total_path_list_elements.get_name_leafdata());
    if (xpl_load_info_elements.is_set || is_set(xpl_load_info_elements.yfilter)) leaf_name_data.push_back(xpl_load_info_elements.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements = value;
        platform_shared_load_info_elements.value_namespace = name_space;
        platform_shared_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements = value;
        platform_shared_path_list_elements.value_namespace = name_space;
        platform_shared_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements = value;
        recursive_load_info_elements.value_namespace = name_space;
        recursive_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements = value;
        recursive_path_list_elements.value_namespace = name_space;
        recursive_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements = value;
        retry_path_list_elements.value_namespace = name_space;
        retry_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements = value;
        total_load_info_elements.value_namespace = name_space;
        total_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes = value;
        total_load_sharing_element_bytes.value_namespace = name_space;
        total_load_sharing_element_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references = value;
        total_load_sharing_element_references.value_namespace = name_space;
        total_load_sharing_element_references.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements = value;
        total_path_list_elements.value_namespace = name_space;
        total_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements = value;
        xpl_load_info_elements.value_namespace = name_space;
        xpl_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references.yfilter = yfilter;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::CrossSharedLoadSharingElement::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "platform-shared-load-info-elements" || name == "platform-shared-path-list-elements" || name == "recursive-load-info-elements" || name == "recursive-path-list-elements" || name == "retry-path-list-elements" || name == "total-load-info-elements" || name == "total-load-sharing-element-bytes" || name == "total-load-sharing-element-references" || name == "total-path-list-elements" || name == "xpl-load-info-elements")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement::ExclusiveLoadSharingElement()
    :
    platform_shared_load_info_elements{YType::uint32, "platform-shared-load-info-elements"},
    platform_shared_path_list_elements{YType::uint32, "platform-shared-path-list-elements"},
    recursive_load_info_elements{YType::uint32, "recursive-load-info-elements"},
    recursive_path_list_elements{YType::uint32, "recursive-path-list-elements"},
    retry_path_list_elements{YType::uint32, "retry-path-list-elements"},
    total_load_info_elements{YType::uint32, "total-load-info-elements"},
    total_load_sharing_element_bytes{YType::uint32, "total-load-sharing-element-bytes"},
    total_load_sharing_element_references{YType::uint64, "total-load-sharing-element-references"},
    total_path_list_elements{YType::uint32, "total-path-list-elements"},
    xpl_load_info_elements{YType::uint32, "xpl-load-info-elements"}
{

    yang_name = "exclusive-load-sharing-element"; yang_parent_name = "summary"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement::~ExclusiveLoadSharingElement()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement::has_data() const
{
    return platform_shared_load_info_elements.is_set
	|| platform_shared_path_list_elements.is_set
	|| recursive_load_info_elements.is_set
	|| recursive_path_list_elements.is_set
	|| retry_path_list_elements.is_set
	|| total_load_info_elements.is_set
	|| total_load_sharing_element_bytes.is_set
	|| total_load_sharing_element_references.is_set
	|| total_path_list_elements.is_set
	|| xpl_load_info_elements.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(platform_shared_load_info_elements.yfilter)
	|| ydk::is_set(platform_shared_path_list_elements.yfilter)
	|| ydk::is_set(recursive_load_info_elements.yfilter)
	|| ydk::is_set(recursive_path_list_elements.yfilter)
	|| ydk::is_set(retry_path_list_elements.yfilter)
	|| ydk::is_set(total_load_info_elements.yfilter)
	|| ydk::is_set(total_load_sharing_element_bytes.yfilter)
	|| ydk::is_set(total_load_sharing_element_references.yfilter)
	|| ydk::is_set(total_path_list_elements.yfilter)
	|| ydk::is_set(xpl_load_info_elements.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "exclusive-load-sharing-element";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (platform_shared_load_info_elements.is_set || is_set(platform_shared_load_info_elements.yfilter)) leaf_name_data.push_back(platform_shared_load_info_elements.get_name_leafdata());
    if (platform_shared_path_list_elements.is_set || is_set(platform_shared_path_list_elements.yfilter)) leaf_name_data.push_back(platform_shared_path_list_elements.get_name_leafdata());
    if (recursive_load_info_elements.is_set || is_set(recursive_load_info_elements.yfilter)) leaf_name_data.push_back(recursive_load_info_elements.get_name_leafdata());
    if (recursive_path_list_elements.is_set || is_set(recursive_path_list_elements.yfilter)) leaf_name_data.push_back(recursive_path_list_elements.get_name_leafdata());
    if (retry_path_list_elements.is_set || is_set(retry_path_list_elements.yfilter)) leaf_name_data.push_back(retry_path_list_elements.get_name_leafdata());
    if (total_load_info_elements.is_set || is_set(total_load_info_elements.yfilter)) leaf_name_data.push_back(total_load_info_elements.get_name_leafdata());
    if (total_load_sharing_element_bytes.is_set || is_set(total_load_sharing_element_bytes.yfilter)) leaf_name_data.push_back(total_load_sharing_element_bytes.get_name_leafdata());
    if (total_load_sharing_element_references.is_set || is_set(total_load_sharing_element_references.yfilter)) leaf_name_data.push_back(total_load_sharing_element_references.get_name_leafdata());
    if (total_path_list_elements.is_set || is_set(total_path_list_elements.yfilter)) leaf_name_data.push_back(total_path_list_elements.get_name_leafdata());
    if (xpl_load_info_elements.is_set || is_set(xpl_load_info_elements.yfilter)) leaf_name_data.push_back(xpl_load_info_elements.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements = value;
        platform_shared_load_info_elements.value_namespace = name_space;
        platform_shared_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements = value;
        platform_shared_path_list_elements.value_namespace = name_space;
        platform_shared_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements = value;
        recursive_load_info_elements.value_namespace = name_space;
        recursive_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements = value;
        recursive_path_list_elements.value_namespace = name_space;
        recursive_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements = value;
        retry_path_list_elements.value_namespace = name_space;
        retry_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements = value;
        total_load_info_elements.value_namespace = name_space;
        total_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes = value;
        total_load_sharing_element_bytes.value_namespace = name_space;
        total_load_sharing_element_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references = value;
        total_load_sharing_element_references.value_namespace = name_space;
        total_load_sharing_element_references.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements = value;
        total_path_list_elements.value_namespace = name_space;
        total_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements = value;
        xpl_load_info_elements.value_namespace = name_space;
        xpl_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references.yfilter = yfilter;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::ExclusiveLoadSharingElement::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "platform-shared-load-info-elements" || name == "platform-shared-path-list-elements" || name == "recursive-load-info-elements" || name == "recursive-path-list-elements" || name == "retry-path-list-elements" || name == "total-load-info-elements" || name == "total-load-sharing-element-bytes" || name == "total-load-sharing-element-references" || name == "total-path-list-elements" || name == "xpl-load-info-elements")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement::LabelSharedLoadSharingElement()
    :
    platform_shared_load_info_elements{YType::uint32, "platform-shared-load-info-elements"},
    platform_shared_path_list_elements{YType::uint32, "platform-shared-path-list-elements"},
    recursive_load_info_elements{YType::uint32, "recursive-load-info-elements"},
    recursive_path_list_elements{YType::uint32, "recursive-path-list-elements"},
    retry_path_list_elements{YType::uint32, "retry-path-list-elements"},
    total_load_info_elements{YType::uint32, "total-load-info-elements"},
    total_load_sharing_element_bytes{YType::uint32, "total-load-sharing-element-bytes"},
    total_load_sharing_element_references{YType::uint64, "total-load-sharing-element-references"},
    total_path_list_elements{YType::uint32, "total-path-list-elements"},
    xpl_load_info_elements{YType::uint32, "xpl-load-info-elements"}
{

    yang_name = "label-shared-load-sharing-element"; yang_parent_name = "summary"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement::~LabelSharedLoadSharingElement()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement::has_data() const
{
    return platform_shared_load_info_elements.is_set
	|| platform_shared_path_list_elements.is_set
	|| recursive_load_info_elements.is_set
	|| recursive_path_list_elements.is_set
	|| retry_path_list_elements.is_set
	|| total_load_info_elements.is_set
	|| total_load_sharing_element_bytes.is_set
	|| total_load_sharing_element_references.is_set
	|| total_path_list_elements.is_set
	|| xpl_load_info_elements.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(platform_shared_load_info_elements.yfilter)
	|| ydk::is_set(platform_shared_path_list_elements.yfilter)
	|| ydk::is_set(recursive_load_info_elements.yfilter)
	|| ydk::is_set(recursive_path_list_elements.yfilter)
	|| ydk::is_set(retry_path_list_elements.yfilter)
	|| ydk::is_set(total_load_info_elements.yfilter)
	|| ydk::is_set(total_load_sharing_element_bytes.yfilter)
	|| ydk::is_set(total_load_sharing_element_references.yfilter)
	|| ydk::is_set(total_path_list_elements.yfilter)
	|| ydk::is_set(xpl_load_info_elements.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-shared-load-sharing-element";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (platform_shared_load_info_elements.is_set || is_set(platform_shared_load_info_elements.yfilter)) leaf_name_data.push_back(platform_shared_load_info_elements.get_name_leafdata());
    if (platform_shared_path_list_elements.is_set || is_set(platform_shared_path_list_elements.yfilter)) leaf_name_data.push_back(platform_shared_path_list_elements.get_name_leafdata());
    if (recursive_load_info_elements.is_set || is_set(recursive_load_info_elements.yfilter)) leaf_name_data.push_back(recursive_load_info_elements.get_name_leafdata());
    if (recursive_path_list_elements.is_set || is_set(recursive_path_list_elements.yfilter)) leaf_name_data.push_back(recursive_path_list_elements.get_name_leafdata());
    if (retry_path_list_elements.is_set || is_set(retry_path_list_elements.yfilter)) leaf_name_data.push_back(retry_path_list_elements.get_name_leafdata());
    if (total_load_info_elements.is_set || is_set(total_load_info_elements.yfilter)) leaf_name_data.push_back(total_load_info_elements.get_name_leafdata());
    if (total_load_sharing_element_bytes.is_set || is_set(total_load_sharing_element_bytes.yfilter)) leaf_name_data.push_back(total_load_sharing_element_bytes.get_name_leafdata());
    if (total_load_sharing_element_references.is_set || is_set(total_load_sharing_element_references.yfilter)) leaf_name_data.push_back(total_load_sharing_element_references.get_name_leafdata());
    if (total_path_list_elements.is_set || is_set(total_path_list_elements.yfilter)) leaf_name_data.push_back(total_path_list_elements.get_name_leafdata());
    if (xpl_load_info_elements.is_set || is_set(xpl_load_info_elements.yfilter)) leaf_name_data.push_back(xpl_load_info_elements.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements = value;
        platform_shared_load_info_elements.value_namespace = name_space;
        platform_shared_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements = value;
        platform_shared_path_list_elements.value_namespace = name_space;
        platform_shared_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements = value;
        recursive_load_info_elements.value_namespace = name_space;
        recursive_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements = value;
        recursive_path_list_elements.value_namespace = name_space;
        recursive_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements = value;
        retry_path_list_elements.value_namespace = name_space;
        retry_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements = value;
        total_load_info_elements.value_namespace = name_space;
        total_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes = value;
        total_load_sharing_element_bytes.value_namespace = name_space;
        total_load_sharing_element_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references = value;
        total_load_sharing_element_references.value_namespace = name_space;
        total_load_sharing_element_references.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements = value;
        total_path_list_elements.value_namespace = name_space;
        total_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements = value;
        xpl_load_info_elements.value_namespace = name_space;
        xpl_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references.yfilter = yfilter;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::LabelSharedLoadSharingElement::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "platform-shared-load-info-elements" || name == "platform-shared-path-list-elements" || name == "recursive-load-info-elements" || name == "recursive-path-list-elements" || name == "retry-path-list-elements" || name == "total-load-info-elements" || name == "total-load-sharing-element-bytes" || name == "total-load-sharing-element-references" || name == "total-path-list-elements" || name == "xpl-load-info-elements")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::PrefixMasklenDistribution()
{

    yang_name = "prefix-masklen-distribution"; yang_parent_name = "summary"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::~PrefixMasklenDistribution()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::has_data() const
{
    for (std::size_t index=0; index<broadcast_prefixe.size(); index++)
    {
        if(broadcast_prefixe[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<multicast_prefix.size(); index++)
    {
        if(multicast_prefix[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<unicast_prefixe.size(); index++)
    {
        if(unicast_prefixe[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::has_operation() const
{
    for (std::size_t index=0; index<broadcast_prefixe.size(); index++)
    {
        if(broadcast_prefixe[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<multicast_prefix.size(); index++)
    {
        if(multicast_prefix[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<unicast_prefixe.size(); index++)
    {
        if(unicast_prefixe[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "prefix-masklen-distribution";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "broadcast-prefixe")
    {
        for(auto const & c : broadcast_prefixe)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe>();
        c->parent = this;
        broadcast_prefixe.push_back(c);
        return c;
    }

    if(child_yang_name == "multicast-prefix")
    {
        for(auto const & c : multicast_prefix)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix>();
        c->parent = this;
        multicast_prefix.push_back(c);
        return c;
    }

    if(child_yang_name == "unicast-prefixe")
    {
        for(auto const & c : unicast_prefixe)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe>();
        c->parent = this;
        unicast_prefixe.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : broadcast_prefixe)
    {
        children[c->get_segment_path()] = c;
    }

    for (auto const & c : multicast_prefix)
    {
        children[c->get_segment_path()] = c;
    }

    for (auto const & c : unicast_prefixe)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "broadcast-prefixe" || name == "multicast-prefix" || name == "unicast-prefixe")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe::BroadcastPrefixe()
    :
    mask_length{YType::uint8, "mask-length"},
    number_of_prefixes{YType::uint32, "number-of-prefixes"}
{

    yang_name = "broadcast-prefixe"; yang_parent_name = "prefix-masklen-distribution"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe::~BroadcastPrefixe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe::has_data() const
{
    return mask_length.is_set
	|| number_of_prefixes.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(mask_length.yfilter)
	|| ydk::is_set(number_of_prefixes.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "broadcast-prefixe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (mask_length.is_set || is_set(mask_length.yfilter)) leaf_name_data.push_back(mask_length.get_name_leafdata());
    if (number_of_prefixes.is_set || is_set(number_of_prefixes.yfilter)) leaf_name_data.push_back(number_of_prefixes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "mask-length")
    {
        mask_length = value;
        mask_length.value_namespace = name_space;
        mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes = value;
        number_of_prefixes.value_namespace = name_space;
        number_of_prefixes.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "mask-length")
    {
        mask_length.yfilter = yfilter;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::BroadcastPrefixe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "mask-length" || name == "number-of-prefixes")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix::MulticastPrefix()
    :
    mask_length{YType::uint8, "mask-length"},
    number_of_prefixes{YType::uint32, "number-of-prefixes"}
{

    yang_name = "multicast-prefix"; yang_parent_name = "prefix-masklen-distribution"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix::~MulticastPrefix()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix::has_data() const
{
    return mask_length.is_set
	|| number_of_prefixes.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(mask_length.yfilter)
	|| ydk::is_set(number_of_prefixes.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "multicast-prefix";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (mask_length.is_set || is_set(mask_length.yfilter)) leaf_name_data.push_back(mask_length.get_name_leafdata());
    if (number_of_prefixes.is_set || is_set(number_of_prefixes.yfilter)) leaf_name_data.push_back(number_of_prefixes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "mask-length")
    {
        mask_length = value;
        mask_length.value_namespace = name_space;
        mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes = value;
        number_of_prefixes.value_namespace = name_space;
        number_of_prefixes.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "mask-length")
    {
        mask_length.yfilter = yfilter;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::MulticastPrefix::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "mask-length" || name == "number-of-prefixes")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe::UnicastPrefixe()
    :
    mask_length{YType::uint8, "mask-length"},
    number_of_prefixes{YType::uint32, "number-of-prefixes"}
{

    yang_name = "unicast-prefixe"; yang_parent_name = "prefix-masklen-distribution"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe::~UnicastPrefixe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe::has_data() const
{
    return mask_length.is_set
	|| number_of_prefixes.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(mask_length.yfilter)
	|| ydk::is_set(number_of_prefixes.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unicast-prefixe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (mask_length.is_set || is_set(mask_length.yfilter)) leaf_name_data.push_back(mask_length.get_name_leafdata());
    if (number_of_prefixes.is_set || is_set(number_of_prefixes.yfilter)) leaf_name_data.push_back(number_of_prefixes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "mask-length")
    {
        mask_length = value;
        mask_length.value_namespace = name_space;
        mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes = value;
        number_of_prefixes.value_namespace = name_space;
        number_of_prefixes.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "mask-length")
    {
        mask_length.yfilter = yfilter;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::PrefixMasklenDistribution::UnicastPrefixe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "mask-length" || name == "number-of-prefixes")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement::SharedLoadSharingElement()
    :
    platform_shared_load_info_elements{YType::uint32, "platform-shared-load-info-elements"},
    platform_shared_path_list_elements{YType::uint32, "platform-shared-path-list-elements"},
    recursive_load_info_elements{YType::uint32, "recursive-load-info-elements"},
    recursive_path_list_elements{YType::uint32, "recursive-path-list-elements"},
    retry_path_list_elements{YType::uint32, "retry-path-list-elements"},
    total_load_info_elements{YType::uint32, "total-load-info-elements"},
    total_load_sharing_element_bytes{YType::uint32, "total-load-sharing-element-bytes"},
    total_load_sharing_element_references{YType::uint64, "total-load-sharing-element-references"},
    total_path_list_elements{YType::uint32, "total-path-list-elements"},
    xpl_load_info_elements{YType::uint32, "xpl-load-info-elements"}
{

    yang_name = "shared-load-sharing-element"; yang_parent_name = "summary"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement::~SharedLoadSharingElement()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement::has_data() const
{
    return platform_shared_load_info_elements.is_set
	|| platform_shared_path_list_elements.is_set
	|| recursive_load_info_elements.is_set
	|| recursive_path_list_elements.is_set
	|| retry_path_list_elements.is_set
	|| total_load_info_elements.is_set
	|| total_load_sharing_element_bytes.is_set
	|| total_load_sharing_element_references.is_set
	|| total_path_list_elements.is_set
	|| xpl_load_info_elements.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(platform_shared_load_info_elements.yfilter)
	|| ydk::is_set(platform_shared_path_list_elements.yfilter)
	|| ydk::is_set(recursive_load_info_elements.yfilter)
	|| ydk::is_set(recursive_path_list_elements.yfilter)
	|| ydk::is_set(retry_path_list_elements.yfilter)
	|| ydk::is_set(total_load_info_elements.yfilter)
	|| ydk::is_set(total_load_sharing_element_bytes.yfilter)
	|| ydk::is_set(total_load_sharing_element_references.yfilter)
	|| ydk::is_set(total_path_list_elements.yfilter)
	|| ydk::is_set(xpl_load_info_elements.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "shared-load-sharing-element";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (platform_shared_load_info_elements.is_set || is_set(platform_shared_load_info_elements.yfilter)) leaf_name_data.push_back(platform_shared_load_info_elements.get_name_leafdata());
    if (platform_shared_path_list_elements.is_set || is_set(platform_shared_path_list_elements.yfilter)) leaf_name_data.push_back(platform_shared_path_list_elements.get_name_leafdata());
    if (recursive_load_info_elements.is_set || is_set(recursive_load_info_elements.yfilter)) leaf_name_data.push_back(recursive_load_info_elements.get_name_leafdata());
    if (recursive_path_list_elements.is_set || is_set(recursive_path_list_elements.yfilter)) leaf_name_data.push_back(recursive_path_list_elements.get_name_leafdata());
    if (retry_path_list_elements.is_set || is_set(retry_path_list_elements.yfilter)) leaf_name_data.push_back(retry_path_list_elements.get_name_leafdata());
    if (total_load_info_elements.is_set || is_set(total_load_info_elements.yfilter)) leaf_name_data.push_back(total_load_info_elements.get_name_leafdata());
    if (total_load_sharing_element_bytes.is_set || is_set(total_load_sharing_element_bytes.yfilter)) leaf_name_data.push_back(total_load_sharing_element_bytes.get_name_leafdata());
    if (total_load_sharing_element_references.is_set || is_set(total_load_sharing_element_references.yfilter)) leaf_name_data.push_back(total_load_sharing_element_references.get_name_leafdata());
    if (total_path_list_elements.is_set || is_set(total_path_list_elements.yfilter)) leaf_name_data.push_back(total_path_list_elements.get_name_leafdata());
    if (xpl_load_info_elements.is_set || is_set(xpl_load_info_elements.yfilter)) leaf_name_data.push_back(xpl_load_info_elements.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements = value;
        platform_shared_load_info_elements.value_namespace = name_space;
        platform_shared_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements = value;
        platform_shared_path_list_elements.value_namespace = name_space;
        platform_shared_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements = value;
        recursive_load_info_elements.value_namespace = name_space;
        recursive_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements = value;
        recursive_path_list_elements.value_namespace = name_space;
        recursive_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements = value;
        retry_path_list_elements.value_namespace = name_space;
        retry_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements = value;
        total_load_info_elements.value_namespace = name_space;
        total_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes = value;
        total_load_sharing_element_bytes.value_namespace = name_space;
        total_load_sharing_element_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references = value;
        total_load_sharing_element_references.value_namespace = name_space;
        total_load_sharing_element_references.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements = value;
        total_path_list_elements.value_namespace = name_space;
        total_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements = value;
        xpl_load_info_elements.value_namespace = name_space;
        xpl_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references.yfilter = yfilter;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary::SharedLoadSharingElement::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "platform-shared-load-info-elements" || name == "platform-shared-path-list-elements" || name == "recursive-load-info-elements" || name == "recursive-path-list-elements" || name == "retry-path-list-elements" || name == "total-load-info-elements" || name == "total-load-sharing-element-bytes" || name == "total-load-sharing-element-references" || name == "total-path-list-elements" || name == "xpl-load-info-elements")
        return true;
    return false;
}

FibStatistics::FibStatistics()
    :
    nodes(std::make_shared<FibStatistics::Nodes>())
{
    nodes->parent = this;

    yang_name = "fib-statistics"; yang_parent_name = "Cisco-IOS-XR-fib-common-oper"; is_top_level_class = true; has_list_ancestor = false;
}

FibStatistics::~FibStatistics()
{
}

bool FibStatistics::has_data() const
{
    return (nodes !=  nullptr && nodes->has_data());
}

bool FibStatistics::has_operation() const
{
    return is_set(yfilter)
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string FibStatistics::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:fib-statistics";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > FibStatistics::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> FibStatistics::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nodes")
    {
        if(nodes == nullptr)
        {
            nodes = std::make_shared<FibStatistics::Nodes>();
        }
        return nodes;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> FibStatistics::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nodes != nullptr)
    {
        children["nodes"] = nodes;
    }

    return children;
}

void FibStatistics::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void FibStatistics::set_filter(const std::string & value_path, YFilter yfilter)
{
}

std::shared_ptr<Entity> FibStatistics::clone_ptr() const
{
    return std::make_shared<FibStatistics>();
}

std::string FibStatistics::get_bundle_yang_models_location() const
{
    return ydk_cisco_ios_xr_models_path;
}

std::string FibStatistics::get_bundle_name() const
{
    return "cisco_ios_xr";
}

augment_capabilities_function FibStatistics::get_augment_capabilities_function() const
{
    return cisco_ios_xr_augment_lookup_tables;
}

std::map<std::pair<std::string, std::string>, std::string> FibStatistics::get_namespace_identity_lookup() const
{
    return cisco_ios_xr_namespace_identity_lookup;
}

bool FibStatistics::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nodes")
        return true;
    return false;
}

FibStatistics::Nodes::Nodes()
{

    yang_name = "nodes"; yang_parent_name = "fib-statistics"; is_top_level_class = false; has_list_ancestor = false;
}

FibStatistics::Nodes::~Nodes()
{
}

bool FibStatistics::Nodes::has_data() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool FibStatistics::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string FibStatistics::Nodes::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:fib-statistics/" << get_segment_path();
    return path_buffer.str();
}

std::string FibStatistics::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > FibStatistics::Nodes::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> FibStatistics::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "node")
    {
        for(auto const & c : node)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<FibStatistics::Nodes::Node>();
        c->parent = this;
        node.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> FibStatistics::Nodes::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : node)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void FibStatistics::Nodes::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void FibStatistics::Nodes::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool FibStatistics::Nodes::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "node")
        return true;
    return false;
}

FibStatistics::Nodes::Node::Node()
    :
    node_name{YType::str, "node-name"}
    	,
    drops(std::make_shared<FibStatistics::Nodes::Node::Drops>())
{
    drops->parent = this;

    yang_name = "node"; yang_parent_name = "nodes"; is_top_level_class = false; has_list_ancestor = false;
}

FibStatistics::Nodes::Node::~Node()
{
}

bool FibStatistics::Nodes::Node::has_data() const
{
    return node_name.is_set
	|| (drops !=  nullptr && drops->has_data());
}

bool FibStatistics::Nodes::Node::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(node_name.yfilter)
	|| (drops !=  nullptr && drops->has_operation());
}

std::string FibStatistics::Nodes::Node::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:fib-statistics/nodes/" << get_segment_path();
    return path_buffer.str();
}

std::string FibStatistics::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node" <<"[node-name='" <<node_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > FibStatistics::Nodes::Node::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_name.is_set || is_set(node_name.yfilter)) leaf_name_data.push_back(node_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> FibStatistics::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "drops")
    {
        if(drops == nullptr)
        {
            drops = std::make_shared<FibStatistics::Nodes::Node::Drops>();
        }
        return drops;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> FibStatistics::Nodes::Node::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(drops != nullptr)
    {
        children["drops"] = drops;
    }

    return children;
}

void FibStatistics::Nodes::Node::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "node-name")
    {
        node_name = value;
        node_name.value_namespace = name_space;
        node_name.value_namespace_prefix = name_space_prefix;
    }
}

void FibStatistics::Nodes::Node::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "node-name")
    {
        node_name.yfilter = yfilter;
    }
}

bool FibStatistics::Nodes::Node::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drops" || name == "node-name")
        return true;
    return false;
}

FibStatistics::Nodes::Node::Drops::Drops()
    :
    acl_in_rpf_packets{YType::uint64, "acl-in-rpf-packets"},
    checksum_error_packets{YType::uint64, "checksum-error-packets"},
    df_unreachable_packets{YType::uint64, "df-unreachable-packets"},
    discard_packets{YType::uint64, "discard-packets"},
    encapsulation_failure_packets{YType::uint64, "encapsulation-failure-packets"},
    fragmenation_consumed_packets{YType::uint64, "fragmenation-consumed-packets"},
    fragmenation_failure_packets{YType::uint64, "fragmenation-failure-packets"},
    gre_error_drop{YType::uint64, "gre-error-drop"},
    gre_lookup_failed_drop{YType::uint64, "gre-lookup-failed-drop"},
    incomplete_adjacency_packets{YType::uint64, "incomplete-adjacency-packets"},
    lisp_decap_error_drops{YType::uint64, "lisp-decap-error-drops"},
    lisp_encap_error_drops{YType::uint64, "lisp-encap-error-drops"},
    lisp_punt_drops{YType::uint64, "lisp-punt-drops"},
    mpls_disabled_interface{YType::uint64, "mpls-disabled-interface"},
    multi_label_drops{YType::uint64, "multi-label-drops"},
    no_route_packets{YType::uint64, "no-route-packets"},
    null_packets{YType::uint64, "null-packets"},
    punt_unreachable_packets{YType::uint64, "punt-unreachable-packets"},
    rp_destination_drop_packets{YType::uint64, "rp-destination-drop-packets"},
    rpf_check_failure_packets{YType::uint64, "rpf-check-failure-packets"},
    total_number_of_drop_packets{YType::uint64, "total-number-of-drop-packets"},
    unresolved_prefix_packets{YType::uint64, "unresolved-prefix-packets"},
    unsupported_feature_packets{YType::uint64, "unsupported-feature-packets"}
{

    yang_name = "drops"; yang_parent_name = "node"; is_top_level_class = false; has_list_ancestor = true;
}

FibStatistics::Nodes::Node::Drops::~Drops()
{
}

bool FibStatistics::Nodes::Node::Drops::has_data() const
{
    return acl_in_rpf_packets.is_set
	|| checksum_error_packets.is_set
	|| df_unreachable_packets.is_set
	|| discard_packets.is_set
	|| encapsulation_failure_packets.is_set
	|| fragmenation_consumed_packets.is_set
	|| fragmenation_failure_packets.is_set
	|| gre_error_drop.is_set
	|| gre_lookup_failed_drop.is_set
	|| incomplete_adjacency_packets.is_set
	|| lisp_decap_error_drops.is_set
	|| lisp_encap_error_drops.is_set
	|| lisp_punt_drops.is_set
	|| mpls_disabled_interface.is_set
	|| multi_label_drops.is_set
	|| no_route_packets.is_set
	|| null_packets.is_set
	|| punt_unreachable_packets.is_set
	|| rp_destination_drop_packets.is_set
	|| rpf_check_failure_packets.is_set
	|| total_number_of_drop_packets.is_set
	|| unresolved_prefix_packets.is_set
	|| unsupported_feature_packets.is_set;
}

bool FibStatistics::Nodes::Node::Drops::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(acl_in_rpf_packets.yfilter)
	|| ydk::is_set(checksum_error_packets.yfilter)
	|| ydk::is_set(df_unreachable_packets.yfilter)
	|| ydk::is_set(discard_packets.yfilter)
	|| ydk::is_set(encapsulation_failure_packets.yfilter)
	|| ydk::is_set(fragmenation_consumed_packets.yfilter)
	|| ydk::is_set(fragmenation_failure_packets.yfilter)
	|| ydk::is_set(gre_error_drop.yfilter)
	|| ydk::is_set(gre_lookup_failed_drop.yfilter)
	|| ydk::is_set(incomplete_adjacency_packets.yfilter)
	|| ydk::is_set(lisp_decap_error_drops.yfilter)
	|| ydk::is_set(lisp_encap_error_drops.yfilter)
	|| ydk::is_set(lisp_punt_drops.yfilter)
	|| ydk::is_set(mpls_disabled_interface.yfilter)
	|| ydk::is_set(multi_label_drops.yfilter)
	|| ydk::is_set(no_route_packets.yfilter)
	|| ydk::is_set(null_packets.yfilter)
	|| ydk::is_set(punt_unreachable_packets.yfilter)
	|| ydk::is_set(rp_destination_drop_packets.yfilter)
	|| ydk::is_set(rpf_check_failure_packets.yfilter)
	|| ydk::is_set(total_number_of_drop_packets.yfilter)
	|| ydk::is_set(unresolved_prefix_packets.yfilter)
	|| ydk::is_set(unsupported_feature_packets.yfilter);
}

std::string FibStatistics::Nodes::Node::Drops::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "drops";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > FibStatistics::Nodes::Node::Drops::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (acl_in_rpf_packets.is_set || is_set(acl_in_rpf_packets.yfilter)) leaf_name_data.push_back(acl_in_rpf_packets.get_name_leafdata());
    if (checksum_error_packets.is_set || is_set(checksum_error_packets.yfilter)) leaf_name_data.push_back(checksum_error_packets.get_name_leafdata());
    if (df_unreachable_packets.is_set || is_set(df_unreachable_packets.yfilter)) leaf_name_data.push_back(df_unreachable_packets.get_name_leafdata());
    if (discard_packets.is_set || is_set(discard_packets.yfilter)) leaf_name_data.push_back(discard_packets.get_name_leafdata());
    if (encapsulation_failure_packets.is_set || is_set(encapsulation_failure_packets.yfilter)) leaf_name_data.push_back(encapsulation_failure_packets.get_name_leafdata());
    if (fragmenation_consumed_packets.is_set || is_set(fragmenation_consumed_packets.yfilter)) leaf_name_data.push_back(fragmenation_consumed_packets.get_name_leafdata());
    if (fragmenation_failure_packets.is_set || is_set(fragmenation_failure_packets.yfilter)) leaf_name_data.push_back(fragmenation_failure_packets.get_name_leafdata());
    if (gre_error_drop.is_set || is_set(gre_error_drop.yfilter)) leaf_name_data.push_back(gre_error_drop.get_name_leafdata());
    if (gre_lookup_failed_drop.is_set || is_set(gre_lookup_failed_drop.yfilter)) leaf_name_data.push_back(gre_lookup_failed_drop.get_name_leafdata());
    if (incomplete_adjacency_packets.is_set || is_set(incomplete_adjacency_packets.yfilter)) leaf_name_data.push_back(incomplete_adjacency_packets.get_name_leafdata());
    if (lisp_decap_error_drops.is_set || is_set(lisp_decap_error_drops.yfilter)) leaf_name_data.push_back(lisp_decap_error_drops.get_name_leafdata());
    if (lisp_encap_error_drops.is_set || is_set(lisp_encap_error_drops.yfilter)) leaf_name_data.push_back(lisp_encap_error_drops.get_name_leafdata());
    if (lisp_punt_drops.is_set || is_set(lisp_punt_drops.yfilter)) leaf_name_data.push_back(lisp_punt_drops.get_name_leafdata());
    if (mpls_disabled_interface.is_set || is_set(mpls_disabled_interface.yfilter)) leaf_name_data.push_back(mpls_disabled_interface.get_name_leafdata());
    if (multi_label_drops.is_set || is_set(multi_label_drops.yfilter)) leaf_name_data.push_back(multi_label_drops.get_name_leafdata());
    if (no_route_packets.is_set || is_set(no_route_packets.yfilter)) leaf_name_data.push_back(no_route_packets.get_name_leafdata());
    if (null_packets.is_set || is_set(null_packets.yfilter)) leaf_name_data.push_back(null_packets.get_name_leafdata());
    if (punt_unreachable_packets.is_set || is_set(punt_unreachable_packets.yfilter)) leaf_name_data.push_back(punt_unreachable_packets.get_name_leafdata());
    if (rp_destination_drop_packets.is_set || is_set(rp_destination_drop_packets.yfilter)) leaf_name_data.push_back(rp_destination_drop_packets.get_name_leafdata());
    if (rpf_check_failure_packets.is_set || is_set(rpf_check_failure_packets.yfilter)) leaf_name_data.push_back(rpf_check_failure_packets.get_name_leafdata());
    if (total_number_of_drop_packets.is_set || is_set(total_number_of_drop_packets.yfilter)) leaf_name_data.push_back(total_number_of_drop_packets.get_name_leafdata());
    if (unresolved_prefix_packets.is_set || is_set(unresolved_prefix_packets.yfilter)) leaf_name_data.push_back(unresolved_prefix_packets.get_name_leafdata());
    if (unsupported_feature_packets.is_set || is_set(unsupported_feature_packets.yfilter)) leaf_name_data.push_back(unsupported_feature_packets.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> FibStatistics::Nodes::Node::Drops::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> FibStatistics::Nodes::Node::Drops::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void FibStatistics::Nodes::Node::Drops::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "acl-in-rpf-packets")
    {
        acl_in_rpf_packets = value;
        acl_in_rpf_packets.value_namespace = name_space;
        acl_in_rpf_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "checksum-error-packets")
    {
        checksum_error_packets = value;
        checksum_error_packets.value_namespace = name_space;
        checksum_error_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "df-unreachable-packets")
    {
        df_unreachable_packets = value;
        df_unreachable_packets.value_namespace = name_space;
        df_unreachable_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "discard-packets")
    {
        discard_packets = value;
        discard_packets.value_namespace = name_space;
        discard_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "encapsulation-failure-packets")
    {
        encapsulation_failure_packets = value;
        encapsulation_failure_packets.value_namespace = name_space;
        encapsulation_failure_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fragmenation-consumed-packets")
    {
        fragmenation_consumed_packets = value;
        fragmenation_consumed_packets.value_namespace = name_space;
        fragmenation_consumed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fragmenation-failure-packets")
    {
        fragmenation_failure_packets = value;
        fragmenation_failure_packets.value_namespace = name_space;
        fragmenation_failure_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "gre-error-drop")
    {
        gre_error_drop = value;
        gre_error_drop.value_namespace = name_space;
        gre_error_drop.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "gre-lookup-failed-drop")
    {
        gre_lookup_failed_drop = value;
        gre_lookup_failed_drop.value_namespace = name_space;
        gre_lookup_failed_drop.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "incomplete-adjacency-packets")
    {
        incomplete_adjacency_packets = value;
        incomplete_adjacency_packets.value_namespace = name_space;
        incomplete_adjacency_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-decap-error-drops")
    {
        lisp_decap_error_drops = value;
        lisp_decap_error_drops.value_namespace = name_space;
        lisp_decap_error_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-encap-error-drops")
    {
        lisp_encap_error_drops = value;
        lisp_encap_error_drops.value_namespace = name_space;
        lisp_encap_error_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-punt-drops")
    {
        lisp_punt_drops = value;
        lisp_punt_drops.value_namespace = name_space;
        lisp_punt_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mpls-disabled-interface")
    {
        mpls_disabled_interface = value;
        mpls_disabled_interface.value_namespace = name_space;
        mpls_disabled_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "multi-label-drops")
    {
        multi_label_drops = value;
        multi_label_drops.value_namespace = name_space;
        multi_label_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "no-route-packets")
    {
        no_route_packets = value;
        no_route_packets.value_namespace = name_space;
        no_route_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "null-packets")
    {
        null_packets = value;
        null_packets.value_namespace = name_space;
        null_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "punt-unreachable-packets")
    {
        punt_unreachable_packets = value;
        punt_unreachable_packets.value_namespace = name_space;
        punt_unreachable_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rp-destination-drop-packets")
    {
        rp_destination_drop_packets = value;
        rp_destination_drop_packets.value_namespace = name_space;
        rp_destination_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rpf-check-failure-packets")
    {
        rpf_check_failure_packets = value;
        rpf_check_failure_packets.value_namespace = name_space;
        rpf_check_failure_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-number-of-drop-packets")
    {
        total_number_of_drop_packets = value;
        total_number_of_drop_packets.value_namespace = name_space;
        total_number_of_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unresolved-prefix-packets")
    {
        unresolved_prefix_packets = value;
        unresolved_prefix_packets.value_namespace = name_space;
        unresolved_prefix_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unsupported-feature-packets")
    {
        unsupported_feature_packets = value;
        unsupported_feature_packets.value_namespace = name_space;
        unsupported_feature_packets.value_namespace_prefix = name_space_prefix;
    }
}

void FibStatistics::Nodes::Node::Drops::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "acl-in-rpf-packets")
    {
        acl_in_rpf_packets.yfilter = yfilter;
    }
    if(value_path == "checksum-error-packets")
    {
        checksum_error_packets.yfilter = yfilter;
    }
    if(value_path == "df-unreachable-packets")
    {
        df_unreachable_packets.yfilter = yfilter;
    }
    if(value_path == "discard-packets")
    {
        discard_packets.yfilter = yfilter;
    }
    if(value_path == "encapsulation-failure-packets")
    {
        encapsulation_failure_packets.yfilter = yfilter;
    }
    if(value_path == "fragmenation-consumed-packets")
    {
        fragmenation_consumed_packets.yfilter = yfilter;
    }
    if(value_path == "fragmenation-failure-packets")
    {
        fragmenation_failure_packets.yfilter = yfilter;
    }
    if(value_path == "gre-error-drop")
    {
        gre_error_drop.yfilter = yfilter;
    }
    if(value_path == "gre-lookup-failed-drop")
    {
        gre_lookup_failed_drop.yfilter = yfilter;
    }
    if(value_path == "incomplete-adjacency-packets")
    {
        incomplete_adjacency_packets.yfilter = yfilter;
    }
    if(value_path == "lisp-decap-error-drops")
    {
        lisp_decap_error_drops.yfilter = yfilter;
    }
    if(value_path == "lisp-encap-error-drops")
    {
        lisp_encap_error_drops.yfilter = yfilter;
    }
    if(value_path == "lisp-punt-drops")
    {
        lisp_punt_drops.yfilter = yfilter;
    }
    if(value_path == "mpls-disabled-interface")
    {
        mpls_disabled_interface.yfilter = yfilter;
    }
    if(value_path == "multi-label-drops")
    {
        multi_label_drops.yfilter = yfilter;
    }
    if(value_path == "no-route-packets")
    {
        no_route_packets.yfilter = yfilter;
    }
    if(value_path == "null-packets")
    {
        null_packets.yfilter = yfilter;
    }
    if(value_path == "punt-unreachable-packets")
    {
        punt_unreachable_packets.yfilter = yfilter;
    }
    if(value_path == "rp-destination-drop-packets")
    {
        rp_destination_drop_packets.yfilter = yfilter;
    }
    if(value_path == "rpf-check-failure-packets")
    {
        rpf_check_failure_packets.yfilter = yfilter;
    }
    if(value_path == "total-number-of-drop-packets")
    {
        total_number_of_drop_packets.yfilter = yfilter;
    }
    if(value_path == "unresolved-prefix-packets")
    {
        unresolved_prefix_packets.yfilter = yfilter;
    }
    if(value_path == "unsupported-feature-packets")
    {
        unsupported_feature_packets.yfilter = yfilter;
    }
}

bool FibStatistics::Nodes::Node::Drops::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "acl-in-rpf-packets" || name == "checksum-error-packets" || name == "df-unreachable-packets" || name == "discard-packets" || name == "encapsulation-failure-packets" || name == "fragmenation-consumed-packets" || name == "fragmenation-failure-packets" || name == "gre-error-drop" || name == "gre-lookup-failed-drop" || name == "incomplete-adjacency-packets" || name == "lisp-decap-error-drops" || name == "lisp-encap-error-drops" || name == "lisp-punt-drops" || name == "mpls-disabled-interface" || name == "multi-label-drops" || name == "no-route-packets" || name == "null-packets" || name == "punt-unreachable-packets" || name == "rp-destination-drop-packets" || name == "rpf-check-failure-packets" || name == "total-number-of-drop-packets" || name == "unresolved-prefix-packets" || name == "unsupported-feature-packets")
        return true;
    return false;
}

MplsForwarding::MplsForwarding()
    :
    nodes(std::make_shared<MplsForwarding::Nodes>())
{
    nodes->parent = this;

    yang_name = "mpls-forwarding"; yang_parent_name = "Cisco-IOS-XR-fib-common-oper"; is_top_level_class = true; has_list_ancestor = false;
}

MplsForwarding::~MplsForwarding()
{
}

bool MplsForwarding::has_data() const
{
    return (nodes !=  nullptr && nodes->has_data());
}

bool MplsForwarding::has_operation() const
{
    return is_set(yfilter)
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string MplsForwarding::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:mpls-forwarding";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nodes")
    {
        if(nodes == nullptr)
        {
            nodes = std::make_shared<MplsForwarding::Nodes>();
        }
        return nodes;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nodes != nullptr)
    {
        children["nodes"] = nodes;
    }

    return children;
}

void MplsForwarding::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void MplsForwarding::set_filter(const std::string & value_path, YFilter yfilter)
{
}

std::shared_ptr<Entity> MplsForwarding::clone_ptr() const
{
    return std::make_shared<MplsForwarding>();
}

std::string MplsForwarding::get_bundle_yang_models_location() const
{
    return ydk_cisco_ios_xr_models_path;
}

std::string MplsForwarding::get_bundle_name() const
{
    return "cisco_ios_xr";
}

augment_capabilities_function MplsForwarding::get_augment_capabilities_function() const
{
    return cisco_ios_xr_augment_lookup_tables;
}

std::map<std::pair<std::string, std::string>, std::string> MplsForwarding::get_namespace_identity_lookup() const
{
    return cisco_ios_xr_namespace_identity_lookup;
}

bool MplsForwarding::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nodes")
        return true;
    return false;
}

MplsForwarding::Nodes::Nodes()
{

    yang_name = "nodes"; yang_parent_name = "mpls-forwarding"; is_top_level_class = false; has_list_ancestor = false;
}

MplsForwarding::Nodes::~Nodes()
{
}

bool MplsForwarding::Nodes::has_data() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool MplsForwarding::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string MplsForwarding::Nodes::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:mpls-forwarding/" << get_segment_path();
    return path_buffer.str();
}

std::string MplsForwarding::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "node")
    {
        for(auto const & c : node)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<MplsForwarding::Nodes::Node>();
        c->parent = this;
        node.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : node)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void MplsForwarding::Nodes::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void MplsForwarding::Nodes::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool MplsForwarding::Nodes::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "node")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::Node()
    :
    node_name{YType::str, "node-name"}
    	,
    forwarding_summary(std::make_shared<MplsForwarding::Nodes::Node::ForwardingSummary>())
	,frr_database(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase>())
	,frr_logs(std::make_shared<MplsForwarding::Nodes::Node::FrrLogs>())
	,label_fib(std::make_shared<MplsForwarding::Nodes::Node::LabelFib>())
	,tunnel(std::make_shared<MplsForwarding::Nodes::Node::Tunnel>())
{
    forwarding_summary->parent = this;
    frr_database->parent = this;
    frr_logs->parent = this;
    label_fib->parent = this;
    tunnel->parent = this;

    yang_name = "node"; yang_parent_name = "nodes"; is_top_level_class = false; has_list_ancestor = false;
}

MplsForwarding::Nodes::Node::~Node()
{
}

bool MplsForwarding::Nodes::Node::has_data() const
{
    return node_name.is_set
	|| (forwarding_summary !=  nullptr && forwarding_summary->has_data())
	|| (frr_database !=  nullptr && frr_database->has_data())
	|| (frr_logs !=  nullptr && frr_logs->has_data())
	|| (label_fib !=  nullptr && label_fib->has_data())
	|| (tunnel !=  nullptr && tunnel->has_data());
}

bool MplsForwarding::Nodes::Node::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(node_name.yfilter)
	|| (forwarding_summary !=  nullptr && forwarding_summary->has_operation())
	|| (frr_database !=  nullptr && frr_database->has_operation())
	|| (frr_logs !=  nullptr && frr_logs->has_operation())
	|| (label_fib !=  nullptr && label_fib->has_operation())
	|| (tunnel !=  nullptr && tunnel->has_operation());
}

std::string MplsForwarding::Nodes::Node::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:mpls-forwarding/nodes/" << get_segment_path();
    return path_buffer.str();
}

std::string MplsForwarding::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node" <<"[node-name='" <<node_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_name.is_set || is_set(node_name.yfilter)) leaf_name_data.push_back(node_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "forwarding-summary")
    {
        if(forwarding_summary == nullptr)
        {
            forwarding_summary = std::make_shared<MplsForwarding::Nodes::Node::ForwardingSummary>();
        }
        return forwarding_summary;
    }

    if(child_yang_name == "frr-database")
    {
        if(frr_database == nullptr)
        {
            frr_database = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase>();
        }
        return frr_database;
    }

    if(child_yang_name == "frr-logs")
    {
        if(frr_logs == nullptr)
        {
            frr_logs = std::make_shared<MplsForwarding::Nodes::Node::FrrLogs>();
        }
        return frr_logs;
    }

    if(child_yang_name == "label-fib")
    {
        if(label_fib == nullptr)
        {
            label_fib = std::make_shared<MplsForwarding::Nodes::Node::LabelFib>();
        }
        return label_fib;
    }

    if(child_yang_name == "tunnel")
    {
        if(tunnel == nullptr)
        {
            tunnel = std::make_shared<MplsForwarding::Nodes::Node::Tunnel>();
        }
        return tunnel;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(forwarding_summary != nullptr)
    {
        children["forwarding-summary"] = forwarding_summary;
    }

    if(frr_database != nullptr)
    {
        children["frr-database"] = frr_database;
    }

    if(frr_logs != nullptr)
    {
        children["frr-logs"] = frr_logs;
    }

    if(label_fib != nullptr)
    {
        children["label-fib"] = label_fib;
    }

    if(tunnel != nullptr)
    {
        children["tunnel"] = tunnel;
    }

    return children;
}

void MplsForwarding::Nodes::Node::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "node-name")
    {
        node_name = value;
        node_name.value_namespace = name_space;
        node_name.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "node-name")
    {
        node_name.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "forwarding-summary" || name == "frr-database" || name == "frr-logs" || name == "label-fib" || name == "tunnel" || name == "node-name")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::ForwardingSummary::ForwardingSummary()
    :
    deleted_stale_entries{YType::uint32, "deleted-stale-entries"},
    global_dropped_packets{YType::uint64, "global-dropped-packets"},
    global_failed_lookups{YType::uint64, "global-failed-lookups"},
    global_fragmented_packets{YType::uint64, "global-fragmented-packets"},
    highest_label{YType::uint32, "highest-label"},
    ignore_protect{YType::uint32, "ignore-protect"},
    ipv4_imposition_entries{YType::uint32, "ipv4-imposition-entries"},
    label_switched_entries{YType::uint32, "label-switched-entries"},
    lowest_label{YType::uint32, "lowest-label"},
    lrpf_entries{YType::uint32, "lrpf-entries"},
    mte_head_entries{YType::uint32, "mte-head-entries"},
    mte_ll_entries{YType::uint32, "mte-ll-entries"},
    mte_midpoint_entries{YType::uint32, "mte-midpoint-entries"},
    reserved_label_entries{YType::uint32, "reserved-label-entries"},
    te_frr_head_entries{YType::uint32, "te-frr-head-entries"},
    te_frr_interface_entries{YType::uint32, "te-frr-interface-entries"},
    te_frr_internal_entries{YType::uint32, "te-frr-internal-entries"},
    te_frr_mid_points_entries{YType::uint32, "te-frr-mid-points-entries"},
    te_frr_next_hop_entries{YType::uint32, "te-frr-next-hop-entries"},
    te_head_entries{YType::uint32, "te-head-entries"},
    te_internal_entries{YType::uint32, "te-internal-entries"},
    te_mid_points_entries{YType::uint32, "te-mid-points-entries"},
    total_forwarding_update_messages{YType::uint32, "total-forwarding-update-messages"},
    total_forwarding_updates{YType::uint32, "total-forwarding-updates"},
    total_p2mp_forwarding_added_or_modify_messages{YType::uint32, "total-p2mp-forwarding-added-or-modify-messages"},
    total_p2mp_forwarding_delete_messages{YType::uint32, "total-p2mp-forwarding-delete-messages"},
    total_p2mp_forwarding_drop_messages{YType::uint32, "total-p2mp-forwarding-drop-messages"},
    total_p2mp_forwarding_updates{YType::uint32, "total-p2mp-forwarding-updates"},
    total_p2mp_iir_forwarding_drop_messages{YType::uint32, "total-p2mp-iir-forwarding-drop-messages"}
{

    yang_name = "forwarding-summary"; yang_parent_name = "node"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::ForwardingSummary::~ForwardingSummary()
{
}

bool MplsForwarding::Nodes::Node::ForwardingSummary::has_data() const
{
    return deleted_stale_entries.is_set
	|| global_dropped_packets.is_set
	|| global_failed_lookups.is_set
	|| global_fragmented_packets.is_set
	|| highest_label.is_set
	|| ignore_protect.is_set
	|| ipv4_imposition_entries.is_set
	|| label_switched_entries.is_set
	|| lowest_label.is_set
	|| lrpf_entries.is_set
	|| mte_head_entries.is_set
	|| mte_ll_entries.is_set
	|| mte_midpoint_entries.is_set
	|| reserved_label_entries.is_set
	|| te_frr_head_entries.is_set
	|| te_frr_interface_entries.is_set
	|| te_frr_internal_entries.is_set
	|| te_frr_mid_points_entries.is_set
	|| te_frr_next_hop_entries.is_set
	|| te_head_entries.is_set
	|| te_internal_entries.is_set
	|| te_mid_points_entries.is_set
	|| total_forwarding_update_messages.is_set
	|| total_forwarding_updates.is_set
	|| total_p2mp_forwarding_added_or_modify_messages.is_set
	|| total_p2mp_forwarding_delete_messages.is_set
	|| total_p2mp_forwarding_drop_messages.is_set
	|| total_p2mp_forwarding_updates.is_set
	|| total_p2mp_iir_forwarding_drop_messages.is_set;
}

bool MplsForwarding::Nodes::Node::ForwardingSummary::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(deleted_stale_entries.yfilter)
	|| ydk::is_set(global_dropped_packets.yfilter)
	|| ydk::is_set(global_failed_lookups.yfilter)
	|| ydk::is_set(global_fragmented_packets.yfilter)
	|| ydk::is_set(highest_label.yfilter)
	|| ydk::is_set(ignore_protect.yfilter)
	|| ydk::is_set(ipv4_imposition_entries.yfilter)
	|| ydk::is_set(label_switched_entries.yfilter)
	|| ydk::is_set(lowest_label.yfilter)
	|| ydk::is_set(lrpf_entries.yfilter)
	|| ydk::is_set(mte_head_entries.yfilter)
	|| ydk::is_set(mte_ll_entries.yfilter)
	|| ydk::is_set(mte_midpoint_entries.yfilter)
	|| ydk::is_set(reserved_label_entries.yfilter)
	|| ydk::is_set(te_frr_head_entries.yfilter)
	|| ydk::is_set(te_frr_interface_entries.yfilter)
	|| ydk::is_set(te_frr_internal_entries.yfilter)
	|| ydk::is_set(te_frr_mid_points_entries.yfilter)
	|| ydk::is_set(te_frr_next_hop_entries.yfilter)
	|| ydk::is_set(te_head_entries.yfilter)
	|| ydk::is_set(te_internal_entries.yfilter)
	|| ydk::is_set(te_mid_points_entries.yfilter)
	|| ydk::is_set(total_forwarding_update_messages.yfilter)
	|| ydk::is_set(total_forwarding_updates.yfilter)
	|| ydk::is_set(total_p2mp_forwarding_added_or_modify_messages.yfilter)
	|| ydk::is_set(total_p2mp_forwarding_delete_messages.yfilter)
	|| ydk::is_set(total_p2mp_forwarding_drop_messages.yfilter)
	|| ydk::is_set(total_p2mp_forwarding_updates.yfilter)
	|| ydk::is_set(total_p2mp_iir_forwarding_drop_messages.yfilter);
}

std::string MplsForwarding::Nodes::Node::ForwardingSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "forwarding-summary";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::ForwardingSummary::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (deleted_stale_entries.is_set || is_set(deleted_stale_entries.yfilter)) leaf_name_data.push_back(deleted_stale_entries.get_name_leafdata());
    if (global_dropped_packets.is_set || is_set(global_dropped_packets.yfilter)) leaf_name_data.push_back(global_dropped_packets.get_name_leafdata());
    if (global_failed_lookups.is_set || is_set(global_failed_lookups.yfilter)) leaf_name_data.push_back(global_failed_lookups.get_name_leafdata());
    if (global_fragmented_packets.is_set || is_set(global_fragmented_packets.yfilter)) leaf_name_data.push_back(global_fragmented_packets.get_name_leafdata());
    if (highest_label.is_set || is_set(highest_label.yfilter)) leaf_name_data.push_back(highest_label.get_name_leafdata());
    if (ignore_protect.is_set || is_set(ignore_protect.yfilter)) leaf_name_data.push_back(ignore_protect.get_name_leafdata());
    if (ipv4_imposition_entries.is_set || is_set(ipv4_imposition_entries.yfilter)) leaf_name_data.push_back(ipv4_imposition_entries.get_name_leafdata());
    if (label_switched_entries.is_set || is_set(label_switched_entries.yfilter)) leaf_name_data.push_back(label_switched_entries.get_name_leafdata());
    if (lowest_label.is_set || is_set(lowest_label.yfilter)) leaf_name_data.push_back(lowest_label.get_name_leafdata());
    if (lrpf_entries.is_set || is_set(lrpf_entries.yfilter)) leaf_name_data.push_back(lrpf_entries.get_name_leafdata());
    if (mte_head_entries.is_set || is_set(mte_head_entries.yfilter)) leaf_name_data.push_back(mte_head_entries.get_name_leafdata());
    if (mte_ll_entries.is_set || is_set(mte_ll_entries.yfilter)) leaf_name_data.push_back(mte_ll_entries.get_name_leafdata());
    if (mte_midpoint_entries.is_set || is_set(mte_midpoint_entries.yfilter)) leaf_name_data.push_back(mte_midpoint_entries.get_name_leafdata());
    if (reserved_label_entries.is_set || is_set(reserved_label_entries.yfilter)) leaf_name_data.push_back(reserved_label_entries.get_name_leafdata());
    if (te_frr_head_entries.is_set || is_set(te_frr_head_entries.yfilter)) leaf_name_data.push_back(te_frr_head_entries.get_name_leafdata());
    if (te_frr_interface_entries.is_set || is_set(te_frr_interface_entries.yfilter)) leaf_name_data.push_back(te_frr_interface_entries.get_name_leafdata());
    if (te_frr_internal_entries.is_set || is_set(te_frr_internal_entries.yfilter)) leaf_name_data.push_back(te_frr_internal_entries.get_name_leafdata());
    if (te_frr_mid_points_entries.is_set || is_set(te_frr_mid_points_entries.yfilter)) leaf_name_data.push_back(te_frr_mid_points_entries.get_name_leafdata());
    if (te_frr_next_hop_entries.is_set || is_set(te_frr_next_hop_entries.yfilter)) leaf_name_data.push_back(te_frr_next_hop_entries.get_name_leafdata());
    if (te_head_entries.is_set || is_set(te_head_entries.yfilter)) leaf_name_data.push_back(te_head_entries.get_name_leafdata());
    if (te_internal_entries.is_set || is_set(te_internal_entries.yfilter)) leaf_name_data.push_back(te_internal_entries.get_name_leafdata());
    if (te_mid_points_entries.is_set || is_set(te_mid_points_entries.yfilter)) leaf_name_data.push_back(te_mid_points_entries.get_name_leafdata());
    if (total_forwarding_update_messages.is_set || is_set(total_forwarding_update_messages.yfilter)) leaf_name_data.push_back(total_forwarding_update_messages.get_name_leafdata());
    if (total_forwarding_updates.is_set || is_set(total_forwarding_updates.yfilter)) leaf_name_data.push_back(total_forwarding_updates.get_name_leafdata());
    if (total_p2mp_forwarding_added_or_modify_messages.is_set || is_set(total_p2mp_forwarding_added_or_modify_messages.yfilter)) leaf_name_data.push_back(total_p2mp_forwarding_added_or_modify_messages.get_name_leafdata());
    if (total_p2mp_forwarding_delete_messages.is_set || is_set(total_p2mp_forwarding_delete_messages.yfilter)) leaf_name_data.push_back(total_p2mp_forwarding_delete_messages.get_name_leafdata());
    if (total_p2mp_forwarding_drop_messages.is_set || is_set(total_p2mp_forwarding_drop_messages.yfilter)) leaf_name_data.push_back(total_p2mp_forwarding_drop_messages.get_name_leafdata());
    if (total_p2mp_forwarding_updates.is_set || is_set(total_p2mp_forwarding_updates.yfilter)) leaf_name_data.push_back(total_p2mp_forwarding_updates.get_name_leafdata());
    if (total_p2mp_iir_forwarding_drop_messages.is_set || is_set(total_p2mp_iir_forwarding_drop_messages.yfilter)) leaf_name_data.push_back(total_p2mp_iir_forwarding_drop_messages.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::ForwardingSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::ForwardingSummary::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::ForwardingSummary::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "deleted-stale-entries")
    {
        deleted_stale_entries = value;
        deleted_stale_entries.value_namespace = name_space;
        deleted_stale_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "global-dropped-packets")
    {
        global_dropped_packets = value;
        global_dropped_packets.value_namespace = name_space;
        global_dropped_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "global-failed-lookups")
    {
        global_failed_lookups = value;
        global_failed_lookups.value_namespace = name_space;
        global_failed_lookups.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "global-fragmented-packets")
    {
        global_fragmented_packets = value;
        global_fragmented_packets.value_namespace = name_space;
        global_fragmented_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "highest-label")
    {
        highest_label = value;
        highest_label.value_namespace = name_space;
        highest_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ignore-protect")
    {
        ignore_protect = value;
        ignore_protect.value_namespace = name_space;
        ignore_protect.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ipv4-imposition-entries")
    {
        ipv4_imposition_entries = value;
        ipv4_imposition_entries.value_namespace = name_space;
        ipv4_imposition_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-switched-entries")
    {
        label_switched_entries = value;
        label_switched_entries.value_namespace = name_space;
        label_switched_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lowest-label")
    {
        lowest_label = value;
        lowest_label.value_namespace = name_space;
        lowest_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lrpf-entries")
    {
        lrpf_entries = value;
        lrpf_entries.value_namespace = name_space;
        lrpf_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mte-head-entries")
    {
        mte_head_entries = value;
        mte_head_entries.value_namespace = name_space;
        mte_head_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mte-ll-entries")
    {
        mte_ll_entries = value;
        mte_ll_entries.value_namespace = name_space;
        mte_ll_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mte-midpoint-entries")
    {
        mte_midpoint_entries = value;
        mte_midpoint_entries.value_namespace = name_space;
        mte_midpoint_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "reserved-label-entries")
    {
        reserved_label_entries = value;
        reserved_label_entries.value_namespace = name_space;
        reserved_label_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "te-frr-head-entries")
    {
        te_frr_head_entries = value;
        te_frr_head_entries.value_namespace = name_space;
        te_frr_head_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "te-frr-interface-entries")
    {
        te_frr_interface_entries = value;
        te_frr_interface_entries.value_namespace = name_space;
        te_frr_interface_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "te-frr-internal-entries")
    {
        te_frr_internal_entries = value;
        te_frr_internal_entries.value_namespace = name_space;
        te_frr_internal_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "te-frr-mid-points-entries")
    {
        te_frr_mid_points_entries = value;
        te_frr_mid_points_entries.value_namespace = name_space;
        te_frr_mid_points_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "te-frr-next-hop-entries")
    {
        te_frr_next_hop_entries = value;
        te_frr_next_hop_entries.value_namespace = name_space;
        te_frr_next_hop_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "te-head-entries")
    {
        te_head_entries = value;
        te_head_entries.value_namespace = name_space;
        te_head_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "te-internal-entries")
    {
        te_internal_entries = value;
        te_internal_entries.value_namespace = name_space;
        te_internal_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "te-mid-points-entries")
    {
        te_mid_points_entries = value;
        te_mid_points_entries.value_namespace = name_space;
        te_mid_points_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-forwarding-update-messages")
    {
        total_forwarding_update_messages = value;
        total_forwarding_update_messages.value_namespace = name_space;
        total_forwarding_update_messages.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-forwarding-updates")
    {
        total_forwarding_updates = value;
        total_forwarding_updates.value_namespace = name_space;
        total_forwarding_updates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-p2mp-forwarding-added-or-modify-messages")
    {
        total_p2mp_forwarding_added_or_modify_messages = value;
        total_p2mp_forwarding_added_or_modify_messages.value_namespace = name_space;
        total_p2mp_forwarding_added_or_modify_messages.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-p2mp-forwarding-delete-messages")
    {
        total_p2mp_forwarding_delete_messages = value;
        total_p2mp_forwarding_delete_messages.value_namespace = name_space;
        total_p2mp_forwarding_delete_messages.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-p2mp-forwarding-drop-messages")
    {
        total_p2mp_forwarding_drop_messages = value;
        total_p2mp_forwarding_drop_messages.value_namespace = name_space;
        total_p2mp_forwarding_drop_messages.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-p2mp-forwarding-updates")
    {
        total_p2mp_forwarding_updates = value;
        total_p2mp_forwarding_updates.value_namespace = name_space;
        total_p2mp_forwarding_updates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-p2mp-iir-forwarding-drop-messages")
    {
        total_p2mp_iir_forwarding_drop_messages = value;
        total_p2mp_iir_forwarding_drop_messages.value_namespace = name_space;
        total_p2mp_iir_forwarding_drop_messages.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::ForwardingSummary::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "deleted-stale-entries")
    {
        deleted_stale_entries.yfilter = yfilter;
    }
    if(value_path == "global-dropped-packets")
    {
        global_dropped_packets.yfilter = yfilter;
    }
    if(value_path == "global-failed-lookups")
    {
        global_failed_lookups.yfilter = yfilter;
    }
    if(value_path == "global-fragmented-packets")
    {
        global_fragmented_packets.yfilter = yfilter;
    }
    if(value_path == "highest-label")
    {
        highest_label.yfilter = yfilter;
    }
    if(value_path == "ignore-protect")
    {
        ignore_protect.yfilter = yfilter;
    }
    if(value_path == "ipv4-imposition-entries")
    {
        ipv4_imposition_entries.yfilter = yfilter;
    }
    if(value_path == "label-switched-entries")
    {
        label_switched_entries.yfilter = yfilter;
    }
    if(value_path == "lowest-label")
    {
        lowest_label.yfilter = yfilter;
    }
    if(value_path == "lrpf-entries")
    {
        lrpf_entries.yfilter = yfilter;
    }
    if(value_path == "mte-head-entries")
    {
        mte_head_entries.yfilter = yfilter;
    }
    if(value_path == "mte-ll-entries")
    {
        mte_ll_entries.yfilter = yfilter;
    }
    if(value_path == "mte-midpoint-entries")
    {
        mte_midpoint_entries.yfilter = yfilter;
    }
    if(value_path == "reserved-label-entries")
    {
        reserved_label_entries.yfilter = yfilter;
    }
    if(value_path == "te-frr-head-entries")
    {
        te_frr_head_entries.yfilter = yfilter;
    }
    if(value_path == "te-frr-interface-entries")
    {
        te_frr_interface_entries.yfilter = yfilter;
    }
    if(value_path == "te-frr-internal-entries")
    {
        te_frr_internal_entries.yfilter = yfilter;
    }
    if(value_path == "te-frr-mid-points-entries")
    {
        te_frr_mid_points_entries.yfilter = yfilter;
    }
    if(value_path == "te-frr-next-hop-entries")
    {
        te_frr_next_hop_entries.yfilter = yfilter;
    }
    if(value_path == "te-head-entries")
    {
        te_head_entries.yfilter = yfilter;
    }
    if(value_path == "te-internal-entries")
    {
        te_internal_entries.yfilter = yfilter;
    }
    if(value_path == "te-mid-points-entries")
    {
        te_mid_points_entries.yfilter = yfilter;
    }
    if(value_path == "total-forwarding-update-messages")
    {
        total_forwarding_update_messages.yfilter = yfilter;
    }
    if(value_path == "total-forwarding-updates")
    {
        total_forwarding_updates.yfilter = yfilter;
    }
    if(value_path == "total-p2mp-forwarding-added-or-modify-messages")
    {
        total_p2mp_forwarding_added_or_modify_messages.yfilter = yfilter;
    }
    if(value_path == "total-p2mp-forwarding-delete-messages")
    {
        total_p2mp_forwarding_delete_messages.yfilter = yfilter;
    }
    if(value_path == "total-p2mp-forwarding-drop-messages")
    {
        total_p2mp_forwarding_drop_messages.yfilter = yfilter;
    }
    if(value_path == "total-p2mp-forwarding-updates")
    {
        total_p2mp_forwarding_updates.yfilter = yfilter;
    }
    if(value_path == "total-p2mp-iir-forwarding-drop-messages")
    {
        total_p2mp_iir_forwarding_drop_messages.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::ForwardingSummary::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "deleted-stale-entries" || name == "global-dropped-packets" || name == "global-failed-lookups" || name == "global-fragmented-packets" || name == "highest-label" || name == "ignore-protect" || name == "ipv4-imposition-entries" || name == "label-switched-entries" || name == "lowest-label" || name == "lrpf-entries" || name == "mte-head-entries" || name == "mte-ll-entries" || name == "mte-midpoint-entries" || name == "reserved-label-entries" || name == "te-frr-head-entries" || name == "te-frr-interface-entries" || name == "te-frr-internal-entries" || name == "te-frr-mid-points-entries" || name == "te-frr-next-hop-entries" || name == "te-head-entries" || name == "te-internal-entries" || name == "te-mid-points-entries" || name == "total-forwarding-update-messages" || name == "total-forwarding-updates" || name == "total-p2mp-forwarding-added-or-modify-messages" || name == "total-p2mp-forwarding-delete-messages" || name == "total-p2mp-forwarding-drop-messages" || name == "total-p2mp-forwarding-updates" || name == "total-p2mp-iir-forwarding-drop-messages")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrDatabase()
    :
    frrdb_backup_interface_summaries(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries>())
	,frrdb_protected_interface_table_summaries(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries>())
	,frrdb_summary(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary>())
	,frrdb_tunnel_head_summary(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary>())
	,frrdb_tunnel_heads(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads>())
	,frrdb_tunnel_midpoint_summary(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary>())
	,frrdb_tunnel_midpoints(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints>())
{
    frrdb_backup_interface_summaries->parent = this;
    frrdb_protected_interface_table_summaries->parent = this;
    frrdb_summary->parent = this;
    frrdb_tunnel_head_summary->parent = this;
    frrdb_tunnel_heads->parent = this;
    frrdb_tunnel_midpoint_summary->parent = this;
    frrdb_tunnel_midpoints->parent = this;

    yang_name = "frr-database"; yang_parent_name = "node"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::~FrrDatabase()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::has_data() const
{
    return (frrdb_backup_interface_summaries !=  nullptr && frrdb_backup_interface_summaries->has_data())
	|| (frrdb_protected_interface_table_summaries !=  nullptr && frrdb_protected_interface_table_summaries->has_data())
	|| (frrdb_summary !=  nullptr && frrdb_summary->has_data())
	|| (frrdb_tunnel_head_summary !=  nullptr && frrdb_tunnel_head_summary->has_data())
	|| (frrdb_tunnel_heads !=  nullptr && frrdb_tunnel_heads->has_data())
	|| (frrdb_tunnel_midpoint_summary !=  nullptr && frrdb_tunnel_midpoint_summary->has_data())
	|| (frrdb_tunnel_midpoints !=  nullptr && frrdb_tunnel_midpoints->has_data());
}

bool MplsForwarding::Nodes::Node::FrrDatabase::has_operation() const
{
    return is_set(yfilter)
	|| (frrdb_backup_interface_summaries !=  nullptr && frrdb_backup_interface_summaries->has_operation())
	|| (frrdb_protected_interface_table_summaries !=  nullptr && frrdb_protected_interface_table_summaries->has_operation())
	|| (frrdb_summary !=  nullptr && frrdb_summary->has_operation())
	|| (frrdb_tunnel_head_summary !=  nullptr && frrdb_tunnel_head_summary->has_operation())
	|| (frrdb_tunnel_heads !=  nullptr && frrdb_tunnel_heads->has_operation())
	|| (frrdb_tunnel_midpoint_summary !=  nullptr && frrdb_tunnel_midpoint_summary->has_operation())
	|| (frrdb_tunnel_midpoints !=  nullptr && frrdb_tunnel_midpoints->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-database";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frrdb-backup-interface-summaries")
    {
        if(frrdb_backup_interface_summaries == nullptr)
        {
            frrdb_backup_interface_summaries = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries>();
        }
        return frrdb_backup_interface_summaries;
    }

    if(child_yang_name == "frrdb-protected-interface-table-summaries")
    {
        if(frrdb_protected_interface_table_summaries == nullptr)
        {
            frrdb_protected_interface_table_summaries = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries>();
        }
        return frrdb_protected_interface_table_summaries;
    }

    if(child_yang_name == "frrdb-summary")
    {
        if(frrdb_summary == nullptr)
        {
            frrdb_summary = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary>();
        }
        return frrdb_summary;
    }

    if(child_yang_name == "frrdb-tunnel-head-summary")
    {
        if(frrdb_tunnel_head_summary == nullptr)
        {
            frrdb_tunnel_head_summary = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary>();
        }
        return frrdb_tunnel_head_summary;
    }

    if(child_yang_name == "frrdb-tunnel-heads")
    {
        if(frrdb_tunnel_heads == nullptr)
        {
            frrdb_tunnel_heads = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads>();
        }
        return frrdb_tunnel_heads;
    }

    if(child_yang_name == "frrdb-tunnel-midpoint-summary")
    {
        if(frrdb_tunnel_midpoint_summary == nullptr)
        {
            frrdb_tunnel_midpoint_summary = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary>();
        }
        return frrdb_tunnel_midpoint_summary;
    }

    if(child_yang_name == "frrdb-tunnel-midpoints")
    {
        if(frrdb_tunnel_midpoints == nullptr)
        {
            frrdb_tunnel_midpoints = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints>();
        }
        return frrdb_tunnel_midpoints;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(frrdb_backup_interface_summaries != nullptr)
    {
        children["frrdb-backup-interface-summaries"] = frrdb_backup_interface_summaries;
    }

    if(frrdb_protected_interface_table_summaries != nullptr)
    {
        children["frrdb-protected-interface-table-summaries"] = frrdb_protected_interface_table_summaries;
    }

    if(frrdb_summary != nullptr)
    {
        children["frrdb-summary"] = frrdb_summary;
    }

    if(frrdb_tunnel_head_summary != nullptr)
    {
        children["frrdb-tunnel-head-summary"] = frrdb_tunnel_head_summary;
    }

    if(frrdb_tunnel_heads != nullptr)
    {
        children["frrdb-tunnel-heads"] = frrdb_tunnel_heads;
    }

    if(frrdb_tunnel_midpoint_summary != nullptr)
    {
        children["frrdb-tunnel-midpoint-summary"] = frrdb_tunnel_midpoint_summary;
    }

    if(frrdb_tunnel_midpoints != nullptr)
    {
        children["frrdb-tunnel-midpoints"] = frrdb_tunnel_midpoints;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void MplsForwarding::Nodes::Node::FrrDatabase::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frrdb-backup-interface-summaries" || name == "frrdb-protected-interface-table-summaries" || name == "frrdb-summary" || name == "frrdb-tunnel-head-summary" || name == "frrdb-tunnel-heads" || name == "frrdb-tunnel-midpoint-summary" || name == "frrdb-tunnel-midpoints")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummaries()
{

    yang_name = "frrdb-backup-interface-summaries"; yang_parent_name = "frr-database"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::~FrrdbBackupInterfaceSummaries()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::has_data() const
{
    for (std::size_t index=0; index<frrdb_backup_interface_summary.size(); index++)
    {
        if(frrdb_backup_interface_summary[index]->has_data())
            return true;
    }
    return false;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::has_operation() const
{
    for (std::size_t index=0; index<frrdb_backup_interface_summary.size(); index++)
    {
        if(frrdb_backup_interface_summary[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrdb-backup-interface-summaries";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frrdb-backup-interface-summary")
    {
        for(auto const & c : frrdb_backup_interface_summary)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary>();
        c->parent = this;
        frrdb_backup_interface_summary.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : frrdb_backup_interface_summary)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frrdb-backup-interface-summary")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary::FrrdbBackupInterfaceSummary()
    :
    interface_name{YType::str, "interface-name"},
    active{YType::uint32, "active"},
    other{YType::uint32, "other"},
    partial{YType::uint32, "partial"},
    ready{YType::uint32, "ready"}
{

    yang_name = "frrdb-backup-interface-summary"; yang_parent_name = "frrdb-backup-interface-summaries"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary::~FrrdbBackupInterfaceSummary()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary::has_data() const
{
    return interface_name.is_set
	|| active.is_set
	|| other.is_set
	|| partial.is_set
	|| ready.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(interface_name.yfilter)
	|| ydk::is_set(active.yfilter)
	|| ydk::is_set(other.yfilter)
	|| ydk::is_set(partial.yfilter)
	|| ydk::is_set(ready.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrdb-backup-interface-summary" <<"[interface-name='" <<interface_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.yfilter)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (active.is_set || is_set(active.yfilter)) leaf_name_data.push_back(active.get_name_leafdata());
    if (other.is_set || is_set(other.yfilter)) leaf_name_data.push_back(other.get_name_leafdata());
    if (partial.is_set || is_set(partial.yfilter)) leaf_name_data.push_back(partial.get_name_leafdata());
    if (ready.is_set || is_set(ready.yfilter)) leaf_name_data.push_back(ready.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
        interface_name.value_namespace = name_space;
        interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "active")
    {
        active = value;
        active.value_namespace = name_space;
        active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "other")
    {
        other = value;
        other.value_namespace = name_space;
        other.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "partial")
    {
        partial = value;
        partial.value_namespace = name_space;
        partial.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ready")
    {
        ready = value;
        ready.value_namespace = name_space;
        ready.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "interface-name")
    {
        interface_name.yfilter = yfilter;
    }
    if(value_path == "active")
    {
        active.yfilter = yfilter;
    }
    if(value_path == "other")
    {
        other.yfilter = yfilter;
    }
    if(value_path == "partial")
    {
        partial.yfilter = yfilter;
    }
    if(value_path == "ready")
    {
        ready.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbBackupInterfaceSummaries::FrrdbBackupInterfaceSummary::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "interface-name" || name == "active" || name == "other" || name == "partial" || name == "ready")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummaries()
{

    yang_name = "frrdb-protected-interface-table-summaries"; yang_parent_name = "frr-database"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::~FrrdbProtectedInterfaceTableSummaries()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::has_data() const
{
    for (std::size_t index=0; index<frrdb_protected_interface_table_summary.size(); index++)
    {
        if(frrdb_protected_interface_table_summary[index]->has_data())
            return true;
    }
    return false;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::has_operation() const
{
    for (std::size_t index=0; index<frrdb_protected_interface_table_summary.size(); index++)
    {
        if(frrdb_protected_interface_table_summary[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrdb-protected-interface-table-summaries";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frrdb-protected-interface-table-summary")
    {
        for(auto const & c : frrdb_protected_interface_table_summary)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary>();
        c->parent = this;
        frrdb_protected_interface_table_summary.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : frrdb_protected_interface_table_summary)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frrdb-protected-interface-table-summary")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary::FrrdbProtectedInterfaceTableSummary()
    :
    interface_name{YType::str, "interface-name"},
    active{YType::uint32, "active"},
    other{YType::uint32, "other"},
    partial{YType::uint32, "partial"},
    ready{YType::uint32, "ready"}
{

    yang_name = "frrdb-protected-interface-table-summary"; yang_parent_name = "frrdb-protected-interface-table-summaries"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary::~FrrdbProtectedInterfaceTableSummary()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary::has_data() const
{
    return interface_name.is_set
	|| active.is_set
	|| other.is_set
	|| partial.is_set
	|| ready.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(interface_name.yfilter)
	|| ydk::is_set(active.yfilter)
	|| ydk::is_set(other.yfilter)
	|| ydk::is_set(partial.yfilter)
	|| ydk::is_set(ready.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrdb-protected-interface-table-summary" <<"[interface-name='" <<interface_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.yfilter)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (active.is_set || is_set(active.yfilter)) leaf_name_data.push_back(active.get_name_leafdata());
    if (other.is_set || is_set(other.yfilter)) leaf_name_data.push_back(other.get_name_leafdata());
    if (partial.is_set || is_set(partial.yfilter)) leaf_name_data.push_back(partial.get_name_leafdata());
    if (ready.is_set || is_set(ready.yfilter)) leaf_name_data.push_back(ready.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
        interface_name.value_namespace = name_space;
        interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "active")
    {
        active = value;
        active.value_namespace = name_space;
        active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "other")
    {
        other = value;
        other.value_namespace = name_space;
        other.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "partial")
    {
        partial = value;
        partial.value_namespace = name_space;
        partial.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ready")
    {
        ready = value;
        ready.value_namespace = name_space;
        ready.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "interface-name")
    {
        interface_name.yfilter = yfilter;
    }
    if(value_path == "active")
    {
        active.yfilter = yfilter;
    }
    if(value_path == "other")
    {
        other.yfilter = yfilter;
    }
    if(value_path == "partial")
    {
        partial.yfilter = yfilter;
    }
    if(value_path == "ready")
    {
        ready.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbProtectedInterfaceTableSummaries::FrrdbProtectedInterfaceTableSummary::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "interface-name" || name == "active" || name == "other" || name == "partial" || name == "ready")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary::FrrdbSummary()
    :
    active{YType::uint32, "active"},
    other{YType::uint32, "other"},
    partial{YType::uint32, "partial"},
    ready{YType::uint32, "ready"}
{

    yang_name = "frrdb-summary"; yang_parent_name = "frr-database"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary::~FrrdbSummary()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary::has_data() const
{
    return active.is_set
	|| other.is_set
	|| partial.is_set
	|| ready.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(active.yfilter)
	|| ydk::is_set(other.yfilter)
	|| ydk::is_set(partial.yfilter)
	|| ydk::is_set(ready.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrdb-summary";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (active.is_set || is_set(active.yfilter)) leaf_name_data.push_back(active.get_name_leafdata());
    if (other.is_set || is_set(other.yfilter)) leaf_name_data.push_back(other.get_name_leafdata());
    if (partial.is_set || is_set(partial.yfilter)) leaf_name_data.push_back(partial.get_name_leafdata());
    if (ready.is_set || is_set(ready.yfilter)) leaf_name_data.push_back(ready.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "active")
    {
        active = value;
        active.value_namespace = name_space;
        active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "other")
    {
        other = value;
        other.value_namespace = name_space;
        other.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "partial")
    {
        partial = value;
        partial.value_namespace = name_space;
        partial.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ready")
    {
        ready = value;
        ready.value_namespace = name_space;
        ready.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "active")
    {
        active.yfilter = yfilter;
    }
    if(value_path == "other")
    {
        other.yfilter = yfilter;
    }
    if(value_path == "partial")
    {
        partial.yfilter = yfilter;
    }
    if(value_path == "ready")
    {
        ready.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbSummary::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "active" || name == "other" || name == "partial" || name == "ready")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary::FrrdbTunnelHeadSummary()
    :
    active{YType::uint32, "active"},
    other{YType::uint32, "other"},
    partial{YType::uint32, "partial"},
    ready{YType::uint32, "ready"}
{

    yang_name = "frrdb-tunnel-head-summary"; yang_parent_name = "frr-database"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary::~FrrdbTunnelHeadSummary()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary::has_data() const
{
    return active.is_set
	|| other.is_set
	|| partial.is_set
	|| ready.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(active.yfilter)
	|| ydk::is_set(other.yfilter)
	|| ydk::is_set(partial.yfilter)
	|| ydk::is_set(ready.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrdb-tunnel-head-summary";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (active.is_set || is_set(active.yfilter)) leaf_name_data.push_back(active.get_name_leafdata());
    if (other.is_set || is_set(other.yfilter)) leaf_name_data.push_back(other.get_name_leafdata());
    if (partial.is_set || is_set(partial.yfilter)) leaf_name_data.push_back(partial.get_name_leafdata());
    if (ready.is_set || is_set(ready.yfilter)) leaf_name_data.push_back(ready.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "active")
    {
        active = value;
        active.value_namespace = name_space;
        active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "other")
    {
        other = value;
        other.value_namespace = name_space;
        other.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "partial")
    {
        partial = value;
        partial.value_namespace = name_space;
        partial.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ready")
    {
        ready = value;
        ready.value_namespace = name_space;
        ready.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "active")
    {
        active.yfilter = yfilter;
    }
    if(value_path == "other")
    {
        other.yfilter = yfilter;
    }
    if(value_path == "partial")
    {
        partial.yfilter = yfilter;
    }
    if(value_path == "ready")
    {
        ready.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeadSummary::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "active" || name == "other" || name == "partial" || name == "ready")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHeads()
{

    yang_name = "frrdb-tunnel-heads"; yang_parent_name = "frr-database"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::~FrrdbTunnelHeads()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::has_data() const
{
    for (std::size_t index=0; index<frrdb_tunnel_head.size(); index++)
    {
        if(frrdb_tunnel_head[index]->has_data())
            return true;
    }
    return false;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::has_operation() const
{
    for (std::size_t index=0; index<frrdb_tunnel_head.size(); index++)
    {
        if(frrdb_tunnel_head[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrdb-tunnel-heads";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frrdb-tunnel-head")
    {
        for(auto const & c : frrdb_tunnel_head)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead>();
        c->parent = this;
        frrdb_tunnel_head.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : frrdb_tunnel_head)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frrdb-tunnel-head")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrdbTunnelHead()
    :
    interface_name{YType::str, "interface-name"},
    frr_lable_string{YType::str, "frr-lable-string"},
    outgoing_lable_string{YType::str, "outgoing-lable-string"}
    	,
    frr_db(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb>())
{
    frr_db->parent = this;

    yang_name = "frrdb-tunnel-head"; yang_parent_name = "frrdb-tunnel-heads"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::~FrrdbTunnelHead()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::has_data() const
{
    return interface_name.is_set
	|| frr_lable_string.is_set
	|| outgoing_lable_string.is_set
	|| (frr_db !=  nullptr && frr_db->has_data());
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(interface_name.yfilter)
	|| ydk::is_set(frr_lable_string.yfilter)
	|| ydk::is_set(outgoing_lable_string.yfilter)
	|| (frr_db !=  nullptr && frr_db->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrdb-tunnel-head" <<"[interface-name='" <<interface_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.yfilter)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (frr_lable_string.is_set || is_set(frr_lable_string.yfilter)) leaf_name_data.push_back(frr_lable_string.get_name_leafdata());
    if (outgoing_lable_string.is_set || is_set(outgoing_lable_string.yfilter)) leaf_name_data.push_back(outgoing_lable_string.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frr-db")
    {
        if(frr_db == nullptr)
        {
            frr_db = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb>();
        }
        return frr_db;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(frr_db != nullptr)
    {
        children["frr-db"] = frr_db;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
        interface_name.value_namespace = name_space;
        interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-lable-string")
    {
        frr_lable_string = value;
        frr_lable_string.value_namespace = name_space;
        frr_lable_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-lable-string")
    {
        outgoing_lable_string = value;
        outgoing_lable_string.value_namespace = name_space;
        outgoing_lable_string.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "interface-name")
    {
        interface_name.yfilter = yfilter;
    }
    if(value_path == "frr-lable-string")
    {
        frr_lable_string.yfilter = yfilter;
    }
    if(value_path == "outgoing-lable-string")
    {
        outgoing_lable_string.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frr-db" || name == "interface-name" || name == "frr-lable-string" || name == "outgoing-lable-string")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrDb()
    :
    entry_frr_state{YType::enumeration, "entry-frr-state"},
    frr_interface_name{YType::str, "frr-interface-name"},
    frr_label{YType::uint32, "frr-label"},
    frr_next_hop_ipv4_address{YType::str, "frr-next-hop-ipv4-address"},
    input_label{YType::uint32, "input-label"},
    is_mldp_lsp{YType::boolean, "is-mldp-lsp"},
    is_multicast_tunnel{YType::boolean, "is-multicast-tunnel"},
    multicast_tunnel_legs{YType::uint32, "multicast-tunnel-legs"},
    outgoing_interface{YType::str, "outgoing-interface"},
    outgoing_label{YType::uint32, "outgoing-label"},
    tunnel_interface_name{YType::str, "tunnel-interface-name"}
    	,
    frr_entry_id(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId>())
{
    frr_entry_id->parent = this;

    yang_name = "frr-db"; yang_parent_name = "frrdb-tunnel-head"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::~FrrDb()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::has_data() const
{
    for (std::size_t index=0; index<multicast_leg.size(); index++)
    {
        if(multicast_leg[index]->has_data())
            return true;
    }
    return entry_frr_state.is_set
	|| frr_interface_name.is_set
	|| frr_label.is_set
	|| frr_next_hop_ipv4_address.is_set
	|| input_label.is_set
	|| is_mldp_lsp.is_set
	|| is_multicast_tunnel.is_set
	|| multicast_tunnel_legs.is_set
	|| outgoing_interface.is_set
	|| outgoing_label.is_set
	|| tunnel_interface_name.is_set
	|| (frr_entry_id !=  nullptr && frr_entry_id->has_data());
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::has_operation() const
{
    for (std::size_t index=0; index<multicast_leg.size(); index++)
    {
        if(multicast_leg[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(entry_frr_state.yfilter)
	|| ydk::is_set(frr_interface_name.yfilter)
	|| ydk::is_set(frr_label.yfilter)
	|| ydk::is_set(frr_next_hop_ipv4_address.yfilter)
	|| ydk::is_set(input_label.yfilter)
	|| ydk::is_set(is_mldp_lsp.yfilter)
	|| ydk::is_set(is_multicast_tunnel.yfilter)
	|| ydk::is_set(multicast_tunnel_legs.yfilter)
	|| ydk::is_set(outgoing_interface.yfilter)
	|| ydk::is_set(outgoing_label.yfilter)
	|| ydk::is_set(tunnel_interface_name.yfilter)
	|| (frr_entry_id !=  nullptr && frr_entry_id->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-db";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry_frr_state.is_set || is_set(entry_frr_state.yfilter)) leaf_name_data.push_back(entry_frr_state.get_name_leafdata());
    if (frr_interface_name.is_set || is_set(frr_interface_name.yfilter)) leaf_name_data.push_back(frr_interface_name.get_name_leafdata());
    if (frr_label.is_set || is_set(frr_label.yfilter)) leaf_name_data.push_back(frr_label.get_name_leafdata());
    if (frr_next_hop_ipv4_address.is_set || is_set(frr_next_hop_ipv4_address.yfilter)) leaf_name_data.push_back(frr_next_hop_ipv4_address.get_name_leafdata());
    if (input_label.is_set || is_set(input_label.yfilter)) leaf_name_data.push_back(input_label.get_name_leafdata());
    if (is_mldp_lsp.is_set || is_set(is_mldp_lsp.yfilter)) leaf_name_data.push_back(is_mldp_lsp.get_name_leafdata());
    if (is_multicast_tunnel.is_set || is_set(is_multicast_tunnel.yfilter)) leaf_name_data.push_back(is_multicast_tunnel.get_name_leafdata());
    if (multicast_tunnel_legs.is_set || is_set(multicast_tunnel_legs.yfilter)) leaf_name_data.push_back(multicast_tunnel_legs.get_name_leafdata());
    if (outgoing_interface.is_set || is_set(outgoing_interface.yfilter)) leaf_name_data.push_back(outgoing_interface.get_name_leafdata());
    if (outgoing_label.is_set || is_set(outgoing_label.yfilter)) leaf_name_data.push_back(outgoing_label.get_name_leafdata());
    if (tunnel_interface_name.is_set || is_set(tunnel_interface_name.yfilter)) leaf_name_data.push_back(tunnel_interface_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frr-entry-id")
    {
        if(frr_entry_id == nullptr)
        {
            frr_entry_id = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId>();
        }
        return frr_entry_id;
    }

    if(child_yang_name == "multicast-leg")
    {
        for(auto const & c : multicast_leg)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg>();
        c->parent = this;
        multicast_leg.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(frr_entry_id != nullptr)
    {
        children["frr-entry-id"] = frr_entry_id;
    }

    for (auto const & c : multicast_leg)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry-frr-state")
    {
        entry_frr_state = value;
        entry_frr_state.value_namespace = name_space;
        entry_frr_state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-interface-name")
    {
        frr_interface_name = value;
        frr_interface_name.value_namespace = name_space;
        frr_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-label")
    {
        frr_label = value;
        frr_label.value_namespace = name_space;
        frr_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-next-hop-ipv4-address")
    {
        frr_next_hop_ipv4_address = value;
        frr_next_hop_ipv4_address.value_namespace = name_space;
        frr_next_hop_ipv4_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "input-label")
    {
        input_label = value;
        input_label.value_namespace = name_space;
        input_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "is-mldp-lsp")
    {
        is_mldp_lsp = value;
        is_mldp_lsp.value_namespace = name_space;
        is_mldp_lsp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "is-multicast-tunnel")
    {
        is_multicast_tunnel = value;
        is_multicast_tunnel.value_namespace = name_space;
        is_multicast_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "multicast-tunnel-legs")
    {
        multicast_tunnel_legs = value;
        multicast_tunnel_legs.value_namespace = name_space;
        multicast_tunnel_legs.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-interface")
    {
        outgoing_interface = value;
        outgoing_interface.value_namespace = name_space;
        outgoing_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-label")
    {
        outgoing_label = value;
        outgoing_label.value_namespace = name_space;
        outgoing_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-interface-name")
    {
        tunnel_interface_name = value;
        tunnel_interface_name.value_namespace = name_space;
        tunnel_interface_name.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry-frr-state")
    {
        entry_frr_state.yfilter = yfilter;
    }
    if(value_path == "frr-interface-name")
    {
        frr_interface_name.yfilter = yfilter;
    }
    if(value_path == "frr-label")
    {
        frr_label.yfilter = yfilter;
    }
    if(value_path == "frr-next-hop-ipv4-address")
    {
        frr_next_hop_ipv4_address.yfilter = yfilter;
    }
    if(value_path == "input-label")
    {
        input_label.yfilter = yfilter;
    }
    if(value_path == "is-mldp-lsp")
    {
        is_mldp_lsp.yfilter = yfilter;
    }
    if(value_path == "is-multicast-tunnel")
    {
        is_multicast_tunnel.yfilter = yfilter;
    }
    if(value_path == "multicast-tunnel-legs")
    {
        multicast_tunnel_legs.yfilter = yfilter;
    }
    if(value_path == "outgoing-interface")
    {
        outgoing_interface.yfilter = yfilter;
    }
    if(value_path == "outgoing-label")
    {
        outgoing_label.yfilter = yfilter;
    }
    if(value_path == "tunnel-interface-name")
    {
        tunnel_interface_name.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frr-entry-id" || name == "multicast-leg" || name == "entry-frr-state" || name == "frr-interface-name" || name == "frr-label" || name == "frr-next-hop-ipv4-address" || name == "input-label" || name == "is-mldp-lsp" || name == "is-multicast-tunnel" || name == "multicast-tunnel-legs" || name == "outgoing-interface" || name == "outgoing-label" || name == "tunnel-interface-name")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::FrrEntryId()
    :
    role{YType::enumeration, "role"}
    	,
    head(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head>())
	,midpoint(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint>())
{
    head->parent = this;
    midpoint->parent = this;

    yang_name = "frr-entry-id"; yang_parent_name = "frr-db"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::~FrrEntryId()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::has_data() const
{
    return role.is_set
	|| (head !=  nullptr && head->has_data())
	|| (midpoint !=  nullptr && midpoint->has_data());
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(role.yfilter)
	|| (head !=  nullptr && head->has_operation())
	|| (midpoint !=  nullptr && midpoint->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-entry-id";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (role.is_set || is_set(role.yfilter)) leaf_name_data.push_back(role.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "head")
    {
        if(head == nullptr)
        {
            head = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head>();
        }
        return head;
    }

    if(child_yang_name == "midpoint")
    {
        if(midpoint == nullptr)
        {
            midpoint = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint>();
        }
        return midpoint;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(head != nullptr)
    {
        children["head"] = head;
    }

    if(midpoint != nullptr)
    {
        children["midpoint"] = midpoint;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "role")
    {
        role = value;
        role.value_namespace = name_space;
        role.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "role")
    {
        role.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "head" || name == "midpoint" || name == "role")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head::Head()
    :
    destination_prefix{YType::str, "destination-prefix"},
    destination_prefix_length{YType::uint32, "destination-prefix-length"}
{

    yang_name = "head"; yang_parent_name = "frr-entry-id"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head::~Head()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head::has_data() const
{
    return destination_prefix.is_set
	|| destination_prefix_length.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(destination_prefix.yfilter)
	|| ydk::is_set(destination_prefix_length.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "head";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_prefix.is_set || is_set(destination_prefix.yfilter)) leaf_name_data.push_back(destination_prefix.get_name_leafdata());
    if (destination_prefix_length.is_set || is_set(destination_prefix_length.yfilter)) leaf_name_data.push_back(destination_prefix_length.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "destination-prefix")
    {
        destination_prefix = value;
        destination_prefix.value_namespace = name_space;
        destination_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "destination-prefix-length")
    {
        destination_prefix_length = value;
        destination_prefix_length.value_namespace = name_space;
        destination_prefix_length.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "destination-prefix")
    {
        destination_prefix.yfilter = yfilter;
    }
    if(value_path == "destination-prefix-length")
    {
        destination_prefix_length.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Head::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "destination-prefix" || name == "destination-prefix-length")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint::Midpoint()
    :
    lspid{YType::uint32, "lspid"},
    source_address{YType::str, "source-address"},
    tunnel_id{YType::uint32, "tunnel-id"}
{

    yang_name = "midpoint"; yang_parent_name = "frr-entry-id"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint::~Midpoint()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint::has_data() const
{
    return lspid.is_set
	|| source_address.is_set
	|| tunnel_id.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(lspid.yfilter)
	|| ydk::is_set(source_address.yfilter)
	|| ydk::is_set(tunnel_id.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "midpoint";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (lspid.is_set || is_set(lspid.yfilter)) leaf_name_data.push_back(lspid.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.yfilter)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.yfilter)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "lspid")
    {
        lspid = value;
        lspid.value_namespace = name_space;
        lspid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "source-address")
    {
        source_address = value;
        source_address.value_namespace = name_space;
        source_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
        tunnel_id.value_namespace = name_space;
        tunnel_id.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "lspid")
    {
        lspid.yfilter = yfilter;
    }
    if(value_path == "source-address")
    {
        source_address.yfilter = yfilter;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::FrrEntryId::Midpoint::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "lspid" || name == "source-address" || name == "tunnel-id")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::MulticastLeg()
    :
    entry_frr_state{YType::enumeration, "entry-frr-state"},
    frr_interface_name{YType::str, "frr-interface-name"},
    frr_label{YType::uint32, "frr-label"},
    frr_next_hop_ipv4_address{YType::str, "frr-next-hop-ipv4-address"},
    input_label{YType::uint32, "input-label"},
    is_mldp_lsp{YType::boolean, "is-mldp-lsp"},
    outgoing_interface{YType::str, "outgoing-interface"},
    outgoing_label{YType::uint32, "outgoing-label"},
    tunnel_interface_name{YType::str, "tunnel-interface-name"}
    	,
    frr_entry_id(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId>())
{
    frr_entry_id->parent = this;

    yang_name = "multicast-leg"; yang_parent_name = "frr-db"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::~MulticastLeg()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::has_data() const
{
    return entry_frr_state.is_set
	|| frr_interface_name.is_set
	|| frr_label.is_set
	|| frr_next_hop_ipv4_address.is_set
	|| input_label.is_set
	|| is_mldp_lsp.is_set
	|| outgoing_interface.is_set
	|| outgoing_label.is_set
	|| tunnel_interface_name.is_set
	|| (frr_entry_id !=  nullptr && frr_entry_id->has_data());
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry_frr_state.yfilter)
	|| ydk::is_set(frr_interface_name.yfilter)
	|| ydk::is_set(frr_label.yfilter)
	|| ydk::is_set(frr_next_hop_ipv4_address.yfilter)
	|| ydk::is_set(input_label.yfilter)
	|| ydk::is_set(is_mldp_lsp.yfilter)
	|| ydk::is_set(outgoing_interface.yfilter)
	|| ydk::is_set(outgoing_label.yfilter)
	|| ydk::is_set(tunnel_interface_name.yfilter)
	|| (frr_entry_id !=  nullptr && frr_entry_id->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "multicast-leg";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry_frr_state.is_set || is_set(entry_frr_state.yfilter)) leaf_name_data.push_back(entry_frr_state.get_name_leafdata());
    if (frr_interface_name.is_set || is_set(frr_interface_name.yfilter)) leaf_name_data.push_back(frr_interface_name.get_name_leafdata());
    if (frr_label.is_set || is_set(frr_label.yfilter)) leaf_name_data.push_back(frr_label.get_name_leafdata());
    if (frr_next_hop_ipv4_address.is_set || is_set(frr_next_hop_ipv4_address.yfilter)) leaf_name_data.push_back(frr_next_hop_ipv4_address.get_name_leafdata());
    if (input_label.is_set || is_set(input_label.yfilter)) leaf_name_data.push_back(input_label.get_name_leafdata());
    if (is_mldp_lsp.is_set || is_set(is_mldp_lsp.yfilter)) leaf_name_data.push_back(is_mldp_lsp.get_name_leafdata());
    if (outgoing_interface.is_set || is_set(outgoing_interface.yfilter)) leaf_name_data.push_back(outgoing_interface.get_name_leafdata());
    if (outgoing_label.is_set || is_set(outgoing_label.yfilter)) leaf_name_data.push_back(outgoing_label.get_name_leafdata());
    if (tunnel_interface_name.is_set || is_set(tunnel_interface_name.yfilter)) leaf_name_data.push_back(tunnel_interface_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frr-entry-id")
    {
        if(frr_entry_id == nullptr)
        {
            frr_entry_id = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId>();
        }
        return frr_entry_id;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(frr_entry_id != nullptr)
    {
        children["frr-entry-id"] = frr_entry_id;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry-frr-state")
    {
        entry_frr_state = value;
        entry_frr_state.value_namespace = name_space;
        entry_frr_state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-interface-name")
    {
        frr_interface_name = value;
        frr_interface_name.value_namespace = name_space;
        frr_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-label")
    {
        frr_label = value;
        frr_label.value_namespace = name_space;
        frr_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-next-hop-ipv4-address")
    {
        frr_next_hop_ipv4_address = value;
        frr_next_hop_ipv4_address.value_namespace = name_space;
        frr_next_hop_ipv4_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "input-label")
    {
        input_label = value;
        input_label.value_namespace = name_space;
        input_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "is-mldp-lsp")
    {
        is_mldp_lsp = value;
        is_mldp_lsp.value_namespace = name_space;
        is_mldp_lsp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-interface")
    {
        outgoing_interface = value;
        outgoing_interface.value_namespace = name_space;
        outgoing_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-label")
    {
        outgoing_label = value;
        outgoing_label.value_namespace = name_space;
        outgoing_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-interface-name")
    {
        tunnel_interface_name = value;
        tunnel_interface_name.value_namespace = name_space;
        tunnel_interface_name.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry-frr-state")
    {
        entry_frr_state.yfilter = yfilter;
    }
    if(value_path == "frr-interface-name")
    {
        frr_interface_name.yfilter = yfilter;
    }
    if(value_path == "frr-label")
    {
        frr_label.yfilter = yfilter;
    }
    if(value_path == "frr-next-hop-ipv4-address")
    {
        frr_next_hop_ipv4_address.yfilter = yfilter;
    }
    if(value_path == "input-label")
    {
        input_label.yfilter = yfilter;
    }
    if(value_path == "is-mldp-lsp")
    {
        is_mldp_lsp.yfilter = yfilter;
    }
    if(value_path == "outgoing-interface")
    {
        outgoing_interface.yfilter = yfilter;
    }
    if(value_path == "outgoing-label")
    {
        outgoing_label.yfilter = yfilter;
    }
    if(value_path == "tunnel-interface-name")
    {
        tunnel_interface_name.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frr-entry-id" || name == "entry-frr-state" || name == "frr-interface-name" || name == "frr-label" || name == "frr-next-hop-ipv4-address" || name == "input-label" || name == "is-mldp-lsp" || name == "outgoing-interface" || name == "outgoing-label" || name == "tunnel-interface-name")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::FrrEntryId()
    :
    role{YType::enumeration, "role"}
    	,
    head(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head>())
	,midpoint(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint>())
{
    head->parent = this;
    midpoint->parent = this;

    yang_name = "frr-entry-id"; yang_parent_name = "multicast-leg"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::~FrrEntryId()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::has_data() const
{
    return role.is_set
	|| (head !=  nullptr && head->has_data())
	|| (midpoint !=  nullptr && midpoint->has_data());
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(role.yfilter)
	|| (head !=  nullptr && head->has_operation())
	|| (midpoint !=  nullptr && midpoint->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-entry-id";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (role.is_set || is_set(role.yfilter)) leaf_name_data.push_back(role.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "head")
    {
        if(head == nullptr)
        {
            head = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head>();
        }
        return head;
    }

    if(child_yang_name == "midpoint")
    {
        if(midpoint == nullptr)
        {
            midpoint = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint>();
        }
        return midpoint;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(head != nullptr)
    {
        children["head"] = head;
    }

    if(midpoint != nullptr)
    {
        children["midpoint"] = midpoint;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "role")
    {
        role = value;
        role.value_namespace = name_space;
        role.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "role")
    {
        role.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "head" || name == "midpoint" || name == "role")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head::Head()
    :
    destination_prefix{YType::str, "destination-prefix"},
    destination_prefix_length{YType::uint32, "destination-prefix-length"}
{

    yang_name = "head"; yang_parent_name = "frr-entry-id"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head::~Head()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head::has_data() const
{
    return destination_prefix.is_set
	|| destination_prefix_length.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(destination_prefix.yfilter)
	|| ydk::is_set(destination_prefix_length.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "head";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_prefix.is_set || is_set(destination_prefix.yfilter)) leaf_name_data.push_back(destination_prefix.get_name_leafdata());
    if (destination_prefix_length.is_set || is_set(destination_prefix_length.yfilter)) leaf_name_data.push_back(destination_prefix_length.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "destination-prefix")
    {
        destination_prefix = value;
        destination_prefix.value_namespace = name_space;
        destination_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "destination-prefix-length")
    {
        destination_prefix_length = value;
        destination_prefix_length.value_namespace = name_space;
        destination_prefix_length.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "destination-prefix")
    {
        destination_prefix.yfilter = yfilter;
    }
    if(value_path == "destination-prefix-length")
    {
        destination_prefix_length.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Head::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "destination-prefix" || name == "destination-prefix-length")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint::Midpoint()
    :
    lspid{YType::uint32, "lspid"},
    source_address{YType::str, "source-address"},
    tunnel_id{YType::uint32, "tunnel-id"}
{

    yang_name = "midpoint"; yang_parent_name = "frr-entry-id"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint::~Midpoint()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint::has_data() const
{
    return lspid.is_set
	|| source_address.is_set
	|| tunnel_id.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(lspid.yfilter)
	|| ydk::is_set(source_address.yfilter)
	|| ydk::is_set(tunnel_id.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "midpoint";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (lspid.is_set || is_set(lspid.yfilter)) leaf_name_data.push_back(lspid.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.yfilter)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.yfilter)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "lspid")
    {
        lspid = value;
        lspid.value_namespace = name_space;
        lspid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "source-address")
    {
        source_address = value;
        source_address.value_namespace = name_space;
        source_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
        tunnel_id.value_namespace = name_space;
        tunnel_id.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "lspid")
    {
        lspid.yfilter = yfilter;
    }
    if(value_path == "source-address")
    {
        source_address.yfilter = yfilter;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelHeads::FrrdbTunnelHead::FrrDb::MulticastLeg::FrrEntryId::Midpoint::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "lspid" || name == "source-address" || name == "tunnel-id")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary::FrrdbTunnelMidpointSummary()
    :
    active{YType::uint32, "active"},
    other{YType::uint32, "other"},
    partial{YType::uint32, "partial"},
    ready{YType::uint32, "ready"}
{

    yang_name = "frrdb-tunnel-midpoint-summary"; yang_parent_name = "frr-database"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary::~FrrdbTunnelMidpointSummary()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary::has_data() const
{
    return active.is_set
	|| other.is_set
	|| partial.is_set
	|| ready.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(active.yfilter)
	|| ydk::is_set(other.yfilter)
	|| ydk::is_set(partial.yfilter)
	|| ydk::is_set(ready.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrdb-tunnel-midpoint-summary";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (active.is_set || is_set(active.yfilter)) leaf_name_data.push_back(active.get_name_leafdata());
    if (other.is_set || is_set(other.yfilter)) leaf_name_data.push_back(other.get_name_leafdata());
    if (partial.is_set || is_set(partial.yfilter)) leaf_name_data.push_back(partial.get_name_leafdata());
    if (ready.is_set || is_set(ready.yfilter)) leaf_name_data.push_back(ready.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "active")
    {
        active = value;
        active.value_namespace = name_space;
        active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "other")
    {
        other = value;
        other.value_namespace = name_space;
        other.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "partial")
    {
        partial = value;
        partial.value_namespace = name_space;
        partial.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ready")
    {
        ready = value;
        ready.value_namespace = name_space;
        ready.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "active")
    {
        active.yfilter = yfilter;
    }
    if(value_path == "other")
    {
        other.yfilter = yfilter;
    }
    if(value_path == "partial")
    {
        partial.yfilter = yfilter;
    }
    if(value_path == "ready")
    {
        ready.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpointSummary::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "active" || name == "other" || name == "partial" || name == "ready")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoints()
{

    yang_name = "frrdb-tunnel-midpoints"; yang_parent_name = "frr-database"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::~FrrdbTunnelMidpoints()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::has_data() const
{
    for (std::size_t index=0; index<frrdb_tunnel_midpoint.size(); index++)
    {
        if(frrdb_tunnel_midpoint[index]->has_data())
            return true;
    }
    return false;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::has_operation() const
{
    for (std::size_t index=0; index<frrdb_tunnel_midpoint.size(); index++)
    {
        if(frrdb_tunnel_midpoint[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrdb-tunnel-midpoints";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frrdb-tunnel-midpoint")
    {
        for(auto const & c : frrdb_tunnel_midpoint)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint>();
        c->parent = this;
        frrdb_tunnel_midpoint.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : frrdb_tunnel_midpoint)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frrdb-tunnel-midpoint")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrdbTunnelMidpoint()
    :
    local_label{YType::uint32, "local-label"},
    frr_lable_string{YType::str, "frr-lable-string"},
    outgoing_lable_string{YType::str, "outgoing-lable-string"}
    	,
    frr_db(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb>())
{
    frr_db->parent = this;

    yang_name = "frrdb-tunnel-midpoint"; yang_parent_name = "frrdb-tunnel-midpoints"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::~FrrdbTunnelMidpoint()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::has_data() const
{
    return local_label.is_set
	|| frr_lable_string.is_set
	|| outgoing_lable_string.is_set
	|| (frr_db !=  nullptr && frr_db->has_data());
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(local_label.yfilter)
	|| ydk::is_set(frr_lable_string.yfilter)
	|| ydk::is_set(outgoing_lable_string.yfilter)
	|| (frr_db !=  nullptr && frr_db->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrdb-tunnel-midpoint" <<"[local-label='" <<local_label <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (local_label.is_set || is_set(local_label.yfilter)) leaf_name_data.push_back(local_label.get_name_leafdata());
    if (frr_lable_string.is_set || is_set(frr_lable_string.yfilter)) leaf_name_data.push_back(frr_lable_string.get_name_leafdata());
    if (outgoing_lable_string.is_set || is_set(outgoing_lable_string.yfilter)) leaf_name_data.push_back(outgoing_lable_string.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frr-db")
    {
        if(frr_db == nullptr)
        {
            frr_db = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb>();
        }
        return frr_db;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(frr_db != nullptr)
    {
        children["frr-db"] = frr_db;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "local-label")
    {
        local_label = value;
        local_label.value_namespace = name_space;
        local_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-lable-string")
    {
        frr_lable_string = value;
        frr_lable_string.value_namespace = name_space;
        frr_lable_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-lable-string")
    {
        outgoing_lable_string = value;
        outgoing_lable_string.value_namespace = name_space;
        outgoing_lable_string.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "local-label")
    {
        local_label.yfilter = yfilter;
    }
    if(value_path == "frr-lable-string")
    {
        frr_lable_string.yfilter = yfilter;
    }
    if(value_path == "outgoing-lable-string")
    {
        outgoing_lable_string.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frr-db" || name == "local-label" || name == "frr-lable-string" || name == "outgoing-lable-string")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrDb()
    :
    entry_frr_state{YType::enumeration, "entry-frr-state"},
    frr_interface_name{YType::str, "frr-interface-name"},
    frr_label{YType::uint32, "frr-label"},
    frr_next_hop_ipv4_address{YType::str, "frr-next-hop-ipv4-address"},
    input_label{YType::uint32, "input-label"},
    is_mldp_lsp{YType::boolean, "is-mldp-lsp"},
    is_multicast_tunnel{YType::boolean, "is-multicast-tunnel"},
    multicast_tunnel_legs{YType::uint32, "multicast-tunnel-legs"},
    outgoing_interface{YType::str, "outgoing-interface"},
    outgoing_label{YType::uint32, "outgoing-label"},
    tunnel_interface_name{YType::str, "tunnel-interface-name"}
    	,
    frr_entry_id(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId>())
{
    frr_entry_id->parent = this;

    yang_name = "frr-db"; yang_parent_name = "frrdb-tunnel-midpoint"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::~FrrDb()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::has_data() const
{
    for (std::size_t index=0; index<multicast_leg.size(); index++)
    {
        if(multicast_leg[index]->has_data())
            return true;
    }
    return entry_frr_state.is_set
	|| frr_interface_name.is_set
	|| frr_label.is_set
	|| frr_next_hop_ipv4_address.is_set
	|| input_label.is_set
	|| is_mldp_lsp.is_set
	|| is_multicast_tunnel.is_set
	|| multicast_tunnel_legs.is_set
	|| outgoing_interface.is_set
	|| outgoing_label.is_set
	|| tunnel_interface_name.is_set
	|| (frr_entry_id !=  nullptr && frr_entry_id->has_data());
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::has_operation() const
{
    for (std::size_t index=0; index<multicast_leg.size(); index++)
    {
        if(multicast_leg[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(entry_frr_state.yfilter)
	|| ydk::is_set(frr_interface_name.yfilter)
	|| ydk::is_set(frr_label.yfilter)
	|| ydk::is_set(frr_next_hop_ipv4_address.yfilter)
	|| ydk::is_set(input_label.yfilter)
	|| ydk::is_set(is_mldp_lsp.yfilter)
	|| ydk::is_set(is_multicast_tunnel.yfilter)
	|| ydk::is_set(multicast_tunnel_legs.yfilter)
	|| ydk::is_set(outgoing_interface.yfilter)
	|| ydk::is_set(outgoing_label.yfilter)
	|| ydk::is_set(tunnel_interface_name.yfilter)
	|| (frr_entry_id !=  nullptr && frr_entry_id->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-db";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry_frr_state.is_set || is_set(entry_frr_state.yfilter)) leaf_name_data.push_back(entry_frr_state.get_name_leafdata());
    if (frr_interface_name.is_set || is_set(frr_interface_name.yfilter)) leaf_name_data.push_back(frr_interface_name.get_name_leafdata());
    if (frr_label.is_set || is_set(frr_label.yfilter)) leaf_name_data.push_back(frr_label.get_name_leafdata());
    if (frr_next_hop_ipv4_address.is_set || is_set(frr_next_hop_ipv4_address.yfilter)) leaf_name_data.push_back(frr_next_hop_ipv4_address.get_name_leafdata());
    if (input_label.is_set || is_set(input_label.yfilter)) leaf_name_data.push_back(input_label.get_name_leafdata());
    if (is_mldp_lsp.is_set || is_set(is_mldp_lsp.yfilter)) leaf_name_data.push_back(is_mldp_lsp.get_name_leafdata());
    if (is_multicast_tunnel.is_set || is_set(is_multicast_tunnel.yfilter)) leaf_name_data.push_back(is_multicast_tunnel.get_name_leafdata());
    if (multicast_tunnel_legs.is_set || is_set(multicast_tunnel_legs.yfilter)) leaf_name_data.push_back(multicast_tunnel_legs.get_name_leafdata());
    if (outgoing_interface.is_set || is_set(outgoing_interface.yfilter)) leaf_name_data.push_back(outgoing_interface.get_name_leafdata());
    if (outgoing_label.is_set || is_set(outgoing_label.yfilter)) leaf_name_data.push_back(outgoing_label.get_name_leafdata());
    if (tunnel_interface_name.is_set || is_set(tunnel_interface_name.yfilter)) leaf_name_data.push_back(tunnel_interface_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frr-entry-id")
    {
        if(frr_entry_id == nullptr)
        {
            frr_entry_id = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId>();
        }
        return frr_entry_id;
    }

    if(child_yang_name == "multicast-leg")
    {
        for(auto const & c : multicast_leg)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg>();
        c->parent = this;
        multicast_leg.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(frr_entry_id != nullptr)
    {
        children["frr-entry-id"] = frr_entry_id;
    }

    for (auto const & c : multicast_leg)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry-frr-state")
    {
        entry_frr_state = value;
        entry_frr_state.value_namespace = name_space;
        entry_frr_state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-interface-name")
    {
        frr_interface_name = value;
        frr_interface_name.value_namespace = name_space;
        frr_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-label")
    {
        frr_label = value;
        frr_label.value_namespace = name_space;
        frr_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-next-hop-ipv4-address")
    {
        frr_next_hop_ipv4_address = value;
        frr_next_hop_ipv4_address.value_namespace = name_space;
        frr_next_hop_ipv4_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "input-label")
    {
        input_label = value;
        input_label.value_namespace = name_space;
        input_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "is-mldp-lsp")
    {
        is_mldp_lsp = value;
        is_mldp_lsp.value_namespace = name_space;
        is_mldp_lsp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "is-multicast-tunnel")
    {
        is_multicast_tunnel = value;
        is_multicast_tunnel.value_namespace = name_space;
        is_multicast_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "multicast-tunnel-legs")
    {
        multicast_tunnel_legs = value;
        multicast_tunnel_legs.value_namespace = name_space;
        multicast_tunnel_legs.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-interface")
    {
        outgoing_interface = value;
        outgoing_interface.value_namespace = name_space;
        outgoing_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-label")
    {
        outgoing_label = value;
        outgoing_label.value_namespace = name_space;
        outgoing_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-interface-name")
    {
        tunnel_interface_name = value;
        tunnel_interface_name.value_namespace = name_space;
        tunnel_interface_name.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry-frr-state")
    {
        entry_frr_state.yfilter = yfilter;
    }
    if(value_path == "frr-interface-name")
    {
        frr_interface_name.yfilter = yfilter;
    }
    if(value_path == "frr-label")
    {
        frr_label.yfilter = yfilter;
    }
    if(value_path == "frr-next-hop-ipv4-address")
    {
        frr_next_hop_ipv4_address.yfilter = yfilter;
    }
    if(value_path == "input-label")
    {
        input_label.yfilter = yfilter;
    }
    if(value_path == "is-mldp-lsp")
    {
        is_mldp_lsp.yfilter = yfilter;
    }
    if(value_path == "is-multicast-tunnel")
    {
        is_multicast_tunnel.yfilter = yfilter;
    }
    if(value_path == "multicast-tunnel-legs")
    {
        multicast_tunnel_legs.yfilter = yfilter;
    }
    if(value_path == "outgoing-interface")
    {
        outgoing_interface.yfilter = yfilter;
    }
    if(value_path == "outgoing-label")
    {
        outgoing_label.yfilter = yfilter;
    }
    if(value_path == "tunnel-interface-name")
    {
        tunnel_interface_name.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frr-entry-id" || name == "multicast-leg" || name == "entry-frr-state" || name == "frr-interface-name" || name == "frr-label" || name == "frr-next-hop-ipv4-address" || name == "input-label" || name == "is-mldp-lsp" || name == "is-multicast-tunnel" || name == "multicast-tunnel-legs" || name == "outgoing-interface" || name == "outgoing-label" || name == "tunnel-interface-name")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::FrrEntryId()
    :
    role{YType::enumeration, "role"}
    	,
    head(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head>())
	,midpoint(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint>())
{
    head->parent = this;
    midpoint->parent = this;

    yang_name = "frr-entry-id"; yang_parent_name = "frr-db"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::~FrrEntryId()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::has_data() const
{
    return role.is_set
	|| (head !=  nullptr && head->has_data())
	|| (midpoint !=  nullptr && midpoint->has_data());
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(role.yfilter)
	|| (head !=  nullptr && head->has_operation())
	|| (midpoint !=  nullptr && midpoint->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-entry-id";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (role.is_set || is_set(role.yfilter)) leaf_name_data.push_back(role.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "head")
    {
        if(head == nullptr)
        {
            head = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head>();
        }
        return head;
    }

    if(child_yang_name == "midpoint")
    {
        if(midpoint == nullptr)
        {
            midpoint = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint>();
        }
        return midpoint;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(head != nullptr)
    {
        children["head"] = head;
    }

    if(midpoint != nullptr)
    {
        children["midpoint"] = midpoint;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "role")
    {
        role = value;
        role.value_namespace = name_space;
        role.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "role")
    {
        role.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "head" || name == "midpoint" || name == "role")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head::Head()
    :
    destination_prefix{YType::str, "destination-prefix"},
    destination_prefix_length{YType::uint32, "destination-prefix-length"}
{

    yang_name = "head"; yang_parent_name = "frr-entry-id"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head::~Head()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head::has_data() const
{
    return destination_prefix.is_set
	|| destination_prefix_length.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(destination_prefix.yfilter)
	|| ydk::is_set(destination_prefix_length.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "head";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_prefix.is_set || is_set(destination_prefix.yfilter)) leaf_name_data.push_back(destination_prefix.get_name_leafdata());
    if (destination_prefix_length.is_set || is_set(destination_prefix_length.yfilter)) leaf_name_data.push_back(destination_prefix_length.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "destination-prefix")
    {
        destination_prefix = value;
        destination_prefix.value_namespace = name_space;
        destination_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "destination-prefix-length")
    {
        destination_prefix_length = value;
        destination_prefix_length.value_namespace = name_space;
        destination_prefix_length.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "destination-prefix")
    {
        destination_prefix.yfilter = yfilter;
    }
    if(value_path == "destination-prefix-length")
    {
        destination_prefix_length.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Head::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "destination-prefix" || name == "destination-prefix-length")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint::Midpoint()
    :
    lspid{YType::uint32, "lspid"},
    source_address{YType::str, "source-address"},
    tunnel_id{YType::uint32, "tunnel-id"}
{

    yang_name = "midpoint"; yang_parent_name = "frr-entry-id"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint::~Midpoint()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint::has_data() const
{
    return lspid.is_set
	|| source_address.is_set
	|| tunnel_id.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(lspid.yfilter)
	|| ydk::is_set(source_address.yfilter)
	|| ydk::is_set(tunnel_id.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "midpoint";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (lspid.is_set || is_set(lspid.yfilter)) leaf_name_data.push_back(lspid.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.yfilter)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.yfilter)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "lspid")
    {
        lspid = value;
        lspid.value_namespace = name_space;
        lspid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "source-address")
    {
        source_address = value;
        source_address.value_namespace = name_space;
        source_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
        tunnel_id.value_namespace = name_space;
        tunnel_id.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "lspid")
    {
        lspid.yfilter = yfilter;
    }
    if(value_path == "source-address")
    {
        source_address.yfilter = yfilter;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::FrrEntryId::Midpoint::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "lspid" || name == "source-address" || name == "tunnel-id")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::MulticastLeg()
    :
    entry_frr_state{YType::enumeration, "entry-frr-state"},
    frr_interface_name{YType::str, "frr-interface-name"},
    frr_label{YType::uint32, "frr-label"},
    frr_next_hop_ipv4_address{YType::str, "frr-next-hop-ipv4-address"},
    input_label{YType::uint32, "input-label"},
    is_mldp_lsp{YType::boolean, "is-mldp-lsp"},
    outgoing_interface{YType::str, "outgoing-interface"},
    outgoing_label{YType::uint32, "outgoing-label"},
    tunnel_interface_name{YType::str, "tunnel-interface-name"}
    	,
    frr_entry_id(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId>())
{
    frr_entry_id->parent = this;

    yang_name = "multicast-leg"; yang_parent_name = "frr-db"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::~MulticastLeg()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::has_data() const
{
    return entry_frr_state.is_set
	|| frr_interface_name.is_set
	|| frr_label.is_set
	|| frr_next_hop_ipv4_address.is_set
	|| input_label.is_set
	|| is_mldp_lsp.is_set
	|| outgoing_interface.is_set
	|| outgoing_label.is_set
	|| tunnel_interface_name.is_set
	|| (frr_entry_id !=  nullptr && frr_entry_id->has_data());
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry_frr_state.yfilter)
	|| ydk::is_set(frr_interface_name.yfilter)
	|| ydk::is_set(frr_label.yfilter)
	|| ydk::is_set(frr_next_hop_ipv4_address.yfilter)
	|| ydk::is_set(input_label.yfilter)
	|| ydk::is_set(is_mldp_lsp.yfilter)
	|| ydk::is_set(outgoing_interface.yfilter)
	|| ydk::is_set(outgoing_label.yfilter)
	|| ydk::is_set(tunnel_interface_name.yfilter)
	|| (frr_entry_id !=  nullptr && frr_entry_id->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "multicast-leg";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry_frr_state.is_set || is_set(entry_frr_state.yfilter)) leaf_name_data.push_back(entry_frr_state.get_name_leafdata());
    if (frr_interface_name.is_set || is_set(frr_interface_name.yfilter)) leaf_name_data.push_back(frr_interface_name.get_name_leafdata());
    if (frr_label.is_set || is_set(frr_label.yfilter)) leaf_name_data.push_back(frr_label.get_name_leafdata());
    if (frr_next_hop_ipv4_address.is_set || is_set(frr_next_hop_ipv4_address.yfilter)) leaf_name_data.push_back(frr_next_hop_ipv4_address.get_name_leafdata());
    if (input_label.is_set || is_set(input_label.yfilter)) leaf_name_data.push_back(input_label.get_name_leafdata());
    if (is_mldp_lsp.is_set || is_set(is_mldp_lsp.yfilter)) leaf_name_data.push_back(is_mldp_lsp.get_name_leafdata());
    if (outgoing_interface.is_set || is_set(outgoing_interface.yfilter)) leaf_name_data.push_back(outgoing_interface.get_name_leafdata());
    if (outgoing_label.is_set || is_set(outgoing_label.yfilter)) leaf_name_data.push_back(outgoing_label.get_name_leafdata());
    if (tunnel_interface_name.is_set || is_set(tunnel_interface_name.yfilter)) leaf_name_data.push_back(tunnel_interface_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frr-entry-id")
    {
        if(frr_entry_id == nullptr)
        {
            frr_entry_id = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId>();
        }
        return frr_entry_id;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(frr_entry_id != nullptr)
    {
        children["frr-entry-id"] = frr_entry_id;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry-frr-state")
    {
        entry_frr_state = value;
        entry_frr_state.value_namespace = name_space;
        entry_frr_state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-interface-name")
    {
        frr_interface_name = value;
        frr_interface_name.value_namespace = name_space;
        frr_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-label")
    {
        frr_label = value;
        frr_label.value_namespace = name_space;
        frr_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-next-hop-ipv4-address")
    {
        frr_next_hop_ipv4_address = value;
        frr_next_hop_ipv4_address.value_namespace = name_space;
        frr_next_hop_ipv4_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "input-label")
    {
        input_label = value;
        input_label.value_namespace = name_space;
        input_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "is-mldp-lsp")
    {
        is_mldp_lsp = value;
        is_mldp_lsp.value_namespace = name_space;
        is_mldp_lsp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-interface")
    {
        outgoing_interface = value;
        outgoing_interface.value_namespace = name_space;
        outgoing_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-label")
    {
        outgoing_label = value;
        outgoing_label.value_namespace = name_space;
        outgoing_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-interface-name")
    {
        tunnel_interface_name = value;
        tunnel_interface_name.value_namespace = name_space;
        tunnel_interface_name.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry-frr-state")
    {
        entry_frr_state.yfilter = yfilter;
    }
    if(value_path == "frr-interface-name")
    {
        frr_interface_name.yfilter = yfilter;
    }
    if(value_path == "frr-label")
    {
        frr_label.yfilter = yfilter;
    }
    if(value_path == "frr-next-hop-ipv4-address")
    {
        frr_next_hop_ipv4_address.yfilter = yfilter;
    }
    if(value_path == "input-label")
    {
        input_label.yfilter = yfilter;
    }
    if(value_path == "is-mldp-lsp")
    {
        is_mldp_lsp.yfilter = yfilter;
    }
    if(value_path == "outgoing-interface")
    {
        outgoing_interface.yfilter = yfilter;
    }
    if(value_path == "outgoing-label")
    {
        outgoing_label.yfilter = yfilter;
    }
    if(value_path == "tunnel-interface-name")
    {
        tunnel_interface_name.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frr-entry-id" || name == "entry-frr-state" || name == "frr-interface-name" || name == "frr-label" || name == "frr-next-hop-ipv4-address" || name == "input-label" || name == "is-mldp-lsp" || name == "outgoing-interface" || name == "outgoing-label" || name == "tunnel-interface-name")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::FrrEntryId()
    :
    role{YType::enumeration, "role"}
    	,
    head(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head>())
	,midpoint(std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint>())
{
    head->parent = this;
    midpoint->parent = this;

    yang_name = "frr-entry-id"; yang_parent_name = "multicast-leg"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::~FrrEntryId()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::has_data() const
{
    return role.is_set
	|| (head !=  nullptr && head->has_data())
	|| (midpoint !=  nullptr && midpoint->has_data());
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(role.yfilter)
	|| (head !=  nullptr && head->has_operation())
	|| (midpoint !=  nullptr && midpoint->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-entry-id";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (role.is_set || is_set(role.yfilter)) leaf_name_data.push_back(role.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "head")
    {
        if(head == nullptr)
        {
            head = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head>();
        }
        return head;
    }

    if(child_yang_name == "midpoint")
    {
        if(midpoint == nullptr)
        {
            midpoint = std::make_shared<MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint>();
        }
        return midpoint;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(head != nullptr)
    {
        children["head"] = head;
    }

    if(midpoint != nullptr)
    {
        children["midpoint"] = midpoint;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "role")
    {
        role = value;
        role.value_namespace = name_space;
        role.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "role")
    {
        role.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "head" || name == "midpoint" || name == "role")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head::Head()
    :
    destination_prefix{YType::str, "destination-prefix"},
    destination_prefix_length{YType::uint32, "destination-prefix-length"}
{

    yang_name = "head"; yang_parent_name = "frr-entry-id"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head::~Head()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head::has_data() const
{
    return destination_prefix.is_set
	|| destination_prefix_length.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(destination_prefix.yfilter)
	|| ydk::is_set(destination_prefix_length.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "head";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_prefix.is_set || is_set(destination_prefix.yfilter)) leaf_name_data.push_back(destination_prefix.get_name_leafdata());
    if (destination_prefix_length.is_set || is_set(destination_prefix_length.yfilter)) leaf_name_data.push_back(destination_prefix_length.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "destination-prefix")
    {
        destination_prefix = value;
        destination_prefix.value_namespace = name_space;
        destination_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "destination-prefix-length")
    {
        destination_prefix_length = value;
        destination_prefix_length.value_namespace = name_space;
        destination_prefix_length.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "destination-prefix")
    {
        destination_prefix.yfilter = yfilter;
    }
    if(value_path == "destination-prefix-length")
    {
        destination_prefix_length.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Head::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "destination-prefix" || name == "destination-prefix-length")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint::Midpoint()
    :
    lspid{YType::uint32, "lspid"},
    source_address{YType::str, "source-address"},
    tunnel_id{YType::uint32, "tunnel-id"}
{

    yang_name = "midpoint"; yang_parent_name = "frr-entry-id"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint::~Midpoint()
{
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint::has_data() const
{
    return lspid.is_set
	|| source_address.is_set
	|| tunnel_id.is_set;
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(lspid.yfilter)
	|| ydk::is_set(source_address.yfilter)
	|| ydk::is_set(tunnel_id.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "midpoint";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (lspid.is_set || is_set(lspid.yfilter)) leaf_name_data.push_back(lspid.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.yfilter)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.yfilter)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "lspid")
    {
        lspid = value;
        lspid.value_namespace = name_space;
        lspid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "source-address")
    {
        source_address = value;
        source_address.value_namespace = name_space;
        source_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
        tunnel_id.value_namespace = name_space;
        tunnel_id.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "lspid")
    {
        lspid.yfilter = yfilter;
    }
    if(value_path == "source-address")
    {
        source_address.yfilter = yfilter;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrDatabase::FrrdbTunnelMidpoints::FrrdbTunnelMidpoint::FrrDb::MulticastLeg::FrrEntryId::Midpoint::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "lspid" || name == "source-address" || name == "tunnel-id")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrLogs::FrrLogs()
{

    yang_name = "frr-logs"; yang_parent_name = "node"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrLogs::~FrrLogs()
{
}

bool MplsForwarding::Nodes::Node::FrrLogs::has_data() const
{
    for (std::size_t index=0; index<frr_log.size(); index++)
    {
        if(frr_log[index]->has_data())
            return true;
    }
    return false;
}

bool MplsForwarding::Nodes::Node::FrrLogs::has_operation() const
{
    for (std::size_t index=0; index<frr_log.size(); index++)
    {
        if(frr_log[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrLogs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-logs";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrLogs::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrLogs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frr-log")
    {
        for(auto const & c : frr_log)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<MplsForwarding::Nodes::Node::FrrLogs::FrrLog>();
        c->parent = this;
        frr_log.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrLogs::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : frr_log)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrLogs::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void MplsForwarding::Nodes::Node::FrrLogs::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool MplsForwarding::Nodes::Node::FrrLogs::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frr-log")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrLogs::FrrLog::FrrLog()
    :
    event_id{YType::int32, "event-id"},
    fast_bundle_member_down_interface{YType::uint32, "fast-bundle-member-down-interface"},
    frr_event_node_id{YType::str, "frr-event-node-id"},
    main_processing{YType::uint32, "main-processing"},
    next_hop{YType::uint32, "next-hop"},
    number_of_rewrites_affected{YType::uint32, "number-of-rewrites-affected"},
    protected_frr_interface_name{YType::str, "protected-frr-interface-name"},
    switching_time_nsecs{YType::uint32, "switching-time-nsecs"}
    	,
    start_time(std::make_shared<MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime>())
{
    start_time->parent = this;

    yang_name = "frr-log"; yang_parent_name = "frr-logs"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrLogs::FrrLog::~FrrLog()
{
}

bool MplsForwarding::Nodes::Node::FrrLogs::FrrLog::has_data() const
{
    return event_id.is_set
	|| fast_bundle_member_down_interface.is_set
	|| frr_event_node_id.is_set
	|| main_processing.is_set
	|| next_hop.is_set
	|| number_of_rewrites_affected.is_set
	|| protected_frr_interface_name.is_set
	|| switching_time_nsecs.is_set
	|| (start_time !=  nullptr && start_time->has_data());
}

bool MplsForwarding::Nodes::Node::FrrLogs::FrrLog::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(event_id.yfilter)
	|| ydk::is_set(fast_bundle_member_down_interface.yfilter)
	|| ydk::is_set(frr_event_node_id.yfilter)
	|| ydk::is_set(main_processing.yfilter)
	|| ydk::is_set(next_hop.yfilter)
	|| ydk::is_set(number_of_rewrites_affected.yfilter)
	|| ydk::is_set(protected_frr_interface_name.yfilter)
	|| ydk::is_set(switching_time_nsecs.yfilter)
	|| (start_time !=  nullptr && start_time->has_operation());
}

std::string MplsForwarding::Nodes::Node::FrrLogs::FrrLog::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-log" <<"[event-id='" <<event_id <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrLogs::FrrLog::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (event_id.is_set || is_set(event_id.yfilter)) leaf_name_data.push_back(event_id.get_name_leafdata());
    if (fast_bundle_member_down_interface.is_set || is_set(fast_bundle_member_down_interface.yfilter)) leaf_name_data.push_back(fast_bundle_member_down_interface.get_name_leafdata());
    if (frr_event_node_id.is_set || is_set(frr_event_node_id.yfilter)) leaf_name_data.push_back(frr_event_node_id.get_name_leafdata());
    if (main_processing.is_set || is_set(main_processing.yfilter)) leaf_name_data.push_back(main_processing.get_name_leafdata());
    if (next_hop.is_set || is_set(next_hop.yfilter)) leaf_name_data.push_back(next_hop.get_name_leafdata());
    if (number_of_rewrites_affected.is_set || is_set(number_of_rewrites_affected.yfilter)) leaf_name_data.push_back(number_of_rewrites_affected.get_name_leafdata());
    if (protected_frr_interface_name.is_set || is_set(protected_frr_interface_name.yfilter)) leaf_name_data.push_back(protected_frr_interface_name.get_name_leafdata());
    if (switching_time_nsecs.is_set || is_set(switching_time_nsecs.yfilter)) leaf_name_data.push_back(switching_time_nsecs.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrLogs::FrrLog::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "start-time")
    {
        if(start_time == nullptr)
        {
            start_time = std::make_shared<MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime>();
        }
        return start_time;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrLogs::FrrLog::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(start_time != nullptr)
    {
        children["start-time"] = start_time;
    }

    return children;
}

void MplsForwarding::Nodes::Node::FrrLogs::FrrLog::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "event-id")
    {
        event_id = value;
        event_id.value_namespace = name_space;
        event_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fast-bundle-member-down-interface")
    {
        fast_bundle_member_down_interface = value;
        fast_bundle_member_down_interface.value_namespace = name_space;
        fast_bundle_member_down_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-event-node-id")
    {
        frr_event_node_id = value;
        frr_event_node_id.value_namespace = name_space;
        frr_event_node_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "main-processing")
    {
        main_processing = value;
        main_processing.value_namespace = name_space;
        main_processing.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop")
    {
        next_hop = value;
        next_hop.value_namespace = name_space;
        next_hop.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-rewrites-affected")
    {
        number_of_rewrites_affected = value;
        number_of_rewrites_affected.value_namespace = name_space;
        number_of_rewrites_affected.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protected-frr-interface-name")
    {
        protected_frr_interface_name = value;
        protected_frr_interface_name.value_namespace = name_space;
        protected_frr_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "switching-time-nsecs")
    {
        switching_time_nsecs = value;
        switching_time_nsecs.value_namespace = name_space;
        switching_time_nsecs.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrLogs::FrrLog::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "event-id")
    {
        event_id.yfilter = yfilter;
    }
    if(value_path == "fast-bundle-member-down-interface")
    {
        fast_bundle_member_down_interface.yfilter = yfilter;
    }
    if(value_path == "frr-event-node-id")
    {
        frr_event_node_id.yfilter = yfilter;
    }
    if(value_path == "main-processing")
    {
        main_processing.yfilter = yfilter;
    }
    if(value_path == "next-hop")
    {
        next_hop.yfilter = yfilter;
    }
    if(value_path == "number-of-rewrites-affected")
    {
        number_of_rewrites_affected.yfilter = yfilter;
    }
    if(value_path == "protected-frr-interface-name")
    {
        protected_frr_interface_name.yfilter = yfilter;
    }
    if(value_path == "switching-time-nsecs")
    {
        switching_time_nsecs.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrLogs::FrrLog::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "start-time" || name == "event-id" || name == "fast-bundle-member-down-interface" || name == "frr-event-node-id" || name == "main-processing" || name == "next-hop" || name == "number-of-rewrites-affected" || name == "protected-frr-interface-name" || name == "switching-time-nsecs")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime::StartTime()
    :
    nanoseconds{YType::int32, "nanoseconds"},
    seconds{YType::int32, "seconds"}
{

    yang_name = "start-time"; yang_parent_name = "frr-log"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime::~StartTime()
{
}

bool MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nanoseconds.yfilter)
	|| ydk::is_set(seconds.yfilter);
}

std::string MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "start-time";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.yfilter)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.yfilter)) leaf_name_data.push_back(seconds.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
        nanoseconds.value_namespace = name_space;
        nanoseconds.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "seconds")
    {
        seconds = value;
        seconds.value_namespace = name_space;
        seconds.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds.yfilter = yfilter;
    }
    if(value_path == "seconds")
    {
        seconds.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::FrrLogs::FrrLog::StartTime::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nanoseconds" || name == "seconds")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::LabelFib::LabelFib()
    :
    forwarding_details(std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails>())
	,informations(std::make_shared<MplsForwarding::Nodes::Node::LabelFib::Informations>())
	,label_security(std::make_shared<MplsForwarding::Nodes::Node::LabelFib::LabelSecurity>())
{
    forwarding_details->parent = this;
    informations->parent = this;
    label_security->parent = this;

    yang_name = "label-fib"; yang_parent_name = "node"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::LabelFib::~LabelFib()
{
}

bool MplsForwarding::Nodes::Node::LabelFib::has_data() const
{
    return (forwarding_details !=  nullptr && forwarding_details->has_data())
	|| (informations !=  nullptr && informations->has_data())
	|| (label_security !=  nullptr && label_security->has_data());
}

bool MplsForwarding::Nodes::Node::LabelFib::has_operation() const
{
    return is_set(yfilter)
	|| (forwarding_details !=  nullptr && forwarding_details->has_operation())
	|| (informations !=  nullptr && informations->has_operation())
	|| (label_security !=  nullptr && label_security->has_operation());
}

std::string MplsForwarding::Nodes::Node::LabelFib::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-fib";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::LabelFib::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::LabelFib::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "forwarding-details")
    {
        if(forwarding_details == nullptr)
        {
            forwarding_details = std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails>();
        }
        return forwarding_details;
    }

    if(child_yang_name == "informations")
    {
        if(informations == nullptr)
        {
            informations = std::make_shared<MplsForwarding::Nodes::Node::LabelFib::Informations>();
        }
        return informations;
    }

    if(child_yang_name == "label-security")
    {
        if(label_security == nullptr)
        {
            label_security = std::make_shared<MplsForwarding::Nodes::Node::LabelFib::LabelSecurity>();
        }
        return label_security;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::LabelFib::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(forwarding_details != nullptr)
    {
        children["forwarding-details"] = forwarding_details;
    }

    if(informations != nullptr)
    {
        children["informations"] = informations;
    }

    if(label_security != nullptr)
    {
        children["label-security"] = label_security;
    }

    return children;
}

void MplsForwarding::Nodes::Node::LabelFib::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void MplsForwarding::Nodes::Node::LabelFib::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool MplsForwarding::Nodes::Node::LabelFib::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "forwarding-details" || name == "informations" || name == "label-security")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetails()
{

    yang_name = "forwarding-details"; yang_parent_name = "label-fib"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::~ForwardingDetails()
{
}

bool MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::has_data() const
{
    for (std::size_t index=0; index<forwarding_detail.size(); index++)
    {
        if(forwarding_detail[index]->has_data())
            return true;
    }
    return false;
}

bool MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::has_operation() const
{
    for (std::size_t index=0; index<forwarding_detail.size(); index++)
    {
        if(forwarding_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "forwarding-details";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "forwarding-detail")
    {
        for(auto const & c : forwarding_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail>();
        c->parent = this;
        forwarding_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : forwarding_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "forwarding-detail")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::ForwardingDetail()
    :
    afi_table_id{YType::uint32, "afi-table-id"},
    eos{YType::enumeration, "eos"},
    eos_bit{YType::uint32, "eos-bit"},
    hardware_information{YType::str, "hardware-information"},
    label_value{YType::uint32, "label-value"},
    ldi_flags{YType::uint32, "ldi-flags"},
    ldi_pointer{YType::uint32, "ldi-pointer"},
    ldi_referance_count{YType::uint32, "ldi-referance-count"},
    ldi_type{YType::uint32, "ldi-type"},
    leaf_flags{YType::uint32, "leaf-flags"},
    leaf_local_label{YType::uint32, "leaf-local-label"},
    leaf_referance_count{YType::uint32, "leaf-referance-count"},
    leaf_time_in_milli_seconds{YType::uint64, "leaf-time-in-milli-seconds"},
    lspa_flags{YType::uint32, "lspa-flags"},
    lw_ldi_pointer{YType::uint32, "lw-ldi-pointer"},
    lw_ldi_refernace_count{YType::uint32, "lw-ldi-refernace-count"},
    lw_ldi_type{YType::uint32, "lw-ldi-type"},
    lw_shared_ldi_pointer{YType::uint32, "lw-shared-ldi-pointer"},
    multicast_label{YType::boolean, "multicast-label"},
    path_list_flags{YType::uint32, "path-list-flags"},
    path_list_referance_count{YType::uint32, "path-list-referance-count"}
    	,
    ldi_information(std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LdiInformation>())
	,multicast_information(std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::MulticastInformation>())
{
    ldi_information->parent = this;
    multicast_information->parent = this;

    yang_name = "forwarding-detail"; yang_parent_name = "forwarding-details"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::~ForwardingDetail()
{
}

bool MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::has_data() const
{
    for (std::size_t index=0; index<label_information.size(); index++)
    {
        if(label_information[index]->has_data())
            return true;
    }
    return afi_table_id.is_set
	|| eos.is_set
	|| eos_bit.is_set
	|| hardware_information.is_set
	|| label_value.is_set
	|| ldi_flags.is_set
	|| ldi_pointer.is_set
	|| ldi_referance_count.is_set
	|| ldi_type.is_set
	|| leaf_flags.is_set
	|| leaf_local_label.is_set
	|| leaf_referance_count.is_set
	|| leaf_time_in_milli_seconds.is_set
	|| lspa_flags.is_set
	|| lw_ldi_pointer.is_set
	|| lw_ldi_refernace_count.is_set
	|| lw_ldi_type.is_set
	|| lw_shared_ldi_pointer.is_set
	|| multicast_label.is_set
	|| path_list_flags.is_set
	|| path_list_referance_count.is_set
	|| (ldi_information !=  nullptr && ldi_information->has_data())
	|| (multicast_information !=  nullptr && multicast_information->has_data());
}

bool MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::has_operation() const
{
    for (std::size_t index=0; index<label_information.size(); index++)
    {
        if(label_information[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(afi_table_id.yfilter)
	|| ydk::is_set(eos.yfilter)
	|| ydk::is_set(eos_bit.yfilter)
	|| ydk::is_set(hardware_information.yfilter)
	|| ydk::is_set(label_value.yfilter)
	|| ydk::is_set(ldi_flags.yfilter)
	|| ydk::is_set(ldi_pointer.yfilter)
	|| ydk::is_set(ldi_referance_count.yfilter)
	|| ydk::is_set(ldi_type.yfilter)
	|| ydk::is_set(leaf_flags.yfilter)
	|| ydk::is_set(leaf_local_label.yfilter)
	|| ydk::is_set(leaf_referance_count.yfilter)
	|| ydk::is_set(leaf_time_in_milli_seconds.yfilter)
	|| ydk::is_set(lspa_flags.yfilter)
	|| ydk::is_set(lw_ldi_pointer.yfilter)
	|| ydk::is_set(lw_ldi_refernace_count.yfilter)
	|| ydk::is_set(lw_ldi_type.yfilter)
	|| ydk::is_set(lw_shared_ldi_pointer.yfilter)
	|| ydk::is_set(multicast_label.yfilter)
	|| ydk::is_set(path_list_flags.yfilter)
	|| ydk::is_set(path_list_referance_count.yfilter)
	|| (ldi_information !=  nullptr && ldi_information->has_operation())
	|| (multicast_information !=  nullptr && multicast_information->has_operation());
}

std::string MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "forwarding-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (afi_table_id.is_set || is_set(afi_table_id.yfilter)) leaf_name_data.push_back(afi_table_id.get_name_leafdata());
    if (eos.is_set || is_set(eos.yfilter)) leaf_name_data.push_back(eos.get_name_leafdata());
    if (eos_bit.is_set || is_set(eos_bit.yfilter)) leaf_name_data.push_back(eos_bit.get_name_leafdata());
    if (hardware_information.is_set || is_set(hardware_information.yfilter)) leaf_name_data.push_back(hardware_information.get_name_leafdata());
    if (label_value.is_set || is_set(label_value.yfilter)) leaf_name_data.push_back(label_value.get_name_leafdata());
    if (ldi_flags.is_set || is_set(ldi_flags.yfilter)) leaf_name_data.push_back(ldi_flags.get_name_leafdata());
    if (ldi_pointer.is_set || is_set(ldi_pointer.yfilter)) leaf_name_data.push_back(ldi_pointer.get_name_leafdata());
    if (ldi_referance_count.is_set || is_set(ldi_referance_count.yfilter)) leaf_name_data.push_back(ldi_referance_count.get_name_leafdata());
    if (ldi_type.is_set || is_set(ldi_type.yfilter)) leaf_name_data.push_back(ldi_type.get_name_leafdata());
    if (leaf_flags.is_set || is_set(leaf_flags.yfilter)) leaf_name_data.push_back(leaf_flags.get_name_leafdata());
    if (leaf_local_label.is_set || is_set(leaf_local_label.yfilter)) leaf_name_data.push_back(leaf_local_label.get_name_leafdata());
    if (leaf_referance_count.is_set || is_set(leaf_referance_count.yfilter)) leaf_name_data.push_back(leaf_referance_count.get_name_leafdata());
    if (leaf_time_in_milli_seconds.is_set || is_set(leaf_time_in_milli_seconds.yfilter)) leaf_name_data.push_back(leaf_time_in_milli_seconds.get_name_leafdata());
    if (lspa_flags.is_set || is_set(lspa_flags.yfilter)) leaf_name_data.push_back(lspa_flags.get_name_leafdata());
    if (lw_ldi_pointer.is_set || is_set(lw_ldi_pointer.yfilter)) leaf_name_data.push_back(lw_ldi_pointer.get_name_leafdata());
    if (lw_ldi_refernace_count.is_set || is_set(lw_ldi_refernace_count.yfilter)) leaf_name_data.push_back(lw_ldi_refernace_count.get_name_leafdata());
    if (lw_ldi_type.is_set || is_set(lw_ldi_type.yfilter)) leaf_name_data.push_back(lw_ldi_type.get_name_leafdata());
    if (lw_shared_ldi_pointer.is_set || is_set(lw_shared_ldi_pointer.yfilter)) leaf_name_data.push_back(lw_shared_ldi_pointer.get_name_leafdata());
    if (multicast_label.is_set || is_set(multicast_label.yfilter)) leaf_name_data.push_back(multicast_label.get_name_leafdata());
    if (path_list_flags.is_set || is_set(path_list_flags.yfilter)) leaf_name_data.push_back(path_list_flags.get_name_leafdata());
    if (path_list_referance_count.is_set || is_set(path_list_referance_count.yfilter)) leaf_name_data.push_back(path_list_referance_count.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "label-information")
    {
        for(auto const & c : label_information)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation>();
        c->parent = this;
        label_information.push_back(c);
        return c;
    }

    if(child_yang_name == "ldi-information")
    {
        if(ldi_information == nullptr)
        {
            ldi_information = std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LdiInformation>();
        }
        return ldi_information;
    }

    if(child_yang_name == "multicast-information")
    {
        if(multicast_information == nullptr)
        {
            multicast_information = std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::MulticastInformation>();
        }
        return multicast_information;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : label_information)
    {
        children[c->get_segment_path()] = c;
    }

    if(ldi_information != nullptr)
    {
        children["ldi-information"] = ldi_information;
    }

    if(multicast_information != nullptr)
    {
        children["multicast-information"] = multicast_information;
    }

    return children;
}

void MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "afi-table-id")
    {
        afi_table_id = value;
        afi_table_id.value_namespace = name_space;
        afi_table_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eos")
    {
        eos = value;
        eos.value_namespace = name_space;
        eos.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eos-bit")
    {
        eos_bit = value;
        eos_bit.value_namespace = name_space;
        eos_bit.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "hardware-information")
    {
        hardware_information = value;
        hardware_information.value_namespace = name_space;
        hardware_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-value")
    {
        label_value = value;
        label_value.value_namespace = name_space;
        label_value.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-flags")
    {
        ldi_flags = value;
        ldi_flags.value_namespace = name_space;
        ldi_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-pointer")
    {
        ldi_pointer = value;
        ldi_pointer.value_namespace = name_space;
        ldi_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-referance-count")
    {
        ldi_referance_count = value;
        ldi_referance_count.value_namespace = name_space;
        ldi_referance_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-type")
    {
        ldi_type = value;
        ldi_type.value_namespace = name_space;
        ldi_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "leaf-flags")
    {
        leaf_flags = value;
        leaf_flags.value_namespace = name_space;
        leaf_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "leaf-local-label")
    {
        leaf_local_label = value;
        leaf_local_label.value_namespace = name_space;
        leaf_local_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "leaf-referance-count")
    {
        leaf_referance_count = value;
        leaf_referance_count.value_namespace = name_space;
        leaf_referance_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "leaf-time-in-milli-seconds")
    {
        leaf_time_in_milli_seconds = value;
        leaf_time_in_milli_seconds.value_namespace = name_space;
        leaf_time_in_milli_seconds.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lspa-flags")
    {
        lspa_flags = value;
        lspa_flags.value_namespace = name_space;
        lspa_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lw-ldi-pointer")
    {
        lw_ldi_pointer = value;
        lw_ldi_pointer.value_namespace = name_space;
        lw_ldi_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lw-ldi-refernace-count")
    {
        lw_ldi_refernace_count = value;
        lw_ldi_refernace_count.value_namespace = name_space;
        lw_ldi_refernace_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lw-ldi-type")
    {
        lw_ldi_type = value;
        lw_ldi_type.value_namespace = name_space;
        lw_ldi_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lw-shared-ldi-pointer")
    {
        lw_shared_ldi_pointer = value;
        lw_shared_ldi_pointer.value_namespace = name_space;
        lw_shared_ldi_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "multicast-label")
    {
        multicast_label = value;
        multicast_label.value_namespace = name_space;
        multicast_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-list-flags")
    {
        path_list_flags = value;
        path_list_flags.value_namespace = name_space;
        path_list_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-list-referance-count")
    {
        path_list_referance_count = value;
        path_list_referance_count.value_namespace = name_space;
        path_list_referance_count.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "afi-table-id")
    {
        afi_table_id.yfilter = yfilter;
    }
    if(value_path == "eos")
    {
        eos.yfilter = yfilter;
    }
    if(value_path == "eos-bit")
    {
        eos_bit.yfilter = yfilter;
    }
    if(value_path == "hardware-information")
    {
        hardware_information.yfilter = yfilter;
    }
    if(value_path == "label-value")
    {
        label_value.yfilter = yfilter;
    }
    if(value_path == "ldi-flags")
    {
        ldi_flags.yfilter = yfilter;
    }
    if(value_path == "ldi-pointer")
    {
        ldi_pointer.yfilter = yfilter;
    }
    if(value_path == "ldi-referance-count")
    {
        ldi_referance_count.yfilter = yfilter;
    }
    if(value_path == "ldi-type")
    {
        ldi_type.yfilter = yfilter;
    }
    if(value_path == "leaf-flags")
    {
        leaf_flags.yfilter = yfilter;
    }
    if(value_path == "leaf-local-label")
    {
        leaf_local_label.yfilter = yfilter;
    }
    if(value_path == "leaf-referance-count")
    {
        leaf_referance_count.yfilter = yfilter;
    }
    if(value_path == "leaf-time-in-milli-seconds")
    {
        leaf_time_in_milli_seconds.yfilter = yfilter;
    }
    if(value_path == "lspa-flags")
    {
        lspa_flags.yfilter = yfilter;
    }
    if(value_path == "lw-ldi-pointer")
    {
        lw_ldi_pointer.yfilter = yfilter;
    }
    if(value_path == "lw-ldi-refernace-count")
    {
        lw_ldi_refernace_count.yfilter = yfilter;
    }
    if(value_path == "lw-ldi-type")
    {
        lw_ldi_type.yfilter = yfilter;
    }
    if(value_path == "lw-shared-ldi-pointer")
    {
        lw_shared_ldi_pointer.yfilter = yfilter;
    }
    if(value_path == "multicast-label")
    {
        multicast_label.yfilter = yfilter;
    }
    if(value_path == "path-list-flags")
    {
        path_list_flags.yfilter = yfilter;
    }
    if(value_path == "path-list-referance-count")
    {
        path_list_referance_count.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "label-information" || name == "ldi-information" || name == "multicast-information" || name == "afi-table-id" || name == "eos" || name == "eos-bit" || name == "hardware-information" || name == "label-value" || name == "ldi-flags" || name == "ldi-pointer" || name == "ldi-referance-count" || name == "ldi-type" || name == "leaf-flags" || name == "leaf-local-label" || name == "leaf-referance-count" || name == "leaf-time-in-milli-seconds" || name == "lspa-flags" || name == "lw-ldi-pointer" || name == "lw-ldi-refernace-count" || name == "lw-ldi-type" || name == "lw-shared-ldi-pointer" || name == "multicast-label" || name == "path-list-flags" || name == "path-list-referance-count")
        return true;
    return false;
}

MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::LabelInformation()
    :
    label_information_next_hop_protocol{YType::enumeration, "label-information-next-hop-protocol"},
    label_information_next_hop_string{YType::str, "label-information-next-hop-string"},
    label_information_next_hop_type{YType::enumeration, "label-information-next-hop-type"},
    label_information_path_index{YType::uint32, "label-information-path-index"},
    label_information_route_version{YType::uint64, "label-information-route-version"},
    label_information_time_in_milli_seconds{YType::uint64, "label-information-time-in-milli-seconds"},
    label_information_type{YType::uint32, "label-information-type"},
    local_label{YType::uint32, "local-label"},
    mpls_adjacency_flags{YType::uint32, "mpls-adjacency-flags"},
    outgoing_interface{YType::str, "outgoing-interface"},
    outgoing_interface_string{YType::str, "outgoing-interface-string"},
    outgoing_label{YType::uint32, "outgoing-label"},
    outgoing_label_string{YType::str, "outgoing-label-string"},
    outgoing_parent_interface{YType::str, "outgoing-parent-interface"},
    outgoing_physical_interface{YType::str, "outgoing-physical-interface"},
    prefix_or_id{YType::str, "prefix-or-id"},
    tunnel_id_present{YType::boolean, "tunnel-id-present"},
    tunnel_interface{YType::str, "tunnel-interface"},
    tx_bytes{YType::uint64, "tx-bytes"},
    tx_packets{YType::uint64, "tx-packets"}
    	,
    exact_route_hash_info(std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::ExactRouteHashInfo>())
	,label_information_detail(std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::LabelInformationDetail>())
{
    exact_route_hash_info->parent = this;
    label_information_detail->parent = this;

    yang_name = "label-information"; yang_parent_name = "forwarding-detail"; is_top_level_class = false; has_list_ancestor = true;
}

MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::~LabelInformation()
{
}

bool MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::has_data() const
{
    return label_information_next_hop_protocol.is_set
	|| label_information_next_hop_string.is_set
	|| label_information_next_hop_type.is_set
	|| label_information_path_index.is_set
	|| label_information_route_version.is_set
	|| label_information_time_in_milli_seconds.is_set
	|| label_information_type.is_set
	|| local_label.is_set
	|| mpls_adjacency_flags.is_set
	|| outgoing_interface.is_set
	|| outgoing_interface_string.is_set
	|| outgoing_label.is_set
	|| outgoing_label_string.is_set
	|| outgoing_parent_interface.is_set
	|| outgoing_physical_interface.is_set
	|| prefix_or_id.is_set
	|| tunnel_id_present.is_set
	|| tunnel_interface.is_set
	|| tx_bytes.is_set
	|| tx_packets.is_set
	|| (exact_route_hash_info !=  nullptr && exact_route_hash_info->has_data())
	|| (label_information_detail !=  nullptr && label_information_detail->has_data());
}

bool MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(label_information_next_hop_protocol.yfilter)
	|| ydk::is_set(label_information_next_hop_string.yfilter)
	|| ydk::is_set(label_information_next_hop_type.yfilter)
	|| ydk::is_set(label_information_path_index.yfilter)
	|| ydk::is_set(label_information_route_version.yfilter)
	|| ydk::is_set(label_information_time_in_milli_seconds.yfilter)
	|| ydk::is_set(label_information_type.yfilter)
	|| ydk::is_set(local_label.yfilter)
	|| ydk::is_set(mpls_adjacency_flags.yfilter)
	|| ydk::is_set(outgoing_interface.yfilter)
	|| ydk::is_set(outgoing_interface_string.yfilter)
	|| ydk::is_set(outgoing_label.yfilter)
	|| ydk::is_set(outgoing_label_string.yfilter)
	|| ydk::is_set(outgoing_parent_interface.yfilter)
	|| ydk::is_set(outgoing_physical_interface.yfilter)
	|| ydk::is_set(prefix_or_id.yfilter)
	|| ydk::is_set(tunnel_id_present.yfilter)
	|| ydk::is_set(tunnel_interface.yfilter)
	|| ydk::is_set(tx_bytes.yfilter)
	|| ydk::is_set(tx_packets.yfilter)
	|| (exact_route_hash_info !=  nullptr && exact_route_hash_info->has_operation())
	|| (label_information_detail !=  nullptr && label_information_detail->has_operation());
}

std::string MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-information";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (label_information_next_hop_protocol.is_set || is_set(label_information_next_hop_protocol.yfilter)) leaf_name_data.push_back(label_information_next_hop_protocol.get_name_leafdata());
    if (label_information_next_hop_string.is_set || is_set(label_information_next_hop_string.yfilter)) leaf_name_data.push_back(label_information_next_hop_string.get_name_leafdata());
    if (label_information_next_hop_type.is_set || is_set(label_information_next_hop_type.yfilter)) leaf_name_data.push_back(label_information_next_hop_type.get_name_leafdata());
    if (label_information_path_index.is_set || is_set(label_information_path_index.yfilter)) leaf_name_data.push_back(label_information_path_index.get_name_leafdata());
    if (label_information_route_version.is_set || is_set(label_information_route_version.yfilter)) leaf_name_data.push_back(label_information_route_version.get_name_leafdata());
    if (label_information_time_in_milli_seconds.is_set || is_set(label_information_time_in_milli_seconds.yfilter)) leaf_name_data.push_back(label_information_time_in_milli_seconds.get_name_leafdata());
    if (label_information_type.is_set || is_set(label_information_type.yfilter)) leaf_name_data.push_back(label_information_type.get_name_leafdata());
    if (local_label.is_set || is_set(local_label.yfilter)) leaf_name_data.push_back(local_label.get_name_leafdata());
    if (mpls_adjacency_flags.is_set || is_set(mpls_adjacency_flags.yfilter)) leaf_name_data.push_back(mpls_adjacency_flags.get_name_leafdata());
    if (outgoing_interface.is_set || is_set(outgoing_interface.yfilter)) leaf_name_data.push_back(outgoing_interface.get_name_leafdata());
    if (outgoing_interface_string.is_set || is_set(outgoing_interface_string.yfilter)) leaf_name_data.push_back(outgoing_interface_string.get_name_leafdata());
    if (outgoing_label.is_set || is_set(outgoing_label.yfilter)) leaf_name_data.push_back(outgoing_label.get_name_leafdata());
    if (outgoing_label_string.is_set || is_set(outgoing_label_string.yfilter)) leaf_name_data.push_back(outgoing_label_string.get_name_leafdata());
    if (outgoing_parent_interface.is_set || is_set(outgoing_parent_interface.yfilter)) leaf_name_data.push_back(outgoing_parent_interface.get_name_leafdata());
    if (outgoing_physical_interface.is_set || is_set(outgoing_physical_interface.yfilter)) leaf_name_data.push_back(outgoing_physical_interface.get_name_leafdata());
    if (prefix_or_id.is_set || is_set(prefix_or_id.yfilter)) leaf_name_data.push_back(prefix_or_id.get_name_leafdata());
    if (tunnel_id_present.is_set || is_set(tunnel_id_present.yfilter)) leaf_name_data.push_back(tunnel_id_present.get_name_leafdata());
    if (tunnel_interface.is_set || is_set(tunnel_interface.yfilter)) leaf_name_data.push_back(tunnel_interface.get_name_leafdata());
    if (tx_bytes.is_set || is_set(tx_bytes.yfilter)) leaf_name_data.push_back(tx_bytes.get_name_leafdata());
    if (tx_packets.is_set || is_set(tx_packets.yfilter)) leaf_name_data.push_back(tx_packets.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "exact-route-hash-info")
    {
        if(exact_route_hash_info == nullptr)
        {
            exact_route_hash_info = std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::ExactRouteHashInfo>();
        }
        return exact_route_hash_info;
    }

    if(child_yang_name == "label-information-detail")
    {
        if(label_information_detail == nullptr)
        {
            label_information_detail = std::make_shared<MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::LabelInformationDetail>();
        }
        return label_information_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(exact_route_hash_info != nullptr)
    {
        children["exact-route-hash-info"] = exact_route_hash_info;
    }

    if(label_information_detail != nullptr)
    {
        children["label-information-detail"] = label_information_detail;
    }

    return children;
}

void MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "label-information-next-hop-protocol")
    {
        label_information_next_hop_protocol = value;
        label_information_next_hop_protocol.value_namespace = name_space;
        label_information_next_hop_protocol.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-information-next-hop-string")
    {
        label_information_next_hop_string = value;
        label_information_next_hop_string.value_namespace = name_space;
        label_information_next_hop_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-information-next-hop-type")
    {
        label_information_next_hop_type = value;
        label_information_next_hop_type.value_namespace = name_space;
        label_information_next_hop_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-information-path-index")
    {
        label_information_path_index = value;
        label_information_path_index.value_namespace = name_space;
        label_information_path_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-information-route-version")
    {
        label_information_route_version = value;
        label_information_route_version.value_namespace = name_space;
        label_information_route_version.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-information-time-in-milli-seconds")
    {
        label_information_time_in_milli_seconds = value;
        label_information_time_in_milli_seconds.value_namespace = name_space;
        label_information_time_in_milli_seconds.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-information-type")
    {
        label_information_type = value;
        label_information_type.value_namespace = name_space;
        label_information_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "local-label")
    {
        local_label = value;
        local_label.value_namespace = name_space;
        local_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mpls-adjacency-flags")
    {
        mpls_adjacency_flags = value;
        mpls_adjacency_flags.value_namespace = name_space;
        mpls_adjacency_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-interface")
    {
        outgoing_interface = value;
        outgoing_interface.value_namespace = name_space;
        outgoing_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-interface-string")
    {
        outgoing_interface_string = value;
        outgoing_interface_string.value_namespace = name_space;
        outgoing_interface_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-label")
    {
        outgoing_label = value;
        outgoing_label.value_namespace = name_space;
        outgoing_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-label-string")
    {
        outgoing_label_string = value;
        outgoing_label_string.value_namespace = name_space;
        outgoing_label_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-parent-interface")
    {
        outgoing_parent_interface = value;
        outgoing_parent_interface.value_namespace = name_space;
        outgoing_parent_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "outgoing-physical-interface")
    {
        outgoing_physical_interface = value;
        outgoing_physical_interface.value_namespace = name_space;
        outgoing_physical_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-or-id")
    {
        prefix_or_id = value;
        prefix_or_id.value_namespace = name_space;
        prefix_or_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-id-present")
    {
        tunnel_id_present = value;
        tunnel_id_present.value_namespace = name_space;
        tunnel_id_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-interface")
    {
        tunnel_interface = value;
        tunnel_interface.value_namespace = name_space;
        tunnel_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tx-bytes")
    {
        tx_bytes = value;
        tx_bytes.value_namespace = name_space;
        tx_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tx-packets")
    {
        tx_packets = value;
        tx_packets.value_namespace = name_space;
        tx_packets.value_namespace_prefix = name_space_prefix;
    }
}

void MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "label-information-next-hop-protocol")
    {
        label_information_next_hop_protocol.yfilter = yfilter;
    }
    if(value_path == "label-information-next-hop-string")
    {
        label_information_next_hop_string.yfilter = yfilter;
    }
    if(value_path == "label-information-next-hop-type")
    {
        label_information_next_hop_type.yfilter = yfilter;
    }
    if(value_path == "label-information-path-index")
    {
        label_information_path_index.yfilter = yfilter;
    }
    if(value_path == "label-information-route-version")
    {
        label_information_route_version.yfilter = yfilter;
    }
    if(value_path == "label-information-time-in-milli-seconds")
    {
        label_information_time_in_milli_seconds.yfilter = yfilter;
    }
    if(value_path == "label-information-type")
    {
        label_information_type.yfilter = yfilter;
    }
    if(value_path == "local-label")
    {
        local_label.yfilter = yfilter;
    }
    if(value_path == "mpls-adjacency-flags")
    {
        mpls_adjacency_flags.yfilter = yfilter;
    }
    if(value_path == "outgoing-interface")
    {
        outgoing_interface.yfilter = yfilter;
    }
    if(value_path == "outgoing-interface-string")
    {
        outgoing_interface_string.yfilter = yfilter;
    }
    if(value_path == "outgoing-label")
    {
        outgoing_label.yfilter = yfilter;
    }
    if(value_path == "outgoing-label-string")
    {
        outgoing_label_string.yfilter = yfilter;
    }
    if(value_path == "outgoing-parent-interface")
    {
        outgoing_parent_interface.yfilter = yfilter;
    }
    if(value_path == "outgoing-physical-interface")
    {
        outgoing_physical_interface.yfilter = yfilter;
    }
    if(value_path == "prefix-or-id")
    {
        prefix_or_id.yfilter = yfilter;
    }
    if(value_path == "tunnel-id-present")
    {
        tunnel_id_present.yfilter = yfilter;
    }
    if(value_path == "tunnel-interface")
    {
        tunnel_interface.yfilter = yfilter;
    }
    if(value_path == "tx-bytes")
    {
        tx_bytes.yfilter = yfilter;
    }
    if(value_path == "tx-packets")
    {
        tx_packets.yfilter = yfilter;
    }
}

bool MplsForwarding::Nodes::Node::LabelFib::ForwardingDetails::ForwardingDetail::LabelInformation::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "exact-route-hash-info" || name == "label-information-detail" || name == "label-information-next-hop-protocol" || name == "label-information-next-hop-string" || name == "label-information-next-hop-type" || name == "label-information-path-index" || name == "label-information-route-version" || name == "label-information-time-in-milli-seconds" || name == "label-information-type" || name == "local-label" || name == "mpls-adjacency-flags" || name == "outgoing-interface" || name == "outgoing-interface-string" || name == "outgoing-label" || name == "outgoing-label-string" || name == "outgoing-parent-interface" || name == "outgoing-physical-interface" || name == "prefix-or-id" || name == "tunnel-id-present" || name == "tunnel-interface" || name == "tx-bytes" || name == "tx-packets")
        return true;
    return false;
}


}
}

