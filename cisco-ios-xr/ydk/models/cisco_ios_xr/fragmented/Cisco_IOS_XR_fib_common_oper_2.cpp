
#include <sstream>
#include <iostream>
#include <ydk/entity_util.hpp>
#include "bundle_info.hpp"
#include "generated_entity_lookup.hpp"
#include "Cisco_IOS_XR_fib_common_oper_2.hpp"
#include "Cisco_IOS_XR_fib_common_oper_3.hpp"

using namespace ydk;

namespace cisco_ios_xr {
namespace Cisco_IOS_XR_fib_common_oper {

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress::NhInfoSpecialDetailHardwareIngress::NhInfoSpecialDiscardDetailHardwareIngress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoBrief()
    :
    nh_info_special_brief(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief>())
    , nh_info_remote_briefs(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs>())
    , nh_info_local_briefs(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs>())
{
    nh_info_special_brief->parent = this;
    nh_info_remote_briefs->parent = this;
    nh_info_local_briefs->parent = this;

    yang_name = "nh-info-brief"; yang_parent_name = "vrf"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::~NhInfoBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_special_brief !=  nullptr && nh_info_special_brief->has_data())
	|| (nh_info_remote_briefs !=  nullptr && nh_info_remote_briefs->has_data())
	|| (nh_info_local_briefs !=  nullptr && nh_info_local_briefs->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_special_brief !=  nullptr && nh_info_special_brief->has_operation())
	|| (nh_info_remote_briefs !=  nullptr && nh_info_remote_briefs->has_operation())
	|| (nh_info_local_briefs !=  nullptr && nh_info_local_briefs->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-special-brief")
    {
        if(nh_info_special_brief == nullptr)
        {
            nh_info_special_brief = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief>();
        }
        return nh_info_special_brief;
    }

    if(child_yang_name == "nh-info-remote-briefs")
    {
        if(nh_info_remote_briefs == nullptr)
        {
            nh_info_remote_briefs = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs>();
        }
        return nh_info_remote_briefs;
    }

    if(child_yang_name == "nh-info-local-briefs")
    {
        if(nh_info_local_briefs == nullptr)
        {
            nh_info_local_briefs = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs>();
        }
        return nh_info_local_briefs;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(nh_info_special_brief != nullptr)
    {
        children["nh-info-special-brief"] = nh_info_special_brief;
    }

    if(nh_info_remote_briefs != nullptr)
    {
        children["nh-info-remote-briefs"] = nh_info_remote_briefs;
    }

    if(nh_info_local_briefs != nullptr)
    {
        children["nh-info-local-briefs"] = nh_info_local_briefs;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-special-brief" || name == "nh-info-remote-briefs" || name == "nh-info-local-briefs")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialBrief()
    :
    nh_info_special_discard_brief(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief>())
    , nh_info_special_null_brief(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief>())
    , nh_info_special_punt_brief(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief>())
    , nh_info_special_drop_brief(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief>())
{
    nh_info_special_discard_brief->parent = this;
    nh_info_special_null_brief->parent = this;
    nh_info_special_punt_brief->parent = this;
    nh_info_special_drop_brief->parent = this;

    yang_name = "nh-info-special-brief"; yang_parent_name = "nh-info-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::~NhInfoSpecialBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_special_discard_brief !=  nullptr && nh_info_special_discard_brief->has_data())
	|| (nh_info_special_null_brief !=  nullptr && nh_info_special_null_brief->has_data())
	|| (nh_info_special_punt_brief !=  nullptr && nh_info_special_punt_brief->has_data())
	|| (nh_info_special_drop_brief !=  nullptr && nh_info_special_drop_brief->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_special_discard_brief !=  nullptr && nh_info_special_discard_brief->has_operation())
	|| (nh_info_special_null_brief !=  nullptr && nh_info_special_null_brief->has_operation())
	|| (nh_info_special_punt_brief !=  nullptr && nh_info_special_punt_brief->has_operation())
	|| (nh_info_special_drop_brief !=  nullptr && nh_info_special_drop_brief->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-special-discard-brief")
    {
        if(nh_info_special_discard_brief == nullptr)
        {
            nh_info_special_discard_brief = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief>();
        }
        return nh_info_special_discard_brief;
    }

    if(child_yang_name == "nh-info-special-null-brief")
    {
        if(nh_info_special_null_brief == nullptr)
        {
            nh_info_special_null_brief = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief>();
        }
        return nh_info_special_null_brief;
    }

    if(child_yang_name == "nh-info-special-punt-brief")
    {
        if(nh_info_special_punt_brief == nullptr)
        {
            nh_info_special_punt_brief = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief>();
        }
        return nh_info_special_punt_brief;
    }

    if(child_yang_name == "nh-info-special-drop-brief")
    {
        if(nh_info_special_drop_brief == nullptr)
        {
            nh_info_special_drop_brief = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief>();
        }
        return nh_info_special_drop_brief;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(nh_info_special_discard_brief != nullptr)
    {
        children["nh-info-special-discard-brief"] = nh_info_special_discard_brief;
    }

    if(nh_info_special_null_brief != nullptr)
    {
        children["nh-info-special-null-brief"] = nh_info_special_null_brief;
    }

    if(nh_info_special_punt_brief != nullptr)
    {
        children["nh-info-special-punt-brief"] = nh_info_special_punt_brief;
    }

    if(nh_info_special_drop_brief != nullptr)
    {
        children["nh-info-special-drop-brief"] = nh_info_special_drop_brief;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-special-discard-brief" || name == "nh-info-special-null-brief" || name == "nh-info-special-punt-brief" || name == "nh-info-special-drop-brief")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoSpecialDiscardBrief()
    :
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-special-discard-brief"; yang_parent_name = "nh-info-special-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::~NhInfoSpecialDiscardBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::has_data() const
{
    if (is_presence_container) return true;
    return si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-discard-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-discard-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-discard-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : nh_info_extension_detail.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoSpecialNullBrief()
    :
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-special-null-brief"; yang_parent_name = "nh-info-special-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::~NhInfoSpecialNullBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::has_data() const
{
    if (is_presence_container) return true;
    return si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-null-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-null-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-null-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : nh_info_extension_detail.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoSpecialPuntBrief()
    :
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-special-punt-brief"; yang_parent_name = "nh-info-special-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::~NhInfoSpecialPuntBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::has_data() const
{
    if (is_presence_container) return true;
    return si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-punt-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-punt-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-punt-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : nh_info_extension_detail.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoSpecialDropBrief()
    :
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-special-drop-brief"; yang_parent_name = "nh-info-special-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::~NhInfoSpecialDropBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::has_data() const
{
    if (is_presence_container) return true;
    return si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-drop-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-drop-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-drop-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : nh_info_extension_detail.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBriefs()
    :
    nh_info_remote_brief(this, {})
{

    yang_name = "nh-info-remote-briefs"; yang_parent_name = "nh-info-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::~NhInfoRemoteBriefs()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_remote_brief.len(); index++)
    {
        if(nh_info_remote_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::has_operation() const
{
    for (std::size_t index=0; index<nh_info_remote_brief.len(); index++)
    {
        if(nh_info_remote_brief[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-briefs";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-remote-brief")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief>();
        c->parent = this;
        nh_info_remote_brief.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : nh_info_remote_brief.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-remote-brief")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoRemoteBrief()
    :
    nh_interface_name{YType::str, "nh-interface-name"},
    nh_proto{YType::enumeration, "nh-proto"},
    nh_pfx_length{YType::uint32, "nh-pfx-length"},
    nh_address{YType::str, "nh-address"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-remote-brief"; yang_parent_name = "nh-info-remote-briefs"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::~NhInfoRemoteBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::has_data() const
{
    if (is_presence_container) return true;
    return nh_interface_name.is_set
	|| nh_proto.is_set
	|| nh_pfx_length.is_set
	|| nh_address.is_set
	|| si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(nh_proto.yfilter)
	|| ydk::is_set(nh_pfx_length.yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (nh_proto.is_set || is_set(nh_proto.yfilter)) leaf_name_data.push_back(nh_proto.get_name_leafdata());
    if (nh_pfx_length.is_set || is_set(nh_pfx_length.yfilter)) leaf_name_data.push_back(nh_pfx_length.get_name_leafdata());
    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-proto")
    {
        nh_proto = value;
        nh_proto.value_namespace = name_space;
        nh_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-pfx-length")
    {
        nh_pfx_length = value;
        nh_pfx_length.value_namespace = name_space;
        nh_pfx_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "nh-proto")
    {
        nh_proto.yfilter = yfilter;
    }
    if(value_path == "nh-pfx-length")
    {
        nh_pfx_length.yfilter = yfilter;
    }
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "nh-interface-name" || name == "nh-proto" || name == "nh-pfx-length" || name == "nh-address" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-remote-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-remote-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : nh_info_extension_detail.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBriefs()
    :
    nh_info_local_brief(this, {})
{

    yang_name = "nh-info-local-briefs"; yang_parent_name = "nh-info-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::~NhInfoLocalBriefs()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_local_brief.len(); index++)
    {
        if(nh_info_local_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::has_operation() const
{
    for (std::size_t index=0; index<nh_info_local_brief.len(); index++)
    {
        if(nh_info_local_brief[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-briefs";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-local-brief")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief>();
        c->parent = this;
        nh_info_local_brief.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : nh_info_local_brief.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-local-brief")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoLocalBrief()
    :
    nh_interface_name{YType::str, "nh-interface-name"},
    nh_proto{YType::enumeration, "nh-proto"},
    nh_pfx_length{YType::uint32, "nh-pfx-length"},
    nh_address{YType::str, "nh-address"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-local-brief"; yang_parent_name = "nh-info-local-briefs"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::~NhInfoLocalBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::has_data() const
{
    if (is_presence_container) return true;
    return nh_interface_name.is_set
	|| nh_proto.is_set
	|| nh_pfx_length.is_set
	|| nh_address.is_set
	|| si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(nh_proto.yfilter)
	|| ydk::is_set(nh_pfx_length.yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (nh_proto.is_set || is_set(nh_proto.yfilter)) leaf_name_data.push_back(nh_proto.get_name_leafdata());
    if (nh_pfx_length.is_set || is_set(nh_pfx_length.yfilter)) leaf_name_data.push_back(nh_pfx_length.get_name_leafdata());
    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-proto")
    {
        nh_proto = value;
        nh_proto.value_namespace = name_space;
        nh_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-pfx-length")
    {
        nh_pfx_length = value;
        nh_pfx_length.value_namespace = name_space;
        nh_pfx_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "nh-proto")
    {
        nh_proto.yfilter = yfilter;
    }
    if(value_path == "nh-pfx-length")
    {
        nh_pfx_length.yfilter = yfilter;
    }
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "nh-interface-name" || name == "nh-proto" || name == "nh-pfx-length" || name == "nh-address" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-local-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-local-brief"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : nh_info_extension_detail.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoutes()
    :
    exact_route(this, {})
{

    yang_name = "exact-routes"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::~ExactRoutes()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<exact_route.len(); index++)
    {
        if(exact_route[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::has_operation() const
{
    for (std::size_t index=0; index<exact_route.len(); index++)
    {
        if(exact_route[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "exact-routes";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "exact-route")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute>();
        c->parent = this;
        exact_route.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : exact_route.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "exact-route")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExactRoute()
    :
    protocol_name{YType::enumeration, "protocol-name"},
    vrf_name{YType::str, "vrf-name"},
    source{YType::str, "source"},
    destination{YType::str, "destination"},
    ipv6_flow_label{YType::uint32, "ipv6-flow-label"},
    protocol_type_fib_entry{YType::uint32, "protocol-type-fib-entry"},
    platform_hardware{YType::str, "platform-hardware"},
    number_of_referances_to_path_list{YType::uint32, "number-of-referances-to-path-list"},
    path_list_flags{YType::uint32, "path-list-flags"},
    path_list_source{YType::uint32, "path-list-source"},
    number_of_referances_to_ldi{YType::uint32, "number-of-referances-to-ldi"},
    ldi_flags{YType::uint32, "ldi-flags"},
    flags_external_ldi{YType::uint32, "flags-external-ldi"},
    pointer_external_ldi{YType::uint32, "pointer-external-ldi"},
    exact_path_interface_handle{YType::uint32, "exact-path-interface-handle"},
    exact_path_gre_interface_handle{YType::uint32, "exact-path-gre-interface-handle"},
    exact_route_gre_phys_ifh_avail{YType::boolean, "exact-route-gre-phys-ifh-avail"},
    exact_route_result{YType::boolean, "exact-route-result"},
    prefix_is_static_or_connected{YType::boolean, "prefix-is-static-or-connected"},
    packet_should_recieve{YType::boolean, "packet-should-recieve"},
    prefix_connected{YType::boolean, "prefix-connected"},
    prefix_for_adjancency{YType::boolean, "prefix-for-adjancency"},
    prefix_for_pic_next_hop{YType::boolean, "prefix-for-pic-next-hop"},
    purgable_after_purge_interval{YType::boolean, "purgable-after-purge-interval"},
    broadcast_recive_flag{YType::boolean, "broadcast-recive-flag"},
    broadcast_forward_flag{YType::boolean, "broadcast-forward-flag"},
    zero_by_zero_route_as_default{YType::boolean, "zero-by-zero-route-as-default"},
    external_switch_triggered{YType::boolean, "external-switch-triggered"},
    route_attribute_flag{YType::boolean, "route-attribute-flag"},
    dummy_real_zero_route{YType::boolean, "dummy-real-zero-route"},
    ldi_lw_flag{YType::uint32, "ldi-lw-flag"},
    ref_counter_of_ldi_lw_ldi{YType::uint32, "ref-counter-of-ldi-lw-ldi"},
    type_of_ldi_lw_ldi{YType::uint32, "type-of-ldi-lw-ldi"},
    lspa_flags{YType::uint32, "lspa-flags"},
    version_of_route{YType::uint64, "version-of-route"},
    fib_route_download_priority{YType::uint32, "fib-route-download-priority"},
    time_of_last_update_in_msec{YType::uint64, "time-of-last-update-in-msec"},
    l2_subscriber_route{YType::boolean, "l2-subscriber-route"},
    l2_subscriber_xconnect_id{YType::uint32, "l2-subscriber-xconnect-id"},
    l2_subscriber_flags{YType::uint32, "l2-subscriber-flags"},
    l2_subscriber_ip_protocol{YType::uint32, "l2-subscriber-ip-protocol"},
    l2tpv3_cookie_length_bits{YType::uint32, "l2tpv3-cookie-length-bits"},
    route_for_external_reach_linecard_flag{YType::boolean, "route-for-external-reach-linecard-flag"},
    route_is_sr_flag{YType::boolean, "route-is-sr-flag"}
        ,
    detail_fib_entry_information(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation>())
    , fib_entry_path(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath>())
    , extension_object(this, {})
{
    detail_fib_entry_information->parent = this;
    fib_entry_path->parent = this;

    yang_name = "exact-route"; yang_parent_name = "exact-routes"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::~ExactRoute()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<extension_object.len(); index++)
    {
        if(extension_object[index]->has_data())
            return true;
    }
    return protocol_name.is_set
	|| vrf_name.is_set
	|| source.is_set
	|| destination.is_set
	|| ipv6_flow_label.is_set
	|| protocol_type_fib_entry.is_set
	|| platform_hardware.is_set
	|| number_of_referances_to_path_list.is_set
	|| path_list_flags.is_set
	|| path_list_source.is_set
	|| number_of_referances_to_ldi.is_set
	|| ldi_flags.is_set
	|| flags_external_ldi.is_set
	|| pointer_external_ldi.is_set
	|| exact_path_interface_handle.is_set
	|| exact_path_gre_interface_handle.is_set
	|| exact_route_gre_phys_ifh_avail.is_set
	|| exact_route_result.is_set
	|| prefix_is_static_or_connected.is_set
	|| packet_should_recieve.is_set
	|| prefix_connected.is_set
	|| prefix_for_adjancency.is_set
	|| prefix_for_pic_next_hop.is_set
	|| purgable_after_purge_interval.is_set
	|| broadcast_recive_flag.is_set
	|| broadcast_forward_flag.is_set
	|| zero_by_zero_route_as_default.is_set
	|| external_switch_triggered.is_set
	|| route_attribute_flag.is_set
	|| dummy_real_zero_route.is_set
	|| ldi_lw_flag.is_set
	|| ref_counter_of_ldi_lw_ldi.is_set
	|| type_of_ldi_lw_ldi.is_set
	|| lspa_flags.is_set
	|| version_of_route.is_set
	|| fib_route_download_priority.is_set
	|| time_of_last_update_in_msec.is_set
	|| l2_subscriber_route.is_set
	|| l2_subscriber_xconnect_id.is_set
	|| l2_subscriber_flags.is_set
	|| l2_subscriber_ip_protocol.is_set
	|| l2tpv3_cookie_length_bits.is_set
	|| route_for_external_reach_linecard_flag.is_set
	|| route_is_sr_flag.is_set
	|| (detail_fib_entry_information !=  nullptr && detail_fib_entry_information->has_data())
	|| (fib_entry_path !=  nullptr && fib_entry_path->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::has_operation() const
{
    for (std::size_t index=0; index<extension_object.len(); index++)
    {
        if(extension_object[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(protocol_name.yfilter)
	|| ydk::is_set(vrf_name.yfilter)
	|| ydk::is_set(source.yfilter)
	|| ydk::is_set(destination.yfilter)
	|| ydk::is_set(ipv6_flow_label.yfilter)
	|| ydk::is_set(protocol_type_fib_entry.yfilter)
	|| ydk::is_set(platform_hardware.yfilter)
	|| ydk::is_set(number_of_referances_to_path_list.yfilter)
	|| ydk::is_set(path_list_flags.yfilter)
	|| ydk::is_set(path_list_source.yfilter)
	|| ydk::is_set(number_of_referances_to_ldi.yfilter)
	|| ydk::is_set(ldi_flags.yfilter)
	|| ydk::is_set(flags_external_ldi.yfilter)
	|| ydk::is_set(pointer_external_ldi.yfilter)
	|| ydk::is_set(exact_path_interface_handle.yfilter)
	|| ydk::is_set(exact_path_gre_interface_handle.yfilter)
	|| ydk::is_set(exact_route_gre_phys_ifh_avail.yfilter)
	|| ydk::is_set(exact_route_result.yfilter)
	|| ydk::is_set(prefix_is_static_or_connected.yfilter)
	|| ydk::is_set(packet_should_recieve.yfilter)
	|| ydk::is_set(prefix_connected.yfilter)
	|| ydk::is_set(prefix_for_adjancency.yfilter)
	|| ydk::is_set(prefix_for_pic_next_hop.yfilter)
	|| ydk::is_set(purgable_after_purge_interval.yfilter)
	|| ydk::is_set(broadcast_recive_flag.yfilter)
	|| ydk::is_set(broadcast_forward_flag.yfilter)
	|| ydk::is_set(zero_by_zero_route_as_default.yfilter)
	|| ydk::is_set(external_switch_triggered.yfilter)
	|| ydk::is_set(route_attribute_flag.yfilter)
	|| ydk::is_set(dummy_real_zero_route.yfilter)
	|| ydk::is_set(ldi_lw_flag.yfilter)
	|| ydk::is_set(ref_counter_of_ldi_lw_ldi.yfilter)
	|| ydk::is_set(type_of_ldi_lw_ldi.yfilter)
	|| ydk::is_set(lspa_flags.yfilter)
	|| ydk::is_set(version_of_route.yfilter)
	|| ydk::is_set(fib_route_download_priority.yfilter)
	|| ydk::is_set(time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(l2_subscriber_route.yfilter)
	|| ydk::is_set(l2_subscriber_xconnect_id.yfilter)
	|| ydk::is_set(l2_subscriber_flags.yfilter)
	|| ydk::is_set(l2_subscriber_ip_protocol.yfilter)
	|| ydk::is_set(l2tpv3_cookie_length_bits.yfilter)
	|| ydk::is_set(route_for_external_reach_linecard_flag.yfilter)
	|| ydk::is_set(route_is_sr_flag.yfilter)
	|| (detail_fib_entry_information !=  nullptr && detail_fib_entry_information->has_operation())
	|| (fib_entry_path !=  nullptr && fib_entry_path->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "exact-route";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (protocol_name.is_set || is_set(protocol_name.yfilter)) leaf_name_data.push_back(protocol_name.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.yfilter)) leaf_name_data.push_back(vrf_name.get_name_leafdata());
    if (source.is_set || is_set(source.yfilter)) leaf_name_data.push_back(source.get_name_leafdata());
    if (destination.is_set || is_set(destination.yfilter)) leaf_name_data.push_back(destination.get_name_leafdata());
    if (ipv6_flow_label.is_set || is_set(ipv6_flow_label.yfilter)) leaf_name_data.push_back(ipv6_flow_label.get_name_leafdata());
    if (protocol_type_fib_entry.is_set || is_set(protocol_type_fib_entry.yfilter)) leaf_name_data.push_back(protocol_type_fib_entry.get_name_leafdata());
    if (platform_hardware.is_set || is_set(platform_hardware.yfilter)) leaf_name_data.push_back(platform_hardware.get_name_leafdata());
    if (number_of_referances_to_path_list.is_set || is_set(number_of_referances_to_path_list.yfilter)) leaf_name_data.push_back(number_of_referances_to_path_list.get_name_leafdata());
    if (path_list_flags.is_set || is_set(path_list_flags.yfilter)) leaf_name_data.push_back(path_list_flags.get_name_leafdata());
    if (path_list_source.is_set || is_set(path_list_source.yfilter)) leaf_name_data.push_back(path_list_source.get_name_leafdata());
    if (number_of_referances_to_ldi.is_set || is_set(number_of_referances_to_ldi.yfilter)) leaf_name_data.push_back(number_of_referances_to_ldi.get_name_leafdata());
    if (ldi_flags.is_set || is_set(ldi_flags.yfilter)) leaf_name_data.push_back(ldi_flags.get_name_leafdata());
    if (flags_external_ldi.is_set || is_set(flags_external_ldi.yfilter)) leaf_name_data.push_back(flags_external_ldi.get_name_leafdata());
    if (pointer_external_ldi.is_set || is_set(pointer_external_ldi.yfilter)) leaf_name_data.push_back(pointer_external_ldi.get_name_leafdata());
    if (exact_path_interface_handle.is_set || is_set(exact_path_interface_handle.yfilter)) leaf_name_data.push_back(exact_path_interface_handle.get_name_leafdata());
    if (exact_path_gre_interface_handle.is_set || is_set(exact_path_gre_interface_handle.yfilter)) leaf_name_data.push_back(exact_path_gre_interface_handle.get_name_leafdata());
    if (exact_route_gre_phys_ifh_avail.is_set || is_set(exact_route_gre_phys_ifh_avail.yfilter)) leaf_name_data.push_back(exact_route_gre_phys_ifh_avail.get_name_leafdata());
    if (exact_route_result.is_set || is_set(exact_route_result.yfilter)) leaf_name_data.push_back(exact_route_result.get_name_leafdata());
    if (prefix_is_static_or_connected.is_set || is_set(prefix_is_static_or_connected.yfilter)) leaf_name_data.push_back(prefix_is_static_or_connected.get_name_leafdata());
    if (packet_should_recieve.is_set || is_set(packet_should_recieve.yfilter)) leaf_name_data.push_back(packet_should_recieve.get_name_leafdata());
    if (prefix_connected.is_set || is_set(prefix_connected.yfilter)) leaf_name_data.push_back(prefix_connected.get_name_leafdata());
    if (prefix_for_adjancency.is_set || is_set(prefix_for_adjancency.yfilter)) leaf_name_data.push_back(prefix_for_adjancency.get_name_leafdata());
    if (prefix_for_pic_next_hop.is_set || is_set(prefix_for_pic_next_hop.yfilter)) leaf_name_data.push_back(prefix_for_pic_next_hop.get_name_leafdata());
    if (purgable_after_purge_interval.is_set || is_set(purgable_after_purge_interval.yfilter)) leaf_name_data.push_back(purgable_after_purge_interval.get_name_leafdata());
    if (broadcast_recive_flag.is_set || is_set(broadcast_recive_flag.yfilter)) leaf_name_data.push_back(broadcast_recive_flag.get_name_leafdata());
    if (broadcast_forward_flag.is_set || is_set(broadcast_forward_flag.yfilter)) leaf_name_data.push_back(broadcast_forward_flag.get_name_leafdata());
    if (zero_by_zero_route_as_default.is_set || is_set(zero_by_zero_route_as_default.yfilter)) leaf_name_data.push_back(zero_by_zero_route_as_default.get_name_leafdata());
    if (external_switch_triggered.is_set || is_set(external_switch_triggered.yfilter)) leaf_name_data.push_back(external_switch_triggered.get_name_leafdata());
    if (route_attribute_flag.is_set || is_set(route_attribute_flag.yfilter)) leaf_name_data.push_back(route_attribute_flag.get_name_leafdata());
    if (dummy_real_zero_route.is_set || is_set(dummy_real_zero_route.yfilter)) leaf_name_data.push_back(dummy_real_zero_route.get_name_leafdata());
    if (ldi_lw_flag.is_set || is_set(ldi_lw_flag.yfilter)) leaf_name_data.push_back(ldi_lw_flag.get_name_leafdata());
    if (ref_counter_of_ldi_lw_ldi.is_set || is_set(ref_counter_of_ldi_lw_ldi.yfilter)) leaf_name_data.push_back(ref_counter_of_ldi_lw_ldi.get_name_leafdata());
    if (type_of_ldi_lw_ldi.is_set || is_set(type_of_ldi_lw_ldi.yfilter)) leaf_name_data.push_back(type_of_ldi_lw_ldi.get_name_leafdata());
    if (lspa_flags.is_set || is_set(lspa_flags.yfilter)) leaf_name_data.push_back(lspa_flags.get_name_leafdata());
    if (version_of_route.is_set || is_set(version_of_route.yfilter)) leaf_name_data.push_back(version_of_route.get_name_leafdata());
    if (fib_route_download_priority.is_set || is_set(fib_route_download_priority.yfilter)) leaf_name_data.push_back(fib_route_download_priority.get_name_leafdata());
    if (time_of_last_update_in_msec.is_set || is_set(time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(time_of_last_update_in_msec.get_name_leafdata());
    if (l2_subscriber_route.is_set || is_set(l2_subscriber_route.yfilter)) leaf_name_data.push_back(l2_subscriber_route.get_name_leafdata());
    if (l2_subscriber_xconnect_id.is_set || is_set(l2_subscriber_xconnect_id.yfilter)) leaf_name_data.push_back(l2_subscriber_xconnect_id.get_name_leafdata());
    if (l2_subscriber_flags.is_set || is_set(l2_subscriber_flags.yfilter)) leaf_name_data.push_back(l2_subscriber_flags.get_name_leafdata());
    if (l2_subscriber_ip_protocol.is_set || is_set(l2_subscriber_ip_protocol.yfilter)) leaf_name_data.push_back(l2_subscriber_ip_protocol.get_name_leafdata());
    if (l2tpv3_cookie_length_bits.is_set || is_set(l2tpv3_cookie_length_bits.yfilter)) leaf_name_data.push_back(l2tpv3_cookie_length_bits.get_name_leafdata());
    if (route_for_external_reach_linecard_flag.is_set || is_set(route_for_external_reach_linecard_flag.yfilter)) leaf_name_data.push_back(route_for_external_reach_linecard_flag.get_name_leafdata());
    if (route_is_sr_flag.is_set || is_set(route_is_sr_flag.yfilter)) leaf_name_data.push_back(route_is_sr_flag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "detail-fib-entry-information")
    {
        if(detail_fib_entry_information == nullptr)
        {
            detail_fib_entry_information = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation>();
        }
        return detail_fib_entry_information;
    }

    if(child_yang_name == "fib-entry-path")
    {
        if(fib_entry_path == nullptr)
        {
            fib_entry_path = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath>();
        }
        return fib_entry_path;
    }

    if(child_yang_name == "extension-object")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject>();
        c->parent = this;
        extension_object.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(detail_fib_entry_information != nullptr)
    {
        children["detail-fib-entry-information"] = detail_fib_entry_information;
    }

    if(fib_entry_path != nullptr)
    {
        children["fib-entry-path"] = fib_entry_path;
    }

    count = 0;
    for (auto c : extension_object.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "protocol-name")
    {
        protocol_name = value;
        protocol_name.value_namespace = name_space;
        protocol_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
        vrf_name.value_namespace = name_space;
        vrf_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "source")
    {
        source = value;
        source.value_namespace = name_space;
        source.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "destination")
    {
        destination = value;
        destination.value_namespace = name_space;
        destination.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ipv6-flow-label")
    {
        ipv6_flow_label = value;
        ipv6_flow_label.value_namespace = name_space;
        ipv6_flow_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protocol-type-fib-entry")
    {
        protocol_type_fib_entry = value;
        protocol_type_fib_entry.value_namespace = name_space;
        protocol_type_fib_entry.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-hardware")
    {
        platform_hardware = value;
        platform_hardware.value_namespace = name_space;
        platform_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-referances-to-path-list")
    {
        number_of_referances_to_path_list = value;
        number_of_referances_to_path_list.value_namespace = name_space;
        number_of_referances_to_path_list.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-list-flags")
    {
        path_list_flags = value;
        path_list_flags.value_namespace = name_space;
        path_list_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-list-source")
    {
        path_list_source = value;
        path_list_source.value_namespace = name_space;
        path_list_source.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-referances-to-ldi")
    {
        number_of_referances_to_ldi = value;
        number_of_referances_to_ldi.value_namespace = name_space;
        number_of_referances_to_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-flags")
    {
        ldi_flags = value;
        ldi_flags.value_namespace = name_space;
        ldi_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flags-external-ldi")
    {
        flags_external_ldi = value;
        flags_external_ldi.value_namespace = name_space;
        flags_external_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pointer-external-ldi")
    {
        pointer_external_ldi = value;
        pointer_external_ldi.value_namespace = name_space;
        pointer_external_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-path-interface-handle")
    {
        exact_path_interface_handle = value;
        exact_path_interface_handle.value_namespace = name_space;
        exact_path_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-path-gre-interface-handle")
    {
        exact_path_gre_interface_handle = value;
        exact_path_gre_interface_handle.value_namespace = name_space;
        exact_path_gre_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-route-gre-phys-ifh-avail")
    {
        exact_route_gre_phys_ifh_avail = value;
        exact_route_gre_phys_ifh_avail.value_namespace = name_space;
        exact_route_gre_phys_ifh_avail.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-route-result")
    {
        exact_route_result = value;
        exact_route_result.value_namespace = name_space;
        exact_route_result.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-is-static-or-connected")
    {
        prefix_is_static_or_connected = value;
        prefix_is_static_or_connected.value_namespace = name_space;
        prefix_is_static_or_connected.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "packet-should-recieve")
    {
        packet_should_recieve = value;
        packet_should_recieve.value_namespace = name_space;
        packet_should_recieve.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-connected")
    {
        prefix_connected = value;
        prefix_connected.value_namespace = name_space;
        prefix_connected.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-for-adjancency")
    {
        prefix_for_adjancency = value;
        prefix_for_adjancency.value_namespace = name_space;
        prefix_for_adjancency.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-for-pic-next-hop")
    {
        prefix_for_pic_next_hop = value;
        prefix_for_pic_next_hop.value_namespace = name_space;
        prefix_for_pic_next_hop.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "purgable-after-purge-interval")
    {
        purgable_after_purge_interval = value;
        purgable_after_purge_interval.value_namespace = name_space;
        purgable_after_purge_interval.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "broadcast-recive-flag")
    {
        broadcast_recive_flag = value;
        broadcast_recive_flag.value_namespace = name_space;
        broadcast_recive_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "broadcast-forward-flag")
    {
        broadcast_forward_flag = value;
        broadcast_forward_flag.value_namespace = name_space;
        broadcast_forward_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "zero-by-zero-route-as-default")
    {
        zero_by_zero_route_as_default = value;
        zero_by_zero_route_as_default.value_namespace = name_space;
        zero_by_zero_route_as_default.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "external-switch-triggered")
    {
        external_switch_triggered = value;
        external_switch_triggered.value_namespace = name_space;
        external_switch_triggered.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "route-attribute-flag")
    {
        route_attribute_flag = value;
        route_attribute_flag.value_namespace = name_space;
        route_attribute_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dummy-real-zero-route")
    {
        dummy_real_zero_route = value;
        dummy_real_zero_route.value_namespace = name_space;
        dummy_real_zero_route.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-lw-flag")
    {
        ldi_lw_flag = value;
        ldi_lw_flag.value_namespace = name_space;
        ldi_lw_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ref-counter-of-ldi-lw-ldi")
    {
        ref_counter_of_ldi_lw_ldi = value;
        ref_counter_of_ldi_lw_ldi.value_namespace = name_space;
        ref_counter_of_ldi_lw_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type-of-ldi-lw-ldi")
    {
        type_of_ldi_lw_ldi = value;
        type_of_ldi_lw_ldi.value_namespace = name_space;
        type_of_ldi_lw_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lspa-flags")
    {
        lspa_flags = value;
        lspa_flags.value_namespace = name_space;
        lspa_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "version-of-route")
    {
        version_of_route = value;
        version_of_route.value_namespace = name_space;
        version_of_route.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-route-download-priority")
    {
        fib_route_download_priority = value;
        fib_route_download_priority.value_namespace = name_space;
        fib_route_download_priority.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "time-of-last-update-in-msec")
    {
        time_of_last_update_in_msec = value;
        time_of_last_update_in_msec.value_namespace = name_space;
        time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-subscriber-route")
    {
        l2_subscriber_route = value;
        l2_subscriber_route.value_namespace = name_space;
        l2_subscriber_route.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-subscriber-xconnect-id")
    {
        l2_subscriber_xconnect_id = value;
        l2_subscriber_xconnect_id.value_namespace = name_space;
        l2_subscriber_xconnect_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-subscriber-flags")
    {
        l2_subscriber_flags = value;
        l2_subscriber_flags.value_namespace = name_space;
        l2_subscriber_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-subscriber-ip-protocol")
    {
        l2_subscriber_ip_protocol = value;
        l2_subscriber_ip_protocol.value_namespace = name_space;
        l2_subscriber_ip_protocol.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2tpv3-cookie-length-bits")
    {
        l2tpv3_cookie_length_bits = value;
        l2tpv3_cookie_length_bits.value_namespace = name_space;
        l2tpv3_cookie_length_bits.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "route-for-external-reach-linecard-flag")
    {
        route_for_external_reach_linecard_flag = value;
        route_for_external_reach_linecard_flag.value_namespace = name_space;
        route_for_external_reach_linecard_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "route-is-sr-flag")
    {
        route_is_sr_flag = value;
        route_is_sr_flag.value_namespace = name_space;
        route_is_sr_flag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "protocol-name")
    {
        protocol_name.yfilter = yfilter;
    }
    if(value_path == "vrf-name")
    {
        vrf_name.yfilter = yfilter;
    }
    if(value_path == "source")
    {
        source.yfilter = yfilter;
    }
    if(value_path == "destination")
    {
        destination.yfilter = yfilter;
    }
    if(value_path == "ipv6-flow-label")
    {
        ipv6_flow_label.yfilter = yfilter;
    }
    if(value_path == "protocol-type-fib-entry")
    {
        protocol_type_fib_entry.yfilter = yfilter;
    }
    if(value_path == "platform-hardware")
    {
        platform_hardware.yfilter = yfilter;
    }
    if(value_path == "number-of-referances-to-path-list")
    {
        number_of_referances_to_path_list.yfilter = yfilter;
    }
    if(value_path == "path-list-flags")
    {
        path_list_flags.yfilter = yfilter;
    }
    if(value_path == "path-list-source")
    {
        path_list_source.yfilter = yfilter;
    }
    if(value_path == "number-of-referances-to-ldi")
    {
        number_of_referances_to_ldi.yfilter = yfilter;
    }
    if(value_path == "ldi-flags")
    {
        ldi_flags.yfilter = yfilter;
    }
    if(value_path == "flags-external-ldi")
    {
        flags_external_ldi.yfilter = yfilter;
    }
    if(value_path == "pointer-external-ldi")
    {
        pointer_external_ldi.yfilter = yfilter;
    }
    if(value_path == "exact-path-interface-handle")
    {
        exact_path_interface_handle.yfilter = yfilter;
    }
    if(value_path == "exact-path-gre-interface-handle")
    {
        exact_path_gre_interface_handle.yfilter = yfilter;
    }
    if(value_path == "exact-route-gre-phys-ifh-avail")
    {
        exact_route_gre_phys_ifh_avail.yfilter = yfilter;
    }
    if(value_path == "exact-route-result")
    {
        exact_route_result.yfilter = yfilter;
    }
    if(value_path == "prefix-is-static-or-connected")
    {
        prefix_is_static_or_connected.yfilter = yfilter;
    }
    if(value_path == "packet-should-recieve")
    {
        packet_should_recieve.yfilter = yfilter;
    }
    if(value_path == "prefix-connected")
    {
        prefix_connected.yfilter = yfilter;
    }
    if(value_path == "prefix-for-adjancency")
    {
        prefix_for_adjancency.yfilter = yfilter;
    }
    if(value_path == "prefix-for-pic-next-hop")
    {
        prefix_for_pic_next_hop.yfilter = yfilter;
    }
    if(value_path == "purgable-after-purge-interval")
    {
        purgable_after_purge_interval.yfilter = yfilter;
    }
    if(value_path == "broadcast-recive-flag")
    {
        broadcast_recive_flag.yfilter = yfilter;
    }
    if(value_path == "broadcast-forward-flag")
    {
        broadcast_forward_flag.yfilter = yfilter;
    }
    if(value_path == "zero-by-zero-route-as-default")
    {
        zero_by_zero_route_as_default.yfilter = yfilter;
    }
    if(value_path == "external-switch-triggered")
    {
        external_switch_triggered.yfilter = yfilter;
    }
    if(value_path == "route-attribute-flag")
    {
        route_attribute_flag.yfilter = yfilter;
    }
    if(value_path == "dummy-real-zero-route")
    {
        dummy_real_zero_route.yfilter = yfilter;
    }
    if(value_path == "ldi-lw-flag")
    {
        ldi_lw_flag.yfilter = yfilter;
    }
    if(value_path == "ref-counter-of-ldi-lw-ldi")
    {
        ref_counter_of_ldi_lw_ldi.yfilter = yfilter;
    }
    if(value_path == "type-of-ldi-lw-ldi")
    {
        type_of_ldi_lw_ldi.yfilter = yfilter;
    }
    if(value_path == "lspa-flags")
    {
        lspa_flags.yfilter = yfilter;
    }
    if(value_path == "version-of-route")
    {
        version_of_route.yfilter = yfilter;
    }
    if(value_path == "fib-route-download-priority")
    {
        fib_route_download_priority.yfilter = yfilter;
    }
    if(value_path == "time-of-last-update-in-msec")
    {
        time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "l2-subscriber-route")
    {
        l2_subscriber_route.yfilter = yfilter;
    }
    if(value_path == "l2-subscriber-xconnect-id")
    {
        l2_subscriber_xconnect_id.yfilter = yfilter;
    }
    if(value_path == "l2-subscriber-flags")
    {
        l2_subscriber_flags.yfilter = yfilter;
    }
    if(value_path == "l2-subscriber-ip-protocol")
    {
        l2_subscriber_ip_protocol.yfilter = yfilter;
    }
    if(value_path == "l2tpv3-cookie-length-bits")
    {
        l2tpv3_cookie_length_bits.yfilter = yfilter;
    }
    if(value_path == "route-for-external-reach-linecard-flag")
    {
        route_for_external_reach_linecard_flag.yfilter = yfilter;
    }
    if(value_path == "route-is-sr-flag")
    {
        route_is_sr_flag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "detail-fib-entry-information" || name == "fib-entry-path" || name == "extension-object" || name == "protocol-name" || name == "vrf-name" || name == "source" || name == "destination" || name == "ipv6-flow-label" || name == "protocol-type-fib-entry" || name == "platform-hardware" || name == "number-of-referances-to-path-list" || name == "path-list-flags" || name == "path-list-source" || name == "number-of-referances-to-ldi" || name == "ldi-flags" || name == "flags-external-ldi" || name == "pointer-external-ldi" || name == "exact-path-interface-handle" || name == "exact-path-gre-interface-handle" || name == "exact-route-gre-phys-ifh-avail" || name == "exact-route-result" || name == "prefix-is-static-or-connected" || name == "packet-should-recieve" || name == "prefix-connected" || name == "prefix-for-adjancency" || name == "prefix-for-pic-next-hop" || name == "purgable-after-purge-interval" || name == "broadcast-recive-flag" || name == "broadcast-forward-flag" || name == "zero-by-zero-route-as-default" || name == "external-switch-triggered" || name == "route-attribute-flag" || name == "dummy-real-zero-route" || name == "ldi-lw-flag" || name == "ref-counter-of-ldi-lw-ldi" || name == "type-of-ldi-lw-ldi" || name == "lspa-flags" || name == "version-of-route" || name == "fib-route-download-priority" || name == "time-of-last-update-in-msec" || name == "l2-subscriber-route" || name == "l2-subscriber-xconnect-id" || name == "l2-subscriber-flags" || name == "l2-subscriber-ip-protocol" || name == "l2tpv3-cookie-length-bits" || name == "route-for-external-reach-linecard-flag" || name == "route-is-sr-flag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::DetailFibEntryInformation()
    :
    fib_entry_version{YType::uint32, "fib-entry-version"},
    per_prefix_accounting{YType::uint8, "per-prefix-accounting"},
    load_sharing_type{YType::enumeration, "load-sharing-type"},
    fib_entry_adjacency_type{YType::enumeration, "fib-entry-adjacency-type"},
    fib_protocol_type{YType::uint32, "fib-protocol-type"},
    afi_fib_protocol_type{YType::uint32, "afi-fib-protocol-type"},
    aib_l3_address{YType::str, "aib-l3-address"},
    adjacency_address_length{YType::uint32, "adjacency-address-length"},
    adjacency_interface{YType::uint32, "adjacency-interface"},
    fib_special_nh_information_type{YType::uint32, "fib-special-nh-information-type"},
    fib_entry_adjacency_address{YType::str, "fib-entry-adjacency-address"},
    fib_entry_adjacency_interface{YType::uint32, "fib-entry-adjacency-interface"},
    packets_through_fib_entry{YType::uint64, "packets-through-fib-entry"},
    bytes_through_fib_entry{YType::uint64, "bytes-through-fib-entry"},
    detailed_prefix_length{YType::uint32, "detailed-prefix-length"},
    prefix_protocol{YType::uint32, "prefix-protocol"},
    precedence_forpackets{YType::uint8, "precedence-forpackets"},
    traffic_index_for_packets{YType::uint8, "traffic-index-for-packets"},
    switch_compontent_id{YType::uint32, "switch-compontent-id"},
    fast_adjacency_flag{YType::boolean, "fast-adjacency-flag"},
    illegal_fast_adjacency_flag{YType::boolean, "illegal-fast-adjacency-flag"},
    remote_adjacency_flag{YType::boolean, "remote-adjacency-flag"},
    bgp_attribute_id{YType::uint32, "bgp-attribute-id"},
    bgp_local_attribute_id{YType::uint32, "bgp-local-attribute-id"},
    bgp_attribute_origin_as{YType::uint32, "bgp-attribute-origin-as"},
    bgp_attribute_next_hop_as{YType::uint32, "bgp-attribute-next-hop-as"},
    path_string{YType::str, "path-string"},
    extcom_string{YType::str, "extcom-string"},
    com_string{YType::str, "com-string"},
    extended_community{YType::uint32, "extended-community"},
    qos_group{YType::uint32, "qos-group"},
    mpls_fec{YType::uint32, "mpls-fec"},
    qppb_qos_group_and_ip_precedence{YType::uint32, "qppb-qos-group-and-ip-precedence"},
    flow_tag{YType::uint8, "flow-tag"},
    forward_class{YType::uint8, "forward-class"},
    pl_time_of_last_update_in_msec{YType::uint64, "pl-time-of-last-update-in-msec"},
    ldi_time_of_last_update_in_msec{YType::uint64, "ldi-time-of-last-update-in-msec"},
    lwldi_time_of_last_update_in_msec{YType::uint64, "lwldi-time-of-last-update-in-msec"},
    pl_time_stamp_type{YType::uint32, "pl-time-stamp-type"}
        ,
    loadshare_information(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation>())
{
    loadshare_information->parent = this;

    yang_name = "detail-fib-entry-information"; yang_parent_name = "exact-route"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::~DetailFibEntryInformation()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::has_data() const
{
    if (is_presence_container) return true;
    return fib_entry_version.is_set
	|| per_prefix_accounting.is_set
	|| load_sharing_type.is_set
	|| fib_entry_adjacency_type.is_set
	|| fib_protocol_type.is_set
	|| afi_fib_protocol_type.is_set
	|| aib_l3_address.is_set
	|| adjacency_address_length.is_set
	|| adjacency_interface.is_set
	|| fib_special_nh_information_type.is_set
	|| fib_entry_adjacency_address.is_set
	|| fib_entry_adjacency_interface.is_set
	|| packets_through_fib_entry.is_set
	|| bytes_through_fib_entry.is_set
	|| detailed_prefix_length.is_set
	|| prefix_protocol.is_set
	|| precedence_forpackets.is_set
	|| traffic_index_for_packets.is_set
	|| switch_compontent_id.is_set
	|| fast_adjacency_flag.is_set
	|| illegal_fast_adjacency_flag.is_set
	|| remote_adjacency_flag.is_set
	|| bgp_attribute_id.is_set
	|| bgp_local_attribute_id.is_set
	|| bgp_attribute_origin_as.is_set
	|| bgp_attribute_next_hop_as.is_set
	|| path_string.is_set
	|| extcom_string.is_set
	|| com_string.is_set
	|| extended_community.is_set
	|| qos_group.is_set
	|| mpls_fec.is_set
	|| qppb_qos_group_and_ip_precedence.is_set
	|| flow_tag.is_set
	|| forward_class.is_set
	|| pl_time_of_last_update_in_msec.is_set
	|| ldi_time_of_last_update_in_msec.is_set
	|| lwldi_time_of_last_update_in_msec.is_set
	|| pl_time_stamp_type.is_set
	|| (loadshare_information !=  nullptr && loadshare_information->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(fib_entry_version.yfilter)
	|| ydk::is_set(per_prefix_accounting.yfilter)
	|| ydk::is_set(load_sharing_type.yfilter)
	|| ydk::is_set(fib_entry_adjacency_type.yfilter)
	|| ydk::is_set(fib_protocol_type.yfilter)
	|| ydk::is_set(afi_fib_protocol_type.yfilter)
	|| ydk::is_set(aib_l3_address.yfilter)
	|| ydk::is_set(adjacency_address_length.yfilter)
	|| ydk::is_set(adjacency_interface.yfilter)
	|| ydk::is_set(fib_special_nh_information_type.yfilter)
	|| ydk::is_set(fib_entry_adjacency_address.yfilter)
	|| ydk::is_set(fib_entry_adjacency_interface.yfilter)
	|| ydk::is_set(packets_through_fib_entry.yfilter)
	|| ydk::is_set(bytes_through_fib_entry.yfilter)
	|| ydk::is_set(detailed_prefix_length.yfilter)
	|| ydk::is_set(prefix_protocol.yfilter)
	|| ydk::is_set(precedence_forpackets.yfilter)
	|| ydk::is_set(traffic_index_for_packets.yfilter)
	|| ydk::is_set(switch_compontent_id.yfilter)
	|| ydk::is_set(fast_adjacency_flag.yfilter)
	|| ydk::is_set(illegal_fast_adjacency_flag.yfilter)
	|| ydk::is_set(remote_adjacency_flag.yfilter)
	|| ydk::is_set(bgp_attribute_id.yfilter)
	|| ydk::is_set(bgp_local_attribute_id.yfilter)
	|| ydk::is_set(bgp_attribute_origin_as.yfilter)
	|| ydk::is_set(bgp_attribute_next_hop_as.yfilter)
	|| ydk::is_set(path_string.yfilter)
	|| ydk::is_set(extcom_string.yfilter)
	|| ydk::is_set(com_string.yfilter)
	|| ydk::is_set(extended_community.yfilter)
	|| ydk::is_set(qos_group.yfilter)
	|| ydk::is_set(mpls_fec.yfilter)
	|| ydk::is_set(qppb_qos_group_and_ip_precedence.yfilter)
	|| ydk::is_set(flow_tag.yfilter)
	|| ydk::is_set(forward_class.yfilter)
	|| ydk::is_set(pl_time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(ldi_time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(lwldi_time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(pl_time_stamp_type.yfilter)
	|| (loadshare_information !=  nullptr && loadshare_information->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "detail-fib-entry-information";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (fib_entry_version.is_set || is_set(fib_entry_version.yfilter)) leaf_name_data.push_back(fib_entry_version.get_name_leafdata());
    if (per_prefix_accounting.is_set || is_set(per_prefix_accounting.yfilter)) leaf_name_data.push_back(per_prefix_accounting.get_name_leafdata());
    if (load_sharing_type.is_set || is_set(load_sharing_type.yfilter)) leaf_name_data.push_back(load_sharing_type.get_name_leafdata());
    if (fib_entry_adjacency_type.is_set || is_set(fib_entry_adjacency_type.yfilter)) leaf_name_data.push_back(fib_entry_adjacency_type.get_name_leafdata());
    if (fib_protocol_type.is_set || is_set(fib_protocol_type.yfilter)) leaf_name_data.push_back(fib_protocol_type.get_name_leafdata());
    if (afi_fib_protocol_type.is_set || is_set(afi_fib_protocol_type.yfilter)) leaf_name_data.push_back(afi_fib_protocol_type.get_name_leafdata());
    if (aib_l3_address.is_set || is_set(aib_l3_address.yfilter)) leaf_name_data.push_back(aib_l3_address.get_name_leafdata());
    if (adjacency_address_length.is_set || is_set(adjacency_address_length.yfilter)) leaf_name_data.push_back(adjacency_address_length.get_name_leafdata());
    if (adjacency_interface.is_set || is_set(adjacency_interface.yfilter)) leaf_name_data.push_back(adjacency_interface.get_name_leafdata());
    if (fib_special_nh_information_type.is_set || is_set(fib_special_nh_information_type.yfilter)) leaf_name_data.push_back(fib_special_nh_information_type.get_name_leafdata());
    if (fib_entry_adjacency_address.is_set || is_set(fib_entry_adjacency_address.yfilter)) leaf_name_data.push_back(fib_entry_adjacency_address.get_name_leafdata());
    if (fib_entry_adjacency_interface.is_set || is_set(fib_entry_adjacency_interface.yfilter)) leaf_name_data.push_back(fib_entry_adjacency_interface.get_name_leafdata());
    if (packets_through_fib_entry.is_set || is_set(packets_through_fib_entry.yfilter)) leaf_name_data.push_back(packets_through_fib_entry.get_name_leafdata());
    if (bytes_through_fib_entry.is_set || is_set(bytes_through_fib_entry.yfilter)) leaf_name_data.push_back(bytes_through_fib_entry.get_name_leafdata());
    if (detailed_prefix_length.is_set || is_set(detailed_prefix_length.yfilter)) leaf_name_data.push_back(detailed_prefix_length.get_name_leafdata());
    if (prefix_protocol.is_set || is_set(prefix_protocol.yfilter)) leaf_name_data.push_back(prefix_protocol.get_name_leafdata());
    if (precedence_forpackets.is_set || is_set(precedence_forpackets.yfilter)) leaf_name_data.push_back(precedence_forpackets.get_name_leafdata());
    if (traffic_index_for_packets.is_set || is_set(traffic_index_for_packets.yfilter)) leaf_name_data.push_back(traffic_index_for_packets.get_name_leafdata());
    if (switch_compontent_id.is_set || is_set(switch_compontent_id.yfilter)) leaf_name_data.push_back(switch_compontent_id.get_name_leafdata());
    if (fast_adjacency_flag.is_set || is_set(fast_adjacency_flag.yfilter)) leaf_name_data.push_back(fast_adjacency_flag.get_name_leafdata());
    if (illegal_fast_adjacency_flag.is_set || is_set(illegal_fast_adjacency_flag.yfilter)) leaf_name_data.push_back(illegal_fast_adjacency_flag.get_name_leafdata());
    if (remote_adjacency_flag.is_set || is_set(remote_adjacency_flag.yfilter)) leaf_name_data.push_back(remote_adjacency_flag.get_name_leafdata());
    if (bgp_attribute_id.is_set || is_set(bgp_attribute_id.yfilter)) leaf_name_data.push_back(bgp_attribute_id.get_name_leafdata());
    if (bgp_local_attribute_id.is_set || is_set(bgp_local_attribute_id.yfilter)) leaf_name_data.push_back(bgp_local_attribute_id.get_name_leafdata());
    if (bgp_attribute_origin_as.is_set || is_set(bgp_attribute_origin_as.yfilter)) leaf_name_data.push_back(bgp_attribute_origin_as.get_name_leafdata());
    if (bgp_attribute_next_hop_as.is_set || is_set(bgp_attribute_next_hop_as.yfilter)) leaf_name_data.push_back(bgp_attribute_next_hop_as.get_name_leafdata());
    if (path_string.is_set || is_set(path_string.yfilter)) leaf_name_data.push_back(path_string.get_name_leafdata());
    if (extcom_string.is_set || is_set(extcom_string.yfilter)) leaf_name_data.push_back(extcom_string.get_name_leafdata());
    if (com_string.is_set || is_set(com_string.yfilter)) leaf_name_data.push_back(com_string.get_name_leafdata());
    if (extended_community.is_set || is_set(extended_community.yfilter)) leaf_name_data.push_back(extended_community.get_name_leafdata());
    if (qos_group.is_set || is_set(qos_group.yfilter)) leaf_name_data.push_back(qos_group.get_name_leafdata());
    if (mpls_fec.is_set || is_set(mpls_fec.yfilter)) leaf_name_data.push_back(mpls_fec.get_name_leafdata());
    if (qppb_qos_group_and_ip_precedence.is_set || is_set(qppb_qos_group_and_ip_precedence.yfilter)) leaf_name_data.push_back(qppb_qos_group_and_ip_precedence.get_name_leafdata());
    if (flow_tag.is_set || is_set(flow_tag.yfilter)) leaf_name_data.push_back(flow_tag.get_name_leafdata());
    if (forward_class.is_set || is_set(forward_class.yfilter)) leaf_name_data.push_back(forward_class.get_name_leafdata());
    if (pl_time_of_last_update_in_msec.is_set || is_set(pl_time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(pl_time_of_last_update_in_msec.get_name_leafdata());
    if (ldi_time_of_last_update_in_msec.is_set || is_set(ldi_time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(ldi_time_of_last_update_in_msec.get_name_leafdata());
    if (lwldi_time_of_last_update_in_msec.is_set || is_set(lwldi_time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(lwldi_time_of_last_update_in_msec.get_name_leafdata());
    if (pl_time_stamp_type.is_set || is_set(pl_time_stamp_type.yfilter)) leaf_name_data.push_back(pl_time_stamp_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "loadshare-information")
    {
        if(loadshare_information == nullptr)
        {
            loadshare_information = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation>();
        }
        return loadshare_information;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(loadshare_information != nullptr)
    {
        children["loadshare-information"] = loadshare_information;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "fib-entry-version")
    {
        fib_entry_version = value;
        fib_entry_version.value_namespace = name_space;
        fib_entry_version.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "per-prefix-accounting")
    {
        per_prefix_accounting = value;
        per_prefix_accounting.value_namespace = name_space;
        per_prefix_accounting.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-sharing-type")
    {
        load_sharing_type = value;
        load_sharing_type.value_namespace = name_space;
        load_sharing_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-entry-adjacency-type")
    {
        fib_entry_adjacency_type = value;
        fib_entry_adjacency_type.value_namespace = name_space;
        fib_entry_adjacency_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-protocol-type")
    {
        fib_protocol_type = value;
        fib_protocol_type.value_namespace = name_space;
        fib_protocol_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "afi-fib-protocol-type")
    {
        afi_fib_protocol_type = value;
        afi_fib_protocol_type.value_namespace = name_space;
        afi_fib_protocol_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aib-l3-address")
    {
        aib_l3_address = value;
        aib_l3_address.value_namespace = name_space;
        aib_l3_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "adjacency-address-length")
    {
        adjacency_address_length = value;
        adjacency_address_length.value_namespace = name_space;
        adjacency_address_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "adjacency-interface")
    {
        adjacency_interface = value;
        adjacency_interface.value_namespace = name_space;
        adjacency_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-special-nh-information-type")
    {
        fib_special_nh_information_type = value;
        fib_special_nh_information_type.value_namespace = name_space;
        fib_special_nh_information_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-entry-adjacency-address")
    {
        fib_entry_adjacency_address = value;
        fib_entry_adjacency_address.value_namespace = name_space;
        fib_entry_adjacency_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-entry-adjacency-interface")
    {
        fib_entry_adjacency_interface = value;
        fib_entry_adjacency_interface.value_namespace = name_space;
        fib_entry_adjacency_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "packets-through-fib-entry")
    {
        packets_through_fib_entry = value;
        packets_through_fib_entry.value_namespace = name_space;
        packets_through_fib_entry.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bytes-through-fib-entry")
    {
        bytes_through_fib_entry = value;
        bytes_through_fib_entry.value_namespace = name_space;
        bytes_through_fib_entry.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "detailed-prefix-length")
    {
        detailed_prefix_length = value;
        detailed_prefix_length.value_namespace = name_space;
        detailed_prefix_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-protocol")
    {
        prefix_protocol = value;
        prefix_protocol.value_namespace = name_space;
        prefix_protocol.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "precedence-forpackets")
    {
        precedence_forpackets = value;
        precedence_forpackets.value_namespace = name_space;
        precedence_forpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "traffic-index-for-packets")
    {
        traffic_index_for_packets = value;
        traffic_index_for_packets.value_namespace = name_space;
        traffic_index_for_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "switch-compontent-id")
    {
        switch_compontent_id = value;
        switch_compontent_id.value_namespace = name_space;
        switch_compontent_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fast-adjacency-flag")
    {
        fast_adjacency_flag = value;
        fast_adjacency_flag.value_namespace = name_space;
        fast_adjacency_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "illegal-fast-adjacency-flag")
    {
        illegal_fast_adjacency_flag = value;
        illegal_fast_adjacency_flag.value_namespace = name_space;
        illegal_fast_adjacency_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "remote-adjacency-flag")
    {
        remote_adjacency_flag = value;
        remote_adjacency_flag.value_namespace = name_space;
        remote_adjacency_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-attribute-id")
    {
        bgp_attribute_id = value;
        bgp_attribute_id.value_namespace = name_space;
        bgp_attribute_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-local-attribute-id")
    {
        bgp_local_attribute_id = value;
        bgp_local_attribute_id.value_namespace = name_space;
        bgp_local_attribute_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-attribute-origin-as")
    {
        bgp_attribute_origin_as = value;
        bgp_attribute_origin_as.value_namespace = name_space;
        bgp_attribute_origin_as.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-attribute-next-hop-as")
    {
        bgp_attribute_next_hop_as = value;
        bgp_attribute_next_hop_as.value_namespace = name_space;
        bgp_attribute_next_hop_as.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-string")
    {
        path_string = value;
        path_string.value_namespace = name_space;
        path_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extcom-string")
    {
        extcom_string = value;
        extcom_string.value_namespace = name_space;
        extcom_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "com-string")
    {
        com_string = value;
        com_string.value_namespace = name_space;
        com_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extended-community")
    {
        extended_community = value;
        extended_community.value_namespace = name_space;
        extended_community.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "qos-group")
    {
        qos_group = value;
        qos_group.value_namespace = name_space;
        qos_group.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mpls-fec")
    {
        mpls_fec = value;
        mpls_fec.value_namespace = name_space;
        mpls_fec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "qppb-qos-group-and-ip-precedence")
    {
        qppb_qos_group_and_ip_precedence = value;
        qppb_qos_group_and_ip_precedence.value_namespace = name_space;
        qppb_qos_group_and_ip_precedence.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flow-tag")
    {
        flow_tag = value;
        flow_tag.value_namespace = name_space;
        flow_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forward-class")
    {
        forward_class = value;
        forward_class.value_namespace = name_space;
        forward_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pl-time-of-last-update-in-msec")
    {
        pl_time_of_last_update_in_msec = value;
        pl_time_of_last_update_in_msec.value_namespace = name_space;
        pl_time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-time-of-last-update-in-msec")
    {
        ldi_time_of_last_update_in_msec = value;
        ldi_time_of_last_update_in_msec.value_namespace = name_space;
        ldi_time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lwldi-time-of-last-update-in-msec")
    {
        lwldi_time_of_last_update_in_msec = value;
        lwldi_time_of_last_update_in_msec.value_namespace = name_space;
        lwldi_time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pl-time-stamp-type")
    {
        pl_time_stamp_type = value;
        pl_time_stamp_type.value_namespace = name_space;
        pl_time_stamp_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "fib-entry-version")
    {
        fib_entry_version.yfilter = yfilter;
    }
    if(value_path == "per-prefix-accounting")
    {
        per_prefix_accounting.yfilter = yfilter;
    }
    if(value_path == "load-sharing-type")
    {
        load_sharing_type.yfilter = yfilter;
    }
    if(value_path == "fib-entry-adjacency-type")
    {
        fib_entry_adjacency_type.yfilter = yfilter;
    }
    if(value_path == "fib-protocol-type")
    {
        fib_protocol_type.yfilter = yfilter;
    }
    if(value_path == "afi-fib-protocol-type")
    {
        afi_fib_protocol_type.yfilter = yfilter;
    }
    if(value_path == "aib-l3-address")
    {
        aib_l3_address.yfilter = yfilter;
    }
    if(value_path == "adjacency-address-length")
    {
        adjacency_address_length.yfilter = yfilter;
    }
    if(value_path == "adjacency-interface")
    {
        adjacency_interface.yfilter = yfilter;
    }
    if(value_path == "fib-special-nh-information-type")
    {
        fib_special_nh_information_type.yfilter = yfilter;
    }
    if(value_path == "fib-entry-adjacency-address")
    {
        fib_entry_adjacency_address.yfilter = yfilter;
    }
    if(value_path == "fib-entry-adjacency-interface")
    {
        fib_entry_adjacency_interface.yfilter = yfilter;
    }
    if(value_path == "packets-through-fib-entry")
    {
        packets_through_fib_entry.yfilter = yfilter;
    }
    if(value_path == "bytes-through-fib-entry")
    {
        bytes_through_fib_entry.yfilter = yfilter;
    }
    if(value_path == "detailed-prefix-length")
    {
        detailed_prefix_length.yfilter = yfilter;
    }
    if(value_path == "prefix-protocol")
    {
        prefix_protocol.yfilter = yfilter;
    }
    if(value_path == "precedence-forpackets")
    {
        precedence_forpackets.yfilter = yfilter;
    }
    if(value_path == "traffic-index-for-packets")
    {
        traffic_index_for_packets.yfilter = yfilter;
    }
    if(value_path == "switch-compontent-id")
    {
        switch_compontent_id.yfilter = yfilter;
    }
    if(value_path == "fast-adjacency-flag")
    {
        fast_adjacency_flag.yfilter = yfilter;
    }
    if(value_path == "illegal-fast-adjacency-flag")
    {
        illegal_fast_adjacency_flag.yfilter = yfilter;
    }
    if(value_path == "remote-adjacency-flag")
    {
        remote_adjacency_flag.yfilter = yfilter;
    }
    if(value_path == "bgp-attribute-id")
    {
        bgp_attribute_id.yfilter = yfilter;
    }
    if(value_path == "bgp-local-attribute-id")
    {
        bgp_local_attribute_id.yfilter = yfilter;
    }
    if(value_path == "bgp-attribute-origin-as")
    {
        bgp_attribute_origin_as.yfilter = yfilter;
    }
    if(value_path == "bgp-attribute-next-hop-as")
    {
        bgp_attribute_next_hop_as.yfilter = yfilter;
    }
    if(value_path == "path-string")
    {
        path_string.yfilter = yfilter;
    }
    if(value_path == "extcom-string")
    {
        extcom_string.yfilter = yfilter;
    }
    if(value_path == "com-string")
    {
        com_string.yfilter = yfilter;
    }
    if(value_path == "extended-community")
    {
        extended_community.yfilter = yfilter;
    }
    if(value_path == "qos-group")
    {
        qos_group.yfilter = yfilter;
    }
    if(value_path == "mpls-fec")
    {
        mpls_fec.yfilter = yfilter;
    }
    if(value_path == "qppb-qos-group-and-ip-precedence")
    {
        qppb_qos_group_and_ip_precedence.yfilter = yfilter;
    }
    if(value_path == "flow-tag")
    {
        flow_tag.yfilter = yfilter;
    }
    if(value_path == "forward-class")
    {
        forward_class.yfilter = yfilter;
    }
    if(value_path == "pl-time-of-last-update-in-msec")
    {
        pl_time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "ldi-time-of-last-update-in-msec")
    {
        ldi_time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "lwldi-time-of-last-update-in-msec")
    {
        lwldi_time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "pl-time-stamp-type")
    {
        pl_time_stamp_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "loadshare-information" || name == "fib-entry-version" || name == "per-prefix-accounting" || name == "load-sharing-type" || name == "fib-entry-adjacency-type" || name == "fib-protocol-type" || name == "afi-fib-protocol-type" || name == "aib-l3-address" || name == "adjacency-address-length" || name == "adjacency-interface" || name == "fib-special-nh-information-type" || name == "fib-entry-adjacency-address" || name == "fib-entry-adjacency-interface" || name == "packets-through-fib-entry" || name == "bytes-through-fib-entry" || name == "detailed-prefix-length" || name == "prefix-protocol" || name == "precedence-forpackets" || name == "traffic-index-for-packets" || name == "switch-compontent-id" || name == "fast-adjacency-flag" || name == "illegal-fast-adjacency-flag" || name == "remote-adjacency-flag" || name == "bgp-attribute-id" || name == "bgp-local-attribute-id" || name == "bgp-attribute-origin-as" || name == "bgp-attribute-next-hop-as" || name == "path-string" || name == "extcom-string" || name == "com-string" || name == "extended-community" || name == "qos-group" || name == "mpls-fec" || name == "qppb-qos-group-and-ip-precedence" || name == "flow-tag" || name == "forward-class" || name == "pl-time-of-last-update-in-msec" || name == "ldi-time-of-last-update-in-msec" || name == "lwldi-time-of-last-update-in-msec" || name == "pl-time-stamp-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadshareInformation()
    :
    packets_through_load_information{YType::uint64, "packets-through-load-information"},
    bytes_through_load_information{YType::uint64, "bytes-through-load-information"},
    total_packets_through_load_information{YType::uint64, "total-packets-through-load-information"},
    total_bytes_through_load_information{YType::uint64, "total-bytes-through-load-information"},
    prefix_of_owner{YType::uint32, "prefix-of-owner"},
    mask_length_of_owner{YType::uint32, "mask-length-of-owner"},
    load_information_reference_count{YType::uint16, "load-information-reference-count"},
    per_dest_load_sharing_flag{YType::boolean, "per-dest-load-sharing-flag"},
    load_information_owner_deleted_flag{YType::boolean, "load-information-owner-deleted-flag"},
    loadinfo_sanity_flag{YType::boolean, "loadinfo-sanity-flag"},
    is_owner{YType::boolean, "is-owner"}
        ,
    load_informtion_internal_data(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData>())
{
    load_informtion_internal_data->parent = this;

    yang_name = "loadshare-information"; yang_parent_name = "detail-fib-entry-information"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::~LoadshareInformation()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::has_data() const
{
    if (is_presence_container) return true;
    return packets_through_load_information.is_set
	|| bytes_through_load_information.is_set
	|| total_packets_through_load_information.is_set
	|| total_bytes_through_load_information.is_set
	|| prefix_of_owner.is_set
	|| mask_length_of_owner.is_set
	|| load_information_reference_count.is_set
	|| per_dest_load_sharing_flag.is_set
	|| load_information_owner_deleted_flag.is_set
	|| loadinfo_sanity_flag.is_set
	|| is_owner.is_set
	|| (load_informtion_internal_data !=  nullptr && load_informtion_internal_data->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(packets_through_load_information.yfilter)
	|| ydk::is_set(bytes_through_load_information.yfilter)
	|| ydk::is_set(total_packets_through_load_information.yfilter)
	|| ydk::is_set(total_bytes_through_load_information.yfilter)
	|| ydk::is_set(prefix_of_owner.yfilter)
	|| ydk::is_set(mask_length_of_owner.yfilter)
	|| ydk::is_set(load_information_reference_count.yfilter)
	|| ydk::is_set(per_dest_load_sharing_flag.yfilter)
	|| ydk::is_set(load_information_owner_deleted_flag.yfilter)
	|| ydk::is_set(loadinfo_sanity_flag.yfilter)
	|| ydk::is_set(is_owner.yfilter)
	|| (load_informtion_internal_data !=  nullptr && load_informtion_internal_data->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "loadshare-information";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (packets_through_load_information.is_set || is_set(packets_through_load_information.yfilter)) leaf_name_data.push_back(packets_through_load_information.get_name_leafdata());
    if (bytes_through_load_information.is_set || is_set(bytes_through_load_information.yfilter)) leaf_name_data.push_back(bytes_through_load_information.get_name_leafdata());
    if (total_packets_through_load_information.is_set || is_set(total_packets_through_load_information.yfilter)) leaf_name_data.push_back(total_packets_through_load_information.get_name_leafdata());
    if (total_bytes_through_load_information.is_set || is_set(total_bytes_through_load_information.yfilter)) leaf_name_data.push_back(total_bytes_through_load_information.get_name_leafdata());
    if (prefix_of_owner.is_set || is_set(prefix_of_owner.yfilter)) leaf_name_data.push_back(prefix_of_owner.get_name_leafdata());
    if (mask_length_of_owner.is_set || is_set(mask_length_of_owner.yfilter)) leaf_name_data.push_back(mask_length_of_owner.get_name_leafdata());
    if (load_information_reference_count.is_set || is_set(load_information_reference_count.yfilter)) leaf_name_data.push_back(load_information_reference_count.get_name_leafdata());
    if (per_dest_load_sharing_flag.is_set || is_set(per_dest_load_sharing_flag.yfilter)) leaf_name_data.push_back(per_dest_load_sharing_flag.get_name_leafdata());
    if (load_information_owner_deleted_flag.is_set || is_set(load_information_owner_deleted_flag.yfilter)) leaf_name_data.push_back(load_information_owner_deleted_flag.get_name_leafdata());
    if (loadinfo_sanity_flag.is_set || is_set(loadinfo_sanity_flag.yfilter)) leaf_name_data.push_back(loadinfo_sanity_flag.get_name_leafdata());
    if (is_owner.is_set || is_set(is_owner.yfilter)) leaf_name_data.push_back(is_owner.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "load-informtion-internal-data")
    {
        if(load_informtion_internal_data == nullptr)
        {
            load_informtion_internal_data = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData>();
        }
        return load_informtion_internal_data;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(load_informtion_internal_data != nullptr)
    {
        children["load-informtion-internal-data"] = load_informtion_internal_data;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "packets-through-load-information")
    {
        packets_through_load_information = value;
        packets_through_load_information.value_namespace = name_space;
        packets_through_load_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bytes-through-load-information")
    {
        bytes_through_load_information = value;
        bytes_through_load_information.value_namespace = name_space;
        bytes_through_load_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-packets-through-load-information")
    {
        total_packets_through_load_information = value;
        total_packets_through_load_information.value_namespace = name_space;
        total_packets_through_load_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-bytes-through-load-information")
    {
        total_bytes_through_load_information = value;
        total_bytes_through_load_information.value_namespace = name_space;
        total_bytes_through_load_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-of-owner")
    {
        prefix_of_owner = value;
        prefix_of_owner.value_namespace = name_space;
        prefix_of_owner.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mask-length-of-owner")
    {
        mask_length_of_owner = value;
        mask_length_of_owner.value_namespace = name_space;
        mask_length_of_owner.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-information-reference-count")
    {
        load_information_reference_count = value;
        load_information_reference_count.value_namespace = name_space;
        load_information_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "per-dest-load-sharing-flag")
    {
        per_dest_load_sharing_flag = value;
        per_dest_load_sharing_flag.value_namespace = name_space;
        per_dest_load_sharing_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-information-owner-deleted-flag")
    {
        load_information_owner_deleted_flag = value;
        load_information_owner_deleted_flag.value_namespace = name_space;
        load_information_owner_deleted_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "loadinfo-sanity-flag")
    {
        loadinfo_sanity_flag = value;
        loadinfo_sanity_flag.value_namespace = name_space;
        loadinfo_sanity_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "is-owner")
    {
        is_owner = value;
        is_owner.value_namespace = name_space;
        is_owner.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "packets-through-load-information")
    {
        packets_through_load_information.yfilter = yfilter;
    }
    if(value_path == "bytes-through-load-information")
    {
        bytes_through_load_information.yfilter = yfilter;
    }
    if(value_path == "total-packets-through-load-information")
    {
        total_packets_through_load_information.yfilter = yfilter;
    }
    if(value_path == "total-bytes-through-load-information")
    {
        total_bytes_through_load_information.yfilter = yfilter;
    }
    if(value_path == "prefix-of-owner")
    {
        prefix_of_owner.yfilter = yfilter;
    }
    if(value_path == "mask-length-of-owner")
    {
        mask_length_of_owner.yfilter = yfilter;
    }
    if(value_path == "load-information-reference-count")
    {
        load_information_reference_count.yfilter = yfilter;
    }
    if(value_path == "per-dest-load-sharing-flag")
    {
        per_dest_load_sharing_flag.yfilter = yfilter;
    }
    if(value_path == "load-information-owner-deleted-flag")
    {
        load_information_owner_deleted_flag.yfilter = yfilter;
    }
    if(value_path == "loadinfo-sanity-flag")
    {
        loadinfo_sanity_flag.yfilter = yfilter;
    }
    if(value_path == "is-owner")
    {
        is_owner.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "load-informtion-internal-data" || name == "packets-through-load-information" || name == "bytes-through-load-information" || name == "total-packets-through-load-information" || name == "total-bytes-through-load-information" || name == "prefix-of-owner" || name == "mask-length-of-owner" || name == "load-information-reference-count" || name == "per-dest-load-sharing-flag" || name == "load-information-owner-deleted-flag" || name == "loadinfo-sanity-flag" || name == "is-owner")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::LoadInformtionInternalData()
    :
    level_ofldis{YType::uint8, "level-ofldis"},
    number_of_ldis{YType::uint8, "number-of-ldis"},
    maximum_index_arrays{YType::uint32, "maximum-index-arrays"},
    path_indices{YType::str, "path-indices"},
    path_ldi_numbers{YType::str, "path-ldi-numbers"},
    maximum_slots{YType::uint32, "maximum-slots"},
    normalized_weights{YType::str, "normalized-weights"},
    tunnel_class_value{YType::str, "tunnel-class-value"},
    is_pbts_info_valid{YType::boolean, "is-pbts-info-valid"},
    pbts_class_offset{YType::str, "pbts-class-offset"},
    pbts_class_num_paths{YType::str, "pbts-class-num-paths"},
    pbts_fallback_mapped_class{YType::str, "pbts-fallback-mapped-class"},
    round_robin_disable{YType::boolean, "round-robin-disable"},
    ldi_next_hop_buckets{YType::uint8, "ldi-next-hop-buckets"},
    platform_hardware_information{YType::str, "platform-hardware-information"}
        ,
    sanity_flag(this, {})
    , interface_handle(this, {})
    , weights_of_path(this, {})
    , adjacency_address(this, {})
    , pbts_class_is_fallback_mapped(this, {})
    , pbts_fallback_to_drop(this, {})
    , tunnel_is_forward_class(this, {})
{

    yang_name = "load-informtion-internal-data"; yang_parent_name = "loadshare-information"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::~LoadInformtionInternalData()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<sanity_flag.len(); index++)
    {
        if(sanity_flag[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<interface_handle.len(); index++)
    {
        if(interface_handle[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<weights_of_path.len(); index++)
    {
        if(weights_of_path[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<adjacency_address.len(); index++)
    {
        if(adjacency_address[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<pbts_class_is_fallback_mapped.len(); index++)
    {
        if(pbts_class_is_fallback_mapped[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<pbts_fallback_to_drop.len(); index++)
    {
        if(pbts_fallback_to_drop[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<tunnel_is_forward_class.len(); index++)
    {
        if(tunnel_is_forward_class[index]->has_data())
            return true;
    }
    return level_ofldis.is_set
	|| number_of_ldis.is_set
	|| maximum_index_arrays.is_set
	|| path_indices.is_set
	|| path_ldi_numbers.is_set
	|| maximum_slots.is_set
	|| normalized_weights.is_set
	|| tunnel_class_value.is_set
	|| is_pbts_info_valid.is_set
	|| pbts_class_offset.is_set
	|| pbts_class_num_paths.is_set
	|| pbts_fallback_mapped_class.is_set
	|| round_robin_disable.is_set
	|| ldi_next_hop_buckets.is_set
	|| platform_hardware_information.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::has_operation() const
{
    for (std::size_t index=0; index<sanity_flag.len(); index++)
    {
        if(sanity_flag[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<interface_handle.len(); index++)
    {
        if(interface_handle[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<weights_of_path.len(); index++)
    {
        if(weights_of_path[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<adjacency_address.len(); index++)
    {
        if(adjacency_address[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<pbts_class_is_fallback_mapped.len(); index++)
    {
        if(pbts_class_is_fallback_mapped[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<pbts_fallback_to_drop.len(); index++)
    {
        if(pbts_fallback_to_drop[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<tunnel_is_forward_class.len(); index++)
    {
        if(tunnel_is_forward_class[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(level_ofldis.yfilter)
	|| ydk::is_set(number_of_ldis.yfilter)
	|| ydk::is_set(maximum_index_arrays.yfilter)
	|| ydk::is_set(path_indices.yfilter)
	|| ydk::is_set(path_ldi_numbers.yfilter)
	|| ydk::is_set(maximum_slots.yfilter)
	|| ydk::is_set(normalized_weights.yfilter)
	|| ydk::is_set(tunnel_class_value.yfilter)
	|| ydk::is_set(is_pbts_info_valid.yfilter)
	|| ydk::is_set(pbts_class_offset.yfilter)
	|| ydk::is_set(pbts_class_num_paths.yfilter)
	|| ydk::is_set(pbts_fallback_mapped_class.yfilter)
	|| ydk::is_set(round_robin_disable.yfilter)
	|| ydk::is_set(ldi_next_hop_buckets.yfilter)
	|| ydk::is_set(platform_hardware_information.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "load-informtion-internal-data";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (level_ofldis.is_set || is_set(level_ofldis.yfilter)) leaf_name_data.push_back(level_ofldis.get_name_leafdata());
    if (number_of_ldis.is_set || is_set(number_of_ldis.yfilter)) leaf_name_data.push_back(number_of_ldis.get_name_leafdata());
    if (maximum_index_arrays.is_set || is_set(maximum_index_arrays.yfilter)) leaf_name_data.push_back(maximum_index_arrays.get_name_leafdata());
    if (path_indices.is_set || is_set(path_indices.yfilter)) leaf_name_data.push_back(path_indices.get_name_leafdata());
    if (path_ldi_numbers.is_set || is_set(path_ldi_numbers.yfilter)) leaf_name_data.push_back(path_ldi_numbers.get_name_leafdata());
    if (maximum_slots.is_set || is_set(maximum_slots.yfilter)) leaf_name_data.push_back(maximum_slots.get_name_leafdata());
    if (normalized_weights.is_set || is_set(normalized_weights.yfilter)) leaf_name_data.push_back(normalized_weights.get_name_leafdata());
    if (tunnel_class_value.is_set || is_set(tunnel_class_value.yfilter)) leaf_name_data.push_back(tunnel_class_value.get_name_leafdata());
    if (is_pbts_info_valid.is_set || is_set(is_pbts_info_valid.yfilter)) leaf_name_data.push_back(is_pbts_info_valid.get_name_leafdata());
    if (pbts_class_offset.is_set || is_set(pbts_class_offset.yfilter)) leaf_name_data.push_back(pbts_class_offset.get_name_leafdata());
    if (pbts_class_num_paths.is_set || is_set(pbts_class_num_paths.yfilter)) leaf_name_data.push_back(pbts_class_num_paths.get_name_leafdata());
    if (pbts_fallback_mapped_class.is_set || is_set(pbts_fallback_mapped_class.yfilter)) leaf_name_data.push_back(pbts_fallback_mapped_class.get_name_leafdata());
    if (round_robin_disable.is_set || is_set(round_robin_disable.yfilter)) leaf_name_data.push_back(round_robin_disable.get_name_leafdata());
    if (ldi_next_hop_buckets.is_set || is_set(ldi_next_hop_buckets.yfilter)) leaf_name_data.push_back(ldi_next_hop_buckets.get_name_leafdata());
    if (platform_hardware_information.is_set || is_set(platform_hardware_information.yfilter)) leaf_name_data.push_back(platform_hardware_information.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sanity-flag")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag>();
        c->parent = this;
        sanity_flag.append(c);
        return c;
    }

    if(child_yang_name == "interface-handle")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle>();
        c->parent = this;
        interface_handle.append(c);
        return c;
    }

    if(child_yang_name == "weights-of-path")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath>();
        c->parent = this;
        weights_of_path.append(c);
        return c;
    }

    if(child_yang_name == "adjacency-address")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress>();
        c->parent = this;
        adjacency_address.append(c);
        return c;
    }

    if(child_yang_name == "pbts-class-is-fallback-mapped")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped>();
        c->parent = this;
        pbts_class_is_fallback_mapped.append(c);
        return c;
    }

    if(child_yang_name == "pbts-fallback-to-drop")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop>();
        c->parent = this;
        pbts_fallback_to_drop.append(c);
        return c;
    }

    if(child_yang_name == "tunnel-is-forward-class")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass>();
        c->parent = this;
        tunnel_is_forward_class.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : sanity_flag.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : interface_handle.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : weights_of_path.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : adjacency_address.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : pbts_class_is_fallback_mapped.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : pbts_fallback_to_drop.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : tunnel_is_forward_class.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "level-ofldis")
    {
        level_ofldis = value;
        level_ofldis.value_namespace = name_space;
        level_ofldis.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-ldis")
    {
        number_of_ldis = value;
        number_of_ldis.value_namespace = name_space;
        number_of_ldis.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maximum-index-arrays")
    {
        maximum_index_arrays = value;
        maximum_index_arrays.value_namespace = name_space;
        maximum_index_arrays.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-indices")
    {
        path_indices = value;
        path_indices.value_namespace = name_space;
        path_indices.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-ldi-numbers")
    {
        path_ldi_numbers = value;
        path_ldi_numbers.value_namespace = name_space;
        path_ldi_numbers.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maximum-slots")
    {
        maximum_slots = value;
        maximum_slots.value_namespace = name_space;
        maximum_slots.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "normalized-weights")
    {
        normalized_weights = value;
        normalized_weights.value_namespace = name_space;
        normalized_weights.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-class-value")
    {
        tunnel_class_value = value;
        tunnel_class_value.value_namespace = name_space;
        tunnel_class_value.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "is-pbts-info-valid")
    {
        is_pbts_info_valid = value;
        is_pbts_info_valid.value_namespace = name_space;
        is_pbts_info_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pbts-class-offset")
    {
        pbts_class_offset = value;
        pbts_class_offset.value_namespace = name_space;
        pbts_class_offset.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pbts-class-num-paths")
    {
        pbts_class_num_paths = value;
        pbts_class_num_paths.value_namespace = name_space;
        pbts_class_num_paths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pbts-fallback-mapped-class")
    {
        pbts_fallback_mapped_class = value;
        pbts_fallback_mapped_class.value_namespace = name_space;
        pbts_fallback_mapped_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "round-robin-disable")
    {
        round_robin_disable = value;
        round_robin_disable.value_namespace = name_space;
        round_robin_disable.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-next-hop-buckets")
    {
        ldi_next_hop_buckets = value;
        ldi_next_hop_buckets.value_namespace = name_space;
        ldi_next_hop_buckets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-hardware-information")
    {
        platform_hardware_information = value;
        platform_hardware_information.value_namespace = name_space;
        platform_hardware_information.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "level-ofldis")
    {
        level_ofldis.yfilter = yfilter;
    }
    if(value_path == "number-of-ldis")
    {
        number_of_ldis.yfilter = yfilter;
    }
    if(value_path == "maximum-index-arrays")
    {
        maximum_index_arrays.yfilter = yfilter;
    }
    if(value_path == "path-indices")
    {
        path_indices.yfilter = yfilter;
    }
    if(value_path == "path-ldi-numbers")
    {
        path_ldi_numbers.yfilter = yfilter;
    }
    if(value_path == "maximum-slots")
    {
        maximum_slots.yfilter = yfilter;
    }
    if(value_path == "normalized-weights")
    {
        normalized_weights.yfilter = yfilter;
    }
    if(value_path == "tunnel-class-value")
    {
        tunnel_class_value.yfilter = yfilter;
    }
    if(value_path == "is-pbts-info-valid")
    {
        is_pbts_info_valid.yfilter = yfilter;
    }
    if(value_path == "pbts-class-offset")
    {
        pbts_class_offset.yfilter = yfilter;
    }
    if(value_path == "pbts-class-num-paths")
    {
        pbts_class_num_paths.yfilter = yfilter;
    }
    if(value_path == "pbts-fallback-mapped-class")
    {
        pbts_fallback_mapped_class.yfilter = yfilter;
    }
    if(value_path == "round-robin-disable")
    {
        round_robin_disable.yfilter = yfilter;
    }
    if(value_path == "ldi-next-hop-buckets")
    {
        ldi_next_hop_buckets.yfilter = yfilter;
    }
    if(value_path == "platform-hardware-information")
    {
        platform_hardware_information.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sanity-flag" || name == "interface-handle" || name == "weights-of-path" || name == "adjacency-address" || name == "pbts-class-is-fallback-mapped" || name == "pbts-fallback-to-drop" || name == "tunnel-is-forward-class" || name == "level-ofldis" || name == "number-of-ldis" || name == "maximum-index-arrays" || name == "path-indices" || name == "path-ldi-numbers" || name == "maximum-slots" || name == "normalized-weights" || name == "tunnel-class-value" || name == "is-pbts-info-valid" || name == "pbts-class-offset" || name == "pbts-class-num-paths" || name == "pbts-fallback-mapped-class" || name == "round-robin-disable" || name == "ldi-next-hop-buckets" || name == "platform-hardware-information")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::SanityFlag()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "sanity-flag"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::~SanityFlag()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sanity-flag";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::InterfaceHandle()
    :
    entry{YType::str, "entry"}
{

    yang_name = "interface-handle"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::~InterfaceHandle()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-handle";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::WeightsOfPath()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "weights-of-path"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::~WeightsOfPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "weights-of-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::AdjacencyAddress()
    :
    address{YType::str, "address"}
{

    yang_name = "adjacency-address"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::~AdjacencyAddress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::has_data() const
{
    if (is_presence_container) return true;
    return address.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(address.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "adjacency-address";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (address.is_set || is_set(address.yfilter)) leaf_name_data.push_back(address.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "address")
    {
        address = value;
        address.value_namespace = name_space;
        address.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "address")
    {
        address.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "address")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::PbtsClassIsFallbackMapped()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "pbts-class-is-fallback-mapped"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::~PbtsClassIsFallbackMapped()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pbts-class-is-fallback-mapped";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::PbtsFallbackToDrop()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "pbts-fallback-to-drop"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::~PbtsFallbackToDrop()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pbts-fallback-to-drop";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::TunnelIsForwardClass()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "tunnel-is-forward-class"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::~TunnelIsForwardClass()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tunnel-is-forward-class";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibEntryPath()
    :
    fib_sh_tbl_path(this, {})
{

    yang_name = "fib-entry-path"; yang_parent_name = "exact-route"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::~FibEntryPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fib_sh_tbl_path.len(); index++)
    {
        if(fib_sh_tbl_path[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::has_operation() const
{
    for (std::size_t index=0; index<fib_sh_tbl_path.len(); index++)
    {
        if(fib_sh_tbl_path[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-entry-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fib-sh-tbl-path")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath>();
        c->parent = this;
        fib_sh_tbl_path.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : fib_sh_tbl_path.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fib-sh-tbl-path")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::FibShTblPath()
    :
    hardware_information{YType::str, "hardware-information"},
    brief_interface_handle{YType::str, "brief-interface-handle"},
    brief_next_hop_prefix{YType::str, "brief-next-hop-prefix"},
    via_label_to_recurse{YType::uint32, "via-label-to-recurse"},
    brief_pnode_address{YType::str, "brief-pnode-address"},
    brief_qnode_address{YType::str, "brief-qnode-address"},
    brief_lfa_protection_type{YType::enumeration, "brief-lfa-protection-type"},
    resolved_path{YType::boolean, "resolved-path"},
    recursive_path{YType::boolean, "recursive-path"},
    packets_received_path{YType::boolean, "packets-received-path"},
    attached_path{YType::boolean, "attached-path"},
    backup_path{YType::boolean, "backup-path"},
    best_external_path{YType::boolean, "best-external-path"},
    protect_ignore{YType::boolean, "protect-ignore"},
    path_dlb{YType::boolean, "path-dlb"},
    path_flags{YType::uint32, "path-flags"},
    path_info_flags{YType::uint16, "path-info-flags"},
    path_index{YType::uint8, "path-index"},
    backup_index{YType::uint8, "backup-index"},
    next_hop_index{YType::uint32, "next-hop-index"},
    parent_interface_handle{YType::str, "parent-interface-handle"},
    recursionvia_len{YType::uint8, "recursionvia-len"}
        ,
    more_detail_about_path(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath>())
    , mpls_information_for_path(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath>())
{
    more_detail_about_path->parent = this;
    mpls_information_for_path->parent = this;

    yang_name = "fib-sh-tbl-path"; yang_parent_name = "fib-entry-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::~FibShTblPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::has_data() const
{
    if (is_presence_container) return true;
    return hardware_information.is_set
	|| brief_interface_handle.is_set
	|| brief_next_hop_prefix.is_set
	|| via_label_to_recurse.is_set
	|| brief_pnode_address.is_set
	|| brief_qnode_address.is_set
	|| brief_lfa_protection_type.is_set
	|| resolved_path.is_set
	|| recursive_path.is_set
	|| packets_received_path.is_set
	|| attached_path.is_set
	|| backup_path.is_set
	|| best_external_path.is_set
	|| protect_ignore.is_set
	|| path_dlb.is_set
	|| path_flags.is_set
	|| path_info_flags.is_set
	|| path_index.is_set
	|| backup_index.is_set
	|| next_hop_index.is_set
	|| parent_interface_handle.is_set
	|| recursionvia_len.is_set
	|| (more_detail_about_path !=  nullptr && more_detail_about_path->has_data())
	|| (mpls_information_for_path !=  nullptr && mpls_information_for_path->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(hardware_information.yfilter)
	|| ydk::is_set(brief_interface_handle.yfilter)
	|| ydk::is_set(brief_next_hop_prefix.yfilter)
	|| ydk::is_set(via_label_to_recurse.yfilter)
	|| ydk::is_set(brief_pnode_address.yfilter)
	|| ydk::is_set(brief_qnode_address.yfilter)
	|| ydk::is_set(brief_lfa_protection_type.yfilter)
	|| ydk::is_set(resolved_path.yfilter)
	|| ydk::is_set(recursive_path.yfilter)
	|| ydk::is_set(packets_received_path.yfilter)
	|| ydk::is_set(attached_path.yfilter)
	|| ydk::is_set(backup_path.yfilter)
	|| ydk::is_set(best_external_path.yfilter)
	|| ydk::is_set(protect_ignore.yfilter)
	|| ydk::is_set(path_dlb.yfilter)
	|| ydk::is_set(path_flags.yfilter)
	|| ydk::is_set(path_info_flags.yfilter)
	|| ydk::is_set(path_index.yfilter)
	|| ydk::is_set(backup_index.yfilter)
	|| ydk::is_set(next_hop_index.yfilter)
	|| ydk::is_set(parent_interface_handle.yfilter)
	|| ydk::is_set(recursionvia_len.yfilter)
	|| (more_detail_about_path !=  nullptr && more_detail_about_path->has_operation())
	|| (mpls_information_for_path !=  nullptr && mpls_information_for_path->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-sh-tbl-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (hardware_information.is_set || is_set(hardware_information.yfilter)) leaf_name_data.push_back(hardware_information.get_name_leafdata());
    if (brief_interface_handle.is_set || is_set(brief_interface_handle.yfilter)) leaf_name_data.push_back(brief_interface_handle.get_name_leafdata());
    if (brief_next_hop_prefix.is_set || is_set(brief_next_hop_prefix.yfilter)) leaf_name_data.push_back(brief_next_hop_prefix.get_name_leafdata());
    if (via_label_to_recurse.is_set || is_set(via_label_to_recurse.yfilter)) leaf_name_data.push_back(via_label_to_recurse.get_name_leafdata());
    if (brief_pnode_address.is_set || is_set(brief_pnode_address.yfilter)) leaf_name_data.push_back(brief_pnode_address.get_name_leafdata());
    if (brief_qnode_address.is_set || is_set(brief_qnode_address.yfilter)) leaf_name_data.push_back(brief_qnode_address.get_name_leafdata());
    if (brief_lfa_protection_type.is_set || is_set(brief_lfa_protection_type.yfilter)) leaf_name_data.push_back(brief_lfa_protection_type.get_name_leafdata());
    if (resolved_path.is_set || is_set(resolved_path.yfilter)) leaf_name_data.push_back(resolved_path.get_name_leafdata());
    if (recursive_path.is_set || is_set(recursive_path.yfilter)) leaf_name_data.push_back(recursive_path.get_name_leafdata());
    if (packets_received_path.is_set || is_set(packets_received_path.yfilter)) leaf_name_data.push_back(packets_received_path.get_name_leafdata());
    if (attached_path.is_set || is_set(attached_path.yfilter)) leaf_name_data.push_back(attached_path.get_name_leafdata());
    if (backup_path.is_set || is_set(backup_path.yfilter)) leaf_name_data.push_back(backup_path.get_name_leafdata());
    if (best_external_path.is_set || is_set(best_external_path.yfilter)) leaf_name_data.push_back(best_external_path.get_name_leafdata());
    if (protect_ignore.is_set || is_set(protect_ignore.yfilter)) leaf_name_data.push_back(protect_ignore.get_name_leafdata());
    if (path_dlb.is_set || is_set(path_dlb.yfilter)) leaf_name_data.push_back(path_dlb.get_name_leafdata());
    if (path_flags.is_set || is_set(path_flags.yfilter)) leaf_name_data.push_back(path_flags.get_name_leafdata());
    if (path_info_flags.is_set || is_set(path_info_flags.yfilter)) leaf_name_data.push_back(path_info_flags.get_name_leafdata());
    if (path_index.is_set || is_set(path_index.yfilter)) leaf_name_data.push_back(path_index.get_name_leafdata());
    if (backup_index.is_set || is_set(backup_index.yfilter)) leaf_name_data.push_back(backup_index.get_name_leafdata());
    if (next_hop_index.is_set || is_set(next_hop_index.yfilter)) leaf_name_data.push_back(next_hop_index.get_name_leafdata());
    if (parent_interface_handle.is_set || is_set(parent_interface_handle.yfilter)) leaf_name_data.push_back(parent_interface_handle.get_name_leafdata());
    if (recursionvia_len.is_set || is_set(recursionvia_len.yfilter)) leaf_name_data.push_back(recursionvia_len.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "more-detail-about-path")
    {
        if(more_detail_about_path == nullptr)
        {
            more_detail_about_path = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath>();
        }
        return more_detail_about_path;
    }

    if(child_yang_name == "mpls-information-for-path")
    {
        if(mpls_information_for_path == nullptr)
        {
            mpls_information_for_path = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath>();
        }
        return mpls_information_for_path;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(more_detail_about_path != nullptr)
    {
        children["more-detail-about-path"] = more_detail_about_path;
    }

    if(mpls_information_for_path != nullptr)
    {
        children["mpls-information-for-path"] = mpls_information_for_path;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "hardware-information")
    {
        hardware_information = value;
        hardware_information.value_namespace = name_space;
        hardware_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-interface-handle")
    {
        brief_interface_handle = value;
        brief_interface_handle.value_namespace = name_space;
        brief_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-next-hop-prefix")
    {
        brief_next_hop_prefix = value;
        brief_next_hop_prefix.value_namespace = name_space;
        brief_next_hop_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "via-label-to-recurse")
    {
        via_label_to_recurse = value;
        via_label_to_recurse.value_namespace = name_space;
        via_label_to_recurse.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-pnode-address")
    {
        brief_pnode_address = value;
        brief_pnode_address.value_namespace = name_space;
        brief_pnode_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-qnode-address")
    {
        brief_qnode_address = value;
        brief_qnode_address.value_namespace = name_space;
        brief_qnode_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-lfa-protection-type")
    {
        brief_lfa_protection_type = value;
        brief_lfa_protection_type.value_namespace = name_space;
        brief_lfa_protection_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "resolved-path")
    {
        resolved_path = value;
        resolved_path.value_namespace = name_space;
        resolved_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path")
    {
        recursive_path = value;
        recursive_path.value_namespace = name_space;
        recursive_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "packets-received-path")
    {
        packets_received_path = value;
        packets_received_path.value_namespace = name_space;
        packets_received_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "attached-path")
    {
        attached_path = value;
        attached_path.value_namespace = name_space;
        attached_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "backup-path")
    {
        backup_path = value;
        backup_path.value_namespace = name_space;
        backup_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "best-external-path")
    {
        best_external_path = value;
        best_external_path.value_namespace = name_space;
        best_external_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protect-ignore")
    {
        protect_ignore = value;
        protect_ignore.value_namespace = name_space;
        protect_ignore.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-dlb")
    {
        path_dlb = value;
        path_dlb.value_namespace = name_space;
        path_dlb.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-flags")
    {
        path_flags = value;
        path_flags.value_namespace = name_space;
        path_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-info-flags")
    {
        path_info_flags = value;
        path_info_flags.value_namespace = name_space;
        path_info_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-index")
    {
        path_index = value;
        path_index.value_namespace = name_space;
        path_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "backup-index")
    {
        backup_index = value;
        backup_index.value_namespace = name_space;
        backup_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-index")
    {
        next_hop_index = value;
        next_hop_index.value_namespace = name_space;
        next_hop_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-interface-handle")
    {
        parent_interface_handle = value;
        parent_interface_handle.value_namespace = name_space;
        parent_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursionvia-len")
    {
        recursionvia_len = value;
        recursionvia_len.value_namespace = name_space;
        recursionvia_len.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "hardware-information")
    {
        hardware_information.yfilter = yfilter;
    }
    if(value_path == "brief-interface-handle")
    {
        brief_interface_handle.yfilter = yfilter;
    }
    if(value_path == "brief-next-hop-prefix")
    {
        brief_next_hop_prefix.yfilter = yfilter;
    }
    if(value_path == "via-label-to-recurse")
    {
        via_label_to_recurse.yfilter = yfilter;
    }
    if(value_path == "brief-pnode-address")
    {
        brief_pnode_address.yfilter = yfilter;
    }
    if(value_path == "brief-qnode-address")
    {
        brief_qnode_address.yfilter = yfilter;
    }
    if(value_path == "brief-lfa-protection-type")
    {
        brief_lfa_protection_type.yfilter = yfilter;
    }
    if(value_path == "resolved-path")
    {
        resolved_path.yfilter = yfilter;
    }
    if(value_path == "recursive-path")
    {
        recursive_path.yfilter = yfilter;
    }
    if(value_path == "packets-received-path")
    {
        packets_received_path.yfilter = yfilter;
    }
    if(value_path == "attached-path")
    {
        attached_path.yfilter = yfilter;
    }
    if(value_path == "backup-path")
    {
        backup_path.yfilter = yfilter;
    }
    if(value_path == "best-external-path")
    {
        best_external_path.yfilter = yfilter;
    }
    if(value_path == "protect-ignore")
    {
        protect_ignore.yfilter = yfilter;
    }
    if(value_path == "path-dlb")
    {
        path_dlb.yfilter = yfilter;
    }
    if(value_path == "path-flags")
    {
        path_flags.yfilter = yfilter;
    }
    if(value_path == "path-info-flags")
    {
        path_info_flags.yfilter = yfilter;
    }
    if(value_path == "path-index")
    {
        path_index.yfilter = yfilter;
    }
    if(value_path == "backup-index")
    {
        backup_index.yfilter = yfilter;
    }
    if(value_path == "next-hop-index")
    {
        next_hop_index.yfilter = yfilter;
    }
    if(value_path == "parent-interface-handle")
    {
        parent_interface_handle.yfilter = yfilter;
    }
    if(value_path == "recursionvia-len")
    {
        recursionvia_len.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "more-detail-about-path" || name == "mpls-information-for-path" || name == "hardware-information" || name == "brief-interface-handle" || name == "brief-next-hop-prefix" || name == "via-label-to-recurse" || name == "brief-pnode-address" || name == "brief-qnode-address" || name == "brief-lfa-protection-type" || name == "resolved-path" || name == "recursive-path" || name == "packets-received-path" || name == "attached-path" || name == "backup-path" || name == "best-external-path" || name == "protect-ignore" || name == "path-dlb" || name == "path-flags" || name == "path-info-flags" || name == "path-index" || name == "backup-index" || name == "next-hop-index" || name == "parent-interface-handle" || name == "recursionvia-len")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::MoreDetailAboutPath()
    :
    ip_address_to_recurse{YType::str, "ip-address-to-recurse"},
    label_to_recurse{YType::uint32, "label-to-recurse"},
    detail_next_hop_prefix{YType::str, "detail-next-hop-prefix"},
    next_hop_mask_length{YType::uint8, "next-hop-mask-length"},
    interface_associated_path{YType::str, "interface-associated-path"},
    next_hop_interface{YType::str, "next-hop-interface"},
    next_hop_vrf{YType::str, "next-hop-vrf"},
    tunnle_endpoint_id{YType::uint32, "tunnle-endpoint-id"},
    lisprlocid{YType::uint32, "lisprlocid"},
    number_of_dependencies_this_path{YType::uint32, "number-of-dependencies-this-path"},
    robin_reset_value{YType::uint8, "robin-reset-value"},
    recurse_prefix_object{YType::boolean, "recurse-prefix-object"},
    next_prefix_recursion{YType::str, "next-prefix-recursion"},
    next_prefix_length{YType::uint8, "next-prefix-length"},
    recurse_prefix_object2{YType::boolean, "recurse-prefix-object2"},
    next_prefix_recursion2{YType::str, "next-prefix-recursion2"},
    next_prefix_length2{YType::uint8, "next-prefix-length2"},
    detail_fib_adjacency_type{YType::enumeration, "detail-fib-adjacency-type"},
    current_path_flag{YType::boolean, "current-path-flag"},
    recursive_path_information{YType::boolean, "recursive-path-information"},
    external_adjacency{YType::boolean, "external-adjacency"},
    fib_path_nh_information_type{YType::enumeration, "fib-path-nh-information-type"},
    fib_path_nh_information_type_special{YType::enumeration, "fib-path-nh-information-type-special"},
    weight_of_path{YType::uint32, "weight-of-path"},
    tunnel_class{YType::uint8, "tunnel-class"},
    tunnel_is_forward_class{YType::boolean, "tunnel-is-forward-class"}
        ,
    spd_ipencap(this, {})
    , next_next_hop(this, {})
{

    yang_name = "more-detail-about-path"; yang_parent_name = "fib-sh-tbl-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::~MoreDetailAboutPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<spd_ipencap.len(); index++)
    {
        if(spd_ipencap[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<next_next_hop.len(); index++)
    {
        if(next_next_hop[index]->has_data())
            return true;
    }
    return ip_address_to_recurse.is_set
	|| label_to_recurse.is_set
	|| detail_next_hop_prefix.is_set
	|| next_hop_mask_length.is_set
	|| interface_associated_path.is_set
	|| next_hop_interface.is_set
	|| next_hop_vrf.is_set
	|| tunnle_endpoint_id.is_set
	|| lisprlocid.is_set
	|| number_of_dependencies_this_path.is_set
	|| robin_reset_value.is_set
	|| recurse_prefix_object.is_set
	|| next_prefix_recursion.is_set
	|| next_prefix_length.is_set
	|| recurse_prefix_object2.is_set
	|| next_prefix_recursion2.is_set
	|| next_prefix_length2.is_set
	|| detail_fib_adjacency_type.is_set
	|| current_path_flag.is_set
	|| recursive_path_information.is_set
	|| external_adjacency.is_set
	|| fib_path_nh_information_type.is_set
	|| fib_path_nh_information_type_special.is_set
	|| weight_of_path.is_set
	|| tunnel_class.is_set
	|| tunnel_is_forward_class.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_operation() const
{
    for (std::size_t index=0; index<spd_ipencap.len(); index++)
    {
        if(spd_ipencap[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<next_next_hop.len(); index++)
    {
        if(next_next_hop[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(ip_address_to_recurse.yfilter)
	|| ydk::is_set(label_to_recurse.yfilter)
	|| ydk::is_set(detail_next_hop_prefix.yfilter)
	|| ydk::is_set(next_hop_mask_length.yfilter)
	|| ydk::is_set(interface_associated_path.yfilter)
	|| ydk::is_set(next_hop_interface.yfilter)
	|| ydk::is_set(next_hop_vrf.yfilter)
	|| ydk::is_set(tunnle_endpoint_id.yfilter)
	|| ydk::is_set(lisprlocid.yfilter)
	|| ydk::is_set(number_of_dependencies_this_path.yfilter)
	|| ydk::is_set(robin_reset_value.yfilter)
	|| ydk::is_set(recurse_prefix_object.yfilter)
	|| ydk::is_set(next_prefix_recursion.yfilter)
	|| ydk::is_set(next_prefix_length.yfilter)
	|| ydk::is_set(recurse_prefix_object2.yfilter)
	|| ydk::is_set(next_prefix_recursion2.yfilter)
	|| ydk::is_set(next_prefix_length2.yfilter)
	|| ydk::is_set(detail_fib_adjacency_type.yfilter)
	|| ydk::is_set(current_path_flag.yfilter)
	|| ydk::is_set(recursive_path_information.yfilter)
	|| ydk::is_set(external_adjacency.yfilter)
	|| ydk::is_set(fib_path_nh_information_type.yfilter)
	|| ydk::is_set(fib_path_nh_information_type_special.yfilter)
	|| ydk::is_set(weight_of_path.yfilter)
	|| ydk::is_set(tunnel_class.yfilter)
	|| ydk::is_set(tunnel_is_forward_class.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "more-detail-about-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_address_to_recurse.is_set || is_set(ip_address_to_recurse.yfilter)) leaf_name_data.push_back(ip_address_to_recurse.get_name_leafdata());
    if (label_to_recurse.is_set || is_set(label_to_recurse.yfilter)) leaf_name_data.push_back(label_to_recurse.get_name_leafdata());
    if (detail_next_hop_prefix.is_set || is_set(detail_next_hop_prefix.yfilter)) leaf_name_data.push_back(detail_next_hop_prefix.get_name_leafdata());
    if (next_hop_mask_length.is_set || is_set(next_hop_mask_length.yfilter)) leaf_name_data.push_back(next_hop_mask_length.get_name_leafdata());
    if (interface_associated_path.is_set || is_set(interface_associated_path.yfilter)) leaf_name_data.push_back(interface_associated_path.get_name_leafdata());
    if (next_hop_interface.is_set || is_set(next_hop_interface.yfilter)) leaf_name_data.push_back(next_hop_interface.get_name_leafdata());
    if (next_hop_vrf.is_set || is_set(next_hop_vrf.yfilter)) leaf_name_data.push_back(next_hop_vrf.get_name_leafdata());
    if (tunnle_endpoint_id.is_set || is_set(tunnle_endpoint_id.yfilter)) leaf_name_data.push_back(tunnle_endpoint_id.get_name_leafdata());
    if (lisprlocid.is_set || is_set(lisprlocid.yfilter)) leaf_name_data.push_back(lisprlocid.get_name_leafdata());
    if (number_of_dependencies_this_path.is_set || is_set(number_of_dependencies_this_path.yfilter)) leaf_name_data.push_back(number_of_dependencies_this_path.get_name_leafdata());
    if (robin_reset_value.is_set || is_set(robin_reset_value.yfilter)) leaf_name_data.push_back(robin_reset_value.get_name_leafdata());
    if (recurse_prefix_object.is_set || is_set(recurse_prefix_object.yfilter)) leaf_name_data.push_back(recurse_prefix_object.get_name_leafdata());
    if (next_prefix_recursion.is_set || is_set(next_prefix_recursion.yfilter)) leaf_name_data.push_back(next_prefix_recursion.get_name_leafdata());
    if (next_prefix_length.is_set || is_set(next_prefix_length.yfilter)) leaf_name_data.push_back(next_prefix_length.get_name_leafdata());
    if (recurse_prefix_object2.is_set || is_set(recurse_prefix_object2.yfilter)) leaf_name_data.push_back(recurse_prefix_object2.get_name_leafdata());
    if (next_prefix_recursion2.is_set || is_set(next_prefix_recursion2.yfilter)) leaf_name_data.push_back(next_prefix_recursion2.get_name_leafdata());
    if (next_prefix_length2.is_set || is_set(next_prefix_length2.yfilter)) leaf_name_data.push_back(next_prefix_length2.get_name_leafdata());
    if (detail_fib_adjacency_type.is_set || is_set(detail_fib_adjacency_type.yfilter)) leaf_name_data.push_back(detail_fib_adjacency_type.get_name_leafdata());
    if (current_path_flag.is_set || is_set(current_path_flag.yfilter)) leaf_name_data.push_back(current_path_flag.get_name_leafdata());
    if (recursive_path_information.is_set || is_set(recursive_path_information.yfilter)) leaf_name_data.push_back(recursive_path_information.get_name_leafdata());
    if (external_adjacency.is_set || is_set(external_adjacency.yfilter)) leaf_name_data.push_back(external_adjacency.get_name_leafdata());
    if (fib_path_nh_information_type.is_set || is_set(fib_path_nh_information_type.yfilter)) leaf_name_data.push_back(fib_path_nh_information_type.get_name_leafdata());
    if (fib_path_nh_information_type_special.is_set || is_set(fib_path_nh_information_type_special.yfilter)) leaf_name_data.push_back(fib_path_nh_information_type_special.get_name_leafdata());
    if (weight_of_path.is_set || is_set(weight_of_path.yfilter)) leaf_name_data.push_back(weight_of_path.get_name_leafdata());
    if (tunnel_class.is_set || is_set(tunnel_class.yfilter)) leaf_name_data.push_back(tunnel_class.get_name_leafdata());
    if (tunnel_is_forward_class.is_set || is_set(tunnel_is_forward_class.yfilter)) leaf_name_data.push_back(tunnel_is_forward_class.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "spd-ipencap")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap>();
        c->parent = this;
        spd_ipencap.append(c);
        return c;
    }

    if(child_yang_name == "next-next-hop")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop>();
        c->parent = this;
        next_next_hop.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : spd_ipencap.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : next_next_hop.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "ip-address-to-recurse")
    {
        ip_address_to_recurse = value;
        ip_address_to_recurse.value_namespace = name_space;
        ip_address_to_recurse.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-to-recurse")
    {
        label_to_recurse = value;
        label_to_recurse.value_namespace = name_space;
        label_to_recurse.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "detail-next-hop-prefix")
    {
        detail_next_hop_prefix = value;
        detail_next_hop_prefix.value_namespace = name_space;
        detail_next_hop_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-mask-length")
    {
        next_hop_mask_length = value;
        next_hop_mask_length.value_namespace = name_space;
        next_hop_mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "interface-associated-path")
    {
        interface_associated_path = value;
        interface_associated_path.value_namespace = name_space;
        interface_associated_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-interface")
    {
        next_hop_interface = value;
        next_hop_interface.value_namespace = name_space;
        next_hop_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-vrf")
    {
        next_hop_vrf = value;
        next_hop_vrf.value_namespace = name_space;
        next_hop_vrf.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnle-endpoint-id")
    {
        tunnle_endpoint_id = value;
        tunnle_endpoint_id.value_namespace = name_space;
        tunnle_endpoint_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisprlocid")
    {
        lisprlocid = value;
        lisprlocid.value_namespace = name_space;
        lisprlocid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-dependencies-this-path")
    {
        number_of_dependencies_this_path = value;
        number_of_dependencies_this_path.value_namespace = name_space;
        number_of_dependencies_this_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "robin-reset-value")
    {
        robin_reset_value = value;
        robin_reset_value.value_namespace = name_space;
        robin_reset_value.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recurse-prefix-object")
    {
        recurse_prefix_object = value;
        recurse_prefix_object.value_namespace = name_space;
        recurse_prefix_object.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-recursion")
    {
        next_prefix_recursion = value;
        next_prefix_recursion.value_namespace = name_space;
        next_prefix_recursion.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-length")
    {
        next_prefix_length = value;
        next_prefix_length.value_namespace = name_space;
        next_prefix_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recurse-prefix-object2")
    {
        recurse_prefix_object2 = value;
        recurse_prefix_object2.value_namespace = name_space;
        recurse_prefix_object2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-recursion2")
    {
        next_prefix_recursion2 = value;
        next_prefix_recursion2.value_namespace = name_space;
        next_prefix_recursion2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-length2")
    {
        next_prefix_length2 = value;
        next_prefix_length2.value_namespace = name_space;
        next_prefix_length2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "detail-fib-adjacency-type")
    {
        detail_fib_adjacency_type = value;
        detail_fib_adjacency_type.value_namespace = name_space;
        detail_fib_adjacency_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "current-path-flag")
    {
        current_path_flag = value;
        current_path_flag.value_namespace = name_space;
        current_path_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-information")
    {
        recursive_path_information = value;
        recursive_path_information.value_namespace = name_space;
        recursive_path_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "external-adjacency")
    {
        external_adjacency = value;
        external_adjacency.value_namespace = name_space;
        external_adjacency.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-path-nh-information-type")
    {
        fib_path_nh_information_type = value;
        fib_path_nh_information_type.value_namespace = name_space;
        fib_path_nh_information_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-path-nh-information-type-special")
    {
        fib_path_nh_information_type_special = value;
        fib_path_nh_information_type_special.value_namespace = name_space;
        fib_path_nh_information_type_special.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight-of-path")
    {
        weight_of_path = value;
        weight_of_path.value_namespace = name_space;
        weight_of_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-class")
    {
        tunnel_class = value;
        tunnel_class.value_namespace = name_space;
        tunnel_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-is-forward-class")
    {
        tunnel_is_forward_class = value;
        tunnel_is_forward_class.value_namespace = name_space;
        tunnel_is_forward_class.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "ip-address-to-recurse")
    {
        ip_address_to_recurse.yfilter = yfilter;
    }
    if(value_path == "label-to-recurse")
    {
        label_to_recurse.yfilter = yfilter;
    }
    if(value_path == "detail-next-hop-prefix")
    {
        detail_next_hop_prefix.yfilter = yfilter;
    }
    if(value_path == "next-hop-mask-length")
    {
        next_hop_mask_length.yfilter = yfilter;
    }
    if(value_path == "interface-associated-path")
    {
        interface_associated_path.yfilter = yfilter;
    }
    if(value_path == "next-hop-interface")
    {
        next_hop_interface.yfilter = yfilter;
    }
    if(value_path == "next-hop-vrf")
    {
        next_hop_vrf.yfilter = yfilter;
    }
    if(value_path == "tunnle-endpoint-id")
    {
        tunnle_endpoint_id.yfilter = yfilter;
    }
    if(value_path == "lisprlocid")
    {
        lisprlocid.yfilter = yfilter;
    }
    if(value_path == "number-of-dependencies-this-path")
    {
        number_of_dependencies_this_path.yfilter = yfilter;
    }
    if(value_path == "robin-reset-value")
    {
        robin_reset_value.yfilter = yfilter;
    }
    if(value_path == "recurse-prefix-object")
    {
        recurse_prefix_object.yfilter = yfilter;
    }
    if(value_path == "next-prefix-recursion")
    {
        next_prefix_recursion.yfilter = yfilter;
    }
    if(value_path == "next-prefix-length")
    {
        next_prefix_length.yfilter = yfilter;
    }
    if(value_path == "recurse-prefix-object2")
    {
        recurse_prefix_object2.yfilter = yfilter;
    }
    if(value_path == "next-prefix-recursion2")
    {
        next_prefix_recursion2.yfilter = yfilter;
    }
    if(value_path == "next-prefix-length2")
    {
        next_prefix_length2.yfilter = yfilter;
    }
    if(value_path == "detail-fib-adjacency-type")
    {
        detail_fib_adjacency_type.yfilter = yfilter;
    }
    if(value_path == "current-path-flag")
    {
        current_path_flag.yfilter = yfilter;
    }
    if(value_path == "recursive-path-information")
    {
        recursive_path_information.yfilter = yfilter;
    }
    if(value_path == "external-adjacency")
    {
        external_adjacency.yfilter = yfilter;
    }
    if(value_path == "fib-path-nh-information-type")
    {
        fib_path_nh_information_type.yfilter = yfilter;
    }
    if(value_path == "fib-path-nh-information-type-special")
    {
        fib_path_nh_information_type_special.yfilter = yfilter;
    }
    if(value_path == "weight-of-path")
    {
        weight_of_path.yfilter = yfilter;
    }
    if(value_path == "tunnel-class")
    {
        tunnel_class.yfilter = yfilter;
    }
    if(value_path == "tunnel-is-forward-class")
    {
        tunnel_is_forward_class.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "spd-ipencap" || name == "next-next-hop" || name == "ip-address-to-recurse" || name == "label-to-recurse" || name == "detail-next-hop-prefix" || name == "next-hop-mask-length" || name == "interface-associated-path" || name == "next-hop-interface" || name == "next-hop-vrf" || name == "tunnle-endpoint-id" || name == "lisprlocid" || name == "number-of-dependencies-this-path" || name == "robin-reset-value" || name == "recurse-prefix-object" || name == "next-prefix-recursion" || name == "next-prefix-length" || name == "recurse-prefix-object2" || name == "next-prefix-recursion2" || name == "next-prefix-length2" || name == "detail-fib-adjacency-type" || name == "current-path-flag" || name == "recursive-path-information" || name == "external-adjacency" || name == "fib-path-nh-information-type" || name == "fib-path-nh-information-type-special" || name == "weight-of-path" || name == "tunnel-class" || name == "tunnel-is-forward-class")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::SpdIpencap()
    :
    ip_encap_hdr_count{YType::uint8, "ip-encap-hdr-count"},
    ip_encap_locks{YType::uint32, "ip-encap-locks"},
    ip_encap_transport_tbl{YType::uint32, "ip-encap-transport-tbl"},
    ipe_transport_vrf_name{YType::str, "ipe-transport-vrf-name"},
    ip_encap_transport_af{YType::uint32, "ip-encap-transport-af"},
    ip_encap_payload_af{YType::uint32, "ip-encap-payload-af"},
    ip_encap_payload_mtu{YType::uint16, "ip-encap-payload-mtu"},
    ip_encap_parent{YType::uint32, "ip-encap-parent"},
    ip_encap_parent_type{YType::uint32, "ip-encap-parent-type"}
        ,
    ip_encap_hdr(this, {})
{

    yang_name = "spd-ipencap"; yang_parent_name = "more-detail-about-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::~SpdIpencap()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<ip_encap_hdr.len(); index++)
    {
        if(ip_encap_hdr[index]->has_data())
            return true;
    }
    return ip_encap_hdr_count.is_set
	|| ip_encap_locks.is_set
	|| ip_encap_transport_tbl.is_set
	|| ipe_transport_vrf_name.is_set
	|| ip_encap_transport_af.is_set
	|| ip_encap_payload_af.is_set
	|| ip_encap_payload_mtu.is_set
	|| ip_encap_parent.is_set
	|| ip_encap_parent_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_operation() const
{
    for (std::size_t index=0; index<ip_encap_hdr.len(); index++)
    {
        if(ip_encap_hdr[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(ip_encap_hdr_count.yfilter)
	|| ydk::is_set(ip_encap_locks.yfilter)
	|| ydk::is_set(ip_encap_transport_tbl.yfilter)
	|| ydk::is_set(ipe_transport_vrf_name.yfilter)
	|| ydk::is_set(ip_encap_transport_af.yfilter)
	|| ydk::is_set(ip_encap_payload_af.yfilter)
	|| ydk::is_set(ip_encap_payload_mtu.yfilter)
	|| ydk::is_set(ip_encap_parent.yfilter)
	|| ydk::is_set(ip_encap_parent_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "spd-ipencap";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_encap_hdr_count.is_set || is_set(ip_encap_hdr_count.yfilter)) leaf_name_data.push_back(ip_encap_hdr_count.get_name_leafdata());
    if (ip_encap_locks.is_set || is_set(ip_encap_locks.yfilter)) leaf_name_data.push_back(ip_encap_locks.get_name_leafdata());
    if (ip_encap_transport_tbl.is_set || is_set(ip_encap_transport_tbl.yfilter)) leaf_name_data.push_back(ip_encap_transport_tbl.get_name_leafdata());
    if (ipe_transport_vrf_name.is_set || is_set(ipe_transport_vrf_name.yfilter)) leaf_name_data.push_back(ipe_transport_vrf_name.get_name_leafdata());
    if (ip_encap_transport_af.is_set || is_set(ip_encap_transport_af.yfilter)) leaf_name_data.push_back(ip_encap_transport_af.get_name_leafdata());
    if (ip_encap_payload_af.is_set || is_set(ip_encap_payload_af.yfilter)) leaf_name_data.push_back(ip_encap_payload_af.get_name_leafdata());
    if (ip_encap_payload_mtu.is_set || is_set(ip_encap_payload_mtu.yfilter)) leaf_name_data.push_back(ip_encap_payload_mtu.get_name_leafdata());
    if (ip_encap_parent.is_set || is_set(ip_encap_parent.yfilter)) leaf_name_data.push_back(ip_encap_parent.get_name_leafdata());
    if (ip_encap_parent_type.is_set || is_set(ip_encap_parent_type.yfilter)) leaf_name_data.push_back(ip_encap_parent_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ip-encap-hdr")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr>();
        c->parent = this;
        ip_encap_hdr.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : ip_encap_hdr.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "ip-encap-hdr-count")
    {
        ip_encap_hdr_count = value;
        ip_encap_hdr_count.value_namespace = name_space;
        ip_encap_hdr_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-locks")
    {
        ip_encap_locks = value;
        ip_encap_locks.value_namespace = name_space;
        ip_encap_locks.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-transport-tbl")
    {
        ip_encap_transport_tbl = value;
        ip_encap_transport_tbl.value_namespace = name_space;
        ip_encap_transport_tbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ipe-transport-vrf-name")
    {
        ipe_transport_vrf_name = value;
        ipe_transport_vrf_name.value_namespace = name_space;
        ipe_transport_vrf_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-transport-af")
    {
        ip_encap_transport_af = value;
        ip_encap_transport_af.value_namespace = name_space;
        ip_encap_transport_af.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-payload-af")
    {
        ip_encap_payload_af = value;
        ip_encap_payload_af.value_namespace = name_space;
        ip_encap_payload_af.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-payload-mtu")
    {
        ip_encap_payload_mtu = value;
        ip_encap_payload_mtu.value_namespace = name_space;
        ip_encap_payload_mtu.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-parent")
    {
        ip_encap_parent = value;
        ip_encap_parent.value_namespace = name_space;
        ip_encap_parent.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-parent-type")
    {
        ip_encap_parent_type = value;
        ip_encap_parent_type.value_namespace = name_space;
        ip_encap_parent_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "ip-encap-hdr-count")
    {
        ip_encap_hdr_count.yfilter = yfilter;
    }
    if(value_path == "ip-encap-locks")
    {
        ip_encap_locks.yfilter = yfilter;
    }
    if(value_path == "ip-encap-transport-tbl")
    {
        ip_encap_transport_tbl.yfilter = yfilter;
    }
    if(value_path == "ipe-transport-vrf-name")
    {
        ipe_transport_vrf_name.yfilter = yfilter;
    }
    if(value_path == "ip-encap-transport-af")
    {
        ip_encap_transport_af.yfilter = yfilter;
    }
    if(value_path == "ip-encap-payload-af")
    {
        ip_encap_payload_af.yfilter = yfilter;
    }
    if(value_path == "ip-encap-payload-mtu")
    {
        ip_encap_payload_mtu.yfilter = yfilter;
    }
    if(value_path == "ip-encap-parent")
    {
        ip_encap_parent.yfilter = yfilter;
    }
    if(value_path == "ip-encap-parent-type")
    {
        ip_encap_parent_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ip-encap-hdr" || name == "ip-encap-hdr-count" || name == "ip-encap-locks" || name == "ip-encap-transport-tbl" || name == "ipe-transport-vrf-name" || name == "ip-encap-transport-af" || name == "ip-encap-payload-af" || name == "ip-encap-payload-mtu" || name == "ip-encap-parent" || name == "ip-encap-parent-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::IpEncapHdr()
    :
    ip_encap_hdr_type{YType::enumeration, "ip-encap-hdr-type"},
    ip_encap_hdrp{YType::str, "ip-encap-hdrp"},
    ip_encap_hdr_dyn{YType::uint32, "ip-encap-hdr-dyn"}
{

    yang_name = "ip-encap-hdr"; yang_parent_name = "spd-ipencap"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::~IpEncapHdr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_data() const
{
    if (is_presence_container) return true;
    return ip_encap_hdr_type.is_set
	|| ip_encap_hdrp.is_set
	|| ip_encap_hdr_dyn.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(ip_encap_hdr_type.yfilter)
	|| ydk::is_set(ip_encap_hdrp.yfilter)
	|| ydk::is_set(ip_encap_hdr_dyn.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ip-encap-hdr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_encap_hdr_type.is_set || is_set(ip_encap_hdr_type.yfilter)) leaf_name_data.push_back(ip_encap_hdr_type.get_name_leafdata());
    if (ip_encap_hdrp.is_set || is_set(ip_encap_hdrp.yfilter)) leaf_name_data.push_back(ip_encap_hdrp.get_name_leafdata());
    if (ip_encap_hdr_dyn.is_set || is_set(ip_encap_hdr_dyn.yfilter)) leaf_name_data.push_back(ip_encap_hdr_dyn.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "ip-encap-hdr-type")
    {
        ip_encap_hdr_type = value;
        ip_encap_hdr_type.value_namespace = name_space;
        ip_encap_hdr_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-hdrp")
    {
        ip_encap_hdrp = value;
        ip_encap_hdrp.value_namespace = name_space;
        ip_encap_hdrp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-hdr-dyn")
    {
        ip_encap_hdr_dyn = value;
        ip_encap_hdr_dyn.value_namespace = name_space;
        ip_encap_hdr_dyn.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "ip-encap-hdr-type")
    {
        ip_encap_hdr_type.yfilter = yfilter;
    }
    if(value_path == "ip-encap-hdrp")
    {
        ip_encap_hdrp.yfilter = yfilter;
    }
    if(value_path == "ip-encap-hdr-dyn")
    {
        ip_encap_hdr_dyn.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ip-encap-hdr-type" || name == "ip-encap-hdrp" || name == "ip-encap-hdr-dyn")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::NextNextHop()
    :
    next_next_hop_index{YType::uint8, "next-next-hop-index"},
    next_next_hop_prefix{YType::str, "next-next-hop-prefix"},
    next_next_hop_interface{YType::uint32, "next-next-hop-interface"}
{

    yang_name = "next-next-hop"; yang_parent_name = "more-detail-about-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::~NextNextHop()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::has_data() const
{
    if (is_presence_container) return true;
    return next_next_hop_index.is_set
	|| next_next_hop_prefix.is_set
	|| next_next_hop_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(next_next_hop_index.yfilter)
	|| ydk::is_set(next_next_hop_prefix.yfilter)
	|| ydk::is_set(next_next_hop_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "next-next-hop";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (next_next_hop_index.is_set || is_set(next_next_hop_index.yfilter)) leaf_name_data.push_back(next_next_hop_index.get_name_leafdata());
    if (next_next_hop_prefix.is_set || is_set(next_next_hop_prefix.yfilter)) leaf_name_data.push_back(next_next_hop_prefix.get_name_leafdata());
    if (next_next_hop_interface.is_set || is_set(next_next_hop_interface.yfilter)) leaf_name_data.push_back(next_next_hop_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "next-next-hop-index")
    {
        next_next_hop_index = value;
        next_next_hop_index.value_namespace = name_space;
        next_next_hop_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-next-hop-prefix")
    {
        next_next_hop_prefix = value;
        next_next_hop_prefix.value_namespace = name_space;
        next_next_hop_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-next-hop-interface")
    {
        next_next_hop_interface = value;
        next_next_hop_interface.value_namespace = name_space;
        next_next_hop_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "next-next-hop-index")
    {
        next_next_hop_index.yfilter = yfilter;
    }
    if(value_path == "next-next-hop-prefix")
    {
        next_next_hop_prefix.yfilter = yfilter;
    }
    if(value_path == "next-next-hop-interface")
    {
        next_next_hop_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "next-next-hop-index" || name == "next-next-hop-prefix" || name == "next-next-hop-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::MplsInformationForPath()
    :
    local_lable{YType::uint32, "local-lable"},
    recursive_fwd_chain{YType::boolean, "recursive-fwd-chain"},
    number_of_igp_paths{YType::uint32, "number-of-igp-paths"},
    remote_backup{YType::boolean, "remote-backup"}
        ,
    recursive_lbl_stack(this, {})
    , igp_label_stack_array(this, {})
{

    yang_name = "mpls-information-for-path"; yang_parent_name = "fib-sh-tbl-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::~MplsInformationForPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<recursive_lbl_stack.len(); index++)
    {
        if(recursive_lbl_stack[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<igp_label_stack_array.len(); index++)
    {
        if(igp_label_stack_array[index]->has_data())
            return true;
    }
    return local_lable.is_set
	|| recursive_fwd_chain.is_set
	|| number_of_igp_paths.is_set
	|| remote_backup.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::has_operation() const
{
    for (std::size_t index=0; index<recursive_lbl_stack.len(); index++)
    {
        if(recursive_lbl_stack[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<igp_label_stack_array.len(); index++)
    {
        if(igp_label_stack_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(local_lable.yfilter)
	|| ydk::is_set(recursive_fwd_chain.yfilter)
	|| ydk::is_set(number_of_igp_paths.yfilter)
	|| ydk::is_set(remote_backup.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mpls-information-for-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (local_lable.is_set || is_set(local_lable.yfilter)) leaf_name_data.push_back(local_lable.get_name_leafdata());
    if (recursive_fwd_chain.is_set || is_set(recursive_fwd_chain.yfilter)) leaf_name_data.push_back(recursive_fwd_chain.get_name_leafdata());
    if (number_of_igp_paths.is_set || is_set(number_of_igp_paths.yfilter)) leaf_name_data.push_back(number_of_igp_paths.get_name_leafdata());
    if (remote_backup.is_set || is_set(remote_backup.yfilter)) leaf_name_data.push_back(remote_backup.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "recursive-lbl-stack")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack>();
        c->parent = this;
        recursive_lbl_stack.append(c);
        return c;
    }

    if(child_yang_name == "igp-label-stack-array")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray>();
        c->parent = this;
        igp_label_stack_array.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : recursive_lbl_stack.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : igp_label_stack_array.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "local-lable")
    {
        local_lable = value;
        local_lable.value_namespace = name_space;
        local_lable.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-fwd-chain")
    {
        recursive_fwd_chain = value;
        recursive_fwd_chain.value_namespace = name_space;
        recursive_fwd_chain.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-igp-paths")
    {
        number_of_igp_paths = value;
        number_of_igp_paths.value_namespace = name_space;
        number_of_igp_paths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "remote-backup")
    {
        remote_backup = value;
        remote_backup.value_namespace = name_space;
        remote_backup.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "local-lable")
    {
        local_lable.yfilter = yfilter;
    }
    if(value_path == "recursive-fwd-chain")
    {
        recursive_fwd_chain.yfilter = yfilter;
    }
    if(value_path == "number-of-igp-paths")
    {
        number_of_igp_paths.yfilter = yfilter;
    }
    if(value_path == "remote-backup")
    {
        remote_backup.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "recursive-lbl-stack" || name == "igp-label-stack-array" || name == "local-lable" || name == "recursive-fwd-chain" || name == "number-of-igp-paths" || name == "remote-backup")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::RecursiveLblStack()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "recursive-lbl-stack"; yang_parent_name = "mpls-information-for-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::~RecursiveLblStack()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recursive-lbl-stack";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::IgpLabelStackArray()
    :
    number_of_labels{YType::uint32, "number-of-labels"},
    out_interface{YType::str, "out-interface"},
    nh_address{YType::str, "nh-address"}
        ,
    lstack(this, {})
{

    yang_name = "igp-label-stack-array"; yang_parent_name = "mpls-information-for-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::~IgpLabelStackArray()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<lstack.len(); index++)
    {
        if(lstack[index]->has_data())
            return true;
    }
    return number_of_labels.is_set
	|| out_interface.is_set
	|| nh_address.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::has_operation() const
{
    for (std::size_t index=0; index<lstack.len(); index++)
    {
        if(lstack[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(number_of_labels.yfilter)
	|| ydk::is_set(out_interface.yfilter)
	|| ydk::is_set(nh_address.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "igp-label-stack-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (number_of_labels.is_set || is_set(number_of_labels.yfilter)) leaf_name_data.push_back(number_of_labels.get_name_leafdata());
    if (out_interface.is_set || is_set(out_interface.yfilter)) leaf_name_data.push_back(out_interface.get_name_leafdata());
    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "lstack")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack>();
        c->parent = this;
        lstack.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : lstack.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "number-of-labels")
    {
        number_of_labels = value;
        number_of_labels.value_namespace = name_space;
        number_of_labels.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "out-interface")
    {
        out_interface = value;
        out_interface.value_namespace = name_space;
        out_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "number-of-labels")
    {
        number_of_labels.yfilter = yfilter;
    }
    if(value_path == "out-interface")
    {
        out_interface.yfilter = yfilter;
    }
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "lstack" || name == "number-of-labels" || name == "out-interface" || name == "nh-address")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::Lstack()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "lstack"; yang_parent_name = "igp-label-stack-array"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::~Lstack()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lstack";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::ExtensionObject()
    :
    type{YType::enumeration, "type"}
        ,
    sfecd_le(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe>())
{
    sfecd_le->parent = this;

    yang_name = "extension-object"; yang_parent_name = "exact-route"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::~ExtensionObject()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (sfecd_le !=  nullptr && sfecd_le->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (sfecd_le !=  nullptr && sfecd_le->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "extension-object";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sfecd-le")
    {
        if(sfecd_le == nullptr)
        {
            sfecd_le = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe>();
        }
        return sfecd_le;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(sfecd_le != nullptr)
    {
        children["sfecd-le"] = sfecd_le;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sfecd-le" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe::SfecdLe()
    :
    context_label_flag{YType::boolean, "context-label-flag"},
    context_label{YType::uint32, "context-label"}
{

    yang_name = "sfecd-le"; yang_parent_name = "extension-object"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe::~SfecdLe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe::has_data() const
{
    if (is_presence_container) return true;
    return context_label_flag.is_set
	|| context_label.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(context_label_flag.yfilter)
	|| ydk::is_set(context_label.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sfecd-le";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (context_label_flag.is_set || is_set(context_label_flag.yfilter)) leaf_name_data.push_back(context_label_flag.get_name_leafdata());
    if (context_label.is_set || is_set(context_label.yfilter)) leaf_name_data.push_back(context_label.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "context-label-flag")
    {
        context_label_flag = value;
        context_label_flag.value_namespace = name_space;
        context_label_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "context-label")
    {
        context_label = value;
        context_label.value_namespace = name_space;
        context_label.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "context-label-flag")
    {
        context_label_flag.yfilter = yfilter;
    }
    if(value_path == "context-label")
    {
        context_label.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExactRoutes::ExactRoute::ExtensionObject::SfecdLe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "context-label-flag" || name == "context-label")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::ProtocolGlobal()
    :
    segment_routing(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting>())
{
    segment_routing->parent = this;

    yang_name = "protocol-global"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::~ProtocolGlobal()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::has_data() const
{
    if (is_presence_container) return true;
    return (segment_routing !=  nullptr && segment_routing->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::has_operation() const
{
    return is_set(yfilter)
	|| (segment_routing !=  nullptr && segment_routing->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "protocol-global";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "segment-routing")
    {
        if(segment_routing == nullptr)
        {
            segment_routing = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting>();
        }
        return segment_routing;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(segment_routing != nullptr)
    {
        children["segment-routing"] = segment_routing;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "segment-routing")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::SegmentRouting()
    :
    srv6(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6>())
{
    srv6->parent = this;

    yang_name = "segment-routing"; yang_parent_name = "protocol-global"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::~SegmentRouting()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::has_data() const
{
    if (is_presence_container) return true;
    return (srv6 !=  nullptr && srv6->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::has_operation() const
{
    return is_set(yfilter)
	|| (srv6 !=  nullptr && srv6->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "segment-routing";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "srv6")
    {
        if(srv6 == nullptr)
        {
            srv6 = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6>();
        }
        return srv6;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(srv6 != nullptr)
    {
        children["srv6"] = srv6;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "srv6")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Srv6()
    :
    srv6_enabled{YType::boolean, "srv6-enabled"},
    encap_source_address{YType::str, "encap-source-address"},
    locator_count{YType::uint32, "locator-count"}
        ,
    locator(this, {})
{

    yang_name = "srv6"; yang_parent_name = "segment-routing"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::~Srv6()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<locator.len(); index++)
    {
        if(locator[index]->has_data())
            return true;
    }
    return srv6_enabled.is_set
	|| encap_source_address.is_set
	|| locator_count.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::has_operation() const
{
    for (std::size_t index=0; index<locator.len(); index++)
    {
        if(locator[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(srv6_enabled.yfilter)
	|| ydk::is_set(encap_source_address.yfilter)
	|| ydk::is_set(locator_count.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "srv6";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (srv6_enabled.is_set || is_set(srv6_enabled.yfilter)) leaf_name_data.push_back(srv6_enabled.get_name_leafdata());
    if (encap_source_address.is_set || is_set(encap_source_address.yfilter)) leaf_name_data.push_back(encap_source_address.get_name_leafdata());
    if (locator_count.is_set || is_set(locator_count.yfilter)) leaf_name_data.push_back(locator_count.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "locator")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator>();
        c->parent = this;
        locator.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : locator.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "srv6-enabled")
    {
        srv6_enabled = value;
        srv6_enabled.value_namespace = name_space;
        srv6_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "encap-source-address")
    {
        encap_source_address = value;
        encap_source_address.value_namespace = name_space;
        encap_source_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "locator-count")
    {
        locator_count = value;
        locator_count.value_namespace = name_space;
        locator_count.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "srv6-enabled")
    {
        srv6_enabled.yfilter = yfilter;
    }
    if(value_path == "encap-source-address")
    {
        encap_source_address.yfilter = yfilter;
    }
    if(value_path == "locator-count")
    {
        locator_count.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "locator" || name == "srv6-enabled" || name == "encap-source-address" || name == "locator-count")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator::Locator()
    :
    name{YType::str, "name"},
    prefix{YType::str, "prefix"},
    locator{YType::str, "locator"}
{

    yang_name = "locator"; yang_parent_name = "srv6"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator::~Locator()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator::has_data() const
{
    if (is_presence_container) return true;
    return name.is_set
	|| prefix.is_set
	|| locator.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(name.yfilter)
	|| ydk::is_set(prefix.yfilter)
	|| ydk::is_set(locator.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "locator";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (name.is_set || is_set(name.yfilter)) leaf_name_data.push_back(name.get_name_leafdata());
    if (prefix.is_set || is_set(prefix.yfilter)) leaf_name_data.push_back(prefix.get_name_leafdata());
    if (locator.is_set || is_set(locator.yfilter)) leaf_name_data.push_back(locator.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "name")
    {
        name = value;
        name.value_namespace = name_space;
        name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix")
    {
        prefix = value;
        prefix.value_namespace = name_space;
        prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "locator")
    {
        locator = value;
        locator.value_namespace = name_space;
        locator.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "name")
    {
        name.yfilter = yfilter;
    }
    if(value_path == "prefix")
    {
        prefix.yfilter = yfilter;
    }
    if(value_path == "locator")
    {
        locator.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal::SegmentRouting::Srv6::Locator::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "name" || name == "prefix" || name == "locator")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::NhIds::NhIds()
    :
    nh_id(this, {})
{

    yang_name = "nh-ids"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::NhIds::~NhIds()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::NhIds::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_id.len(); index++)
    {
        if(nh_id[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::NhIds::has_operation() const
{
    for (std::size_t index=0; index<nh_id.len(); index++)
    {
        if(nh_id[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::NhIds::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-ids";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::NhIds::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::NhIds::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-id")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId>();
        c->parent = this;
        nh_id.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::NhIds::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : nh_id.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::NhIds::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::NhIds::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::NhIds::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-id")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId::NhId()
    :
    nh_id{YType::uint32, "nh-id"},
    nh_interface_name{YType::str, "nh-interface-name"},
    nh_address{YType::str, "nh-address"},
    nh_interface_name_xr{YType::str, "nh-interface-name-xr"},
    nh_address_xr{YType::str, "nh-address-xr"},
    nh_protocol{YType::uint8, "nh-protocol"},
    nh_link_type{YType::uint8, "nh-link-type"},
    nh_table_id{YType::uint32, "nh-table-id"},
    nh_id_xr{YType::uint32, "nh-id-xr"},
    nh_id_application{YType::uint8, "nh-id-application"},
    version{YType::uint64, "version"},
    time_of_last_update_in_msec{YType::uint64, "time-of-last-update-in-msec"}
{

    yang_name = "nh-id"; yang_parent_name = "nh-ids"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId::~NhId()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId::has_data() const
{
    if (is_presence_container) return true;
    return nh_id.is_set
	|| nh_interface_name.is_set
	|| nh_address.is_set
	|| nh_interface_name_xr.is_set
	|| nh_address_xr.is_set
	|| nh_protocol.is_set
	|| nh_link_type.is_set
	|| nh_table_id.is_set
	|| nh_id_xr.is_set
	|| nh_id_application.is_set
	|| version.is_set
	|| time_of_last_update_in_msec.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_id.yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(nh_interface_name_xr.yfilter)
	|| ydk::is_set(nh_address_xr.yfilter)
	|| ydk::is_set(nh_protocol.yfilter)
	|| ydk::is_set(nh_link_type.yfilter)
	|| ydk::is_set(nh_table_id.yfilter)
	|| ydk::is_set(nh_id_xr.yfilter)
	|| ydk::is_set(nh_id_application.yfilter)
	|| ydk::is_set(version.yfilter)
	|| ydk::is_set(time_of_last_update_in_msec.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-id";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_id.is_set || is_set(nh_id.yfilter)) leaf_name_data.push_back(nh_id.get_name_leafdata());
    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (nh_interface_name_xr.is_set || is_set(nh_interface_name_xr.yfilter)) leaf_name_data.push_back(nh_interface_name_xr.get_name_leafdata());
    if (nh_address_xr.is_set || is_set(nh_address_xr.yfilter)) leaf_name_data.push_back(nh_address_xr.get_name_leafdata());
    if (nh_protocol.is_set || is_set(nh_protocol.yfilter)) leaf_name_data.push_back(nh_protocol.get_name_leafdata());
    if (nh_link_type.is_set || is_set(nh_link_type.yfilter)) leaf_name_data.push_back(nh_link_type.get_name_leafdata());
    if (nh_table_id.is_set || is_set(nh_table_id.yfilter)) leaf_name_data.push_back(nh_table_id.get_name_leafdata());
    if (nh_id_xr.is_set || is_set(nh_id_xr.yfilter)) leaf_name_data.push_back(nh_id_xr.get_name_leafdata());
    if (nh_id_application.is_set || is_set(nh_id_application.yfilter)) leaf_name_data.push_back(nh_id_application.get_name_leafdata());
    if (version.is_set || is_set(version.yfilter)) leaf_name_data.push_back(version.get_name_leafdata());
    if (time_of_last_update_in_msec.is_set || is_set(time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(time_of_last_update_in_msec.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-id")
    {
        nh_id = value;
        nh_id.value_namespace = name_space;
        nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-interface-name-xr")
    {
        nh_interface_name_xr = value;
        nh_interface_name_xr.value_namespace = name_space;
        nh_interface_name_xr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-address-xr")
    {
        nh_address_xr = value;
        nh_address_xr.value_namespace = name_space;
        nh_address_xr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-protocol")
    {
        nh_protocol = value;
        nh_protocol.value_namespace = name_space;
        nh_protocol.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-link-type")
    {
        nh_link_type = value;
        nh_link_type.value_namespace = name_space;
        nh_link_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-table-id")
    {
        nh_table_id = value;
        nh_table_id.value_namespace = name_space;
        nh_table_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-id-xr")
    {
        nh_id_xr = value;
        nh_id_xr.value_namespace = name_space;
        nh_id_xr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-id-application")
    {
        nh_id_application = value;
        nh_id_application.value_namespace = name_space;
        nh_id_application.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "version")
    {
        version = value;
        version.value_namespace = name_space;
        version.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "time-of-last-update-in-msec")
    {
        time_of_last_update_in_msec = value;
        time_of_last_update_in_msec.value_namespace = name_space;
        time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-id")
    {
        nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "nh-interface-name-xr")
    {
        nh_interface_name_xr.yfilter = yfilter;
    }
    if(value_path == "nh-address-xr")
    {
        nh_address_xr.yfilter = yfilter;
    }
    if(value_path == "nh-protocol")
    {
        nh_protocol.yfilter = yfilter;
    }
    if(value_path == "nh-link-type")
    {
        nh_link_type.yfilter = yfilter;
    }
    if(value_path == "nh-table-id")
    {
        nh_table_id.yfilter = yfilter;
    }
    if(value_path == "nh-id-xr")
    {
        nh_id_xr.yfilter = yfilter;
    }
    if(value_path == "nh-id-application")
    {
        nh_id_application.yfilter = yfilter;
    }
    if(value_path == "version")
    {
        version.yfilter = yfilter;
    }
    if(value_path == "time-of-last-update-in-msec")
    {
        time_of_last_update_in_msec.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::NhIds::NhId::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-id" || name == "nh-interface-name" || name == "nh-address" || name == "nh-interface-name-xr" || name == "nh-address-xr" || name == "nh-protocol" || name == "nh-link-type" || name == "nh-table-id" || name == "nh-id-xr" || name == "nh-id-application" || name == "version" || name == "time-of-last-update-in-msec")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummaries()
    :
    external_client_summary(this, {})
{

    yang_name = "external-client-summaries"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::~ExternalClientSummaries()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<external_client_summary.len(); index++)
    {
        if(external_client_summary[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::has_operation() const
{
    for (std::size_t index=0; index<external_client_summary.len(); index++)
    {
        if(external_client_summary[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "external-client-summaries";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "external-client-summary")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary>();
        c->parent = this;
        external_client_summary.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : external_client_summary.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "external-client-summary")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::ExternalClientSummary()
    :
    ecd_ver{YType::uint32, "ecd-ver"},
    id{YType::uint32, "id"},
    ses_client_name{YType::str, "ses-client-name"},
    ses_feci_fib_proto{YType::uint32, "ses-feci-fib-proto"},
    ses_num_regs{YType::uint32, "ses-num-regs"},
    ses_num_pending{YType::uint32, "ses-num-pending"},
    ses_client_pulsed_time{YType::uint64, "ses-client-pulsed-time"},
    ses_comp_id{YType::uint32, "ses-comp-id"},
    ses_ecd_version{YType::uint32, "ses-ecd-version"}
        ,
    ses_pl_sum(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum>())
{
    ses_pl_sum->parent = this;

    yang_name = "external-client-summary"; yang_parent_name = "external-client-summaries"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::~ExternalClientSummary()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::has_data() const
{
    if (is_presence_container) return true;
    return ecd_ver.is_set
	|| id.is_set
	|| ses_client_name.is_set
	|| ses_feci_fib_proto.is_set
	|| ses_num_regs.is_set
	|| ses_num_pending.is_set
	|| ses_client_pulsed_time.is_set
	|| ses_comp_id.is_set
	|| ses_ecd_version.is_set
	|| (ses_pl_sum !=  nullptr && ses_pl_sum->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(ecd_ver.yfilter)
	|| ydk::is_set(id.yfilter)
	|| ydk::is_set(ses_client_name.yfilter)
	|| ydk::is_set(ses_feci_fib_proto.yfilter)
	|| ydk::is_set(ses_num_regs.yfilter)
	|| ydk::is_set(ses_num_pending.yfilter)
	|| ydk::is_set(ses_client_pulsed_time.yfilter)
	|| ydk::is_set(ses_comp_id.yfilter)
	|| ydk::is_set(ses_ecd_version.yfilter)
	|| (ses_pl_sum !=  nullptr && ses_pl_sum->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "external-client-summary";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ecd_ver.is_set || is_set(ecd_ver.yfilter)) leaf_name_data.push_back(ecd_ver.get_name_leafdata());
    if (id.is_set || is_set(id.yfilter)) leaf_name_data.push_back(id.get_name_leafdata());
    if (ses_client_name.is_set || is_set(ses_client_name.yfilter)) leaf_name_data.push_back(ses_client_name.get_name_leafdata());
    if (ses_feci_fib_proto.is_set || is_set(ses_feci_fib_proto.yfilter)) leaf_name_data.push_back(ses_feci_fib_proto.get_name_leafdata());
    if (ses_num_regs.is_set || is_set(ses_num_regs.yfilter)) leaf_name_data.push_back(ses_num_regs.get_name_leafdata());
    if (ses_num_pending.is_set || is_set(ses_num_pending.yfilter)) leaf_name_data.push_back(ses_num_pending.get_name_leafdata());
    if (ses_client_pulsed_time.is_set || is_set(ses_client_pulsed_time.yfilter)) leaf_name_data.push_back(ses_client_pulsed_time.get_name_leafdata());
    if (ses_comp_id.is_set || is_set(ses_comp_id.yfilter)) leaf_name_data.push_back(ses_comp_id.get_name_leafdata());
    if (ses_ecd_version.is_set || is_set(ses_ecd_version.yfilter)) leaf_name_data.push_back(ses_ecd_version.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ses-pl-sum")
    {
        if(ses_pl_sum == nullptr)
        {
            ses_pl_sum = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum>();
        }
        return ses_pl_sum;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(ses_pl_sum != nullptr)
    {
        children["ses-pl-sum"] = ses_pl_sum;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "ecd-ver")
    {
        ecd_ver = value;
        ecd_ver.value_namespace = name_space;
        ecd_ver.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "id")
    {
        id = value;
        id.value_namespace = name_space;
        id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ses-client-name")
    {
        ses_client_name = value;
        ses_client_name.value_namespace = name_space;
        ses_client_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ses-feci-fib-proto")
    {
        ses_feci_fib_proto = value;
        ses_feci_fib_proto.value_namespace = name_space;
        ses_feci_fib_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ses-num-regs")
    {
        ses_num_regs = value;
        ses_num_regs.value_namespace = name_space;
        ses_num_regs.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ses-num-pending")
    {
        ses_num_pending = value;
        ses_num_pending.value_namespace = name_space;
        ses_num_pending.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ses-client-pulsed-time")
    {
        ses_client_pulsed_time = value;
        ses_client_pulsed_time.value_namespace = name_space;
        ses_client_pulsed_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ses-comp-id")
    {
        ses_comp_id = value;
        ses_comp_id.value_namespace = name_space;
        ses_comp_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ses-ecd-version")
    {
        ses_ecd_version = value;
        ses_ecd_version.value_namespace = name_space;
        ses_ecd_version.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "ecd-ver")
    {
        ecd_ver.yfilter = yfilter;
    }
    if(value_path == "id")
    {
        id.yfilter = yfilter;
    }
    if(value_path == "ses-client-name")
    {
        ses_client_name.yfilter = yfilter;
    }
    if(value_path == "ses-feci-fib-proto")
    {
        ses_feci_fib_proto.yfilter = yfilter;
    }
    if(value_path == "ses-num-regs")
    {
        ses_num_regs.yfilter = yfilter;
    }
    if(value_path == "ses-num-pending")
    {
        ses_num_pending.yfilter = yfilter;
    }
    if(value_path == "ses-client-pulsed-time")
    {
        ses_client_pulsed_time.yfilter = yfilter;
    }
    if(value_path == "ses-comp-id")
    {
        ses_comp_id.yfilter = yfilter;
    }
    if(value_path == "ses-ecd-version")
    {
        ses_ecd_version.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ses-pl-sum" || name == "ecd-ver" || name == "id" || name == "ses-client-name" || name == "ses-feci-fib-proto" || name == "ses-num-regs" || name == "ses-num-pending" || name == "ses-client-pulsed-time" || name == "ses-comp-id" || name == "ses-ecd-version")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SesPlSum()
    :
    sep_num_ecd_pathlist{YType::uint32, "sep-num-ecd-pathlist"},
    sep_num_ecd_pl_unresolved{YType::uint32, "sep-num-ecd-pl-unresolved"}
        ,
    sep_num_ecd_pl_per_interest(this, {})
{

    yang_name = "ses-pl-sum"; yang_parent_name = "external-client-summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::~SesPlSum()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<sep_num_ecd_pl_per_interest.len(); index++)
    {
        if(sep_num_ecd_pl_per_interest[index]->has_data())
            return true;
    }
    return sep_num_ecd_pathlist.is_set
	|| sep_num_ecd_pl_unresolved.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::has_operation() const
{
    for (std::size_t index=0; index<sep_num_ecd_pl_per_interest.len(); index++)
    {
        if(sep_num_ecd_pl_per_interest[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(sep_num_ecd_pathlist.yfilter)
	|| ydk::is_set(sep_num_ecd_pl_unresolved.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ses-pl-sum";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sep_num_ecd_pathlist.is_set || is_set(sep_num_ecd_pathlist.yfilter)) leaf_name_data.push_back(sep_num_ecd_pathlist.get_name_leafdata());
    if (sep_num_ecd_pl_unresolved.is_set || is_set(sep_num_ecd_pl_unresolved.yfilter)) leaf_name_data.push_back(sep_num_ecd_pl_unresolved.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sep-num-ecd-pl-per-interest")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest>();
        c->parent = this;
        sep_num_ecd_pl_per_interest.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : sep_num_ecd_pl_per_interest.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "sep-num-ecd-pathlist")
    {
        sep_num_ecd_pathlist = value;
        sep_num_ecd_pathlist.value_namespace = name_space;
        sep_num_ecd_pathlist.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sep-num-ecd-pl-unresolved")
    {
        sep_num_ecd_pl_unresolved = value;
        sep_num_ecd_pl_unresolved.value_namespace = name_space;
        sep_num_ecd_pl_unresolved.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "sep-num-ecd-pathlist")
    {
        sep_num_ecd_pathlist.yfilter = yfilter;
    }
    if(value_path == "sep-num-ecd-pl-unresolved")
    {
        sep_num_ecd_pl_unresolved.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sep-num-ecd-pl-per-interest" || name == "sep-num-ecd-pathlist" || name == "sep-num-ecd-pl-unresolved")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest::SepNumEcdPlPerInterest()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "sep-num-ecd-pl-per-interest"; yang_parent_name = "ses-pl-sum"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest::~SepNumEcdPlPerInterest()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sep-num-ecd-pl-per-interest";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries::ExternalClientSummary::SesPlSum::SepNumEcdPlPerInterest::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::Misc()
    :
    mi_pfi_ifh_upd{YType::uint64, "mi-pfi-ifh-upd"},
    mi_pfi_ifh_del{YType::uint64, "mi-pfi-ifh-del"},
    mi_pfi_ifh_stale{YType::uint64, "mi-pfi-ifh-stale"},
    mi_tot_plat_upd_time{YType::uint64, "mi-tot-plat-upd-time"},
    mi_tot_gtrie_time{YType::uint64, "mi-tot-gtrie-time"},
    mi_tot_dnld_time{YType::uint64, "mi-tot-dnld-time"},
    mi_clock_time{YType::uint64, "mi-clock-time"},
    mi_cpu_time{YType::uint64, "mi-cpu-time"},
    mi_shm_reset_ts{YType::uint64, "mi-shm-reset-ts"},
    mi_idb_recycle_count{YType::uint32, "mi-idb-recycle-count"},
    mi_idb_recycle_cleanup_count{YType::uint32, "mi-idb-recycle-cleanup-count"},
    mi_num_mgmt_list{YType::uint32, "mi-num-mgmt-list"},
    mi_num_virtual_ll_addresses_added{YType::uint32, "mi-num-virtual-ll-addresses-added"},
    mi_num_virtual_ll_addresses_deleted{YType::uint32, "mi-num-virtual-ll-addresses-deleted"},
    mi_num_virtual_ll_addresses_dropped{YType::uint32, "mi-num-virtual-ll-addresses-dropped"},
    mi_num_virtual_ll_addresses_cached{YType::uint32, "mi-num-virtual-ll-addresses-cached"},
    mi_cpuless_init{YType::boolean, "mi-cpuless-init"},
    mi_cpuless_count{YType::uint32, "mi-cpuless-count"},
    mi_prefer_aib_routes_over_rib_oper{YType::boolean, "mi-prefer-aib-routes-over-rib-oper"},
    mi_prefer_aib_routes_over_rib_cfg{YType::boolean, "mi-prefer-aib-routes-over-rib-cfg"},
    mi_xpl_ldi_enabled{YType::boolean, "mi-xpl-ldi-enabled"},
    mi_frr_follow_bgp_pic{YType::boolean, "mi-frr-follow-bgp-pic"},
    mi_encap_sharing_disable{YType::boolean, "mi-encap-sharing-disable"},
    mi_lba_hash_recover{YType::boolean, "mi-lba-hash-recover"}
        ,
    mi_issu_state(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState>())
    , mi_plat_capabilities(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities>())
    , mi_idb_ext_cleanup_failed_count(this, {})
    , mi_lrpf_stats_fail(this, {})
    , mi_lrpf_stats_act(this, {})
    , mi_lrpf_num(this, {})
    , mi_idb_lsec_enabled_num(this, {})
    , mi_num_lisp_eid(this, {})
    , mi_num_lisp_valid_eid(this, {})
    , mi_cpuless_node(this, {})
    , mi_proto_dbg_stat(this, {})
    , mi_idb_purge_cntr(this, {})
    , mi_del(this, {})
    , mi_frr_stat(this, {})
{
    mi_issu_state->parent = this;
    mi_plat_capabilities->parent = this;

    yang_name = "misc"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::~Misc()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<mi_idb_ext_cleanup_failed_count.len(); index++)
    {
        if(mi_idb_ext_cleanup_failed_count[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<mi_lrpf_stats_fail.len(); index++)
    {
        if(mi_lrpf_stats_fail[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<mi_lrpf_stats_act.len(); index++)
    {
        if(mi_lrpf_stats_act[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<mi_lrpf_num.len(); index++)
    {
        if(mi_lrpf_num[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<mi_idb_lsec_enabled_num.len(); index++)
    {
        if(mi_idb_lsec_enabled_num[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<mi_num_lisp_eid.len(); index++)
    {
        if(mi_num_lisp_eid[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<mi_num_lisp_valid_eid.len(); index++)
    {
        if(mi_num_lisp_valid_eid[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<mi_cpuless_node.len(); index++)
    {
        if(mi_cpuless_node[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<mi_proto_dbg_stat.len(); index++)
    {
        if(mi_proto_dbg_stat[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<mi_idb_purge_cntr.len(); index++)
    {
        if(mi_idb_purge_cntr[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<mi_del.len(); index++)
    {
        if(mi_del[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<mi_frr_stat.len(); index++)
    {
        if(mi_frr_stat[index]->has_data())
            return true;
    }
    return mi_pfi_ifh_upd.is_set
	|| mi_pfi_ifh_del.is_set
	|| mi_pfi_ifh_stale.is_set
	|| mi_tot_plat_upd_time.is_set
	|| mi_tot_gtrie_time.is_set
	|| mi_tot_dnld_time.is_set
	|| mi_clock_time.is_set
	|| mi_cpu_time.is_set
	|| mi_shm_reset_ts.is_set
	|| mi_idb_recycle_count.is_set
	|| mi_idb_recycle_cleanup_count.is_set
	|| mi_num_mgmt_list.is_set
	|| mi_num_virtual_ll_addresses_added.is_set
	|| mi_num_virtual_ll_addresses_deleted.is_set
	|| mi_num_virtual_ll_addresses_dropped.is_set
	|| mi_num_virtual_ll_addresses_cached.is_set
	|| mi_cpuless_init.is_set
	|| mi_cpuless_count.is_set
	|| mi_prefer_aib_routes_over_rib_oper.is_set
	|| mi_prefer_aib_routes_over_rib_cfg.is_set
	|| mi_xpl_ldi_enabled.is_set
	|| mi_frr_follow_bgp_pic.is_set
	|| mi_encap_sharing_disable.is_set
	|| mi_lba_hash_recover.is_set
	|| (mi_issu_state !=  nullptr && mi_issu_state->has_data())
	|| (mi_plat_capabilities !=  nullptr && mi_plat_capabilities->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::has_operation() const
{
    for (std::size_t index=0; index<mi_idb_ext_cleanup_failed_count.len(); index++)
    {
        if(mi_idb_ext_cleanup_failed_count[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<mi_lrpf_stats_fail.len(); index++)
    {
        if(mi_lrpf_stats_fail[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<mi_lrpf_stats_act.len(); index++)
    {
        if(mi_lrpf_stats_act[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<mi_lrpf_num.len(); index++)
    {
        if(mi_lrpf_num[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<mi_idb_lsec_enabled_num.len(); index++)
    {
        if(mi_idb_lsec_enabled_num[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<mi_num_lisp_eid.len(); index++)
    {
        if(mi_num_lisp_eid[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<mi_num_lisp_valid_eid.len(); index++)
    {
        if(mi_num_lisp_valid_eid[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<mi_cpuless_node.len(); index++)
    {
        if(mi_cpuless_node[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<mi_proto_dbg_stat.len(); index++)
    {
        if(mi_proto_dbg_stat[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<mi_idb_purge_cntr.len(); index++)
    {
        if(mi_idb_purge_cntr[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<mi_del.len(); index++)
    {
        if(mi_del[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<mi_frr_stat.len(); index++)
    {
        if(mi_frr_stat[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(mi_pfi_ifh_upd.yfilter)
	|| ydk::is_set(mi_pfi_ifh_del.yfilter)
	|| ydk::is_set(mi_pfi_ifh_stale.yfilter)
	|| ydk::is_set(mi_tot_plat_upd_time.yfilter)
	|| ydk::is_set(mi_tot_gtrie_time.yfilter)
	|| ydk::is_set(mi_tot_dnld_time.yfilter)
	|| ydk::is_set(mi_clock_time.yfilter)
	|| ydk::is_set(mi_cpu_time.yfilter)
	|| ydk::is_set(mi_shm_reset_ts.yfilter)
	|| ydk::is_set(mi_idb_recycle_count.yfilter)
	|| ydk::is_set(mi_idb_recycle_cleanup_count.yfilter)
	|| ydk::is_set(mi_num_mgmt_list.yfilter)
	|| ydk::is_set(mi_num_virtual_ll_addresses_added.yfilter)
	|| ydk::is_set(mi_num_virtual_ll_addresses_deleted.yfilter)
	|| ydk::is_set(mi_num_virtual_ll_addresses_dropped.yfilter)
	|| ydk::is_set(mi_num_virtual_ll_addresses_cached.yfilter)
	|| ydk::is_set(mi_cpuless_init.yfilter)
	|| ydk::is_set(mi_cpuless_count.yfilter)
	|| ydk::is_set(mi_prefer_aib_routes_over_rib_oper.yfilter)
	|| ydk::is_set(mi_prefer_aib_routes_over_rib_cfg.yfilter)
	|| ydk::is_set(mi_xpl_ldi_enabled.yfilter)
	|| ydk::is_set(mi_frr_follow_bgp_pic.yfilter)
	|| ydk::is_set(mi_encap_sharing_disable.yfilter)
	|| ydk::is_set(mi_lba_hash_recover.yfilter)
	|| (mi_issu_state !=  nullptr && mi_issu_state->has_operation())
	|| (mi_plat_capabilities !=  nullptr && mi_plat_capabilities->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "misc";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (mi_pfi_ifh_upd.is_set || is_set(mi_pfi_ifh_upd.yfilter)) leaf_name_data.push_back(mi_pfi_ifh_upd.get_name_leafdata());
    if (mi_pfi_ifh_del.is_set || is_set(mi_pfi_ifh_del.yfilter)) leaf_name_data.push_back(mi_pfi_ifh_del.get_name_leafdata());
    if (mi_pfi_ifh_stale.is_set || is_set(mi_pfi_ifh_stale.yfilter)) leaf_name_data.push_back(mi_pfi_ifh_stale.get_name_leafdata());
    if (mi_tot_plat_upd_time.is_set || is_set(mi_tot_plat_upd_time.yfilter)) leaf_name_data.push_back(mi_tot_plat_upd_time.get_name_leafdata());
    if (mi_tot_gtrie_time.is_set || is_set(mi_tot_gtrie_time.yfilter)) leaf_name_data.push_back(mi_tot_gtrie_time.get_name_leafdata());
    if (mi_tot_dnld_time.is_set || is_set(mi_tot_dnld_time.yfilter)) leaf_name_data.push_back(mi_tot_dnld_time.get_name_leafdata());
    if (mi_clock_time.is_set || is_set(mi_clock_time.yfilter)) leaf_name_data.push_back(mi_clock_time.get_name_leafdata());
    if (mi_cpu_time.is_set || is_set(mi_cpu_time.yfilter)) leaf_name_data.push_back(mi_cpu_time.get_name_leafdata());
    if (mi_shm_reset_ts.is_set || is_set(mi_shm_reset_ts.yfilter)) leaf_name_data.push_back(mi_shm_reset_ts.get_name_leafdata());
    if (mi_idb_recycle_count.is_set || is_set(mi_idb_recycle_count.yfilter)) leaf_name_data.push_back(mi_idb_recycle_count.get_name_leafdata());
    if (mi_idb_recycle_cleanup_count.is_set || is_set(mi_idb_recycle_cleanup_count.yfilter)) leaf_name_data.push_back(mi_idb_recycle_cleanup_count.get_name_leafdata());
    if (mi_num_mgmt_list.is_set || is_set(mi_num_mgmt_list.yfilter)) leaf_name_data.push_back(mi_num_mgmt_list.get_name_leafdata());
    if (mi_num_virtual_ll_addresses_added.is_set || is_set(mi_num_virtual_ll_addresses_added.yfilter)) leaf_name_data.push_back(mi_num_virtual_ll_addresses_added.get_name_leafdata());
    if (mi_num_virtual_ll_addresses_deleted.is_set || is_set(mi_num_virtual_ll_addresses_deleted.yfilter)) leaf_name_data.push_back(mi_num_virtual_ll_addresses_deleted.get_name_leafdata());
    if (mi_num_virtual_ll_addresses_dropped.is_set || is_set(mi_num_virtual_ll_addresses_dropped.yfilter)) leaf_name_data.push_back(mi_num_virtual_ll_addresses_dropped.get_name_leafdata());
    if (mi_num_virtual_ll_addresses_cached.is_set || is_set(mi_num_virtual_ll_addresses_cached.yfilter)) leaf_name_data.push_back(mi_num_virtual_ll_addresses_cached.get_name_leafdata());
    if (mi_cpuless_init.is_set || is_set(mi_cpuless_init.yfilter)) leaf_name_data.push_back(mi_cpuless_init.get_name_leafdata());
    if (mi_cpuless_count.is_set || is_set(mi_cpuless_count.yfilter)) leaf_name_data.push_back(mi_cpuless_count.get_name_leafdata());
    if (mi_prefer_aib_routes_over_rib_oper.is_set || is_set(mi_prefer_aib_routes_over_rib_oper.yfilter)) leaf_name_data.push_back(mi_prefer_aib_routes_over_rib_oper.get_name_leafdata());
    if (mi_prefer_aib_routes_over_rib_cfg.is_set || is_set(mi_prefer_aib_routes_over_rib_cfg.yfilter)) leaf_name_data.push_back(mi_prefer_aib_routes_over_rib_cfg.get_name_leafdata());
    if (mi_xpl_ldi_enabled.is_set || is_set(mi_xpl_ldi_enabled.yfilter)) leaf_name_data.push_back(mi_xpl_ldi_enabled.get_name_leafdata());
    if (mi_frr_follow_bgp_pic.is_set || is_set(mi_frr_follow_bgp_pic.yfilter)) leaf_name_data.push_back(mi_frr_follow_bgp_pic.get_name_leafdata());
    if (mi_encap_sharing_disable.is_set || is_set(mi_encap_sharing_disable.yfilter)) leaf_name_data.push_back(mi_encap_sharing_disable.get_name_leafdata());
    if (mi_lba_hash_recover.is_set || is_set(mi_lba_hash_recover.yfilter)) leaf_name_data.push_back(mi_lba_hash_recover.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "mi-issu-state")
    {
        if(mi_issu_state == nullptr)
        {
            mi_issu_state = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState>();
        }
        return mi_issu_state;
    }

    if(child_yang_name == "mi-plat-capabilities")
    {
        if(mi_plat_capabilities == nullptr)
        {
            mi_plat_capabilities = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities>();
        }
        return mi_plat_capabilities;
    }

    if(child_yang_name == "mi-idb-ext-cleanup-failed-count")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount>();
        c->parent = this;
        mi_idb_ext_cleanup_failed_count.append(c);
        return c;
    }

    if(child_yang_name == "mi-lrpf-stats-fail")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail>();
        c->parent = this;
        mi_lrpf_stats_fail.append(c);
        return c;
    }

    if(child_yang_name == "mi-lrpf-stats-act")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct>();
        c->parent = this;
        mi_lrpf_stats_act.append(c);
        return c;
    }

    if(child_yang_name == "mi-lrpf-num")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum>();
        c->parent = this;
        mi_lrpf_num.append(c);
        return c;
    }

    if(child_yang_name == "mi-idb-lsec-enabled-num")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum>();
        c->parent = this;
        mi_idb_lsec_enabled_num.append(c);
        return c;
    }

    if(child_yang_name == "mi-num-lisp-eid")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid>();
        c->parent = this;
        mi_num_lisp_eid.append(c);
        return c;
    }

    if(child_yang_name == "mi-num-lisp-valid-eid")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid>();
        c->parent = this;
        mi_num_lisp_valid_eid.append(c);
        return c;
    }

    if(child_yang_name == "mi-cpuless-node")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode>();
        c->parent = this;
        mi_cpuless_node.append(c);
        return c;
    }

    if(child_yang_name == "mi-proto-dbg-stat")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat>();
        c->parent = this;
        mi_proto_dbg_stat.append(c);
        return c;
    }

    if(child_yang_name == "mi-idb-purge-cntr")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr>();
        c->parent = this;
        mi_idb_purge_cntr.append(c);
        return c;
    }

    if(child_yang_name == "mi-del")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel>();
        c->parent = this;
        mi_del.append(c);
        return c;
    }

    if(child_yang_name == "mi-frr-stat")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat>();
        c->parent = this;
        mi_frr_stat.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(mi_issu_state != nullptr)
    {
        children["mi-issu-state"] = mi_issu_state;
    }

    if(mi_plat_capabilities != nullptr)
    {
        children["mi-plat-capabilities"] = mi_plat_capabilities;
    }

    count = 0;
    for (auto c : mi_idb_ext_cleanup_failed_count.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : mi_lrpf_stats_fail.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : mi_lrpf_stats_act.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : mi_lrpf_num.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : mi_idb_lsec_enabled_num.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : mi_num_lisp_eid.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : mi_num_lisp_valid_eid.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : mi_cpuless_node.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : mi_proto_dbg_stat.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : mi_idb_purge_cntr.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : mi_del.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : mi_frr_stat.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "mi-pfi-ifh-upd")
    {
        mi_pfi_ifh_upd = value;
        mi_pfi_ifh_upd.value_namespace = name_space;
        mi_pfi_ifh_upd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-pfi-ifh-del")
    {
        mi_pfi_ifh_del = value;
        mi_pfi_ifh_del.value_namespace = name_space;
        mi_pfi_ifh_del.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-pfi-ifh-stale")
    {
        mi_pfi_ifh_stale = value;
        mi_pfi_ifh_stale.value_namespace = name_space;
        mi_pfi_ifh_stale.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-tot-plat-upd-time")
    {
        mi_tot_plat_upd_time = value;
        mi_tot_plat_upd_time.value_namespace = name_space;
        mi_tot_plat_upd_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-tot-gtrie-time")
    {
        mi_tot_gtrie_time = value;
        mi_tot_gtrie_time.value_namespace = name_space;
        mi_tot_gtrie_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-tot-dnld-time")
    {
        mi_tot_dnld_time = value;
        mi_tot_dnld_time.value_namespace = name_space;
        mi_tot_dnld_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-clock-time")
    {
        mi_clock_time = value;
        mi_clock_time.value_namespace = name_space;
        mi_clock_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-cpu-time")
    {
        mi_cpu_time = value;
        mi_cpu_time.value_namespace = name_space;
        mi_cpu_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-shm-reset-ts")
    {
        mi_shm_reset_ts = value;
        mi_shm_reset_ts.value_namespace = name_space;
        mi_shm_reset_ts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-idb-recycle-count")
    {
        mi_idb_recycle_count = value;
        mi_idb_recycle_count.value_namespace = name_space;
        mi_idb_recycle_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-idb-recycle-cleanup-count")
    {
        mi_idb_recycle_cleanup_count = value;
        mi_idb_recycle_cleanup_count.value_namespace = name_space;
        mi_idb_recycle_cleanup_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-mgmt-list")
    {
        mi_num_mgmt_list = value;
        mi_num_mgmt_list.value_namespace = name_space;
        mi_num_mgmt_list.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-virtual-ll-addresses-added")
    {
        mi_num_virtual_ll_addresses_added = value;
        mi_num_virtual_ll_addresses_added.value_namespace = name_space;
        mi_num_virtual_ll_addresses_added.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-virtual-ll-addresses-deleted")
    {
        mi_num_virtual_ll_addresses_deleted = value;
        mi_num_virtual_ll_addresses_deleted.value_namespace = name_space;
        mi_num_virtual_ll_addresses_deleted.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-virtual-ll-addresses-dropped")
    {
        mi_num_virtual_ll_addresses_dropped = value;
        mi_num_virtual_ll_addresses_dropped.value_namespace = name_space;
        mi_num_virtual_ll_addresses_dropped.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-virtual-ll-addresses-cached")
    {
        mi_num_virtual_ll_addresses_cached = value;
        mi_num_virtual_ll_addresses_cached.value_namespace = name_space;
        mi_num_virtual_ll_addresses_cached.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-cpuless-init")
    {
        mi_cpuless_init = value;
        mi_cpuless_init.value_namespace = name_space;
        mi_cpuless_init.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-cpuless-count")
    {
        mi_cpuless_count = value;
        mi_cpuless_count.value_namespace = name_space;
        mi_cpuless_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-prefer-aib-routes-over-rib-oper")
    {
        mi_prefer_aib_routes_over_rib_oper = value;
        mi_prefer_aib_routes_over_rib_oper.value_namespace = name_space;
        mi_prefer_aib_routes_over_rib_oper.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-prefer-aib-routes-over-rib-cfg")
    {
        mi_prefer_aib_routes_over_rib_cfg = value;
        mi_prefer_aib_routes_over_rib_cfg.value_namespace = name_space;
        mi_prefer_aib_routes_over_rib_cfg.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-xpl-ldi-enabled")
    {
        mi_xpl_ldi_enabled = value;
        mi_xpl_ldi_enabled.value_namespace = name_space;
        mi_xpl_ldi_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-frr-follow-bgp-pic")
    {
        mi_frr_follow_bgp_pic = value;
        mi_frr_follow_bgp_pic.value_namespace = name_space;
        mi_frr_follow_bgp_pic.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-encap-sharing-disable")
    {
        mi_encap_sharing_disable = value;
        mi_encap_sharing_disable.value_namespace = name_space;
        mi_encap_sharing_disable.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-lba-hash-recover")
    {
        mi_lba_hash_recover = value;
        mi_lba_hash_recover.value_namespace = name_space;
        mi_lba_hash_recover.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "mi-pfi-ifh-upd")
    {
        mi_pfi_ifh_upd.yfilter = yfilter;
    }
    if(value_path == "mi-pfi-ifh-del")
    {
        mi_pfi_ifh_del.yfilter = yfilter;
    }
    if(value_path == "mi-pfi-ifh-stale")
    {
        mi_pfi_ifh_stale.yfilter = yfilter;
    }
    if(value_path == "mi-tot-plat-upd-time")
    {
        mi_tot_plat_upd_time.yfilter = yfilter;
    }
    if(value_path == "mi-tot-gtrie-time")
    {
        mi_tot_gtrie_time.yfilter = yfilter;
    }
    if(value_path == "mi-tot-dnld-time")
    {
        mi_tot_dnld_time.yfilter = yfilter;
    }
    if(value_path == "mi-clock-time")
    {
        mi_clock_time.yfilter = yfilter;
    }
    if(value_path == "mi-cpu-time")
    {
        mi_cpu_time.yfilter = yfilter;
    }
    if(value_path == "mi-shm-reset-ts")
    {
        mi_shm_reset_ts.yfilter = yfilter;
    }
    if(value_path == "mi-idb-recycle-count")
    {
        mi_idb_recycle_count.yfilter = yfilter;
    }
    if(value_path == "mi-idb-recycle-cleanup-count")
    {
        mi_idb_recycle_cleanup_count.yfilter = yfilter;
    }
    if(value_path == "mi-num-mgmt-list")
    {
        mi_num_mgmt_list.yfilter = yfilter;
    }
    if(value_path == "mi-num-virtual-ll-addresses-added")
    {
        mi_num_virtual_ll_addresses_added.yfilter = yfilter;
    }
    if(value_path == "mi-num-virtual-ll-addresses-deleted")
    {
        mi_num_virtual_ll_addresses_deleted.yfilter = yfilter;
    }
    if(value_path == "mi-num-virtual-ll-addresses-dropped")
    {
        mi_num_virtual_ll_addresses_dropped.yfilter = yfilter;
    }
    if(value_path == "mi-num-virtual-ll-addresses-cached")
    {
        mi_num_virtual_ll_addresses_cached.yfilter = yfilter;
    }
    if(value_path == "mi-cpuless-init")
    {
        mi_cpuless_init.yfilter = yfilter;
    }
    if(value_path == "mi-cpuless-count")
    {
        mi_cpuless_count.yfilter = yfilter;
    }
    if(value_path == "mi-prefer-aib-routes-over-rib-oper")
    {
        mi_prefer_aib_routes_over_rib_oper.yfilter = yfilter;
    }
    if(value_path == "mi-prefer-aib-routes-over-rib-cfg")
    {
        mi_prefer_aib_routes_over_rib_cfg.yfilter = yfilter;
    }
    if(value_path == "mi-xpl-ldi-enabled")
    {
        mi_xpl_ldi_enabled.yfilter = yfilter;
    }
    if(value_path == "mi-frr-follow-bgp-pic")
    {
        mi_frr_follow_bgp_pic.yfilter = yfilter;
    }
    if(value_path == "mi-encap-sharing-disable")
    {
        mi_encap_sharing_disable.yfilter = yfilter;
    }
    if(value_path == "mi-lba-hash-recover")
    {
        mi_lba_hash_recover.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "mi-issu-state" || name == "mi-plat-capabilities" || name == "mi-idb-ext-cleanup-failed-count" || name == "mi-lrpf-stats-fail" || name == "mi-lrpf-stats-act" || name == "mi-lrpf-num" || name == "mi-idb-lsec-enabled-num" || name == "mi-num-lisp-eid" || name == "mi-num-lisp-valid-eid" || name == "mi-cpuless-node" || name == "mi-proto-dbg-stat" || name == "mi-idb-purge-cntr" || name == "mi-del" || name == "mi-frr-stat" || name == "mi-pfi-ifh-upd" || name == "mi-pfi-ifh-del" || name == "mi-pfi-ifh-stale" || name == "mi-tot-plat-upd-time" || name == "mi-tot-gtrie-time" || name == "mi-tot-dnld-time" || name == "mi-clock-time" || name == "mi-cpu-time" || name == "mi-shm-reset-ts" || name == "mi-idb-recycle-count" || name == "mi-idb-recycle-cleanup-count" || name == "mi-num-mgmt-list" || name == "mi-num-virtual-ll-addresses-added" || name == "mi-num-virtual-ll-addresses-deleted" || name == "mi-num-virtual-ll-addresses-dropped" || name == "mi-num-virtual-ll-addresses-cached" || name == "mi-cpuless-init" || name == "mi-cpuless-count" || name == "mi-prefer-aib-routes-over-rib-oper" || name == "mi-prefer-aib-routes-over-rib-cfg" || name == "mi-xpl-ldi-enabled" || name == "mi-frr-follow-bgp-pic" || name == "mi-encap-sharing-disable" || name == "mi-lba-hash-recover")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::MiIssuState()
    :
    imdr_support{YType::boolean, "imdr-support"},
    slc_support{YType::boolean, "slc-support"},
    fis_issu_restart{YType::boolean, "fis-issu-restart"},
    imdr_eoc_implicit{YType::boolean, "imdr-eoc-implicit"},
    slc_eoc_implicit{YType::boolean, "slc-eoc-implicit"},
    eoc_received_imdr_time_stamp{YType::str, "eoc-received-imdr-time-stamp"},
    eoc_received_slc_time_stamp{YType::str, "eoc-received-slc-time-stamp"},
    eod_received_im_time_stamp{YType::str, "eod-received-im-time-stamp"},
    eod_sent_imdr_time_stamp{YType::str, "eod-sent-imdr-time-stamp"},
    eod_sent_slc_time_stamp{YType::str, "eod-sent-slc-time-stamp"},
    fis_issu_error_ts{YType::uint64, "fis-issu-error-ts"}
        ,
    fis_proto_state(this, {})
{

    yang_name = "mi-issu-state"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::~MiIssuState()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fis_proto_state.len(); index++)
    {
        if(fis_proto_state[index]->has_data())
            return true;
    }
    return imdr_support.is_set
	|| slc_support.is_set
	|| fis_issu_restart.is_set
	|| imdr_eoc_implicit.is_set
	|| slc_eoc_implicit.is_set
	|| eoc_received_imdr_time_stamp.is_set
	|| eoc_received_slc_time_stamp.is_set
	|| eod_received_im_time_stamp.is_set
	|| eod_sent_imdr_time_stamp.is_set
	|| eod_sent_slc_time_stamp.is_set
	|| fis_issu_error_ts.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::has_operation() const
{
    for (std::size_t index=0; index<fis_proto_state.len(); index++)
    {
        if(fis_proto_state[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(imdr_support.yfilter)
	|| ydk::is_set(slc_support.yfilter)
	|| ydk::is_set(fis_issu_restart.yfilter)
	|| ydk::is_set(imdr_eoc_implicit.yfilter)
	|| ydk::is_set(slc_eoc_implicit.yfilter)
	|| ydk::is_set(eoc_received_imdr_time_stamp.yfilter)
	|| ydk::is_set(eoc_received_slc_time_stamp.yfilter)
	|| ydk::is_set(eod_received_im_time_stamp.yfilter)
	|| ydk::is_set(eod_sent_imdr_time_stamp.yfilter)
	|| ydk::is_set(eod_sent_slc_time_stamp.yfilter)
	|| ydk::is_set(fis_issu_error_ts.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-issu-state";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (imdr_support.is_set || is_set(imdr_support.yfilter)) leaf_name_data.push_back(imdr_support.get_name_leafdata());
    if (slc_support.is_set || is_set(slc_support.yfilter)) leaf_name_data.push_back(slc_support.get_name_leafdata());
    if (fis_issu_restart.is_set || is_set(fis_issu_restart.yfilter)) leaf_name_data.push_back(fis_issu_restart.get_name_leafdata());
    if (imdr_eoc_implicit.is_set || is_set(imdr_eoc_implicit.yfilter)) leaf_name_data.push_back(imdr_eoc_implicit.get_name_leafdata());
    if (slc_eoc_implicit.is_set || is_set(slc_eoc_implicit.yfilter)) leaf_name_data.push_back(slc_eoc_implicit.get_name_leafdata());
    if (eoc_received_imdr_time_stamp.is_set || is_set(eoc_received_imdr_time_stamp.yfilter)) leaf_name_data.push_back(eoc_received_imdr_time_stamp.get_name_leafdata());
    if (eoc_received_slc_time_stamp.is_set || is_set(eoc_received_slc_time_stamp.yfilter)) leaf_name_data.push_back(eoc_received_slc_time_stamp.get_name_leafdata());
    if (eod_received_im_time_stamp.is_set || is_set(eod_received_im_time_stamp.yfilter)) leaf_name_data.push_back(eod_received_im_time_stamp.get_name_leafdata());
    if (eod_sent_imdr_time_stamp.is_set || is_set(eod_sent_imdr_time_stamp.yfilter)) leaf_name_data.push_back(eod_sent_imdr_time_stamp.get_name_leafdata());
    if (eod_sent_slc_time_stamp.is_set || is_set(eod_sent_slc_time_stamp.yfilter)) leaf_name_data.push_back(eod_sent_slc_time_stamp.get_name_leafdata());
    if (fis_issu_error_ts.is_set || is_set(fis_issu_error_ts.yfilter)) leaf_name_data.push_back(fis_issu_error_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fis-proto-state")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState>();
        c->parent = this;
        fis_proto_state.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : fis_proto_state.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "imdr-support")
    {
        imdr_support = value;
        imdr_support.value_namespace = name_space;
        imdr_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "slc-support")
    {
        slc_support = value;
        slc_support.value_namespace = name_space;
        slc_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fis-issu-restart")
    {
        fis_issu_restart = value;
        fis_issu_restart.value_namespace = name_space;
        fis_issu_restart.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "imdr-eoc-implicit")
    {
        imdr_eoc_implicit = value;
        imdr_eoc_implicit.value_namespace = name_space;
        imdr_eoc_implicit.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "slc-eoc-implicit")
    {
        slc_eoc_implicit = value;
        slc_eoc_implicit.value_namespace = name_space;
        slc_eoc_implicit.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eoc-received-imdr-time-stamp")
    {
        eoc_received_imdr_time_stamp = value;
        eoc_received_imdr_time_stamp.value_namespace = name_space;
        eoc_received_imdr_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eoc-received-slc-time-stamp")
    {
        eoc_received_slc_time_stamp = value;
        eoc_received_slc_time_stamp.value_namespace = name_space;
        eoc_received_slc_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eod-received-im-time-stamp")
    {
        eod_received_im_time_stamp = value;
        eod_received_im_time_stamp.value_namespace = name_space;
        eod_received_im_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eod-sent-imdr-time-stamp")
    {
        eod_sent_imdr_time_stamp = value;
        eod_sent_imdr_time_stamp.value_namespace = name_space;
        eod_sent_imdr_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eod-sent-slc-time-stamp")
    {
        eod_sent_slc_time_stamp = value;
        eod_sent_slc_time_stamp.value_namespace = name_space;
        eod_sent_slc_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fis-issu-error-ts")
    {
        fis_issu_error_ts = value;
        fis_issu_error_ts.value_namespace = name_space;
        fis_issu_error_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "imdr-support")
    {
        imdr_support.yfilter = yfilter;
    }
    if(value_path == "slc-support")
    {
        slc_support.yfilter = yfilter;
    }
    if(value_path == "fis-issu-restart")
    {
        fis_issu_restart.yfilter = yfilter;
    }
    if(value_path == "imdr-eoc-implicit")
    {
        imdr_eoc_implicit.yfilter = yfilter;
    }
    if(value_path == "slc-eoc-implicit")
    {
        slc_eoc_implicit.yfilter = yfilter;
    }
    if(value_path == "eoc-received-imdr-time-stamp")
    {
        eoc_received_imdr_time_stamp.yfilter = yfilter;
    }
    if(value_path == "eoc-received-slc-time-stamp")
    {
        eoc_received_slc_time_stamp.yfilter = yfilter;
    }
    if(value_path == "eod-received-im-time-stamp")
    {
        eod_received_im_time_stamp.yfilter = yfilter;
    }
    if(value_path == "eod-sent-imdr-time-stamp")
    {
        eod_sent_imdr_time_stamp.yfilter = yfilter;
    }
    if(value_path == "eod-sent-slc-time-stamp")
    {
        eod_sent_slc_time_stamp.yfilter = yfilter;
    }
    if(value_path == "fis-issu-error-ts")
    {
        fis_issu_error_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fis-proto-state" || name == "imdr-support" || name == "slc-support" || name == "fis-issu-restart" || name == "imdr-eoc-implicit" || name == "slc-eoc-implicit" || name == "eoc-received-imdr-time-stamp" || name == "eoc-received-slc-time-stamp" || name == "eod-received-im-time-stamp" || name == "eod-sent-imdr-time-stamp" || name == "eod-sent-slc-time-stamp" || name == "fis-issu-error-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState::FisProtoState()
    :
    protocol_name{YType::str, "protocol-name"},
    aib_eod_time_stamp{YType::str, "aib-eod-time-stamp"},
    rsi_eod_valid{YType::boolean, "rsi-eod-valid"},
    rsi_eod_time_stamp{YType::str, "rsi-eod-time-stamp"},
    lsd_eod_valid{YType::boolean, "lsd-eod-valid"},
    lsd_eod_time_stamp{YType::str, "lsd-eod-time-stamp"},
    lmrib_eod_valid{YType::boolean, "lmrib-eod-valid"},
    lmrib_eod_time_stamp{YType::str, "lmrib-eod-time-stamp"},
    rib_info_valid{YType::boolean, "rib-info-valid"},
    bcdl_tables{YType::uint32, "bcdl-tables"},
    converged_tables{YType::uint32, "converged-tables"},
    rib_tables_converged_time_stamp{YType::str, "rib-tables-converged-time-stamp"},
    protocol_eod_valid{YType::boolean, "protocol-eod-valid"},
    protocol_eod_time_stamp{YType::str, "protocol-eod-time-stamp"}
{

    yang_name = "fis-proto-state"; yang_parent_name = "mi-issu-state"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState::~FisProtoState()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState::has_data() const
{
    if (is_presence_container) return true;
    return protocol_name.is_set
	|| aib_eod_time_stamp.is_set
	|| rsi_eod_valid.is_set
	|| rsi_eod_time_stamp.is_set
	|| lsd_eod_valid.is_set
	|| lsd_eod_time_stamp.is_set
	|| lmrib_eod_valid.is_set
	|| lmrib_eod_time_stamp.is_set
	|| rib_info_valid.is_set
	|| bcdl_tables.is_set
	|| converged_tables.is_set
	|| rib_tables_converged_time_stamp.is_set
	|| protocol_eod_valid.is_set
	|| protocol_eod_time_stamp.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(protocol_name.yfilter)
	|| ydk::is_set(aib_eod_time_stamp.yfilter)
	|| ydk::is_set(rsi_eod_valid.yfilter)
	|| ydk::is_set(rsi_eod_time_stamp.yfilter)
	|| ydk::is_set(lsd_eod_valid.yfilter)
	|| ydk::is_set(lsd_eod_time_stamp.yfilter)
	|| ydk::is_set(lmrib_eod_valid.yfilter)
	|| ydk::is_set(lmrib_eod_time_stamp.yfilter)
	|| ydk::is_set(rib_info_valid.yfilter)
	|| ydk::is_set(bcdl_tables.yfilter)
	|| ydk::is_set(converged_tables.yfilter)
	|| ydk::is_set(rib_tables_converged_time_stamp.yfilter)
	|| ydk::is_set(protocol_eod_valid.yfilter)
	|| ydk::is_set(protocol_eod_time_stamp.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fis-proto-state";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (protocol_name.is_set || is_set(protocol_name.yfilter)) leaf_name_data.push_back(protocol_name.get_name_leafdata());
    if (aib_eod_time_stamp.is_set || is_set(aib_eod_time_stamp.yfilter)) leaf_name_data.push_back(aib_eod_time_stamp.get_name_leafdata());
    if (rsi_eod_valid.is_set || is_set(rsi_eod_valid.yfilter)) leaf_name_data.push_back(rsi_eod_valid.get_name_leafdata());
    if (rsi_eod_time_stamp.is_set || is_set(rsi_eod_time_stamp.yfilter)) leaf_name_data.push_back(rsi_eod_time_stamp.get_name_leafdata());
    if (lsd_eod_valid.is_set || is_set(lsd_eod_valid.yfilter)) leaf_name_data.push_back(lsd_eod_valid.get_name_leafdata());
    if (lsd_eod_time_stamp.is_set || is_set(lsd_eod_time_stamp.yfilter)) leaf_name_data.push_back(lsd_eod_time_stamp.get_name_leafdata());
    if (lmrib_eod_valid.is_set || is_set(lmrib_eod_valid.yfilter)) leaf_name_data.push_back(lmrib_eod_valid.get_name_leafdata());
    if (lmrib_eod_time_stamp.is_set || is_set(lmrib_eod_time_stamp.yfilter)) leaf_name_data.push_back(lmrib_eod_time_stamp.get_name_leafdata());
    if (rib_info_valid.is_set || is_set(rib_info_valid.yfilter)) leaf_name_data.push_back(rib_info_valid.get_name_leafdata());
    if (bcdl_tables.is_set || is_set(bcdl_tables.yfilter)) leaf_name_data.push_back(bcdl_tables.get_name_leafdata());
    if (converged_tables.is_set || is_set(converged_tables.yfilter)) leaf_name_data.push_back(converged_tables.get_name_leafdata());
    if (rib_tables_converged_time_stamp.is_set || is_set(rib_tables_converged_time_stamp.yfilter)) leaf_name_data.push_back(rib_tables_converged_time_stamp.get_name_leafdata());
    if (protocol_eod_valid.is_set || is_set(protocol_eod_valid.yfilter)) leaf_name_data.push_back(protocol_eod_valid.get_name_leafdata());
    if (protocol_eod_time_stamp.is_set || is_set(protocol_eod_time_stamp.yfilter)) leaf_name_data.push_back(protocol_eod_time_stamp.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "protocol-name")
    {
        protocol_name = value;
        protocol_name.value_namespace = name_space;
        protocol_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aib-eod-time-stamp")
    {
        aib_eod_time_stamp = value;
        aib_eod_time_stamp.value_namespace = name_space;
        aib_eod_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rsi-eod-valid")
    {
        rsi_eod_valid = value;
        rsi_eod_valid.value_namespace = name_space;
        rsi_eod_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rsi-eod-time-stamp")
    {
        rsi_eod_time_stamp = value;
        rsi_eod_time_stamp.value_namespace = name_space;
        rsi_eod_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lsd-eod-valid")
    {
        lsd_eod_valid = value;
        lsd_eod_valid.value_namespace = name_space;
        lsd_eod_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lsd-eod-time-stamp")
    {
        lsd_eod_time_stamp = value;
        lsd_eod_time_stamp.value_namespace = name_space;
        lsd_eod_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lmrib-eod-valid")
    {
        lmrib_eod_valid = value;
        lmrib_eod_valid.value_namespace = name_space;
        lmrib_eod_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lmrib-eod-time-stamp")
    {
        lmrib_eod_time_stamp = value;
        lmrib_eod_time_stamp.value_namespace = name_space;
        lmrib_eod_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rib-info-valid")
    {
        rib_info_valid = value;
        rib_info_valid.value_namespace = name_space;
        rib_info_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bcdl-tables")
    {
        bcdl_tables = value;
        bcdl_tables.value_namespace = name_space;
        bcdl_tables.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "converged-tables")
    {
        converged_tables = value;
        converged_tables.value_namespace = name_space;
        converged_tables.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rib-tables-converged-time-stamp")
    {
        rib_tables_converged_time_stamp = value;
        rib_tables_converged_time_stamp.value_namespace = name_space;
        rib_tables_converged_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protocol-eod-valid")
    {
        protocol_eod_valid = value;
        protocol_eod_valid.value_namespace = name_space;
        protocol_eod_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protocol-eod-time-stamp")
    {
        protocol_eod_time_stamp = value;
        protocol_eod_time_stamp.value_namespace = name_space;
        protocol_eod_time_stamp.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "protocol-name")
    {
        protocol_name.yfilter = yfilter;
    }
    if(value_path == "aib-eod-time-stamp")
    {
        aib_eod_time_stamp.yfilter = yfilter;
    }
    if(value_path == "rsi-eod-valid")
    {
        rsi_eod_valid.yfilter = yfilter;
    }
    if(value_path == "rsi-eod-time-stamp")
    {
        rsi_eod_time_stamp.yfilter = yfilter;
    }
    if(value_path == "lsd-eod-valid")
    {
        lsd_eod_valid.yfilter = yfilter;
    }
    if(value_path == "lsd-eod-time-stamp")
    {
        lsd_eod_time_stamp.yfilter = yfilter;
    }
    if(value_path == "lmrib-eod-valid")
    {
        lmrib_eod_valid.yfilter = yfilter;
    }
    if(value_path == "lmrib-eod-time-stamp")
    {
        lmrib_eod_time_stamp.yfilter = yfilter;
    }
    if(value_path == "rib-info-valid")
    {
        rib_info_valid.yfilter = yfilter;
    }
    if(value_path == "bcdl-tables")
    {
        bcdl_tables.yfilter = yfilter;
    }
    if(value_path == "converged-tables")
    {
        converged_tables.yfilter = yfilter;
    }
    if(value_path == "rib-tables-converged-time-stamp")
    {
        rib_tables_converged_time_stamp.yfilter = yfilter;
    }
    if(value_path == "protocol-eod-valid")
    {
        protocol_eod_valid.yfilter = yfilter;
    }
    if(value_path == "protocol-eod-time-stamp")
    {
        protocol_eod_time_stamp.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIssuState::FisProtoState::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "protocol-name" || name == "aib-eod-time-stamp" || name == "rsi-eod-valid" || name == "rsi-eod-time-stamp" || name == "lsd-eod-valid" || name == "lsd-eod-time-stamp" || name == "lmrib-eod-valid" || name == "lmrib-eod-time-stamp" || name == "rib-info-valid" || name == "bcdl-tables" || name == "converged-tables" || name == "rib-tables-converged-time-stamp" || name == "protocol-eod-valid" || name == "protocol-eod-time-stamp")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::MiPlatCapabilities()
    :
    fpc_num_l3_lbl_levels{YType::uint8, "fpc-num-l3-lbl-levels"},
    fpc_num_l3_lbl_paths{YType::uint8, "fpc-num-l3-lbl-paths"},
    fpc_num_l3_lbl_rec_paths{YType::uint8, "fpc-num-l3-lbl-rec-paths"},
    fpc_num_l3_ucmp_paths{YType::uint8, "fpc-num-l3-ucmp-paths"},
    fpc_num_fwding_stages{YType::uint8, "fpc-num-fwding-stages"},
    fpc_local_label_split{YType::uint32, "fpc-local-label-split"},
    fpc_stats_support{YType::boolean, "fpc-stats-support"},
    fpc_platf_ready_cb_wait{YType::boolean, "fpc-platf-ready-cb-wait"},
    fpc_num_paths_per_pbts_class{YType::uint8, "fpc-num-paths-per-pbts-class"},
    fpc_platf_v4_upd_disable{YType::boolean, "fpc-platf-v4-upd-disable"},
    fpc_platf_v6_upd_disable{YType::boolean, "fpc-platf-v6-upd-disable"},
    fpc_lba_tuples_default{YType::uint32, "fpc-lba-tuples-default"},
    fpc_mraps_support{YType::boolean, "fpc-mraps-support"},
    fpc_pbts_defclass_support{YType::boolean, "fpc-pbts-defclass-support"},
    fpc_loadinfo_filter_support{YType::boolean, "fpc-loadinfo-filter-support"},
    fpc_nhid{YType::boolean, "fpc-nhid"},
    fpc_platf_temp_back_walk_reqd{YType::boolean, "fpc-platf-temp-back-walk-reqd"},
    fpc_link_mpls_nhinfo_in_ipv6_thread_support{YType::boolean, "fpc-link-mpls-nhinfo-in-ipv6-thread-support"},
    fpc_exclude_deag_bkup{YType::boolean, "fpc-exclude-deag-bkup"},
    fpc_dlb_support{YType::boolean, "fpc-dlb-support"},
    fpc_prefix_filter_support{YType::uint8, "fpc-prefix-filter-support"},
    fpc_slowpath_ingress_inject_reqd{YType::boolean, "fpc-slowpath-ingress-inject-reqd"},
    fpc_cofo_support{YType::boolean, "fpc-cofo-support"},
    fpc_srv6_support{YType::boolean, "fpc-srv6-support"},
    fpc_v4v6_ldi_collapse_support{YType::boolean, "fpc-v4v6-ldi-collapse-support"}
        ,
    fpc_lisp_decap_over_v4(this, {})
    , fpc_lisp_decap_over_v6(this, {})
    , fpc_lisp_ucmp(this, {})
    , fpc_resolve_via_table(this, {})
{

    yang_name = "mi-plat-capabilities"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::~MiPlatCapabilities()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fpc_lisp_decap_over_v4.len(); index++)
    {
        if(fpc_lisp_decap_over_v4[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<fpc_lisp_decap_over_v6.len(); index++)
    {
        if(fpc_lisp_decap_over_v6[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<fpc_lisp_ucmp.len(); index++)
    {
        if(fpc_lisp_ucmp[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<fpc_resolve_via_table.len(); index++)
    {
        if(fpc_resolve_via_table[index]->has_data())
            return true;
    }
    return fpc_num_l3_lbl_levels.is_set
	|| fpc_num_l3_lbl_paths.is_set
	|| fpc_num_l3_lbl_rec_paths.is_set
	|| fpc_num_l3_ucmp_paths.is_set
	|| fpc_num_fwding_stages.is_set
	|| fpc_local_label_split.is_set
	|| fpc_stats_support.is_set
	|| fpc_platf_ready_cb_wait.is_set
	|| fpc_num_paths_per_pbts_class.is_set
	|| fpc_platf_v4_upd_disable.is_set
	|| fpc_platf_v6_upd_disable.is_set
	|| fpc_lba_tuples_default.is_set
	|| fpc_mraps_support.is_set
	|| fpc_pbts_defclass_support.is_set
	|| fpc_loadinfo_filter_support.is_set
	|| fpc_nhid.is_set
	|| fpc_platf_temp_back_walk_reqd.is_set
	|| fpc_link_mpls_nhinfo_in_ipv6_thread_support.is_set
	|| fpc_exclude_deag_bkup.is_set
	|| fpc_dlb_support.is_set
	|| fpc_prefix_filter_support.is_set
	|| fpc_slowpath_ingress_inject_reqd.is_set
	|| fpc_cofo_support.is_set
	|| fpc_srv6_support.is_set
	|| fpc_v4v6_ldi_collapse_support.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::has_operation() const
{
    for (std::size_t index=0; index<fpc_lisp_decap_over_v4.len(); index++)
    {
        if(fpc_lisp_decap_over_v4[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<fpc_lisp_decap_over_v6.len(); index++)
    {
        if(fpc_lisp_decap_over_v6[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<fpc_lisp_ucmp.len(); index++)
    {
        if(fpc_lisp_ucmp[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<fpc_resolve_via_table.len(); index++)
    {
        if(fpc_resolve_via_table[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(fpc_num_l3_lbl_levels.yfilter)
	|| ydk::is_set(fpc_num_l3_lbl_paths.yfilter)
	|| ydk::is_set(fpc_num_l3_lbl_rec_paths.yfilter)
	|| ydk::is_set(fpc_num_l3_ucmp_paths.yfilter)
	|| ydk::is_set(fpc_num_fwding_stages.yfilter)
	|| ydk::is_set(fpc_local_label_split.yfilter)
	|| ydk::is_set(fpc_stats_support.yfilter)
	|| ydk::is_set(fpc_platf_ready_cb_wait.yfilter)
	|| ydk::is_set(fpc_num_paths_per_pbts_class.yfilter)
	|| ydk::is_set(fpc_platf_v4_upd_disable.yfilter)
	|| ydk::is_set(fpc_platf_v6_upd_disable.yfilter)
	|| ydk::is_set(fpc_lba_tuples_default.yfilter)
	|| ydk::is_set(fpc_mraps_support.yfilter)
	|| ydk::is_set(fpc_pbts_defclass_support.yfilter)
	|| ydk::is_set(fpc_loadinfo_filter_support.yfilter)
	|| ydk::is_set(fpc_nhid.yfilter)
	|| ydk::is_set(fpc_platf_temp_back_walk_reqd.yfilter)
	|| ydk::is_set(fpc_link_mpls_nhinfo_in_ipv6_thread_support.yfilter)
	|| ydk::is_set(fpc_exclude_deag_bkup.yfilter)
	|| ydk::is_set(fpc_dlb_support.yfilter)
	|| ydk::is_set(fpc_prefix_filter_support.yfilter)
	|| ydk::is_set(fpc_slowpath_ingress_inject_reqd.yfilter)
	|| ydk::is_set(fpc_cofo_support.yfilter)
	|| ydk::is_set(fpc_srv6_support.yfilter)
	|| ydk::is_set(fpc_v4v6_ldi_collapse_support.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-plat-capabilities";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (fpc_num_l3_lbl_levels.is_set || is_set(fpc_num_l3_lbl_levels.yfilter)) leaf_name_data.push_back(fpc_num_l3_lbl_levels.get_name_leafdata());
    if (fpc_num_l3_lbl_paths.is_set || is_set(fpc_num_l3_lbl_paths.yfilter)) leaf_name_data.push_back(fpc_num_l3_lbl_paths.get_name_leafdata());
    if (fpc_num_l3_lbl_rec_paths.is_set || is_set(fpc_num_l3_lbl_rec_paths.yfilter)) leaf_name_data.push_back(fpc_num_l3_lbl_rec_paths.get_name_leafdata());
    if (fpc_num_l3_ucmp_paths.is_set || is_set(fpc_num_l3_ucmp_paths.yfilter)) leaf_name_data.push_back(fpc_num_l3_ucmp_paths.get_name_leafdata());
    if (fpc_num_fwding_stages.is_set || is_set(fpc_num_fwding_stages.yfilter)) leaf_name_data.push_back(fpc_num_fwding_stages.get_name_leafdata());
    if (fpc_local_label_split.is_set || is_set(fpc_local_label_split.yfilter)) leaf_name_data.push_back(fpc_local_label_split.get_name_leafdata());
    if (fpc_stats_support.is_set || is_set(fpc_stats_support.yfilter)) leaf_name_data.push_back(fpc_stats_support.get_name_leafdata());
    if (fpc_platf_ready_cb_wait.is_set || is_set(fpc_platf_ready_cb_wait.yfilter)) leaf_name_data.push_back(fpc_platf_ready_cb_wait.get_name_leafdata());
    if (fpc_num_paths_per_pbts_class.is_set || is_set(fpc_num_paths_per_pbts_class.yfilter)) leaf_name_data.push_back(fpc_num_paths_per_pbts_class.get_name_leafdata());
    if (fpc_platf_v4_upd_disable.is_set || is_set(fpc_platf_v4_upd_disable.yfilter)) leaf_name_data.push_back(fpc_platf_v4_upd_disable.get_name_leafdata());
    if (fpc_platf_v6_upd_disable.is_set || is_set(fpc_platf_v6_upd_disable.yfilter)) leaf_name_data.push_back(fpc_platf_v6_upd_disable.get_name_leafdata());
    if (fpc_lba_tuples_default.is_set || is_set(fpc_lba_tuples_default.yfilter)) leaf_name_data.push_back(fpc_lba_tuples_default.get_name_leafdata());
    if (fpc_mraps_support.is_set || is_set(fpc_mraps_support.yfilter)) leaf_name_data.push_back(fpc_mraps_support.get_name_leafdata());
    if (fpc_pbts_defclass_support.is_set || is_set(fpc_pbts_defclass_support.yfilter)) leaf_name_data.push_back(fpc_pbts_defclass_support.get_name_leafdata());
    if (fpc_loadinfo_filter_support.is_set || is_set(fpc_loadinfo_filter_support.yfilter)) leaf_name_data.push_back(fpc_loadinfo_filter_support.get_name_leafdata());
    if (fpc_nhid.is_set || is_set(fpc_nhid.yfilter)) leaf_name_data.push_back(fpc_nhid.get_name_leafdata());
    if (fpc_platf_temp_back_walk_reqd.is_set || is_set(fpc_platf_temp_back_walk_reqd.yfilter)) leaf_name_data.push_back(fpc_platf_temp_back_walk_reqd.get_name_leafdata());
    if (fpc_link_mpls_nhinfo_in_ipv6_thread_support.is_set || is_set(fpc_link_mpls_nhinfo_in_ipv6_thread_support.yfilter)) leaf_name_data.push_back(fpc_link_mpls_nhinfo_in_ipv6_thread_support.get_name_leafdata());
    if (fpc_exclude_deag_bkup.is_set || is_set(fpc_exclude_deag_bkup.yfilter)) leaf_name_data.push_back(fpc_exclude_deag_bkup.get_name_leafdata());
    if (fpc_dlb_support.is_set || is_set(fpc_dlb_support.yfilter)) leaf_name_data.push_back(fpc_dlb_support.get_name_leafdata());
    if (fpc_prefix_filter_support.is_set || is_set(fpc_prefix_filter_support.yfilter)) leaf_name_data.push_back(fpc_prefix_filter_support.get_name_leafdata());
    if (fpc_slowpath_ingress_inject_reqd.is_set || is_set(fpc_slowpath_ingress_inject_reqd.yfilter)) leaf_name_data.push_back(fpc_slowpath_ingress_inject_reqd.get_name_leafdata());
    if (fpc_cofo_support.is_set || is_set(fpc_cofo_support.yfilter)) leaf_name_data.push_back(fpc_cofo_support.get_name_leafdata());
    if (fpc_srv6_support.is_set || is_set(fpc_srv6_support.yfilter)) leaf_name_data.push_back(fpc_srv6_support.get_name_leafdata());
    if (fpc_v4v6_ldi_collapse_support.is_set || is_set(fpc_v4v6_ldi_collapse_support.yfilter)) leaf_name_data.push_back(fpc_v4v6_ldi_collapse_support.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fpc-lisp-decap-over-v4")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4>();
        c->parent = this;
        fpc_lisp_decap_over_v4.append(c);
        return c;
    }

    if(child_yang_name == "fpc-lisp-decap-over-v6")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6>();
        c->parent = this;
        fpc_lisp_decap_over_v6.append(c);
        return c;
    }

    if(child_yang_name == "fpc-lisp-ucmp")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp>();
        c->parent = this;
        fpc_lisp_ucmp.append(c);
        return c;
    }

    if(child_yang_name == "fpc-resolve-via-table")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable>();
        c->parent = this;
        fpc_resolve_via_table.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : fpc_lisp_decap_over_v4.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : fpc_lisp_decap_over_v6.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : fpc_lisp_ucmp.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : fpc_resolve_via_table.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "fpc-num-l3-lbl-levels")
    {
        fpc_num_l3_lbl_levels = value;
        fpc_num_l3_lbl_levels.value_namespace = name_space;
        fpc_num_l3_lbl_levels.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-num-l3-lbl-paths")
    {
        fpc_num_l3_lbl_paths = value;
        fpc_num_l3_lbl_paths.value_namespace = name_space;
        fpc_num_l3_lbl_paths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-num-l3-lbl-rec-paths")
    {
        fpc_num_l3_lbl_rec_paths = value;
        fpc_num_l3_lbl_rec_paths.value_namespace = name_space;
        fpc_num_l3_lbl_rec_paths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-num-l3-ucmp-paths")
    {
        fpc_num_l3_ucmp_paths = value;
        fpc_num_l3_ucmp_paths.value_namespace = name_space;
        fpc_num_l3_ucmp_paths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-num-fwding-stages")
    {
        fpc_num_fwding_stages = value;
        fpc_num_fwding_stages.value_namespace = name_space;
        fpc_num_fwding_stages.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-local-label-split")
    {
        fpc_local_label_split = value;
        fpc_local_label_split.value_namespace = name_space;
        fpc_local_label_split.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-stats-support")
    {
        fpc_stats_support = value;
        fpc_stats_support.value_namespace = name_space;
        fpc_stats_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-platf-ready-cb-wait")
    {
        fpc_platf_ready_cb_wait = value;
        fpc_platf_ready_cb_wait.value_namespace = name_space;
        fpc_platf_ready_cb_wait.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-num-paths-per-pbts-class")
    {
        fpc_num_paths_per_pbts_class = value;
        fpc_num_paths_per_pbts_class.value_namespace = name_space;
        fpc_num_paths_per_pbts_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-platf-v4-upd-disable")
    {
        fpc_platf_v4_upd_disable = value;
        fpc_platf_v4_upd_disable.value_namespace = name_space;
        fpc_platf_v4_upd_disable.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-platf-v6-upd-disable")
    {
        fpc_platf_v6_upd_disable = value;
        fpc_platf_v6_upd_disable.value_namespace = name_space;
        fpc_platf_v6_upd_disable.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-lba-tuples-default")
    {
        fpc_lba_tuples_default = value;
        fpc_lba_tuples_default.value_namespace = name_space;
        fpc_lba_tuples_default.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-mraps-support")
    {
        fpc_mraps_support = value;
        fpc_mraps_support.value_namespace = name_space;
        fpc_mraps_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-pbts-defclass-support")
    {
        fpc_pbts_defclass_support = value;
        fpc_pbts_defclass_support.value_namespace = name_space;
        fpc_pbts_defclass_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-loadinfo-filter-support")
    {
        fpc_loadinfo_filter_support = value;
        fpc_loadinfo_filter_support.value_namespace = name_space;
        fpc_loadinfo_filter_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-nhid")
    {
        fpc_nhid = value;
        fpc_nhid.value_namespace = name_space;
        fpc_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-platf-temp-back-walk-reqd")
    {
        fpc_platf_temp_back_walk_reqd = value;
        fpc_platf_temp_back_walk_reqd.value_namespace = name_space;
        fpc_platf_temp_back_walk_reqd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-link-mpls-nhinfo-in-ipv6-thread-support")
    {
        fpc_link_mpls_nhinfo_in_ipv6_thread_support = value;
        fpc_link_mpls_nhinfo_in_ipv6_thread_support.value_namespace = name_space;
        fpc_link_mpls_nhinfo_in_ipv6_thread_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-exclude-deag-bkup")
    {
        fpc_exclude_deag_bkup = value;
        fpc_exclude_deag_bkup.value_namespace = name_space;
        fpc_exclude_deag_bkup.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-dlb-support")
    {
        fpc_dlb_support = value;
        fpc_dlb_support.value_namespace = name_space;
        fpc_dlb_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-prefix-filter-support")
    {
        fpc_prefix_filter_support = value;
        fpc_prefix_filter_support.value_namespace = name_space;
        fpc_prefix_filter_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-slowpath-ingress-inject-reqd")
    {
        fpc_slowpath_ingress_inject_reqd = value;
        fpc_slowpath_ingress_inject_reqd.value_namespace = name_space;
        fpc_slowpath_ingress_inject_reqd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-cofo-support")
    {
        fpc_cofo_support = value;
        fpc_cofo_support.value_namespace = name_space;
        fpc_cofo_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-srv6-support")
    {
        fpc_srv6_support = value;
        fpc_srv6_support.value_namespace = name_space;
        fpc_srv6_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpc-v4v6-ldi-collapse-support")
    {
        fpc_v4v6_ldi_collapse_support = value;
        fpc_v4v6_ldi_collapse_support.value_namespace = name_space;
        fpc_v4v6_ldi_collapse_support.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "fpc-num-l3-lbl-levels")
    {
        fpc_num_l3_lbl_levels.yfilter = yfilter;
    }
    if(value_path == "fpc-num-l3-lbl-paths")
    {
        fpc_num_l3_lbl_paths.yfilter = yfilter;
    }
    if(value_path == "fpc-num-l3-lbl-rec-paths")
    {
        fpc_num_l3_lbl_rec_paths.yfilter = yfilter;
    }
    if(value_path == "fpc-num-l3-ucmp-paths")
    {
        fpc_num_l3_ucmp_paths.yfilter = yfilter;
    }
    if(value_path == "fpc-num-fwding-stages")
    {
        fpc_num_fwding_stages.yfilter = yfilter;
    }
    if(value_path == "fpc-local-label-split")
    {
        fpc_local_label_split.yfilter = yfilter;
    }
    if(value_path == "fpc-stats-support")
    {
        fpc_stats_support.yfilter = yfilter;
    }
    if(value_path == "fpc-platf-ready-cb-wait")
    {
        fpc_platf_ready_cb_wait.yfilter = yfilter;
    }
    if(value_path == "fpc-num-paths-per-pbts-class")
    {
        fpc_num_paths_per_pbts_class.yfilter = yfilter;
    }
    if(value_path == "fpc-platf-v4-upd-disable")
    {
        fpc_platf_v4_upd_disable.yfilter = yfilter;
    }
    if(value_path == "fpc-platf-v6-upd-disable")
    {
        fpc_platf_v6_upd_disable.yfilter = yfilter;
    }
    if(value_path == "fpc-lba-tuples-default")
    {
        fpc_lba_tuples_default.yfilter = yfilter;
    }
    if(value_path == "fpc-mraps-support")
    {
        fpc_mraps_support.yfilter = yfilter;
    }
    if(value_path == "fpc-pbts-defclass-support")
    {
        fpc_pbts_defclass_support.yfilter = yfilter;
    }
    if(value_path == "fpc-loadinfo-filter-support")
    {
        fpc_loadinfo_filter_support.yfilter = yfilter;
    }
    if(value_path == "fpc-nhid")
    {
        fpc_nhid.yfilter = yfilter;
    }
    if(value_path == "fpc-platf-temp-back-walk-reqd")
    {
        fpc_platf_temp_back_walk_reqd.yfilter = yfilter;
    }
    if(value_path == "fpc-link-mpls-nhinfo-in-ipv6-thread-support")
    {
        fpc_link_mpls_nhinfo_in_ipv6_thread_support.yfilter = yfilter;
    }
    if(value_path == "fpc-exclude-deag-bkup")
    {
        fpc_exclude_deag_bkup.yfilter = yfilter;
    }
    if(value_path == "fpc-dlb-support")
    {
        fpc_dlb_support.yfilter = yfilter;
    }
    if(value_path == "fpc-prefix-filter-support")
    {
        fpc_prefix_filter_support.yfilter = yfilter;
    }
    if(value_path == "fpc-slowpath-ingress-inject-reqd")
    {
        fpc_slowpath_ingress_inject_reqd.yfilter = yfilter;
    }
    if(value_path == "fpc-cofo-support")
    {
        fpc_cofo_support.yfilter = yfilter;
    }
    if(value_path == "fpc-srv6-support")
    {
        fpc_srv6_support.yfilter = yfilter;
    }
    if(value_path == "fpc-v4v6-ldi-collapse-support")
    {
        fpc_v4v6_ldi_collapse_support.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fpc-lisp-decap-over-v4" || name == "fpc-lisp-decap-over-v6" || name == "fpc-lisp-ucmp" || name == "fpc-resolve-via-table" || name == "fpc-num-l3-lbl-levels" || name == "fpc-num-l3-lbl-paths" || name == "fpc-num-l3-lbl-rec-paths" || name == "fpc-num-l3-ucmp-paths" || name == "fpc-num-fwding-stages" || name == "fpc-local-label-split" || name == "fpc-stats-support" || name == "fpc-platf-ready-cb-wait" || name == "fpc-num-paths-per-pbts-class" || name == "fpc-platf-v4-upd-disable" || name == "fpc-platf-v6-upd-disable" || name == "fpc-lba-tuples-default" || name == "fpc-mraps-support" || name == "fpc-pbts-defclass-support" || name == "fpc-loadinfo-filter-support" || name == "fpc-nhid" || name == "fpc-platf-temp-back-walk-reqd" || name == "fpc-link-mpls-nhinfo-in-ipv6-thread-support" || name == "fpc-exclude-deag-bkup" || name == "fpc-dlb-support" || name == "fpc-prefix-filter-support" || name == "fpc-slowpath-ingress-inject-reqd" || name == "fpc-cofo-support" || name == "fpc-srv6-support" || name == "fpc-v4v6-ldi-collapse-support")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4::FpcLispDecapOverV4()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "fpc-lisp-decap-over-v4"; yang_parent_name = "mi-plat-capabilities"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4::~FpcLispDecapOverV4()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fpc-lisp-decap-over-v4";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV4::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6::FpcLispDecapOverV6()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "fpc-lisp-decap-over-v6"; yang_parent_name = "mi-plat-capabilities"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6::~FpcLispDecapOverV6()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fpc-lisp-decap-over-v6";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispDecapOverV6::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp::FpcLispUcmp()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "fpc-lisp-ucmp"; yang_parent_name = "mi-plat-capabilities"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp::~FpcLispUcmp()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fpc-lisp-ucmp";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcLispUcmp::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable::FpcResolveViaTable()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "fpc-resolve-via-table"; yang_parent_name = "mi-plat-capabilities"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable::~FpcResolveViaTable()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fpc-resolve-via-table";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiPlatCapabilities::FpcResolveViaTable::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount::MiIdbExtCleanupFailedCount()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "mi-idb-ext-cleanup-failed-count"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount::~MiIdbExtCleanupFailedCount()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-idb-ext-cleanup-failed-count";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbExtCleanupFailedCount::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail::MiLrpfStatsFail()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "mi-lrpf-stats-fail"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail::~MiLrpfStatsFail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-lrpf-stats-fail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsFail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct::MiLrpfStatsAct()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "mi-lrpf-stats-act"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct::~MiLrpfStatsAct()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-lrpf-stats-act";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfStatsAct::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum::MiLrpfNum()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "mi-lrpf-num"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum::~MiLrpfNum()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-lrpf-num";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiLrpfNum::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum::MiIdbLsecEnabledNum()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "mi-idb-lsec-enabled-num"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum::~MiIdbLsecEnabledNum()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-idb-lsec-enabled-num";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbLsecEnabledNum::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid::MiNumLispEid()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "mi-num-lisp-eid"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid::~MiNumLispEid()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-num-lisp-eid";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispEid::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid::MiNumLispValidEid()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "mi-num-lisp-valid-eid"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid::~MiNumLispValidEid()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-num-lisp-valid-eid";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiNumLispValidEid::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode::MiCpulessNode()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "mi-cpuless-node"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode::~MiCpulessNode()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-cpuless-node";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiCpulessNode::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::MiProtoDbgStat()
    :
    fpd_gbltbl_entries{YType::uint64, "fpd-gbltbl-entries"},
    fpd_gbltbl_rej_entries{YType::uint64, "fpd-gbltbl-rej-entries"},
    fpd_vrftbl_entries{YType::uint64, "fpd-vrftbl-entries"},
    fpd_vrftbl_rej_entries{YType::uint64, "fpd-vrftbl-rej-entries"},
    fpd_num_tbls{YType::uint32, "fpd-num-tbls"},
    fpd_bcdl_msgs{YType::uint64, "fpd-bcdl-msgs"},
    fpd_route_upd{YType::uint64, "fpd-route-upd"},
    fpd_route_del{YType::uint64, "fpd-route-del"},
    fpd_route_rcv{YType::uint64, "fpd-route-rcv"},
    fpd_route_drops{YType::uint64, "fpd-route-drops"},
    fpd_lbl_recycled{YType::uint64, "fpd-lbl-recycled"},
    fpd_version_mismatch_drops{YType::uint64, "fpd-version-mismatch-drops"},
    fpd_adj_upd{YType::uint64, "fpd-adj-upd"},
    fpd_adj_del{YType::uint64, "fpd-adj-del"},
    fpd_adj_upd_tx{YType::uint64, "fpd-adj-upd-tx"},
    fpd_adj_upd_tx_nh_found{YType::uint64, "fpd-adj-upd-tx-nh-found"},
    fpd_adj_upd_tx_retry_created{YType::uint64, "fpd-adj-upd-tx-retry-created"},
    fpd_adj_tx_retry_nh_found{YType::uint64, "fpd-adj-tx-retry-nh-found"},
    fpd_adj_tx_retry_obj_reinit{YType::uint64, "fpd-adj-tx-retry-obj-reinit"},
    fpd_adj_drops{YType::uint64, "fpd-adj-drops"},
    fpd_adj_msg{YType::uint64, "fpd-adj-msg"},
    fpd_te_rcv{YType::uint64, "fpd-te-rcv"},
    fpd_te_version_mismatch_drops{YType::uint64, "fpd-te-version-mismatch-drops"},
    fpd_num_retry_touts{YType::uint64, "fpd-num-retry-touts"},
    fpd_ldi_num_fixedup{YType::uint64, "fpd-ldi-num-fixedup"},
    fpd_ldi_num_correct_fixup{YType::uint64, "fpd-ldi-num-correct-fixup"},
    fpd_pl_num_queued_fixedup{YType::uint64, "fpd-pl-num-queued-fixedup"},
    fpd_pl_num_correct_fixup{YType::uint64, "fpd-pl-num-correct-fixup"},
    fpd_pl_retry_add_exist{YType::uint64, "fpd-pl-retry-add-exist"},
    fpd_pl_inline_res_q{YType::uint64, "fpd-pl-inline-res-q"},
    fpd_pl_with_backup_create_count{YType::uint64, "fpd-pl-with-backup-create-count"},
    fpd_pl_with_backup_del_count{YType::uint64, "fpd-pl-with-backup-del-count"},
    fpd_pl_backup_enable_count{YType::uint64, "fpd-pl-backup-enable-count"},
    fpd_pl_backup_disable_count{YType::uint64, "fpd-pl-backup-disable-count"},
    fpd_pl_fast_nfn_count{YType::uint64, "fpd-pl-fast-nfn-count"},
    fpd_ldi_backup_activate_count{YType::uint64, "fpd-ldi-backup-activate-count"},
    fpd_ldi_last_backup_activate_time{YType::uint64, "fpd-ldi-last-backup-activate-time"},
    fpd_ldi_max_backup_activate_time{YType::uint64, "fpd-ldi-max-backup-activate-time"},
    fpd_ldi_min_backup_activate_time{YType::uint64, "fpd-ldi-min-backup-activate-time"},
    fpd_ldi_total_backup_activate_time{YType::uint64, "fpd-ldi-total-backup-activate-time"},
    fpd_ldi_avg_backup_activate_time{YType::uint64, "fpd-ldi-avg-backup-activate-time"},
    fpd_recursion_constraint_count{YType::uint64, "fpd-recursion-constraint-count"},
    fpd_ldi_num_del_refcnt{YType::uint64, "fpd-ldi-num-del-refcnt"},
    fpd_retryq_size{YType::uint32, "fpd-retryq-size"},
    fpd_num_allocs{YType::uint64, "fpd-num-allocs"},
    fpd_num_frees{YType::uint64, "fpd-num-frees"},
    fpd_retryq_timeout{YType::uint32, "fpd-retryq-timeout"},
    fpd_retryq_sched_time{YType::uint32, "fpd-retryq-sched-time"}
        ,
    fpd_platf_upd_stats(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats>())
    , fpd_gtrie_timing(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming>())
    , fpd_gbltbl_src_entry(this, {})
    , fpd_vrftbl_src_entry(this, {})
    , fpd_num_retry(this, {})
{
    fpd_platf_upd_stats->parent = this;
    fpd_gtrie_timing->parent = this;

    yang_name = "mi-proto-dbg-stat"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::~MiProtoDbgStat()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fpd_gbltbl_src_entry.len(); index++)
    {
        if(fpd_gbltbl_src_entry[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<fpd_vrftbl_src_entry.len(); index++)
    {
        if(fpd_vrftbl_src_entry[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<fpd_num_retry.len(); index++)
    {
        if(fpd_num_retry[index]->has_data())
            return true;
    }
    return fpd_gbltbl_entries.is_set
	|| fpd_gbltbl_rej_entries.is_set
	|| fpd_vrftbl_entries.is_set
	|| fpd_vrftbl_rej_entries.is_set
	|| fpd_num_tbls.is_set
	|| fpd_bcdl_msgs.is_set
	|| fpd_route_upd.is_set
	|| fpd_route_del.is_set
	|| fpd_route_rcv.is_set
	|| fpd_route_drops.is_set
	|| fpd_lbl_recycled.is_set
	|| fpd_version_mismatch_drops.is_set
	|| fpd_adj_upd.is_set
	|| fpd_adj_del.is_set
	|| fpd_adj_upd_tx.is_set
	|| fpd_adj_upd_tx_nh_found.is_set
	|| fpd_adj_upd_tx_retry_created.is_set
	|| fpd_adj_tx_retry_nh_found.is_set
	|| fpd_adj_tx_retry_obj_reinit.is_set
	|| fpd_adj_drops.is_set
	|| fpd_adj_msg.is_set
	|| fpd_te_rcv.is_set
	|| fpd_te_version_mismatch_drops.is_set
	|| fpd_num_retry_touts.is_set
	|| fpd_ldi_num_fixedup.is_set
	|| fpd_ldi_num_correct_fixup.is_set
	|| fpd_pl_num_queued_fixedup.is_set
	|| fpd_pl_num_correct_fixup.is_set
	|| fpd_pl_retry_add_exist.is_set
	|| fpd_pl_inline_res_q.is_set
	|| fpd_pl_with_backup_create_count.is_set
	|| fpd_pl_with_backup_del_count.is_set
	|| fpd_pl_backup_enable_count.is_set
	|| fpd_pl_backup_disable_count.is_set
	|| fpd_pl_fast_nfn_count.is_set
	|| fpd_ldi_backup_activate_count.is_set
	|| fpd_ldi_last_backup_activate_time.is_set
	|| fpd_ldi_max_backup_activate_time.is_set
	|| fpd_ldi_min_backup_activate_time.is_set
	|| fpd_ldi_total_backup_activate_time.is_set
	|| fpd_ldi_avg_backup_activate_time.is_set
	|| fpd_recursion_constraint_count.is_set
	|| fpd_ldi_num_del_refcnt.is_set
	|| fpd_retryq_size.is_set
	|| fpd_num_allocs.is_set
	|| fpd_num_frees.is_set
	|| fpd_retryq_timeout.is_set
	|| fpd_retryq_sched_time.is_set
	|| (fpd_platf_upd_stats !=  nullptr && fpd_platf_upd_stats->has_data())
	|| (fpd_gtrie_timing !=  nullptr && fpd_gtrie_timing->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::has_operation() const
{
    for (std::size_t index=0; index<fpd_gbltbl_src_entry.len(); index++)
    {
        if(fpd_gbltbl_src_entry[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<fpd_vrftbl_src_entry.len(); index++)
    {
        if(fpd_vrftbl_src_entry[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<fpd_num_retry.len(); index++)
    {
        if(fpd_num_retry[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(fpd_gbltbl_entries.yfilter)
	|| ydk::is_set(fpd_gbltbl_rej_entries.yfilter)
	|| ydk::is_set(fpd_vrftbl_entries.yfilter)
	|| ydk::is_set(fpd_vrftbl_rej_entries.yfilter)
	|| ydk::is_set(fpd_num_tbls.yfilter)
	|| ydk::is_set(fpd_bcdl_msgs.yfilter)
	|| ydk::is_set(fpd_route_upd.yfilter)
	|| ydk::is_set(fpd_route_del.yfilter)
	|| ydk::is_set(fpd_route_rcv.yfilter)
	|| ydk::is_set(fpd_route_drops.yfilter)
	|| ydk::is_set(fpd_lbl_recycled.yfilter)
	|| ydk::is_set(fpd_version_mismatch_drops.yfilter)
	|| ydk::is_set(fpd_adj_upd.yfilter)
	|| ydk::is_set(fpd_adj_del.yfilter)
	|| ydk::is_set(fpd_adj_upd_tx.yfilter)
	|| ydk::is_set(fpd_adj_upd_tx_nh_found.yfilter)
	|| ydk::is_set(fpd_adj_upd_tx_retry_created.yfilter)
	|| ydk::is_set(fpd_adj_tx_retry_nh_found.yfilter)
	|| ydk::is_set(fpd_adj_tx_retry_obj_reinit.yfilter)
	|| ydk::is_set(fpd_adj_drops.yfilter)
	|| ydk::is_set(fpd_adj_msg.yfilter)
	|| ydk::is_set(fpd_te_rcv.yfilter)
	|| ydk::is_set(fpd_te_version_mismatch_drops.yfilter)
	|| ydk::is_set(fpd_num_retry_touts.yfilter)
	|| ydk::is_set(fpd_ldi_num_fixedup.yfilter)
	|| ydk::is_set(fpd_ldi_num_correct_fixup.yfilter)
	|| ydk::is_set(fpd_pl_num_queued_fixedup.yfilter)
	|| ydk::is_set(fpd_pl_num_correct_fixup.yfilter)
	|| ydk::is_set(fpd_pl_retry_add_exist.yfilter)
	|| ydk::is_set(fpd_pl_inline_res_q.yfilter)
	|| ydk::is_set(fpd_pl_with_backup_create_count.yfilter)
	|| ydk::is_set(fpd_pl_with_backup_del_count.yfilter)
	|| ydk::is_set(fpd_pl_backup_enable_count.yfilter)
	|| ydk::is_set(fpd_pl_backup_disable_count.yfilter)
	|| ydk::is_set(fpd_pl_fast_nfn_count.yfilter)
	|| ydk::is_set(fpd_ldi_backup_activate_count.yfilter)
	|| ydk::is_set(fpd_ldi_last_backup_activate_time.yfilter)
	|| ydk::is_set(fpd_ldi_max_backup_activate_time.yfilter)
	|| ydk::is_set(fpd_ldi_min_backup_activate_time.yfilter)
	|| ydk::is_set(fpd_ldi_total_backup_activate_time.yfilter)
	|| ydk::is_set(fpd_ldi_avg_backup_activate_time.yfilter)
	|| ydk::is_set(fpd_recursion_constraint_count.yfilter)
	|| ydk::is_set(fpd_ldi_num_del_refcnt.yfilter)
	|| ydk::is_set(fpd_retryq_size.yfilter)
	|| ydk::is_set(fpd_num_allocs.yfilter)
	|| ydk::is_set(fpd_num_frees.yfilter)
	|| ydk::is_set(fpd_retryq_timeout.yfilter)
	|| ydk::is_set(fpd_retryq_sched_time.yfilter)
	|| (fpd_platf_upd_stats !=  nullptr && fpd_platf_upd_stats->has_operation())
	|| (fpd_gtrie_timing !=  nullptr && fpd_gtrie_timing->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-proto-dbg-stat";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (fpd_gbltbl_entries.is_set || is_set(fpd_gbltbl_entries.yfilter)) leaf_name_data.push_back(fpd_gbltbl_entries.get_name_leafdata());
    if (fpd_gbltbl_rej_entries.is_set || is_set(fpd_gbltbl_rej_entries.yfilter)) leaf_name_data.push_back(fpd_gbltbl_rej_entries.get_name_leafdata());
    if (fpd_vrftbl_entries.is_set || is_set(fpd_vrftbl_entries.yfilter)) leaf_name_data.push_back(fpd_vrftbl_entries.get_name_leafdata());
    if (fpd_vrftbl_rej_entries.is_set || is_set(fpd_vrftbl_rej_entries.yfilter)) leaf_name_data.push_back(fpd_vrftbl_rej_entries.get_name_leafdata());
    if (fpd_num_tbls.is_set || is_set(fpd_num_tbls.yfilter)) leaf_name_data.push_back(fpd_num_tbls.get_name_leafdata());
    if (fpd_bcdl_msgs.is_set || is_set(fpd_bcdl_msgs.yfilter)) leaf_name_data.push_back(fpd_bcdl_msgs.get_name_leafdata());
    if (fpd_route_upd.is_set || is_set(fpd_route_upd.yfilter)) leaf_name_data.push_back(fpd_route_upd.get_name_leafdata());
    if (fpd_route_del.is_set || is_set(fpd_route_del.yfilter)) leaf_name_data.push_back(fpd_route_del.get_name_leafdata());
    if (fpd_route_rcv.is_set || is_set(fpd_route_rcv.yfilter)) leaf_name_data.push_back(fpd_route_rcv.get_name_leafdata());
    if (fpd_route_drops.is_set || is_set(fpd_route_drops.yfilter)) leaf_name_data.push_back(fpd_route_drops.get_name_leafdata());
    if (fpd_lbl_recycled.is_set || is_set(fpd_lbl_recycled.yfilter)) leaf_name_data.push_back(fpd_lbl_recycled.get_name_leafdata());
    if (fpd_version_mismatch_drops.is_set || is_set(fpd_version_mismatch_drops.yfilter)) leaf_name_data.push_back(fpd_version_mismatch_drops.get_name_leafdata());
    if (fpd_adj_upd.is_set || is_set(fpd_adj_upd.yfilter)) leaf_name_data.push_back(fpd_adj_upd.get_name_leafdata());
    if (fpd_adj_del.is_set || is_set(fpd_adj_del.yfilter)) leaf_name_data.push_back(fpd_adj_del.get_name_leafdata());
    if (fpd_adj_upd_tx.is_set || is_set(fpd_adj_upd_tx.yfilter)) leaf_name_data.push_back(fpd_adj_upd_tx.get_name_leafdata());
    if (fpd_adj_upd_tx_nh_found.is_set || is_set(fpd_adj_upd_tx_nh_found.yfilter)) leaf_name_data.push_back(fpd_adj_upd_tx_nh_found.get_name_leafdata());
    if (fpd_adj_upd_tx_retry_created.is_set || is_set(fpd_adj_upd_tx_retry_created.yfilter)) leaf_name_data.push_back(fpd_adj_upd_tx_retry_created.get_name_leafdata());
    if (fpd_adj_tx_retry_nh_found.is_set || is_set(fpd_adj_tx_retry_nh_found.yfilter)) leaf_name_data.push_back(fpd_adj_tx_retry_nh_found.get_name_leafdata());
    if (fpd_adj_tx_retry_obj_reinit.is_set || is_set(fpd_adj_tx_retry_obj_reinit.yfilter)) leaf_name_data.push_back(fpd_adj_tx_retry_obj_reinit.get_name_leafdata());
    if (fpd_adj_drops.is_set || is_set(fpd_adj_drops.yfilter)) leaf_name_data.push_back(fpd_adj_drops.get_name_leafdata());
    if (fpd_adj_msg.is_set || is_set(fpd_adj_msg.yfilter)) leaf_name_data.push_back(fpd_adj_msg.get_name_leafdata());
    if (fpd_te_rcv.is_set || is_set(fpd_te_rcv.yfilter)) leaf_name_data.push_back(fpd_te_rcv.get_name_leafdata());
    if (fpd_te_version_mismatch_drops.is_set || is_set(fpd_te_version_mismatch_drops.yfilter)) leaf_name_data.push_back(fpd_te_version_mismatch_drops.get_name_leafdata());
    if (fpd_num_retry_touts.is_set || is_set(fpd_num_retry_touts.yfilter)) leaf_name_data.push_back(fpd_num_retry_touts.get_name_leafdata());
    if (fpd_ldi_num_fixedup.is_set || is_set(fpd_ldi_num_fixedup.yfilter)) leaf_name_data.push_back(fpd_ldi_num_fixedup.get_name_leafdata());
    if (fpd_ldi_num_correct_fixup.is_set || is_set(fpd_ldi_num_correct_fixup.yfilter)) leaf_name_data.push_back(fpd_ldi_num_correct_fixup.get_name_leafdata());
    if (fpd_pl_num_queued_fixedup.is_set || is_set(fpd_pl_num_queued_fixedup.yfilter)) leaf_name_data.push_back(fpd_pl_num_queued_fixedup.get_name_leafdata());
    if (fpd_pl_num_correct_fixup.is_set || is_set(fpd_pl_num_correct_fixup.yfilter)) leaf_name_data.push_back(fpd_pl_num_correct_fixup.get_name_leafdata());
    if (fpd_pl_retry_add_exist.is_set || is_set(fpd_pl_retry_add_exist.yfilter)) leaf_name_data.push_back(fpd_pl_retry_add_exist.get_name_leafdata());
    if (fpd_pl_inline_res_q.is_set || is_set(fpd_pl_inline_res_q.yfilter)) leaf_name_data.push_back(fpd_pl_inline_res_q.get_name_leafdata());
    if (fpd_pl_with_backup_create_count.is_set || is_set(fpd_pl_with_backup_create_count.yfilter)) leaf_name_data.push_back(fpd_pl_with_backup_create_count.get_name_leafdata());
    if (fpd_pl_with_backup_del_count.is_set || is_set(fpd_pl_with_backup_del_count.yfilter)) leaf_name_data.push_back(fpd_pl_with_backup_del_count.get_name_leafdata());
    if (fpd_pl_backup_enable_count.is_set || is_set(fpd_pl_backup_enable_count.yfilter)) leaf_name_data.push_back(fpd_pl_backup_enable_count.get_name_leafdata());
    if (fpd_pl_backup_disable_count.is_set || is_set(fpd_pl_backup_disable_count.yfilter)) leaf_name_data.push_back(fpd_pl_backup_disable_count.get_name_leafdata());
    if (fpd_pl_fast_nfn_count.is_set || is_set(fpd_pl_fast_nfn_count.yfilter)) leaf_name_data.push_back(fpd_pl_fast_nfn_count.get_name_leafdata());
    if (fpd_ldi_backup_activate_count.is_set || is_set(fpd_ldi_backup_activate_count.yfilter)) leaf_name_data.push_back(fpd_ldi_backup_activate_count.get_name_leafdata());
    if (fpd_ldi_last_backup_activate_time.is_set || is_set(fpd_ldi_last_backup_activate_time.yfilter)) leaf_name_data.push_back(fpd_ldi_last_backup_activate_time.get_name_leafdata());
    if (fpd_ldi_max_backup_activate_time.is_set || is_set(fpd_ldi_max_backup_activate_time.yfilter)) leaf_name_data.push_back(fpd_ldi_max_backup_activate_time.get_name_leafdata());
    if (fpd_ldi_min_backup_activate_time.is_set || is_set(fpd_ldi_min_backup_activate_time.yfilter)) leaf_name_data.push_back(fpd_ldi_min_backup_activate_time.get_name_leafdata());
    if (fpd_ldi_total_backup_activate_time.is_set || is_set(fpd_ldi_total_backup_activate_time.yfilter)) leaf_name_data.push_back(fpd_ldi_total_backup_activate_time.get_name_leafdata());
    if (fpd_ldi_avg_backup_activate_time.is_set || is_set(fpd_ldi_avg_backup_activate_time.yfilter)) leaf_name_data.push_back(fpd_ldi_avg_backup_activate_time.get_name_leafdata());
    if (fpd_recursion_constraint_count.is_set || is_set(fpd_recursion_constraint_count.yfilter)) leaf_name_data.push_back(fpd_recursion_constraint_count.get_name_leafdata());
    if (fpd_ldi_num_del_refcnt.is_set || is_set(fpd_ldi_num_del_refcnt.yfilter)) leaf_name_data.push_back(fpd_ldi_num_del_refcnt.get_name_leafdata());
    if (fpd_retryq_size.is_set || is_set(fpd_retryq_size.yfilter)) leaf_name_data.push_back(fpd_retryq_size.get_name_leafdata());
    if (fpd_num_allocs.is_set || is_set(fpd_num_allocs.yfilter)) leaf_name_data.push_back(fpd_num_allocs.get_name_leafdata());
    if (fpd_num_frees.is_set || is_set(fpd_num_frees.yfilter)) leaf_name_data.push_back(fpd_num_frees.get_name_leafdata());
    if (fpd_retryq_timeout.is_set || is_set(fpd_retryq_timeout.yfilter)) leaf_name_data.push_back(fpd_retryq_timeout.get_name_leafdata());
    if (fpd_retryq_sched_time.is_set || is_set(fpd_retryq_sched_time.yfilter)) leaf_name_data.push_back(fpd_retryq_sched_time.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fpd-platf-upd-stats")
    {
        if(fpd_platf_upd_stats == nullptr)
        {
            fpd_platf_upd_stats = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats>();
        }
        return fpd_platf_upd_stats;
    }

    if(child_yang_name == "fpd-gtrie-timing")
    {
        if(fpd_gtrie_timing == nullptr)
        {
            fpd_gtrie_timing = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming>();
        }
        return fpd_gtrie_timing;
    }

    if(child_yang_name == "fpd-gbltbl-src-entry")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry>();
        c->parent = this;
        fpd_gbltbl_src_entry.append(c);
        return c;
    }

    if(child_yang_name == "fpd-vrftbl-src-entry")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry>();
        c->parent = this;
        fpd_vrftbl_src_entry.append(c);
        return c;
    }

    if(child_yang_name == "fpd-num-retry")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry>();
        c->parent = this;
        fpd_num_retry.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(fpd_platf_upd_stats != nullptr)
    {
        children["fpd-platf-upd-stats"] = fpd_platf_upd_stats;
    }

    if(fpd_gtrie_timing != nullptr)
    {
        children["fpd-gtrie-timing"] = fpd_gtrie_timing;
    }

    count = 0;
    for (auto c : fpd_gbltbl_src_entry.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : fpd_vrftbl_src_entry.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto c : fpd_num_retry.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "fpd-gbltbl-entries")
    {
        fpd_gbltbl_entries = value;
        fpd_gbltbl_entries.value_namespace = name_space;
        fpd_gbltbl_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-gbltbl-rej-entries")
    {
        fpd_gbltbl_rej_entries = value;
        fpd_gbltbl_rej_entries.value_namespace = name_space;
        fpd_gbltbl_rej_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-vrftbl-entries")
    {
        fpd_vrftbl_entries = value;
        fpd_vrftbl_entries.value_namespace = name_space;
        fpd_vrftbl_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-vrftbl-rej-entries")
    {
        fpd_vrftbl_rej_entries = value;
        fpd_vrftbl_rej_entries.value_namespace = name_space;
        fpd_vrftbl_rej_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-num-tbls")
    {
        fpd_num_tbls = value;
        fpd_num_tbls.value_namespace = name_space;
        fpd_num_tbls.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-bcdl-msgs")
    {
        fpd_bcdl_msgs = value;
        fpd_bcdl_msgs.value_namespace = name_space;
        fpd_bcdl_msgs.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-route-upd")
    {
        fpd_route_upd = value;
        fpd_route_upd.value_namespace = name_space;
        fpd_route_upd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-route-del")
    {
        fpd_route_del = value;
        fpd_route_del.value_namespace = name_space;
        fpd_route_del.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-route-rcv")
    {
        fpd_route_rcv = value;
        fpd_route_rcv.value_namespace = name_space;
        fpd_route_rcv.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-route-drops")
    {
        fpd_route_drops = value;
        fpd_route_drops.value_namespace = name_space;
        fpd_route_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-lbl-recycled")
    {
        fpd_lbl_recycled = value;
        fpd_lbl_recycled.value_namespace = name_space;
        fpd_lbl_recycled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-version-mismatch-drops")
    {
        fpd_version_mismatch_drops = value;
        fpd_version_mismatch_drops.value_namespace = name_space;
        fpd_version_mismatch_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-adj-upd")
    {
        fpd_adj_upd = value;
        fpd_adj_upd.value_namespace = name_space;
        fpd_adj_upd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-adj-del")
    {
        fpd_adj_del = value;
        fpd_adj_del.value_namespace = name_space;
        fpd_adj_del.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-adj-upd-tx")
    {
        fpd_adj_upd_tx = value;
        fpd_adj_upd_tx.value_namespace = name_space;
        fpd_adj_upd_tx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-adj-upd-tx-nh-found")
    {
        fpd_adj_upd_tx_nh_found = value;
        fpd_adj_upd_tx_nh_found.value_namespace = name_space;
        fpd_adj_upd_tx_nh_found.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-adj-upd-tx-retry-created")
    {
        fpd_adj_upd_tx_retry_created = value;
        fpd_adj_upd_tx_retry_created.value_namespace = name_space;
        fpd_adj_upd_tx_retry_created.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-adj-tx-retry-nh-found")
    {
        fpd_adj_tx_retry_nh_found = value;
        fpd_adj_tx_retry_nh_found.value_namespace = name_space;
        fpd_adj_tx_retry_nh_found.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-adj-tx-retry-obj-reinit")
    {
        fpd_adj_tx_retry_obj_reinit = value;
        fpd_adj_tx_retry_obj_reinit.value_namespace = name_space;
        fpd_adj_tx_retry_obj_reinit.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-adj-drops")
    {
        fpd_adj_drops = value;
        fpd_adj_drops.value_namespace = name_space;
        fpd_adj_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-adj-msg")
    {
        fpd_adj_msg = value;
        fpd_adj_msg.value_namespace = name_space;
        fpd_adj_msg.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-te-rcv")
    {
        fpd_te_rcv = value;
        fpd_te_rcv.value_namespace = name_space;
        fpd_te_rcv.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-te-version-mismatch-drops")
    {
        fpd_te_version_mismatch_drops = value;
        fpd_te_version_mismatch_drops.value_namespace = name_space;
        fpd_te_version_mismatch_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-num-retry-touts")
    {
        fpd_num_retry_touts = value;
        fpd_num_retry_touts.value_namespace = name_space;
        fpd_num_retry_touts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-ldi-num-fixedup")
    {
        fpd_ldi_num_fixedup = value;
        fpd_ldi_num_fixedup.value_namespace = name_space;
        fpd_ldi_num_fixedup.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-ldi-num-correct-fixup")
    {
        fpd_ldi_num_correct_fixup = value;
        fpd_ldi_num_correct_fixup.value_namespace = name_space;
        fpd_ldi_num_correct_fixup.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-pl-num-queued-fixedup")
    {
        fpd_pl_num_queued_fixedup = value;
        fpd_pl_num_queued_fixedup.value_namespace = name_space;
        fpd_pl_num_queued_fixedup.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-pl-num-correct-fixup")
    {
        fpd_pl_num_correct_fixup = value;
        fpd_pl_num_correct_fixup.value_namespace = name_space;
        fpd_pl_num_correct_fixup.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-pl-retry-add-exist")
    {
        fpd_pl_retry_add_exist = value;
        fpd_pl_retry_add_exist.value_namespace = name_space;
        fpd_pl_retry_add_exist.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-pl-inline-res-q")
    {
        fpd_pl_inline_res_q = value;
        fpd_pl_inline_res_q.value_namespace = name_space;
        fpd_pl_inline_res_q.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-pl-with-backup-create-count")
    {
        fpd_pl_with_backup_create_count = value;
        fpd_pl_with_backup_create_count.value_namespace = name_space;
        fpd_pl_with_backup_create_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-pl-with-backup-del-count")
    {
        fpd_pl_with_backup_del_count = value;
        fpd_pl_with_backup_del_count.value_namespace = name_space;
        fpd_pl_with_backup_del_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-pl-backup-enable-count")
    {
        fpd_pl_backup_enable_count = value;
        fpd_pl_backup_enable_count.value_namespace = name_space;
        fpd_pl_backup_enable_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-pl-backup-disable-count")
    {
        fpd_pl_backup_disable_count = value;
        fpd_pl_backup_disable_count.value_namespace = name_space;
        fpd_pl_backup_disable_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-pl-fast-nfn-count")
    {
        fpd_pl_fast_nfn_count = value;
        fpd_pl_fast_nfn_count.value_namespace = name_space;
        fpd_pl_fast_nfn_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-ldi-backup-activate-count")
    {
        fpd_ldi_backup_activate_count = value;
        fpd_ldi_backup_activate_count.value_namespace = name_space;
        fpd_ldi_backup_activate_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-ldi-last-backup-activate-time")
    {
        fpd_ldi_last_backup_activate_time = value;
        fpd_ldi_last_backup_activate_time.value_namespace = name_space;
        fpd_ldi_last_backup_activate_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-ldi-max-backup-activate-time")
    {
        fpd_ldi_max_backup_activate_time = value;
        fpd_ldi_max_backup_activate_time.value_namespace = name_space;
        fpd_ldi_max_backup_activate_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-ldi-min-backup-activate-time")
    {
        fpd_ldi_min_backup_activate_time = value;
        fpd_ldi_min_backup_activate_time.value_namespace = name_space;
        fpd_ldi_min_backup_activate_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-ldi-total-backup-activate-time")
    {
        fpd_ldi_total_backup_activate_time = value;
        fpd_ldi_total_backup_activate_time.value_namespace = name_space;
        fpd_ldi_total_backup_activate_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-ldi-avg-backup-activate-time")
    {
        fpd_ldi_avg_backup_activate_time = value;
        fpd_ldi_avg_backup_activate_time.value_namespace = name_space;
        fpd_ldi_avg_backup_activate_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-recursion-constraint-count")
    {
        fpd_recursion_constraint_count = value;
        fpd_recursion_constraint_count.value_namespace = name_space;
        fpd_recursion_constraint_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-ldi-num-del-refcnt")
    {
        fpd_ldi_num_del_refcnt = value;
        fpd_ldi_num_del_refcnt.value_namespace = name_space;
        fpd_ldi_num_del_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-retryq-size")
    {
        fpd_retryq_size = value;
        fpd_retryq_size.value_namespace = name_space;
        fpd_retryq_size.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-num-allocs")
    {
        fpd_num_allocs = value;
        fpd_num_allocs.value_namespace = name_space;
        fpd_num_allocs.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-num-frees")
    {
        fpd_num_frees = value;
        fpd_num_frees.value_namespace = name_space;
        fpd_num_frees.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-retryq-timeout")
    {
        fpd_retryq_timeout = value;
        fpd_retryq_timeout.value_namespace = name_space;
        fpd_retryq_timeout.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpd-retryq-sched-time")
    {
        fpd_retryq_sched_time = value;
        fpd_retryq_sched_time.value_namespace = name_space;
        fpd_retryq_sched_time.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "fpd-gbltbl-entries")
    {
        fpd_gbltbl_entries.yfilter = yfilter;
    }
    if(value_path == "fpd-gbltbl-rej-entries")
    {
        fpd_gbltbl_rej_entries.yfilter = yfilter;
    }
    if(value_path == "fpd-vrftbl-entries")
    {
        fpd_vrftbl_entries.yfilter = yfilter;
    }
    if(value_path == "fpd-vrftbl-rej-entries")
    {
        fpd_vrftbl_rej_entries.yfilter = yfilter;
    }
    if(value_path == "fpd-num-tbls")
    {
        fpd_num_tbls.yfilter = yfilter;
    }
    if(value_path == "fpd-bcdl-msgs")
    {
        fpd_bcdl_msgs.yfilter = yfilter;
    }
    if(value_path == "fpd-route-upd")
    {
        fpd_route_upd.yfilter = yfilter;
    }
    if(value_path == "fpd-route-del")
    {
        fpd_route_del.yfilter = yfilter;
    }
    if(value_path == "fpd-route-rcv")
    {
        fpd_route_rcv.yfilter = yfilter;
    }
    if(value_path == "fpd-route-drops")
    {
        fpd_route_drops.yfilter = yfilter;
    }
    if(value_path == "fpd-lbl-recycled")
    {
        fpd_lbl_recycled.yfilter = yfilter;
    }
    if(value_path == "fpd-version-mismatch-drops")
    {
        fpd_version_mismatch_drops.yfilter = yfilter;
    }
    if(value_path == "fpd-adj-upd")
    {
        fpd_adj_upd.yfilter = yfilter;
    }
    if(value_path == "fpd-adj-del")
    {
        fpd_adj_del.yfilter = yfilter;
    }
    if(value_path == "fpd-adj-upd-tx")
    {
        fpd_adj_upd_tx.yfilter = yfilter;
    }
    if(value_path == "fpd-adj-upd-tx-nh-found")
    {
        fpd_adj_upd_tx_nh_found.yfilter = yfilter;
    }
    if(value_path == "fpd-adj-upd-tx-retry-created")
    {
        fpd_adj_upd_tx_retry_created.yfilter = yfilter;
    }
    if(value_path == "fpd-adj-tx-retry-nh-found")
    {
        fpd_adj_tx_retry_nh_found.yfilter = yfilter;
    }
    if(value_path == "fpd-adj-tx-retry-obj-reinit")
    {
        fpd_adj_tx_retry_obj_reinit.yfilter = yfilter;
    }
    if(value_path == "fpd-adj-drops")
    {
        fpd_adj_drops.yfilter = yfilter;
    }
    if(value_path == "fpd-adj-msg")
    {
        fpd_adj_msg.yfilter = yfilter;
    }
    if(value_path == "fpd-te-rcv")
    {
        fpd_te_rcv.yfilter = yfilter;
    }
    if(value_path == "fpd-te-version-mismatch-drops")
    {
        fpd_te_version_mismatch_drops.yfilter = yfilter;
    }
    if(value_path == "fpd-num-retry-touts")
    {
        fpd_num_retry_touts.yfilter = yfilter;
    }
    if(value_path == "fpd-ldi-num-fixedup")
    {
        fpd_ldi_num_fixedup.yfilter = yfilter;
    }
    if(value_path == "fpd-ldi-num-correct-fixup")
    {
        fpd_ldi_num_correct_fixup.yfilter = yfilter;
    }
    if(value_path == "fpd-pl-num-queued-fixedup")
    {
        fpd_pl_num_queued_fixedup.yfilter = yfilter;
    }
    if(value_path == "fpd-pl-num-correct-fixup")
    {
        fpd_pl_num_correct_fixup.yfilter = yfilter;
    }
    if(value_path == "fpd-pl-retry-add-exist")
    {
        fpd_pl_retry_add_exist.yfilter = yfilter;
    }
    if(value_path == "fpd-pl-inline-res-q")
    {
        fpd_pl_inline_res_q.yfilter = yfilter;
    }
    if(value_path == "fpd-pl-with-backup-create-count")
    {
        fpd_pl_with_backup_create_count.yfilter = yfilter;
    }
    if(value_path == "fpd-pl-with-backup-del-count")
    {
        fpd_pl_with_backup_del_count.yfilter = yfilter;
    }
    if(value_path == "fpd-pl-backup-enable-count")
    {
        fpd_pl_backup_enable_count.yfilter = yfilter;
    }
    if(value_path == "fpd-pl-backup-disable-count")
    {
        fpd_pl_backup_disable_count.yfilter = yfilter;
    }
    if(value_path == "fpd-pl-fast-nfn-count")
    {
        fpd_pl_fast_nfn_count.yfilter = yfilter;
    }
    if(value_path == "fpd-ldi-backup-activate-count")
    {
        fpd_ldi_backup_activate_count.yfilter = yfilter;
    }
    if(value_path == "fpd-ldi-last-backup-activate-time")
    {
        fpd_ldi_last_backup_activate_time.yfilter = yfilter;
    }
    if(value_path == "fpd-ldi-max-backup-activate-time")
    {
        fpd_ldi_max_backup_activate_time.yfilter = yfilter;
    }
    if(value_path == "fpd-ldi-min-backup-activate-time")
    {
        fpd_ldi_min_backup_activate_time.yfilter = yfilter;
    }
    if(value_path == "fpd-ldi-total-backup-activate-time")
    {
        fpd_ldi_total_backup_activate_time.yfilter = yfilter;
    }
    if(value_path == "fpd-ldi-avg-backup-activate-time")
    {
        fpd_ldi_avg_backup_activate_time.yfilter = yfilter;
    }
    if(value_path == "fpd-recursion-constraint-count")
    {
        fpd_recursion_constraint_count.yfilter = yfilter;
    }
    if(value_path == "fpd-ldi-num-del-refcnt")
    {
        fpd_ldi_num_del_refcnt.yfilter = yfilter;
    }
    if(value_path == "fpd-retryq-size")
    {
        fpd_retryq_size.yfilter = yfilter;
    }
    if(value_path == "fpd-num-allocs")
    {
        fpd_num_allocs.yfilter = yfilter;
    }
    if(value_path == "fpd-num-frees")
    {
        fpd_num_frees.yfilter = yfilter;
    }
    if(value_path == "fpd-retryq-timeout")
    {
        fpd_retryq_timeout.yfilter = yfilter;
    }
    if(value_path == "fpd-retryq-sched-time")
    {
        fpd_retryq_sched_time.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fpd-platf-upd-stats" || name == "fpd-gtrie-timing" || name == "fpd-gbltbl-src-entry" || name == "fpd-vrftbl-src-entry" || name == "fpd-num-retry" || name == "fpd-gbltbl-entries" || name == "fpd-gbltbl-rej-entries" || name == "fpd-vrftbl-entries" || name == "fpd-vrftbl-rej-entries" || name == "fpd-num-tbls" || name == "fpd-bcdl-msgs" || name == "fpd-route-upd" || name == "fpd-route-del" || name == "fpd-route-rcv" || name == "fpd-route-drops" || name == "fpd-lbl-recycled" || name == "fpd-version-mismatch-drops" || name == "fpd-adj-upd" || name == "fpd-adj-del" || name == "fpd-adj-upd-tx" || name == "fpd-adj-upd-tx-nh-found" || name == "fpd-adj-upd-tx-retry-created" || name == "fpd-adj-tx-retry-nh-found" || name == "fpd-adj-tx-retry-obj-reinit" || name == "fpd-adj-drops" || name == "fpd-adj-msg" || name == "fpd-te-rcv" || name == "fpd-te-version-mismatch-drops" || name == "fpd-num-retry-touts" || name == "fpd-ldi-num-fixedup" || name == "fpd-ldi-num-correct-fixup" || name == "fpd-pl-num-queued-fixedup" || name == "fpd-pl-num-correct-fixup" || name == "fpd-pl-retry-add-exist" || name == "fpd-pl-inline-res-q" || name == "fpd-pl-with-backup-create-count" || name == "fpd-pl-with-backup-del-count" || name == "fpd-pl-backup-enable-count" || name == "fpd-pl-backup-disable-count" || name == "fpd-pl-fast-nfn-count" || name == "fpd-ldi-backup-activate-count" || name == "fpd-ldi-last-backup-activate-time" || name == "fpd-ldi-max-backup-activate-time" || name == "fpd-ldi-min-backup-activate-time" || name == "fpd-ldi-total-backup-activate-time" || name == "fpd-ldi-avg-backup-activate-time" || name == "fpd-recursion-constraint-count" || name == "fpd-ldi-num-del-refcnt" || name == "fpd-retryq-size" || name == "fpd-num-allocs" || name == "fpd-num-frees" || name == "fpd-retryq-timeout" || name == "fpd-retryq-sched-time")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpdPlatfUpdStats()
    :
    fpus_num_success{YType::uint64, "fpus-num-success"},
    fpus_num_failure{YType::uint64, "fpus-num-failure"},
    fpus_upd_total_time{YType::uint64, "fpus-upd-total-time"}
        ,
    fpus_obj_stat(this, {})
{

    yang_name = "fpd-platf-upd-stats"; yang_parent_name = "mi-proto-dbg-stat"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::~FpdPlatfUpdStats()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fpus_obj_stat.len(); index++)
    {
        if(fpus_obj_stat[index]->has_data())
            return true;
    }
    return fpus_num_success.is_set
	|| fpus_num_failure.is_set
	|| fpus_upd_total_time.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::has_operation() const
{
    for (std::size_t index=0; index<fpus_obj_stat.len(); index++)
    {
        if(fpus_obj_stat[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(fpus_num_success.yfilter)
	|| ydk::is_set(fpus_num_failure.yfilter)
	|| ydk::is_set(fpus_upd_total_time.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fpd-platf-upd-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (fpus_num_success.is_set || is_set(fpus_num_success.yfilter)) leaf_name_data.push_back(fpus_num_success.get_name_leafdata());
    if (fpus_num_failure.is_set || is_set(fpus_num_failure.yfilter)) leaf_name_data.push_back(fpus_num_failure.get_name_leafdata());
    if (fpus_upd_total_time.is_set || is_set(fpus_upd_total_time.yfilter)) leaf_name_data.push_back(fpus_upd_total_time.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fpus-obj-stat")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat>();
        c->parent = this;
        fpus_obj_stat.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : fpus_obj_stat.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "fpus-num-success")
    {
        fpus_num_success = value;
        fpus_num_success.value_namespace = name_space;
        fpus_num_success.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpus-num-failure")
    {
        fpus_num_failure = value;
        fpus_num_failure.value_namespace = name_space;
        fpus_num_failure.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fpus-upd-total-time")
    {
        fpus_upd_total_time = value;
        fpus_upd_total_time.value_namespace = name_space;
        fpus_upd_total_time.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "fpus-num-success")
    {
        fpus_num_success.yfilter = yfilter;
    }
    if(value_path == "fpus-num-failure")
    {
        fpus_num_failure.yfilter = yfilter;
    }
    if(value_path == "fpus-upd-total-time")
    {
        fpus_upd_total_time.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fpus-obj-stat" || name == "fpus-num-success" || name == "fpus-num-failure" || name == "fpus-upd-total-time")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FpusObjStat()
    :
    fos_tot_updates{YType::uint64, "fos-tot-updates"},
    fos_tot_upd_time{YType::uint64, "fos-tot-upd-time"}
        ,
    fos_obj_act_stat(this, {})
{

    yang_name = "fpus-obj-stat"; yang_parent_name = "fpd-platf-upd-stats"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::~FpusObjStat()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fos_obj_act_stat.len(); index++)
    {
        if(fos_obj_act_stat[index]->has_data())
            return true;
    }
    return fos_tot_updates.is_set
	|| fos_tot_upd_time.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::has_operation() const
{
    for (std::size_t index=0; index<fos_obj_act_stat.len(); index++)
    {
        if(fos_obj_act_stat[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(fos_tot_updates.yfilter)
	|| ydk::is_set(fos_tot_upd_time.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fpus-obj-stat";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (fos_tot_updates.is_set || is_set(fos_tot_updates.yfilter)) leaf_name_data.push_back(fos_tot_updates.get_name_leafdata());
    if (fos_tot_upd_time.is_set || is_set(fos_tot_upd_time.yfilter)) leaf_name_data.push_back(fos_tot_upd_time.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fos-obj-act-stat")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat>();
        c->parent = this;
        fos_obj_act_stat.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : fos_obj_act_stat.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "fos-tot-updates")
    {
        fos_tot_updates = value;
        fos_tot_updates.value_namespace = name_space;
        fos_tot_updates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fos-tot-upd-time")
    {
        fos_tot_upd_time = value;
        fos_tot_upd_time.value_namespace = name_space;
        fos_tot_upd_time.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "fos-tot-updates")
    {
        fos_tot_updates.yfilter = yfilter;
    }
    if(value_path == "fos-tot-upd-time")
    {
        fos_tot_upd_time.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fos-obj-act-stat" || name == "fos-tot-updates" || name == "fos-tot-upd-time")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat::FosObjActStat()
    :
    foas_tot_updates{YType::uint64, "foas-tot-updates"},
    foas_tot_upd_time{YType::uint64, "foas-tot-upd-time"},
    foas_tot_updates_zero{YType::uint64, "foas-tot-updates-zero"},
    foas_num_success{YType::uint64, "foas-num-success"},
    foas_num_failure{YType::uint64, "foas-num-failure"},
    foas_max_time{YType::uint64, "foas-max-time"},
    foas_max_tstamp{YType::uint64, "foas-max-tstamp"}
{

    yang_name = "fos-obj-act-stat"; yang_parent_name = "fpus-obj-stat"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat::~FosObjActStat()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat::has_data() const
{
    if (is_presence_container) return true;
    return foas_tot_updates.is_set
	|| foas_tot_upd_time.is_set
	|| foas_tot_updates_zero.is_set
	|| foas_num_success.is_set
	|| foas_num_failure.is_set
	|| foas_max_time.is_set
	|| foas_max_tstamp.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(foas_tot_updates.yfilter)
	|| ydk::is_set(foas_tot_upd_time.yfilter)
	|| ydk::is_set(foas_tot_updates_zero.yfilter)
	|| ydk::is_set(foas_num_success.yfilter)
	|| ydk::is_set(foas_num_failure.yfilter)
	|| ydk::is_set(foas_max_time.yfilter)
	|| ydk::is_set(foas_max_tstamp.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fos-obj-act-stat";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (foas_tot_updates.is_set || is_set(foas_tot_updates.yfilter)) leaf_name_data.push_back(foas_tot_updates.get_name_leafdata());
    if (foas_tot_upd_time.is_set || is_set(foas_tot_upd_time.yfilter)) leaf_name_data.push_back(foas_tot_upd_time.get_name_leafdata());
    if (foas_tot_updates_zero.is_set || is_set(foas_tot_updates_zero.yfilter)) leaf_name_data.push_back(foas_tot_updates_zero.get_name_leafdata());
    if (foas_num_success.is_set || is_set(foas_num_success.yfilter)) leaf_name_data.push_back(foas_num_success.get_name_leafdata());
    if (foas_num_failure.is_set || is_set(foas_num_failure.yfilter)) leaf_name_data.push_back(foas_num_failure.get_name_leafdata());
    if (foas_max_time.is_set || is_set(foas_max_time.yfilter)) leaf_name_data.push_back(foas_max_time.get_name_leafdata());
    if (foas_max_tstamp.is_set || is_set(foas_max_tstamp.yfilter)) leaf_name_data.push_back(foas_max_tstamp.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "foas-tot-updates")
    {
        foas_tot_updates = value;
        foas_tot_updates.value_namespace = name_space;
        foas_tot_updates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "foas-tot-upd-time")
    {
        foas_tot_upd_time = value;
        foas_tot_upd_time.value_namespace = name_space;
        foas_tot_upd_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "foas-tot-updates-zero")
    {
        foas_tot_updates_zero = value;
        foas_tot_updates_zero.value_namespace = name_space;
        foas_tot_updates_zero.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "foas-num-success")
    {
        foas_num_success = value;
        foas_num_success.value_namespace = name_space;
        foas_num_success.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "foas-num-failure")
    {
        foas_num_failure = value;
        foas_num_failure.value_namespace = name_space;
        foas_num_failure.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "foas-max-time")
    {
        foas_max_time = value;
        foas_max_time.value_namespace = name_space;
        foas_max_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "foas-max-tstamp")
    {
        foas_max_tstamp = value;
        foas_max_tstamp.value_namespace = name_space;
        foas_max_tstamp.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "foas-tot-updates")
    {
        foas_tot_updates.yfilter = yfilter;
    }
    if(value_path == "foas-tot-upd-time")
    {
        foas_tot_upd_time.yfilter = yfilter;
    }
    if(value_path == "foas-tot-updates-zero")
    {
        foas_tot_updates_zero.yfilter = yfilter;
    }
    if(value_path == "foas-num-success")
    {
        foas_num_success.yfilter = yfilter;
    }
    if(value_path == "foas-num-failure")
    {
        foas_num_failure.yfilter = yfilter;
    }
    if(value_path == "foas-max-time")
    {
        foas_max_time.yfilter = yfilter;
    }
    if(value_path == "foas-max-tstamp")
    {
        foas_max_tstamp.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdPlatfUpdStats::FpusObjStat::FosObjActStat::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "foas-tot-updates" || name == "foas-tot-upd-time" || name == "foas-tot-updates-zero" || name == "foas-num-success" || name == "foas-num-failure" || name == "foas-max-time" || name == "foas-max-tstamp")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FpdGtrieTiming()
    :
    fgt_num_success{YType::uint64, "fgt-num-success"},
    fgt_num_failure{YType::uint64, "fgt-num-failure"},
    fgt_upd_total_time{YType::uint64, "fgt-upd-total-time"}
        ,
    fgt_gtrie_fn_timing(this, {})
{

    yang_name = "fpd-gtrie-timing"; yang_parent_name = "mi-proto-dbg-stat"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::~FpdGtrieTiming()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fgt_gtrie_fn_timing.len(); index++)
    {
        if(fgt_gtrie_fn_timing[index]->has_data())
            return true;
    }
    return fgt_num_success.is_set
	|| fgt_num_failure.is_set
	|| fgt_upd_total_time.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::has_operation() const
{
    for (std::size_t index=0; index<fgt_gtrie_fn_timing.len(); index++)
    {
        if(fgt_gtrie_fn_timing[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(fgt_num_success.yfilter)
	|| ydk::is_set(fgt_num_failure.yfilter)
	|| ydk::is_set(fgt_upd_total_time.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fpd-gtrie-timing";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (fgt_num_success.is_set || is_set(fgt_num_success.yfilter)) leaf_name_data.push_back(fgt_num_success.get_name_leafdata());
    if (fgt_num_failure.is_set || is_set(fgt_num_failure.yfilter)) leaf_name_data.push_back(fgt_num_failure.get_name_leafdata());
    if (fgt_upd_total_time.is_set || is_set(fgt_upd_total_time.yfilter)) leaf_name_data.push_back(fgt_upd_total_time.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fgt-gtrie-fn-timing")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming>();
        c->parent = this;
        fgt_gtrie_fn_timing.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : fgt_gtrie_fn_timing.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "fgt-num-success")
    {
        fgt_num_success = value;
        fgt_num_success.value_namespace = name_space;
        fgt_num_success.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fgt-num-failure")
    {
        fgt_num_failure = value;
        fgt_num_failure.value_namespace = name_space;
        fgt_num_failure.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fgt-upd-total-time")
    {
        fgt_upd_total_time = value;
        fgt_upd_total_time.value_namespace = name_space;
        fgt_upd_total_time.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "fgt-num-success")
    {
        fgt_num_success.yfilter = yfilter;
    }
    if(value_path == "fgt-num-failure")
    {
        fgt_num_failure.yfilter = yfilter;
    }
    if(value_path == "fgt-upd-total-time")
    {
        fgt_upd_total_time.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fgt-gtrie-fn-timing" || name == "fgt-num-success" || name == "fgt-num-failure" || name == "fgt-upd-total-time")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming::FgtGtrieFnTiming()
    :
    fgft_fn{YType::str, "fgft-fn"},
    fgft_tot_updates{YType::uint64, "fgft-tot-updates"},
    fgft_tot_updates_zero{YType::uint64, "fgft-tot-updates-zero"},
    fgft_tot_upd_time{YType::uint64, "fgft-tot-upd-time"},
    fgft_max_time{YType::uint64, "fgft-max-time"},
    fgft_max_tstamp{YType::uint64, "fgft-max-tstamp"}
{

    yang_name = "fgt-gtrie-fn-timing"; yang_parent_name = "fpd-gtrie-timing"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming::~FgtGtrieFnTiming()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming::has_data() const
{
    if (is_presence_container) return true;
    return fgft_fn.is_set
	|| fgft_tot_updates.is_set
	|| fgft_tot_updates_zero.is_set
	|| fgft_tot_upd_time.is_set
	|| fgft_max_time.is_set
	|| fgft_max_tstamp.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(fgft_fn.yfilter)
	|| ydk::is_set(fgft_tot_updates.yfilter)
	|| ydk::is_set(fgft_tot_updates_zero.yfilter)
	|| ydk::is_set(fgft_tot_upd_time.yfilter)
	|| ydk::is_set(fgft_max_time.yfilter)
	|| ydk::is_set(fgft_max_tstamp.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fgt-gtrie-fn-timing";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (fgft_fn.is_set || is_set(fgft_fn.yfilter)) leaf_name_data.push_back(fgft_fn.get_name_leafdata());
    if (fgft_tot_updates.is_set || is_set(fgft_tot_updates.yfilter)) leaf_name_data.push_back(fgft_tot_updates.get_name_leafdata());
    if (fgft_tot_updates_zero.is_set || is_set(fgft_tot_updates_zero.yfilter)) leaf_name_data.push_back(fgft_tot_updates_zero.get_name_leafdata());
    if (fgft_tot_upd_time.is_set || is_set(fgft_tot_upd_time.yfilter)) leaf_name_data.push_back(fgft_tot_upd_time.get_name_leafdata());
    if (fgft_max_time.is_set || is_set(fgft_max_time.yfilter)) leaf_name_data.push_back(fgft_max_time.get_name_leafdata());
    if (fgft_max_tstamp.is_set || is_set(fgft_max_tstamp.yfilter)) leaf_name_data.push_back(fgft_max_tstamp.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "fgft-fn")
    {
        fgft_fn = value;
        fgft_fn.value_namespace = name_space;
        fgft_fn.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fgft-tot-updates")
    {
        fgft_tot_updates = value;
        fgft_tot_updates.value_namespace = name_space;
        fgft_tot_updates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fgft-tot-updates-zero")
    {
        fgft_tot_updates_zero = value;
        fgft_tot_updates_zero.value_namespace = name_space;
        fgft_tot_updates_zero.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fgft-tot-upd-time")
    {
        fgft_tot_upd_time = value;
        fgft_tot_upd_time.value_namespace = name_space;
        fgft_tot_upd_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fgft-max-time")
    {
        fgft_max_time = value;
        fgft_max_time.value_namespace = name_space;
        fgft_max_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fgft-max-tstamp")
    {
        fgft_max_tstamp = value;
        fgft_max_tstamp.value_namespace = name_space;
        fgft_max_tstamp.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "fgft-fn")
    {
        fgft_fn.yfilter = yfilter;
    }
    if(value_path == "fgft-tot-updates")
    {
        fgft_tot_updates.yfilter = yfilter;
    }
    if(value_path == "fgft-tot-updates-zero")
    {
        fgft_tot_updates_zero.yfilter = yfilter;
    }
    if(value_path == "fgft-tot-upd-time")
    {
        fgft_tot_upd_time.yfilter = yfilter;
    }
    if(value_path == "fgft-max-time")
    {
        fgft_max_time.yfilter = yfilter;
    }
    if(value_path == "fgft-max-tstamp")
    {
        fgft_max_tstamp.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGtrieTiming::FgtGtrieFnTiming::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fgft-fn" || name == "fgft-tot-updates" || name == "fgft-tot-updates-zero" || name == "fgft-tot-upd-time" || name == "fgft-max-time" || name == "fgft-max-tstamp")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry::FpdGbltblSrcEntry()
    :
    entry{YType::uint64, "entry"}
{

    yang_name = "fpd-gbltbl-src-entry"; yang_parent_name = "mi-proto-dbg-stat"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry::~FpdGbltblSrcEntry()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fpd-gbltbl-src-entry";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdGbltblSrcEntry::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry::FpdVrftblSrcEntry()
    :
    entry{YType::uint64, "entry"}
{

    yang_name = "fpd-vrftbl-src-entry"; yang_parent_name = "mi-proto-dbg-stat"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry::~FpdVrftblSrcEntry()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fpd-vrftbl-src-entry";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdVrftblSrcEntry::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry::FpdNumRetry()
    :
    entry{YType::uint64, "entry"}
{

    yang_name = "fpd-num-retry"; yang_parent_name = "mi-proto-dbg-stat"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry::~FpdNumRetry()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fpd-num-retry";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiProtoDbgStat::FpdNumRetry::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::MiIdbPurgeCntr()
    :
    fpp_cntr(this, {})
{

    yang_name = "mi-idb-purge-cntr"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::~MiIdbPurgeCntr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fpp_cntr.len(); index++)
    {
        if(fpp_cntr[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::has_operation() const
{
    for (std::size_t index=0; index<fpp_cntr.len(); index++)
    {
        if(fpp_cntr[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-idb-purge-cntr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fpp-cntr")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr>();
        c->parent = this;
        fpp_cntr.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : fpp_cntr.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fpp-cntr")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr::FppCntr()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "fpp-cntr"; yang_parent_name = "mi-idb-purge-cntr"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr::~FppCntr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fpp-cntr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiIdbPurgeCntr::FppCntr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel::MiDel()
    :
    tableid{YType::uint32, "tableid"},
    prfx{YType::str, "prfx"},
    prfx_len{YType::uint16, "prfx-len"},
    prfx_proto{YType::uint16, "prfx-proto"},
    msec_time{YType::uint64, "msec-time"}
{

    yang_name = "mi-del"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel::~MiDel()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel::has_data() const
{
    if (is_presence_container) return true;
    return tableid.is_set
	|| prfx.is_set
	|| prfx_len.is_set
	|| prfx_proto.is_set
	|| msec_time.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(tableid.yfilter)
	|| ydk::is_set(prfx.yfilter)
	|| ydk::is_set(prfx_len.yfilter)
	|| ydk::is_set(prfx_proto.yfilter)
	|| ydk::is_set(msec_time.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-del";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (tableid.is_set || is_set(tableid.yfilter)) leaf_name_data.push_back(tableid.get_name_leafdata());
    if (prfx.is_set || is_set(prfx.yfilter)) leaf_name_data.push_back(prfx.get_name_leafdata());
    if (prfx_len.is_set || is_set(prfx_len.yfilter)) leaf_name_data.push_back(prfx_len.get_name_leafdata());
    if (prfx_proto.is_set || is_set(prfx_proto.yfilter)) leaf_name_data.push_back(prfx_proto.get_name_leafdata());
    if (msec_time.is_set || is_set(msec_time.yfilter)) leaf_name_data.push_back(msec_time.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "tableid")
    {
        tableid = value;
        tableid.value_namespace = name_space;
        tableid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prfx")
    {
        prfx = value;
        prfx.value_namespace = name_space;
        prfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prfx-len")
    {
        prfx_len = value;
        prfx_len.value_namespace = name_space;
        prfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prfx-proto")
    {
        prfx_proto = value;
        prfx_proto.value_namespace = name_space;
        prfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "msec-time")
    {
        msec_time = value;
        msec_time.value_namespace = name_space;
        msec_time.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "tableid")
    {
        tableid.yfilter = yfilter;
    }
    if(value_path == "prfx")
    {
        prfx.yfilter = yfilter;
    }
    if(value_path == "prfx-len")
    {
        prfx_len.yfilter = yfilter;
    }
    if(value_path == "prfx-proto")
    {
        prfx_proto.yfilter = yfilter;
    }
    if(value_path == "msec-time")
    {
        msec_time.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiDel::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "tableid" || name == "prfx" || name == "prfx-len" || name == "prfx-proto" || name == "msec-time")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat::MiFrrStat()
    :
    mi_num_intf_frr{YType::uint32, "mi-num-intf-frr"},
    mi_num_parent_intf_frr{YType::uint32, "mi-num-parent-intf-frr"},
    mi_num_pfi_intf_down{YType::uint32, "mi-num-pfi-intf-down"},
    mi_num_bfd_down{YType::uint32, "mi-num-bfd-down"},
    mi_num_prot_frr_objects{YType::uint32, "mi-num-prot-frr-objects"},
    mi_num_bkup_frr_objects{YType::uint32, "mi-num-bkup-frr-objects"},
    mi_num_tunid_allocs{YType::uint32, "mi-num-tunid-allocs"},
    mi_num_tunid_alloc_failures{YType::uint32, "mi-num-tunid-alloc-failures"},
    mi_num_tunid_frees{YType::uint32, "mi-num-tunid-frees"},
    mi_num_tunid_free_failures{YType::uint32, "mi-num-tunid-free-failures"},
    mi_num_frr_reset_queue_adds{YType::uint32, "mi-num-frr-reset-queue-adds"},
    mi_num_frr_reset_queue_remove{YType::uint32, "mi-num-frr-reset-queue-remove"},
    mi_num_frr_reset{YType::uint32, "mi-num-frr-reset"},
    mi_num_frr_proto_events{YType::uint32, "mi-num-frr-proto-events"},
    mi_num_frr_logs{YType::uint32, "mi-num-frr-logs"}
{

    yang_name = "mi-frr-stat"; yang_parent_name = "misc"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat::~MiFrrStat()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat::has_data() const
{
    if (is_presence_container) return true;
    return mi_num_intf_frr.is_set
	|| mi_num_parent_intf_frr.is_set
	|| mi_num_pfi_intf_down.is_set
	|| mi_num_bfd_down.is_set
	|| mi_num_prot_frr_objects.is_set
	|| mi_num_bkup_frr_objects.is_set
	|| mi_num_tunid_allocs.is_set
	|| mi_num_tunid_alloc_failures.is_set
	|| mi_num_tunid_frees.is_set
	|| mi_num_tunid_free_failures.is_set
	|| mi_num_frr_reset_queue_adds.is_set
	|| mi_num_frr_reset_queue_remove.is_set
	|| mi_num_frr_reset.is_set
	|| mi_num_frr_proto_events.is_set
	|| mi_num_frr_logs.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(mi_num_intf_frr.yfilter)
	|| ydk::is_set(mi_num_parent_intf_frr.yfilter)
	|| ydk::is_set(mi_num_pfi_intf_down.yfilter)
	|| ydk::is_set(mi_num_bfd_down.yfilter)
	|| ydk::is_set(mi_num_prot_frr_objects.yfilter)
	|| ydk::is_set(mi_num_bkup_frr_objects.yfilter)
	|| ydk::is_set(mi_num_tunid_allocs.yfilter)
	|| ydk::is_set(mi_num_tunid_alloc_failures.yfilter)
	|| ydk::is_set(mi_num_tunid_frees.yfilter)
	|| ydk::is_set(mi_num_tunid_free_failures.yfilter)
	|| ydk::is_set(mi_num_frr_reset_queue_adds.yfilter)
	|| ydk::is_set(mi_num_frr_reset_queue_remove.yfilter)
	|| ydk::is_set(mi_num_frr_reset.yfilter)
	|| ydk::is_set(mi_num_frr_proto_events.yfilter)
	|| ydk::is_set(mi_num_frr_logs.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mi-frr-stat";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (mi_num_intf_frr.is_set || is_set(mi_num_intf_frr.yfilter)) leaf_name_data.push_back(mi_num_intf_frr.get_name_leafdata());
    if (mi_num_parent_intf_frr.is_set || is_set(mi_num_parent_intf_frr.yfilter)) leaf_name_data.push_back(mi_num_parent_intf_frr.get_name_leafdata());
    if (mi_num_pfi_intf_down.is_set || is_set(mi_num_pfi_intf_down.yfilter)) leaf_name_data.push_back(mi_num_pfi_intf_down.get_name_leafdata());
    if (mi_num_bfd_down.is_set || is_set(mi_num_bfd_down.yfilter)) leaf_name_data.push_back(mi_num_bfd_down.get_name_leafdata());
    if (mi_num_prot_frr_objects.is_set || is_set(mi_num_prot_frr_objects.yfilter)) leaf_name_data.push_back(mi_num_prot_frr_objects.get_name_leafdata());
    if (mi_num_bkup_frr_objects.is_set || is_set(mi_num_bkup_frr_objects.yfilter)) leaf_name_data.push_back(mi_num_bkup_frr_objects.get_name_leafdata());
    if (mi_num_tunid_allocs.is_set || is_set(mi_num_tunid_allocs.yfilter)) leaf_name_data.push_back(mi_num_tunid_allocs.get_name_leafdata());
    if (mi_num_tunid_alloc_failures.is_set || is_set(mi_num_tunid_alloc_failures.yfilter)) leaf_name_data.push_back(mi_num_tunid_alloc_failures.get_name_leafdata());
    if (mi_num_tunid_frees.is_set || is_set(mi_num_tunid_frees.yfilter)) leaf_name_data.push_back(mi_num_tunid_frees.get_name_leafdata());
    if (mi_num_tunid_free_failures.is_set || is_set(mi_num_tunid_free_failures.yfilter)) leaf_name_data.push_back(mi_num_tunid_free_failures.get_name_leafdata());
    if (mi_num_frr_reset_queue_adds.is_set || is_set(mi_num_frr_reset_queue_adds.yfilter)) leaf_name_data.push_back(mi_num_frr_reset_queue_adds.get_name_leafdata());
    if (mi_num_frr_reset_queue_remove.is_set || is_set(mi_num_frr_reset_queue_remove.yfilter)) leaf_name_data.push_back(mi_num_frr_reset_queue_remove.get_name_leafdata());
    if (mi_num_frr_reset.is_set || is_set(mi_num_frr_reset.yfilter)) leaf_name_data.push_back(mi_num_frr_reset.get_name_leafdata());
    if (mi_num_frr_proto_events.is_set || is_set(mi_num_frr_proto_events.yfilter)) leaf_name_data.push_back(mi_num_frr_proto_events.get_name_leafdata());
    if (mi_num_frr_logs.is_set || is_set(mi_num_frr_logs.yfilter)) leaf_name_data.push_back(mi_num_frr_logs.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "mi-num-intf-frr")
    {
        mi_num_intf_frr = value;
        mi_num_intf_frr.value_namespace = name_space;
        mi_num_intf_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-parent-intf-frr")
    {
        mi_num_parent_intf_frr = value;
        mi_num_parent_intf_frr.value_namespace = name_space;
        mi_num_parent_intf_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-pfi-intf-down")
    {
        mi_num_pfi_intf_down = value;
        mi_num_pfi_intf_down.value_namespace = name_space;
        mi_num_pfi_intf_down.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-bfd-down")
    {
        mi_num_bfd_down = value;
        mi_num_bfd_down.value_namespace = name_space;
        mi_num_bfd_down.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-prot-frr-objects")
    {
        mi_num_prot_frr_objects = value;
        mi_num_prot_frr_objects.value_namespace = name_space;
        mi_num_prot_frr_objects.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-bkup-frr-objects")
    {
        mi_num_bkup_frr_objects = value;
        mi_num_bkup_frr_objects.value_namespace = name_space;
        mi_num_bkup_frr_objects.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-tunid-allocs")
    {
        mi_num_tunid_allocs = value;
        mi_num_tunid_allocs.value_namespace = name_space;
        mi_num_tunid_allocs.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-tunid-alloc-failures")
    {
        mi_num_tunid_alloc_failures = value;
        mi_num_tunid_alloc_failures.value_namespace = name_space;
        mi_num_tunid_alloc_failures.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-tunid-frees")
    {
        mi_num_tunid_frees = value;
        mi_num_tunid_frees.value_namespace = name_space;
        mi_num_tunid_frees.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-tunid-free-failures")
    {
        mi_num_tunid_free_failures = value;
        mi_num_tunid_free_failures.value_namespace = name_space;
        mi_num_tunid_free_failures.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-frr-reset-queue-adds")
    {
        mi_num_frr_reset_queue_adds = value;
        mi_num_frr_reset_queue_adds.value_namespace = name_space;
        mi_num_frr_reset_queue_adds.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-frr-reset-queue-remove")
    {
        mi_num_frr_reset_queue_remove = value;
        mi_num_frr_reset_queue_remove.value_namespace = name_space;
        mi_num_frr_reset_queue_remove.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-frr-reset")
    {
        mi_num_frr_reset = value;
        mi_num_frr_reset.value_namespace = name_space;
        mi_num_frr_reset.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-frr-proto-events")
    {
        mi_num_frr_proto_events = value;
        mi_num_frr_proto_events.value_namespace = name_space;
        mi_num_frr_proto_events.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mi-num-frr-logs")
    {
        mi_num_frr_logs = value;
        mi_num_frr_logs.value_namespace = name_space;
        mi_num_frr_logs.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "mi-num-intf-frr")
    {
        mi_num_intf_frr.yfilter = yfilter;
    }
    if(value_path == "mi-num-parent-intf-frr")
    {
        mi_num_parent_intf_frr.yfilter = yfilter;
    }
    if(value_path == "mi-num-pfi-intf-down")
    {
        mi_num_pfi_intf_down.yfilter = yfilter;
    }
    if(value_path == "mi-num-bfd-down")
    {
        mi_num_bfd_down.yfilter = yfilter;
    }
    if(value_path == "mi-num-prot-frr-objects")
    {
        mi_num_prot_frr_objects.yfilter = yfilter;
    }
    if(value_path == "mi-num-bkup-frr-objects")
    {
        mi_num_bkup_frr_objects.yfilter = yfilter;
    }
    if(value_path == "mi-num-tunid-allocs")
    {
        mi_num_tunid_allocs.yfilter = yfilter;
    }
    if(value_path == "mi-num-tunid-alloc-failures")
    {
        mi_num_tunid_alloc_failures.yfilter = yfilter;
    }
    if(value_path == "mi-num-tunid-frees")
    {
        mi_num_tunid_frees.yfilter = yfilter;
    }
    if(value_path == "mi-num-tunid-free-failures")
    {
        mi_num_tunid_free_failures.yfilter = yfilter;
    }
    if(value_path == "mi-num-frr-reset-queue-adds")
    {
        mi_num_frr_reset_queue_adds.yfilter = yfilter;
    }
    if(value_path == "mi-num-frr-reset-queue-remove")
    {
        mi_num_frr_reset_queue_remove.yfilter = yfilter;
    }
    if(value_path == "mi-num-frr-reset")
    {
        mi_num_frr_reset.yfilter = yfilter;
    }
    if(value_path == "mi-num-frr-proto-events")
    {
        mi_num_frr_proto_events.yfilter = yfilter;
    }
    if(value_path == "mi-num-frr-logs")
    {
        mi_num_frr_logs.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Misc::MiFrrStat::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "mi-num-intf-frr" || name == "mi-num-parent-intf-frr" || name == "mi-num-pfi-intf-down" || name == "mi-num-bfd-down" || name == "mi-num-prot-frr-objects" || name == "mi-num-bkup-frr-objects" || name == "mi-num-tunid-allocs" || name == "mi-num-tunid-alloc-failures" || name == "mi-num-tunid-frees" || name == "mi-num-tunid-free-failures" || name == "mi-num-frr-reset-queue-adds" || name == "mi-num-frr-reset-queue-remove" || name == "mi-num-frr-reset" || name == "mi-num-frr-proto-events" || name == "mi-num-frr-logs")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::LocalLabel()
    :
    conflicts(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts>())
{
    conflicts->parent = this;

    yang_name = "local-label"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::~LocalLabel()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::has_data() const
{
    if (is_presence_container) return true;
    return (conflicts !=  nullptr && conflicts->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::has_operation() const
{
    return is_set(yfilter)
	|| (conflicts !=  nullptr && conflicts->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::LocalLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "local-label";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::LocalLabel::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "conflicts")
    {
        if(conflicts == nullptr)
        {
            conflicts = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts>();
        }
        return conflicts;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(conflicts != nullptr)
    {
        children["conflicts"] = conflicts;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "conflicts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflicts()
    :
    conflict(this, {})
{

    yang_name = "conflicts"; yang_parent_name = "local-label"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::~Conflicts()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<conflict.len(); index++)
    {
        if(conflict[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::has_operation() const
{
    for (std::size_t index=0; index<conflict.len(); index++)
    {
        if(conflict[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "conflicts";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "conflict")
    {
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict>();
        c->parent = this;
        conflict.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : conflict.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "conflict")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Conflict()
    :
    label{YType::uint32, "label"},
    source{YType::enumeration, "source"},
    ll_ctype{YType::enumeration, "ll-ctype"},
    pfx_tbl_id{YType::uint32, "pfx-tbl-id"},
    prefix{YType::str, "prefix"},
    prefix_len{YType::uint32, "prefix-len"},
    local_label{YType::uint32, "local-label"},
    source_xr{YType::uint32, "source-xr"},
    update_ts{YType::uint64, "update-ts"},
    retry_ts{YType::uint64, "retry-ts"},
    num_retries{YType::uint32, "num-retries"}
        ,
    ext(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext>())
{
    ext->parent = this;

    yang_name = "conflict"; yang_parent_name = "conflicts"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::~Conflict()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::has_data() const
{
    if (is_presence_container) return true;
    return label.is_set
	|| source.is_set
	|| ll_ctype.is_set
	|| pfx_tbl_id.is_set
	|| prefix.is_set
	|| prefix_len.is_set
	|| local_label.is_set
	|| source_xr.is_set
	|| update_ts.is_set
	|| retry_ts.is_set
	|| num_retries.is_set
	|| (ext !=  nullptr && ext->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(label.yfilter)
	|| ydk::is_set(source.yfilter)
	|| ydk::is_set(ll_ctype.yfilter)
	|| ydk::is_set(pfx_tbl_id.yfilter)
	|| ydk::is_set(prefix.yfilter)
	|| ydk::is_set(prefix_len.yfilter)
	|| ydk::is_set(local_label.yfilter)
	|| ydk::is_set(source_xr.yfilter)
	|| ydk::is_set(update_ts.yfilter)
	|| ydk::is_set(retry_ts.yfilter)
	|| ydk::is_set(num_retries.yfilter)
	|| (ext !=  nullptr && ext->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "conflict";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (label.is_set || is_set(label.yfilter)) leaf_name_data.push_back(label.get_name_leafdata());
    if (source.is_set || is_set(source.yfilter)) leaf_name_data.push_back(source.get_name_leafdata());
    if (ll_ctype.is_set || is_set(ll_ctype.yfilter)) leaf_name_data.push_back(ll_ctype.get_name_leafdata());
    if (pfx_tbl_id.is_set || is_set(pfx_tbl_id.yfilter)) leaf_name_data.push_back(pfx_tbl_id.get_name_leafdata());
    if (prefix.is_set || is_set(prefix.yfilter)) leaf_name_data.push_back(prefix.get_name_leafdata());
    if (prefix_len.is_set || is_set(prefix_len.yfilter)) leaf_name_data.push_back(prefix_len.get_name_leafdata());
    if (local_label.is_set || is_set(local_label.yfilter)) leaf_name_data.push_back(local_label.get_name_leafdata());
    if (source_xr.is_set || is_set(source_xr.yfilter)) leaf_name_data.push_back(source_xr.get_name_leafdata());
    if (update_ts.is_set || is_set(update_ts.yfilter)) leaf_name_data.push_back(update_ts.get_name_leafdata());
    if (retry_ts.is_set || is_set(retry_ts.yfilter)) leaf_name_data.push_back(retry_ts.get_name_leafdata());
    if (num_retries.is_set || is_set(num_retries.yfilter)) leaf_name_data.push_back(num_retries.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ext")
    {
        if(ext == nullptr)
        {
            ext = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext>();
        }
        return ext;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(ext != nullptr)
    {
        children["ext"] = ext;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "label")
    {
        label = value;
        label.value_namespace = name_space;
        label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "source")
    {
        source = value;
        source.value_namespace = name_space;
        source.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ll-ctype")
    {
        ll_ctype = value;
        ll_ctype.value_namespace = name_space;
        ll_ctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pfx-tbl-id")
    {
        pfx_tbl_id = value;
        pfx_tbl_id.value_namespace = name_space;
        pfx_tbl_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix")
    {
        prefix = value;
        prefix.value_namespace = name_space;
        prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-len")
    {
        prefix_len = value;
        prefix_len.value_namespace = name_space;
        prefix_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "local-label")
    {
        local_label = value;
        local_label.value_namespace = name_space;
        local_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "source-xr")
    {
        source_xr = value;
        source_xr.value_namespace = name_space;
        source_xr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "update-ts")
    {
        update_ts = value;
        update_ts.value_namespace = name_space;
        update_ts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "retry-ts")
    {
        retry_ts = value;
        retry_ts.value_namespace = name_space;
        retry_ts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "num-retries")
    {
        num_retries = value;
        num_retries.value_namespace = name_space;
        num_retries.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "label")
    {
        label.yfilter = yfilter;
    }
    if(value_path == "source")
    {
        source.yfilter = yfilter;
    }
    if(value_path == "ll-ctype")
    {
        ll_ctype.yfilter = yfilter;
    }
    if(value_path == "pfx-tbl-id")
    {
        pfx_tbl_id.yfilter = yfilter;
    }
    if(value_path == "prefix")
    {
        prefix.yfilter = yfilter;
    }
    if(value_path == "prefix-len")
    {
        prefix_len.yfilter = yfilter;
    }
    if(value_path == "local-label")
    {
        local_label.yfilter = yfilter;
    }
    if(value_path == "source-xr")
    {
        source_xr.yfilter = yfilter;
    }
    if(value_path == "update-ts")
    {
        update_ts.yfilter = yfilter;
    }
    if(value_path == "retry-ts")
    {
        retry_ts.yfilter = yfilter;
    }
    if(value_path == "num-retries")
    {
        num_retries.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ext" || name == "label" || name == "source" || name == "ll-ctype" || name == "pfx-tbl-id" || name == "prefix" || name == "prefix-len" || name == "local-label" || name == "source-xr" || name == "update-ts" || name == "retry-ts" || name == "num-retries")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Ext()
    :
    type{YType::enumeration, "type"}
        ,
    pfx(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx>())
    , lsm(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm>())
{
    pfx->parent = this;
    lsm->parent = this;

    yang_name = "ext"; yang_parent_name = "conflict"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::~Ext()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (pfx !=  nullptr && pfx->has_data())
	|| (lsm !=  nullptr && lsm->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (pfx !=  nullptr && pfx->has_operation())
	|| (lsm !=  nullptr && lsm->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ext";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "pfx")
    {
        if(pfx == nullptr)
        {
            pfx = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx>();
        }
        return pfx;
    }

    if(child_yang_name == "lsm")
    {
        if(lsm == nullptr)
        {
            lsm = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm>();
        }
        return lsm;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(pfx != nullptr)
    {
        children["pfx"] = pfx;
    }

    if(lsm != nullptr)
    {
        children["lsm"] = lsm;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pfx" || name == "lsm" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx::Pfx()
    :
    pfx{YType::str, "pfx"},
    tbl_id{YType::uint32, "tbl-id"}
{

    yang_name = "pfx"; yang_parent_name = "ext"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx::~Pfx()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx::has_data() const
{
    if (is_presence_container) return true;
    return pfx.is_set
	|| tbl_id.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pfx.yfilter)
	|| ydk::is_set(tbl_id.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pfx";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pfx.is_set || is_set(pfx.yfilter)) leaf_name_data.push_back(pfx.get_name_leafdata());
    if (tbl_id.is_set || is_set(tbl_id.yfilter)) leaf_name_data.push_back(tbl_id.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pfx")
    {
        pfx = value;
        pfx.value_namespace = name_space;
        pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tbl-id")
    {
        tbl_id = value;
        tbl_id.value_namespace = name_space;
        tbl_id.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pfx")
    {
        pfx.yfilter = yfilter;
    }
    if(value_path == "tbl-id")
    {
        tbl_id.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Pfx::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pfx" || name == "tbl-id")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm::Lsm()
    :
    nh{YType::str, "nh"},
    mcast_id{YType::uint32, "mcast-id"}
{

    yang_name = "lsm"; yang_parent_name = "ext"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm::~Lsm()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm::has_data() const
{
    if (is_presence_container) return true;
    return nh.is_set
	|| mcast_id.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh.yfilter)
	|| ydk::is_set(mcast_id.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lsm";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh.is_set || is_set(nh.yfilter)) leaf_name_data.push_back(nh.get_name_leafdata());
    if (mcast_id.is_set || is_set(mcast_id.yfilter)) leaf_name_data.push_back(mcast_id.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh")
    {
        nh = value;
        nh.value_namespace = name_space;
        nh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mcast-id")
    {
        mcast_id = value;
        mcast_id.value_namespace = name_space;
        mcast_id.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh")
    {
        nh.yfilter = yfilter;
    }
    if(value_path == "mcast-id")
    {
        mcast_id.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::LocalLabel::Conflicts::Conflict::Ext::Lsm::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh" || name == "mcast-id")
        return true;
    return false;
}

OcAftL3::OcAftL3()
    :
    vrfs(std::make_shared<OcAftL3::Vrfs>())
{
    vrfs->parent = this;

    yang_name = "oc-aft-l3"; yang_parent_name = "Cisco-IOS-XR-fib-common-oper"; is_top_level_class = true; has_list_ancestor = false; 
}

OcAftL3::~OcAftL3()
{
}

bool OcAftL3::has_data() const
{
    if (is_presence_container) return true;
    return (vrfs !=  nullptr && vrfs->has_data());
}

bool OcAftL3::has_operation() const
{
    return is_set(yfilter)
	|| (vrfs !=  nullptr && vrfs->has_operation());
}

std::string OcAftL3::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:oc-aft-l3";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "vrfs")
    {
        if(vrfs == nullptr)
        {
            vrfs = std::make_shared<OcAftL3::Vrfs>();
        }
        return vrfs;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(vrfs != nullptr)
    {
        children["vrfs"] = vrfs;
    }

    return children;
}

void OcAftL3::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::set_filter(const std::string & value_path, YFilter yfilter)
{
}

std::shared_ptr<Entity> OcAftL3::clone_ptr() const
{
    return std::make_shared<OcAftL3>();
}

std::string OcAftL3::get_bundle_yang_models_location() const
{
    return ydk_cisco_ios_xr_models_path;
}

std::string OcAftL3::get_bundle_name() const
{
    return "cisco_ios_xr";
}

augment_capabilities_function OcAftL3::get_augment_capabilities_function() const
{
    return cisco_ios_xr_augment_lookup_tables;
}

std::map<std::pair<std::string, std::string>, std::string> OcAftL3::get_namespace_identity_lookup() const
{
    return cisco_ios_xr_namespace_identity_lookup;
}

bool OcAftL3::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "vrfs")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrfs()
    :
    vrf(this, {"vrf_name"})
{

    yang_name = "vrfs"; yang_parent_name = "oc-aft-l3"; is_top_level_class = false; has_list_ancestor = false; 
}

OcAftL3::Vrfs::~Vrfs()
{
}

bool OcAftL3::Vrfs::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<vrf.len(); index++)
    {
        if(vrf[index]->has_data())
            return true;
    }
    return false;
}

bool OcAftL3::Vrfs::has_operation() const
{
    for (std::size_t index=0; index<vrf.len(); index++)
    {
        if(vrf[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string OcAftL3::Vrfs::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:oc-aft-l3/" << get_segment_path();
    return path_buffer.str();
}

std::string OcAftL3::Vrfs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "vrfs";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "vrf")
    {
        auto c = std::make_shared<OcAftL3::Vrfs::Vrf>();
        c->parent = this;
        vrf.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : vrf.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void OcAftL3::Vrfs::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "vrf")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::Vrf()
    :
    vrf_name{YType::str, "vrf-name"}
        ,
    abstract_forwarding_tables(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables>())
{
    abstract_forwarding_tables->parent = this;

    yang_name = "vrf"; yang_parent_name = "vrfs"; is_top_level_class = false; has_list_ancestor = false; 
}

OcAftL3::Vrfs::Vrf::~Vrf()
{
}

bool OcAftL3::Vrfs::Vrf::has_data() const
{
    if (is_presence_container) return true;
    return vrf_name.is_set
	|| (abstract_forwarding_tables !=  nullptr && abstract_forwarding_tables->has_data());
}

bool OcAftL3::Vrfs::Vrf::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(vrf_name.yfilter)
	|| (abstract_forwarding_tables !=  nullptr && abstract_forwarding_tables->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:oc-aft-l3/vrfs/" << get_segment_path();
    return path_buffer.str();
}

std::string OcAftL3::Vrfs::Vrf::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "vrf";
    ADD_KEY_TOKEN(vrf_name, "vrf-name");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (vrf_name.is_set || is_set(vrf_name.yfilter)) leaf_name_data.push_back(vrf_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "abstract-forwarding-tables")
    {
        if(abstract_forwarding_tables == nullptr)
        {
            abstract_forwarding_tables = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables>();
        }
        return abstract_forwarding_tables;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(abstract_forwarding_tables != nullptr)
    {
        children["abstract-forwarding-tables"] = abstract_forwarding_tables;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "vrf-name")
    {
        vrf_name = value;
        vrf_name.value_namespace = name_space;
        vrf_name.value_namespace_prefix = name_space_prefix;
    }
}

void OcAftL3::Vrfs::Vrf::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "vrf-name")
    {
        vrf_name.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "abstract-forwarding-tables" || name == "vrf-name")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::AbstractForwardingTables()
    :
    mpls(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls>())
    , ipv6_unicast(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast>())
    , ipv4_unicast(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast>())
{
    mpls->parent = this;
    ipv6_unicast->parent = this;
    ipv4_unicast->parent = this;

    yang_name = "abstract-forwarding-tables"; yang_parent_name = "vrf"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::~AbstractForwardingTables()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::has_data() const
{
    if (is_presence_container) return true;
    return (mpls !=  nullptr && mpls->has_data())
	|| (ipv6_unicast !=  nullptr && ipv6_unicast->has_data())
	|| (ipv4_unicast !=  nullptr && ipv4_unicast->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::has_operation() const
{
    return is_set(yfilter)
	|| (mpls !=  nullptr && mpls->has_operation())
	|| (ipv6_unicast !=  nullptr && ipv6_unicast->has_operation())
	|| (ipv4_unicast !=  nullptr && ipv4_unicast->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "abstract-forwarding-tables";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "mpls")
    {
        if(mpls == nullptr)
        {
            mpls = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls>();
        }
        return mpls;
    }

    if(child_yang_name == "ipv6-unicast")
    {
        if(ipv6_unicast == nullptr)
        {
            ipv6_unicast = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast>();
        }
        return ipv6_unicast;
    }

    if(child_yang_name == "ipv4-unicast")
    {
        if(ipv4_unicast == nullptr)
        {
            ipv4_unicast = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast>();
        }
        return ipv4_unicast;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(mpls != nullptr)
    {
        children["mpls"] = mpls;
    }

    if(ipv6_unicast != nullptr)
    {
        children["ipv6-unicast"] = ipv6_unicast;
    }

    if(ipv4_unicast != nullptr)
    {
        children["ipv4-unicast"] = ipv4_unicast;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "mpls" || name == "ipv6-unicast" || name == "ipv4-unicast")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::Mpls()
    :
    label_entries(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries>())
{
    label_entries->parent = this;

    yang_name = "mpls"; yang_parent_name = "abstract-forwarding-tables"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::~Mpls()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::has_data() const
{
    if (is_presence_container) return true;
    return (label_entries !=  nullptr && label_entries->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::has_operation() const
{
    return is_set(yfilter)
	|| (label_entries !=  nullptr && label_entries->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mpls";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "label-entries")
    {
        if(label_entries == nullptr)
        {
            label_entries = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries>();
        }
        return label_entries;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(label_entries != nullptr)
    {
        children["label-entries"] = label_entries;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "label-entries")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntries()
    :
    label_entry(this, {"label", "label_length"})
{

    yang_name = "label-entries"; yang_parent_name = "mpls"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::~LabelEntries()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<label_entry.len(); index++)
    {
        if(label_entry[index]->has_data())
            return true;
    }
    return false;
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::has_operation() const
{
    for (std::size_t index=0; index<label_entry.len(); index++)
    {
        if(label_entry[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-entries";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "label-entry")
    {
        auto c = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry>();
        c->parent = this;
        label_entry.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : label_entry.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "label-entry")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::LabelEntry()
    :
    label{YType::str, "label"},
    label_length{YType::uint32, "label-length"}
        ,
    state(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State>())
    , next_hop(this, {})
{
    state->parent = this;

    yang_name = "label-entry"; yang_parent_name = "label-entries"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::~LabelEntry()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<next_hop.len(); index++)
    {
        if(next_hop[index]->has_data())
            return true;
    }
    return label.is_set
	|| label_length.is_set
	|| (state !=  nullptr && state->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::has_operation() const
{
    for (std::size_t index=0; index<next_hop.len(); index++)
    {
        if(next_hop[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(label.yfilter)
	|| ydk::is_set(label_length.yfilter)
	|| (state !=  nullptr && state->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-entry";
    ADD_KEY_TOKEN(label, "label");
    ADD_KEY_TOKEN(label_length, "label-length");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (label.is_set || is_set(label.yfilter)) leaf_name_data.push_back(label.get_name_leafdata());
    if (label_length.is_set || is_set(label_length.yfilter)) leaf_name_data.push_back(label_length.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "state")
    {
        if(state == nullptr)
        {
            state = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State>();
        }
        return state;
    }

    if(child_yang_name == "next-hop")
    {
        auto c = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop>();
        c->parent = this;
        next_hop.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(state != nullptr)
    {
        children["state"] = state;
    }

    count = 0;
    for (auto c : next_hop.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "label")
    {
        label = value;
        label.value_namespace = name_space;
        label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-length")
    {
        label_length = value;
        label_length.value_namespace = name_space;
        label_length.value_namespace_prefix = name_space_prefix;
    }
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "label")
    {
        label.yfilter = yfilter;
    }
    if(value_path == "label-length")
    {
        label_length.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "state" || name == "next-hop" || name == "label" || name == "label-length")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State::State()
    :
    prefix_index{YType::str, "prefix-index"},
    label_index{YType::str, "label-index"}
{

    yang_name = "state"; yang_parent_name = "label-entry"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State::~State()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State::has_data() const
{
    if (is_presence_container) return true;
    return prefix_index.is_set
	|| label_index.is_set;
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(prefix_index.yfilter)
	|| ydk::is_set(label_index.yfilter);
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "state";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (prefix_index.is_set || is_set(prefix_index.yfilter)) leaf_name_data.push_back(prefix_index.get_name_leafdata());
    if (label_index.is_set || is_set(label_index.yfilter)) leaf_name_data.push_back(label_index.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "prefix-index")
    {
        prefix_index = value;
        prefix_index.value_namespace = name_space;
        prefix_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-index")
    {
        label_index = value;
        label_index.value_namespace = name_space;
        label_index.value_namespace_prefix = name_space_prefix;
    }
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "prefix-index")
    {
        prefix_index.yfilter = yfilter;
    }
    if(value_path == "label-index")
    {
        label_index.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::State::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "prefix-index" || name == "label-index")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::NextHop()
    :
    state(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State>())
    , interface_ref(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef>())
{
    state->parent = this;
    interface_ref->parent = this;

    yang_name = "next-hop"; yang_parent_name = "label-entry"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::~NextHop()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::has_data() const
{
    if (is_presence_container) return true;
    return (state !=  nullptr && state->has_data())
	|| (interface_ref !=  nullptr && interface_ref->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::has_operation() const
{
    return is_set(yfilter)
	|| (state !=  nullptr && state->has_operation())
	|| (interface_ref !=  nullptr && interface_ref->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "next-hop";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "state")
    {
        if(state == nullptr)
        {
            state = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State>();
        }
        return state;
    }

    if(child_yang_name == "interface-ref")
    {
        if(interface_ref == nullptr)
        {
            interface_ref = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef>();
        }
        return interface_ref;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(state != nullptr)
    {
        children["state"] = state;
    }

    if(interface_ref != nullptr)
    {
        children["interface-ref"] = interface_ref;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "state" || name == "interface-ref")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State::State()
    :
    index_{YType::uint64, "index"},
    weight{YType::uint32, "weight"},
    ip_address{YType::str, "ip-address"},
    network_instance{YType::str, "network-instance"},
    popped_mpls_label_stack{YType::str, "popped-mpls-label-stack"},
    pushed_mpls_label_stack{YType::str, "pushed-mpls-label-stack"}
{

    yang_name = "state"; yang_parent_name = "next-hop"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State::~State()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State::has_data() const
{
    if (is_presence_container) return true;
    for (auto const & leaf : popped_mpls_label_stack.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : pushed_mpls_label_stack.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return index_.is_set
	|| weight.is_set
	|| ip_address.is_set
	|| network_instance.is_set;
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State::has_operation() const
{
    for (auto const & leaf : popped_mpls_label_stack.getYLeafs())
    {
        if(is_set(leaf.yfilter))
            return true;
    }
    for (auto const & leaf : pushed_mpls_label_stack.getYLeafs())
    {
        if(is_set(leaf.yfilter))
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(index_.yfilter)
	|| ydk::is_set(weight.yfilter)
	|| ydk::is_set(ip_address.yfilter)
	|| ydk::is_set(network_instance.yfilter)
	|| ydk::is_set(popped_mpls_label_stack.yfilter)
	|| ydk::is_set(pushed_mpls_label_stack.yfilter);
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "state";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (index_.is_set || is_set(index_.yfilter)) leaf_name_data.push_back(index_.get_name_leafdata());
    if (weight.is_set || is_set(weight.yfilter)) leaf_name_data.push_back(weight.get_name_leafdata());
    if (ip_address.is_set || is_set(ip_address.yfilter)) leaf_name_data.push_back(ip_address.get_name_leafdata());
    if (network_instance.is_set || is_set(network_instance.yfilter)) leaf_name_data.push_back(network_instance.get_name_leafdata());

    auto popped_mpls_label_stack_name_datas = popped_mpls_label_stack.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), popped_mpls_label_stack_name_datas.begin(), popped_mpls_label_stack_name_datas.end());
    auto pushed_mpls_label_stack_name_datas = pushed_mpls_label_stack.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), pushed_mpls_label_stack_name_datas.begin(), pushed_mpls_label_stack_name_datas.end());
    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "index")
    {
        index_ = value;
        index_.value_namespace = name_space;
        index_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight")
    {
        weight = value;
        weight.value_namespace = name_space;
        weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-address")
    {
        ip_address = value;
        ip_address.value_namespace = name_space;
        ip_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "network-instance")
    {
        network_instance = value;
        network_instance.value_namespace = name_space;
        network_instance.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "popped-mpls-label-stack")
    {
        popped_mpls_label_stack.append(value);
    }
    if(value_path == "pushed-mpls-label-stack")
    {
        pushed_mpls_label_stack.append(value);
    }
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "index")
    {
        index_.yfilter = yfilter;
    }
    if(value_path == "weight")
    {
        weight.yfilter = yfilter;
    }
    if(value_path == "ip-address")
    {
        ip_address.yfilter = yfilter;
    }
    if(value_path == "network-instance")
    {
        network_instance.yfilter = yfilter;
    }
    if(value_path == "popped-mpls-label-stack")
    {
        popped_mpls_label_stack.yfilter = yfilter;
    }
    if(value_path == "pushed-mpls-label-stack")
    {
        pushed_mpls_label_stack.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::State::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "index" || name == "weight" || name == "ip-address" || name == "network-instance" || name == "popped-mpls-label-stack" || name == "pushed-mpls-label-stack")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::InterfaceRef()
    :
    state(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State>())
{
    state->parent = this;

    yang_name = "interface-ref"; yang_parent_name = "next-hop"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::~InterfaceRef()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::has_data() const
{
    if (is_presence_container) return true;
    return (state !=  nullptr && state->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::has_operation() const
{
    return is_set(yfilter)
	|| (state !=  nullptr && state->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-ref";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "state")
    {
        if(state == nullptr)
        {
            state = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State>();
        }
        return state;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(state != nullptr)
    {
        children["state"] = state;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "state")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State::State()
    :
    interface{YType::str, "interface"},
    subinterface{YType::uint32, "subinterface"}
{

    yang_name = "state"; yang_parent_name = "interface-ref"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State::~State()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State::has_data() const
{
    if (is_presence_container) return true;
    return interface.is_set
	|| subinterface.is_set;
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(interface.yfilter)
	|| ydk::is_set(subinterface.yfilter);
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "state";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface.is_set || is_set(interface.yfilter)) leaf_name_data.push_back(interface.get_name_leafdata());
    if (subinterface.is_set || is_set(subinterface.yfilter)) leaf_name_data.push_back(subinterface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "interface")
    {
        interface = value;
        interface.value_namespace = name_space;
        interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "subinterface")
    {
        subinterface = value;
        subinterface.value_namespace = name_space;
        subinterface.value_namespace_prefix = name_space_prefix;
    }
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "interface")
    {
        interface.yfilter = yfilter;
    }
    if(value_path == "subinterface")
    {
        subinterface.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Mpls::LabelEntries::LabelEntry::NextHop::InterfaceRef::State::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "interface" || name == "subinterface")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::Ipv6Unicast()
    :
    prefix_entries(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries>())
{
    prefix_entries->parent = this;

    yang_name = "ipv6-unicast"; yang_parent_name = "abstract-forwarding-tables"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::~Ipv6Unicast()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::has_data() const
{
    if (is_presence_container) return true;
    return (prefix_entries !=  nullptr && prefix_entries->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::has_operation() const
{
    return is_set(yfilter)
	|| (prefix_entries !=  nullptr && prefix_entries->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv6-unicast";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "prefix-entries")
    {
        if(prefix_entries == nullptr)
        {
            prefix_entries = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries>();
        }
        return prefix_entries;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(prefix_entries != nullptr)
    {
        children["prefix-entries"] = prefix_entries;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "prefix-entries")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntries()
    :
    prefix_entry(this, {"network"})
{

    yang_name = "prefix-entries"; yang_parent_name = "ipv6-unicast"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::~PrefixEntries()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<prefix_entry.len(); index++)
    {
        if(prefix_entry[index]->has_data())
            return true;
    }
    return false;
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::has_operation() const
{
    for (std::size_t index=0; index<prefix_entry.len(); index++)
    {
        if(prefix_entry[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "prefix-entries";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "prefix-entry")
    {
        auto c = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry>();
        c->parent = this;
        prefix_entry.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : prefix_entry.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "prefix-entry")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::PrefixEntry()
    :
    network{YType::str, "network"}
        ,
    state(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State>())
    , next_hop(this, {})
{
    state->parent = this;

    yang_name = "prefix-entry"; yang_parent_name = "prefix-entries"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::~PrefixEntry()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<next_hop.len(); index++)
    {
        if(next_hop[index]->has_data())
            return true;
    }
    return network.is_set
	|| (state !=  nullptr && state->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::has_operation() const
{
    for (std::size_t index=0; index<next_hop.len(); index++)
    {
        if(next_hop[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(network.yfilter)
	|| (state !=  nullptr && state->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "prefix-entry";
    ADD_KEY_TOKEN(network, "network");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (network.is_set || is_set(network.yfilter)) leaf_name_data.push_back(network.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "state")
    {
        if(state == nullptr)
        {
            state = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State>();
        }
        return state;
    }

    if(child_yang_name == "next-hop")
    {
        auto c = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop>();
        c->parent = this;
        next_hop.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(state != nullptr)
    {
        children["state"] = state;
    }

    count = 0;
    for (auto c : next_hop.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "network")
    {
        network = value;
        network.value_namespace = name_space;
        network.value_namespace_prefix = name_space_prefix;
    }
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "network")
    {
        network.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "state" || name == "next-hop" || name == "network")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State::State()
    :
    prefix_index{YType::str, "prefix-index"},
    label_index{YType::str, "label-index"}
{

    yang_name = "state"; yang_parent_name = "prefix-entry"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State::~State()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State::has_data() const
{
    if (is_presence_container) return true;
    return prefix_index.is_set
	|| label_index.is_set;
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(prefix_index.yfilter)
	|| ydk::is_set(label_index.yfilter);
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "state";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (prefix_index.is_set || is_set(prefix_index.yfilter)) leaf_name_data.push_back(prefix_index.get_name_leafdata());
    if (label_index.is_set || is_set(label_index.yfilter)) leaf_name_data.push_back(label_index.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "prefix-index")
    {
        prefix_index = value;
        prefix_index.value_namespace = name_space;
        prefix_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-index")
    {
        label_index = value;
        label_index.value_namespace = name_space;
        label_index.value_namespace_prefix = name_space_prefix;
    }
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "prefix-index")
    {
        prefix_index.yfilter = yfilter;
    }
    if(value_path == "label-index")
    {
        label_index.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::State::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "prefix-index" || name == "label-index")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::NextHop()
    :
    state(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State>())
    , interface_ref(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef>())
{
    state->parent = this;
    interface_ref->parent = this;

    yang_name = "next-hop"; yang_parent_name = "prefix-entry"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::~NextHop()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::has_data() const
{
    if (is_presence_container) return true;
    return (state !=  nullptr && state->has_data())
	|| (interface_ref !=  nullptr && interface_ref->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::has_operation() const
{
    return is_set(yfilter)
	|| (state !=  nullptr && state->has_operation())
	|| (interface_ref !=  nullptr && interface_ref->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "next-hop";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "state")
    {
        if(state == nullptr)
        {
            state = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State>();
        }
        return state;
    }

    if(child_yang_name == "interface-ref")
    {
        if(interface_ref == nullptr)
        {
            interface_ref = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef>();
        }
        return interface_ref;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(state != nullptr)
    {
        children["state"] = state;
    }

    if(interface_ref != nullptr)
    {
        children["interface-ref"] = interface_ref;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "state" || name == "interface-ref")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State::State()
    :
    index_{YType::uint64, "index"},
    weight{YType::uint32, "weight"},
    ip_address{YType::str, "ip-address"},
    network_instance{YType::str, "network-instance"},
    popped_mpls_label_stack{YType::str, "popped-mpls-label-stack"},
    pushed_mpls_label_stack{YType::str, "pushed-mpls-label-stack"}
{

    yang_name = "state"; yang_parent_name = "next-hop"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State::~State()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State::has_data() const
{
    if (is_presence_container) return true;
    for (auto const & leaf : popped_mpls_label_stack.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : pushed_mpls_label_stack.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return index_.is_set
	|| weight.is_set
	|| ip_address.is_set
	|| network_instance.is_set;
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State::has_operation() const
{
    for (auto const & leaf : popped_mpls_label_stack.getYLeafs())
    {
        if(is_set(leaf.yfilter))
            return true;
    }
    for (auto const & leaf : pushed_mpls_label_stack.getYLeafs())
    {
        if(is_set(leaf.yfilter))
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(index_.yfilter)
	|| ydk::is_set(weight.yfilter)
	|| ydk::is_set(ip_address.yfilter)
	|| ydk::is_set(network_instance.yfilter)
	|| ydk::is_set(popped_mpls_label_stack.yfilter)
	|| ydk::is_set(pushed_mpls_label_stack.yfilter);
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "state";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (index_.is_set || is_set(index_.yfilter)) leaf_name_data.push_back(index_.get_name_leafdata());
    if (weight.is_set || is_set(weight.yfilter)) leaf_name_data.push_back(weight.get_name_leafdata());
    if (ip_address.is_set || is_set(ip_address.yfilter)) leaf_name_data.push_back(ip_address.get_name_leafdata());
    if (network_instance.is_set || is_set(network_instance.yfilter)) leaf_name_data.push_back(network_instance.get_name_leafdata());

    auto popped_mpls_label_stack_name_datas = popped_mpls_label_stack.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), popped_mpls_label_stack_name_datas.begin(), popped_mpls_label_stack_name_datas.end());
    auto pushed_mpls_label_stack_name_datas = pushed_mpls_label_stack.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), pushed_mpls_label_stack_name_datas.begin(), pushed_mpls_label_stack_name_datas.end());
    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "index")
    {
        index_ = value;
        index_.value_namespace = name_space;
        index_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight")
    {
        weight = value;
        weight.value_namespace = name_space;
        weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-address")
    {
        ip_address = value;
        ip_address.value_namespace = name_space;
        ip_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "network-instance")
    {
        network_instance = value;
        network_instance.value_namespace = name_space;
        network_instance.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "popped-mpls-label-stack")
    {
        popped_mpls_label_stack.append(value);
    }
    if(value_path == "pushed-mpls-label-stack")
    {
        pushed_mpls_label_stack.append(value);
    }
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "index")
    {
        index_.yfilter = yfilter;
    }
    if(value_path == "weight")
    {
        weight.yfilter = yfilter;
    }
    if(value_path == "ip-address")
    {
        ip_address.yfilter = yfilter;
    }
    if(value_path == "network-instance")
    {
        network_instance.yfilter = yfilter;
    }
    if(value_path == "popped-mpls-label-stack")
    {
        popped_mpls_label_stack.yfilter = yfilter;
    }
    if(value_path == "pushed-mpls-label-stack")
    {
        pushed_mpls_label_stack.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::State::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "index" || name == "weight" || name == "ip-address" || name == "network-instance" || name == "popped-mpls-label-stack" || name == "pushed-mpls-label-stack")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::InterfaceRef()
    :
    state(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State>())
{
    state->parent = this;

    yang_name = "interface-ref"; yang_parent_name = "next-hop"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::~InterfaceRef()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::has_data() const
{
    if (is_presence_container) return true;
    return (state !=  nullptr && state->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::has_operation() const
{
    return is_set(yfilter)
	|| (state !=  nullptr && state->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-ref";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "state")
    {
        if(state == nullptr)
        {
            state = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State>();
        }
        return state;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(state != nullptr)
    {
        children["state"] = state;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "state")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State::State()
    :
    interface{YType::str, "interface"},
    subinterface{YType::uint32, "subinterface"}
{

    yang_name = "state"; yang_parent_name = "interface-ref"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State::~State()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State::has_data() const
{
    if (is_presence_container) return true;
    return interface.is_set
	|| subinterface.is_set;
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(interface.yfilter)
	|| ydk::is_set(subinterface.yfilter);
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "state";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface.is_set || is_set(interface.yfilter)) leaf_name_data.push_back(interface.get_name_leafdata());
    if (subinterface.is_set || is_set(subinterface.yfilter)) leaf_name_data.push_back(subinterface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "interface")
    {
        interface = value;
        interface.value_namespace = name_space;
        interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "subinterface")
    {
        subinterface = value;
        subinterface.value_namespace = name_space;
        subinterface.value_namespace_prefix = name_space_prefix;
    }
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "interface")
    {
        interface.yfilter = yfilter;
    }
    if(value_path == "subinterface")
    {
        subinterface.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv6Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef::State::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "interface" || name == "subinterface")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::Ipv4Unicast()
    :
    prefix_entries(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries>())
{
    prefix_entries->parent = this;

    yang_name = "ipv4-unicast"; yang_parent_name = "abstract-forwarding-tables"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::~Ipv4Unicast()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::has_data() const
{
    if (is_presence_container) return true;
    return (prefix_entries !=  nullptr && prefix_entries->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::has_operation() const
{
    return is_set(yfilter)
	|| (prefix_entries !=  nullptr && prefix_entries->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-unicast";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "prefix-entries")
    {
        if(prefix_entries == nullptr)
        {
            prefix_entries = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries>();
        }
        return prefix_entries;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(prefix_entries != nullptr)
    {
        children["prefix-entries"] = prefix_entries;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "prefix-entries")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntries()
    :
    prefix_entry(this, {"network"})
{

    yang_name = "prefix-entries"; yang_parent_name = "ipv4-unicast"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::~PrefixEntries()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<prefix_entry.len(); index++)
    {
        if(prefix_entry[index]->has_data())
            return true;
    }
    return false;
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::has_operation() const
{
    for (std::size_t index=0; index<prefix_entry.len(); index++)
    {
        if(prefix_entry[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "prefix-entries";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "prefix-entry")
    {
        auto c = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry>();
        c->parent = this;
        prefix_entry.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto c : prefix_entry.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "prefix-entry")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::PrefixEntry()
    :
    network{YType::str, "network"}
        ,
    state(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State>())
    , next_hop(this, {})
{
    state->parent = this;

    yang_name = "prefix-entry"; yang_parent_name = "prefix-entries"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::~PrefixEntry()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<next_hop.len(); index++)
    {
        if(next_hop[index]->has_data())
            return true;
    }
    return network.is_set
	|| (state !=  nullptr && state->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::has_operation() const
{
    for (std::size_t index=0; index<next_hop.len(); index++)
    {
        if(next_hop[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(network.yfilter)
	|| (state !=  nullptr && state->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "prefix-entry";
    ADD_KEY_TOKEN(network, "network");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (network.is_set || is_set(network.yfilter)) leaf_name_data.push_back(network.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "state")
    {
        if(state == nullptr)
        {
            state = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State>();
        }
        return state;
    }

    if(child_yang_name == "next-hop")
    {
        auto c = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop>();
        c->parent = this;
        next_hop.append(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(state != nullptr)
    {
        children["state"] = state;
    }

    count = 0;
    for (auto c : next_hop.entities())
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "network")
    {
        network = value;
        network.value_namespace = name_space;
        network.value_namespace_prefix = name_space_prefix;
    }
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "network")
    {
        network.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "state" || name == "next-hop" || name == "network")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State::State()
    :
    prefix_index{YType::str, "prefix-index"},
    label_index{YType::str, "label-index"}
{

    yang_name = "state"; yang_parent_name = "prefix-entry"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State::~State()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State::has_data() const
{
    if (is_presence_container) return true;
    return prefix_index.is_set
	|| label_index.is_set;
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(prefix_index.yfilter)
	|| ydk::is_set(label_index.yfilter);
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "state";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (prefix_index.is_set || is_set(prefix_index.yfilter)) leaf_name_data.push_back(prefix_index.get_name_leafdata());
    if (label_index.is_set || is_set(label_index.yfilter)) leaf_name_data.push_back(label_index.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "prefix-index")
    {
        prefix_index = value;
        prefix_index.value_namespace = name_space;
        prefix_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-index")
    {
        label_index = value;
        label_index.value_namespace = name_space;
        label_index.value_namespace_prefix = name_space_prefix;
    }
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "prefix-index")
    {
        prefix_index.yfilter = yfilter;
    }
    if(value_path == "label-index")
    {
        label_index.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::State::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "prefix-index" || name == "label-index")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::NextHop()
    :
    state(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State>())
    , interface_ref(std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef>())
{
    state->parent = this;
    interface_ref->parent = this;

    yang_name = "next-hop"; yang_parent_name = "prefix-entry"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::~NextHop()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::has_data() const
{
    if (is_presence_container) return true;
    return (state !=  nullptr && state->has_data())
	|| (interface_ref !=  nullptr && interface_ref->has_data());
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::has_operation() const
{
    return is_set(yfilter)
	|| (state !=  nullptr && state->has_operation())
	|| (interface_ref !=  nullptr && interface_ref->has_operation());
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "next-hop";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "state")
    {
        if(state == nullptr)
        {
            state = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State>();
        }
        return state;
    }

    if(child_yang_name == "interface-ref")
    {
        if(interface_ref == nullptr)
        {
            interface_ref = std::make_shared<OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::InterfaceRef>();
        }
        return interface_ref;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(state != nullptr)
    {
        children["state"] = state;
    }

    if(interface_ref != nullptr)
    {
        children["interface-ref"] = interface_ref;
    }

    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "state" || name == "interface-ref")
        return true;
    return false;
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State::State()
    :
    index_{YType::uint64, "index"},
    weight{YType::uint32, "weight"},
    ip_address{YType::str, "ip-address"},
    network_instance{YType::str, "network-instance"},
    popped_mpls_label_stack{YType::str, "popped-mpls-label-stack"},
    pushed_mpls_label_stack{YType::str, "pushed-mpls-label-stack"}
{

    yang_name = "state"; yang_parent_name = "next-hop"; is_top_level_class = false; has_list_ancestor = true; 
}

OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State::~State()
{
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State::has_data() const
{
    if (is_presence_container) return true;
    for (auto const & leaf : popped_mpls_label_stack.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : pushed_mpls_label_stack.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return index_.is_set
	|| weight.is_set
	|| ip_address.is_set
	|| network_instance.is_set;
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State::has_operation() const
{
    for (auto const & leaf : popped_mpls_label_stack.getYLeafs())
    {
        if(is_set(leaf.yfilter))
            return true;
    }
    for (auto const & leaf : pushed_mpls_label_stack.getYLeafs())
    {
        if(is_set(leaf.yfilter))
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(index_.yfilter)
	|| ydk::is_set(weight.yfilter)
	|| ydk::is_set(ip_address.yfilter)
	|| ydk::is_set(network_instance.yfilter)
	|| ydk::is_set(popped_mpls_label_stack.yfilter)
	|| ydk::is_set(pushed_mpls_label_stack.yfilter);
}

std::string OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "state";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (index_.is_set || is_set(index_.yfilter)) leaf_name_data.push_back(index_.get_name_leafdata());
    if (weight.is_set || is_set(weight.yfilter)) leaf_name_data.push_back(weight.get_name_leafdata());
    if (ip_address.is_set || is_set(ip_address.yfilter)) leaf_name_data.push_back(ip_address.get_name_leafdata());
    if (network_instance.is_set || is_set(network_instance.yfilter)) leaf_name_data.push_back(network_instance.get_name_leafdata());

    auto popped_mpls_label_stack_name_datas = popped_mpls_label_stack.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), popped_mpls_label_stack_name_datas.begin(), popped_mpls_label_stack_name_datas.end());
    auto pushed_mpls_label_stack_name_datas = pushed_mpls_label_stack.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), pushed_mpls_label_stack_name_datas.begin(), pushed_mpls_label_stack_name_datas.end());
    return leaf_name_data;

}

std::shared_ptr<Entity> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "index")
    {
        index_ = value;
        index_.value_namespace = name_space;
        index_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight")
    {
        weight = value;
        weight.value_namespace = name_space;
        weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-address")
    {
        ip_address = value;
        ip_address.value_namespace = name_space;
        ip_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "network-instance")
    {
        network_instance = value;
        network_instance.value_namespace = name_space;
        network_instance.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "popped-mpls-label-stack")
    {
        popped_mpls_label_stack.append(value);
    }
    if(value_path == "pushed-mpls-label-stack")
    {
        pushed_mpls_label_stack.append(value);
    }
}

void OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "index")
    {
        index_.yfilter = yfilter;
    }
    if(value_path == "weight")
    {
        weight.yfilter = yfilter;
    }
    if(value_path == "ip-address")
    {
        ip_address.yfilter = yfilter;
    }
    if(value_path == "network-instance")
    {
        network_instance.yfilter = yfilter;
    }
    if(value_path == "popped-mpls-label-stack")
    {
        popped_mpls_label_stack.yfilter = yfilter;
    }
    if(value_path == "pushed-mpls-label-stack")
    {
        pushed_mpls_label_stack.yfilter = yfilter;
    }
}

bool OcAftL3::Vrfs::Vrf::AbstractForwardingTables::Ipv4Unicast::PrefixEntries::PrefixEntry::NextHop::State::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "index" || name == "weight" || name == "ip-address" || name == "network-instance" || name == "popped-mpls-label-stack" || name == "pushed-mpls-label-stack")
        return true;
    return false;
}


}
}

