
#include <sstream>
#include <iostream>
#include <ydk/entity_util.hpp>
#include "bundle_info.hpp"
#include "generated_entity_lookup.hpp"
#include "Cisco_IOS_XR_qos_ma_oper_0.hpp"
#include "Cisco_IOS_XR_qos_ma_oper_3.hpp"
#include "Cisco_IOS_XR_qos_ma_oper_7.hpp"
#include "Cisco_IOS_XR_qos_ma_oper_2.hpp"
#include "Cisco_IOS_XR_qos_ma_oper_6.hpp"
#include "Cisco_IOS_XR_qos_ma_oper_1.hpp"

using namespace ydk;

namespace cisco_ios_xr {
namespace Cisco_IOS_XR_qos_ma_oper {

Qos::Qos()
    :
    nv_interface_table(std::make_shared<Qos::NvInterfaceTable>())
	,nv_satellite(std::make_shared<Qos::NvSatellite>())
	,nodes(std::make_shared<Qos::Nodes>())
	,qos_global(std::make_shared<Qos::QosGlobal>())
	,interface_table(std::make_shared<Qos::InterfaceTable>())
{
    nv_interface_table->parent = this;
    nv_satellite->parent = this;
    nodes->parent = this;
    qos_global->parent = this;
    interface_table->parent = this;

    yang_name = "qos"; yang_parent_name = "Cisco-IOS-XR-qos-ma-oper"; is_top_level_class = true; has_list_ancestor = false;
}

Qos::~Qos()
{
}

bool Qos::has_data() const
{
    return (nv_interface_table !=  nullptr && nv_interface_table->has_data())
	|| (nv_satellite !=  nullptr && nv_satellite->has_data())
	|| (nodes !=  nullptr && nodes->has_data())
	|| (qos_global !=  nullptr && qos_global->has_data())
	|| (interface_table !=  nullptr && interface_table->has_data());
}

bool Qos::has_operation() const
{
    return is_set(yfilter)
	|| (nv_interface_table !=  nullptr && nv_interface_table->has_operation())
	|| (nv_satellite !=  nullptr && nv_satellite->has_operation())
	|| (nodes !=  nullptr && nodes->has_operation())
	|| (qos_global !=  nullptr && qos_global->has_operation())
	|| (interface_table !=  nullptr && interface_table->has_operation());
}

std::string Qos::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-qos-ma-oper:qos";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nv-interface-table")
    {
        if(nv_interface_table == nullptr)
        {
            nv_interface_table = std::make_shared<Qos::NvInterfaceTable>();
        }
        return nv_interface_table;
    }

    if(child_yang_name == "nv-satellite")
    {
        if(nv_satellite == nullptr)
        {
            nv_satellite = std::make_shared<Qos::NvSatellite>();
        }
        return nv_satellite;
    }

    if(child_yang_name == "nodes")
    {
        if(nodes == nullptr)
        {
            nodes = std::make_shared<Qos::Nodes>();
        }
        return nodes;
    }

    if(child_yang_name == "qos-global")
    {
        if(qos_global == nullptr)
        {
            qos_global = std::make_shared<Qos::QosGlobal>();
        }
        return qos_global;
    }

    if(child_yang_name == "interface-table")
    {
        if(interface_table == nullptr)
        {
            interface_table = std::make_shared<Qos::InterfaceTable>();
        }
        return interface_table;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(nv_interface_table != nullptr)
    {
        children["nv-interface-table"] = nv_interface_table;
    }

    if(nv_satellite != nullptr)
    {
        children["nv-satellite"] = nv_satellite;
    }

    if(nodes != nullptr)
    {
        children["nodes"] = nodes;
    }

    if(qos_global != nullptr)
    {
        children["qos-global"] = qos_global;
    }

    if(interface_table != nullptr)
    {
        children["interface-table"] = interface_table;
    }

    return children;
}

void Qos::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::set_filter(const std::string & value_path, YFilter yfilter)
{
}

std::shared_ptr<Entity> Qos::clone_ptr() const
{
    return std::make_shared<Qos>();
}

std::string Qos::get_bundle_yang_models_location() const
{
    return ydk_cisco_ios_xr_models_path;
}

std::string Qos::get_bundle_name() const
{
    return "cisco_ios_xr";
}

augment_capabilities_function Qos::get_augment_capabilities_function() const
{
    return cisco_ios_xr_augment_lookup_tables;
}

std::map<std::pair<std::string, std::string>, std::string> Qos::get_namespace_identity_lookup() const
{
    return cisco_ios_xr_namespace_identity_lookup;
}

bool Qos::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nv-interface-table" || name == "nv-satellite" || name == "nodes" || name == "qos-global" || name == "interface-table")
        return true;
    return false;
}

Qos::NvInterfaceTable::NvInterfaceTable()
{

    yang_name = "nv-interface-table"; yang_parent_name = "qos"; is_top_level_class = false; has_list_ancestor = false;
}

Qos::NvInterfaceTable::~NvInterfaceTable()
{
}

bool Qos::NvInterfaceTable::has_data() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_data())
            return true;
    }
    return false;
}

bool Qos::NvInterfaceTable::has_operation() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Qos::NvInterfaceTable::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-qos-ma-oper:qos/" << get_segment_path();
    return path_buffer.str();
}

std::string Qos::NvInterfaceTable::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nv-interface-table";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "interface")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface>();
        c->parent = this;
        interface.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : interface)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "interface")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Interface()
    :
    interface_name{YType::str, "interface-name"}
    	,
    nodes(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes>())
	,member_interfaces(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces>())
	,satellite_ids(std::make_shared<Qos::NvInterfaceTable::Interface::SatelliteIds>())
	,input(std::make_shared<Qos::NvInterfaceTable::Interface::Input>())
	,output(std::make_shared<Qos::NvInterfaceTable::Interface::Output>())
{
    nodes->parent = this;
    member_interfaces->parent = this;
    satellite_ids->parent = this;
    input->parent = this;
    output->parent = this;

    yang_name = "interface"; yang_parent_name = "nv-interface-table"; is_top_level_class = false; has_list_ancestor = false;
}

Qos::NvInterfaceTable::Interface::~Interface()
{
}

bool Qos::NvInterfaceTable::Interface::has_data() const
{
    return interface_name.is_set
	|| (nodes !=  nullptr && nodes->has_data())
	|| (member_interfaces !=  nullptr && member_interfaces->has_data())
	|| (satellite_ids !=  nullptr && satellite_ids->has_data())
	|| (input !=  nullptr && input->has_data())
	|| (output !=  nullptr && output->has_data());
}

bool Qos::NvInterfaceTable::Interface::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(interface_name.yfilter)
	|| (nodes !=  nullptr && nodes->has_operation())
	|| (member_interfaces !=  nullptr && member_interfaces->has_operation())
	|| (satellite_ids !=  nullptr && satellite_ids->has_operation())
	|| (input !=  nullptr && input->has_operation())
	|| (output !=  nullptr && output->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-qos-ma-oper:qos/nv-interface-table/" << get_segment_path();
    return path_buffer.str();
}

std::string Qos::NvInterfaceTable::Interface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface" <<"[interface-name='" <<interface_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.yfilter)) leaf_name_data.push_back(interface_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nodes")
    {
        if(nodes == nullptr)
        {
            nodes = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes>();
        }
        return nodes;
    }

    if(child_yang_name == "member-interfaces")
    {
        if(member_interfaces == nullptr)
        {
            member_interfaces = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces>();
        }
        return member_interfaces;
    }

    if(child_yang_name == "satellite-ids")
    {
        if(satellite_ids == nullptr)
        {
            satellite_ids = std::make_shared<Qos::NvInterfaceTable::Interface::SatelliteIds>();
        }
        return satellite_ids;
    }

    if(child_yang_name == "input")
    {
        if(input == nullptr)
        {
            input = std::make_shared<Qos::NvInterfaceTable::Interface::Input>();
        }
        return input;
    }

    if(child_yang_name == "output")
    {
        if(output == nullptr)
        {
            output = std::make_shared<Qos::NvInterfaceTable::Interface::Output>();
        }
        return output;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(nodes != nullptr)
    {
        children["nodes"] = nodes;
    }

    if(member_interfaces != nullptr)
    {
        children["member-interfaces"] = member_interfaces;
    }

    if(satellite_ids != nullptr)
    {
        children["satellite-ids"] = satellite_ids;
    }

    if(input != nullptr)
    {
        children["input"] = input;
    }

    if(output != nullptr)
    {
        children["output"] = output;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
        interface_name.value_namespace = name_space;
        interface_name.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "interface-name")
    {
        interface_name.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nodes" || name == "member-interfaces" || name == "satellite-ids" || name == "input" || name == "output" || name == "interface-name")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Nodes()
{

    yang_name = "nodes"; yang_parent_name = "interface"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::~Nodes()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::has_data() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool Qos::NvInterfaceTable::Interface::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "node")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node>();
        c->parent = this;
        node.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : node)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::Nodes::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "node")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Node()
    :
    node_name{YType::str, "node-name"}
    	,
    input(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input>())
	,output(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output>())
{
    input->parent = this;
    output->parent = this;

    yang_name = "node"; yang_parent_name = "nodes"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::~Node()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::has_data() const
{
    return node_name.is_set
	|| (input !=  nullptr && input->has_data())
	|| (output !=  nullptr && output->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(node_name.yfilter)
	|| (input !=  nullptr && input->has_operation())
	|| (output !=  nullptr && output->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node" <<"[node-name='" <<node_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_name.is_set || is_set(node_name.yfilter)) leaf_name_data.push_back(node_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "input")
    {
        if(input == nullptr)
        {
            input = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input>();
        }
        return input;
    }

    if(child_yang_name == "output")
    {
        if(output == nullptr)
        {
            output = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output>();
        }
        return output;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(input != nullptr)
    {
        children["input"] = input;
    }

    if(output != nullptr)
    {
        children["output"] = output;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "node-name")
    {
        node_name = value;
        node_name.value_namespace = name_space;
        node_name.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "node-name")
    {
        node_name.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "input" || name == "output" || name == "node-name")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::Input()
    :
    service_policy_names(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames>())
{
    service_policy_names->parent = this;

    yang_name = "input"; yang_parent_name = "node"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::~Input()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::has_data() const
{
    return (service_policy_names !=  nullptr && service_policy_names->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::has_operation() const
{
    return is_set(yfilter)
	|| (service_policy_names !=  nullptr && service_policy_names->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "service-policy-names")
    {
        if(service_policy_names == nullptr)
        {
            service_policy_names = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames>();
        }
        return service_policy_names;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(service_policy_names != nullptr)
    {
        children["service-policy-names"] = service_policy_names;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "service-policy-names")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyNames()
{

    yang_name = "service-policy-names"; yang_parent_name = "input"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::~ServicePolicyNames()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::has_data() const
{
    for (std::size_t index=0; index<service_policy_instance.size(); index++)
    {
        if(service_policy_instance[index]->has_data())
            return true;
    }
    return false;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::has_operation() const
{
    for (std::size_t index=0; index<service_policy_instance.size(); index++)
    {
        if(service_policy_instance[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "service-policy-names";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "service-policy-instance")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance>();
        c->parent = this;
        service_policy_instance.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : service_policy_instance)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "service-policy-instance")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::ServicePolicyInstance()
    :
    service_policy_name{YType::str, "service-policy-name"}
    	,
    statistics(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics>())
{
    statistics->parent = this;

    yang_name = "service-policy-instance"; yang_parent_name = "service-policy-names"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::~ServicePolicyInstance()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::has_data() const
{
    return service_policy_name.is_set
	|| (statistics !=  nullptr && statistics->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(service_policy_name.yfilter)
	|| (statistics !=  nullptr && statistics->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "service-policy-instance" <<"[service-policy-name='" <<service_policy_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (service_policy_name.is_set || is_set(service_policy_name.yfilter)) leaf_name_data.push_back(service_policy_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "statistics")
    {
        if(statistics == nullptr)
        {
            statistics = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics>();
        }
        return statistics;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(statistics != nullptr)
    {
        children["statistics"] = statistics;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "service-policy-name")
    {
        service_policy_name = value;
        service_policy_name.value_namespace = name_space;
        service_policy_name.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "service-policy-name")
    {
        service_policy_name.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "statistics" || name == "service-policy-name")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::Statistics()
    :
    policy_name{YType::str, "policy-name"},
    state{YType::enumeration, "state"},
    state_description{YType::str, "state-description"},
    satid{YType::uint32, "satid"}
{

    yang_name = "statistics"; yang_parent_name = "service-policy-instance"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::~Statistics()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::has_data() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_data())
            return true;
    }
    return policy_name.is_set
	|| state.is_set
	|| state_description.is_set
	|| satid.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::has_operation() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(policy_name.yfilter)
	|| ydk::is_set(state.yfilter)
	|| ydk::is_set(state_description.yfilter)
	|| ydk::is_set(satid.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "statistics";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (policy_name.is_set || is_set(policy_name.yfilter)) leaf_name_data.push_back(policy_name.get_name_leafdata());
    if (state.is_set || is_set(state.yfilter)) leaf_name_data.push_back(state.get_name_leafdata());
    if (state_description.is_set || is_set(state_description.yfilter)) leaf_name_data.push_back(state_description.get_name_leafdata());
    if (satid.is_set || is_set(satid.yfilter)) leaf_name_data.push_back(satid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "class-stats")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats>();
        c->parent = this;
        class_stats.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : class_stats)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "policy-name")
    {
        policy_name = value;
        policy_name.value_namespace = name_space;
        policy_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state")
    {
        state = value;
        state.value_namespace = name_space;
        state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state-description")
    {
        state_description = value;
        state_description.value_namespace = name_space;
        state_description.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "satid")
    {
        satid = value;
        satid.value_namespace = name_space;
        satid.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "policy-name")
    {
        policy_name.yfilter = yfilter;
    }
    if(value_path == "state")
    {
        state.yfilter = yfilter;
    }
    if(value_path == "state-description")
    {
        state_description.yfilter = yfilter;
    }
    if(value_path == "satid")
    {
        satid.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "class-stats" || name == "policy-name" || name == "state" || name == "state-description" || name == "satid")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ClassStats()
    :
    counter_validity_bitmask{YType::uint64, "counter-validity-bitmask"},
    class_name{YType::str, "class-name"},
    shared_queue_id{YType::uint32, "shared-queue-id"},
    queue_descr{YType::str, "queue-descr"},
    cac_state{YType::enumeration, "cac-state"}
    	,
    general_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats>())
	,iphc_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats>())
	,child_policy(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy>())
	,cac_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats>())
{
    general_stats->parent = this;
    iphc_stats->parent = this;
    child_policy->parent = this;
    cac_stats->parent = this;

    yang_name = "class-stats"; yang_parent_name = "statistics"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::~ClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_data() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_data())
            return true;
    }
    return counter_validity_bitmask.is_set
	|| class_name.is_set
	|| shared_queue_id.is_set
	|| queue_descr.is_set
	|| cac_state.is_set
	|| (general_stats !=  nullptr && general_stats->has_data())
	|| (iphc_stats !=  nullptr && iphc_stats->has_data())
	|| (child_policy !=  nullptr && child_policy->has_data())
	|| (cac_stats !=  nullptr && cac_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_operation() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(counter_validity_bitmask.yfilter)
	|| ydk::is_set(class_name.yfilter)
	|| ydk::is_set(shared_queue_id.yfilter)
	|| ydk::is_set(queue_descr.yfilter)
	|| ydk::is_set(cac_state.yfilter)
	|| (general_stats !=  nullptr && general_stats->has_operation())
	|| (iphc_stats !=  nullptr && iphc_stats->has_operation())
	|| (child_policy !=  nullptr && child_policy->has_operation())
	|| (cac_stats !=  nullptr && cac_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (counter_validity_bitmask.is_set || is_set(counter_validity_bitmask.yfilter)) leaf_name_data.push_back(counter_validity_bitmask.get_name_leafdata());
    if (class_name.is_set || is_set(class_name.yfilter)) leaf_name_data.push_back(class_name.get_name_leafdata());
    if (shared_queue_id.is_set || is_set(shared_queue_id.yfilter)) leaf_name_data.push_back(shared_queue_id.get_name_leafdata());
    if (queue_descr.is_set || is_set(queue_descr.yfilter)) leaf_name_data.push_back(queue_descr.get_name_leafdata());
    if (cac_state.is_set || is_set(cac_state.yfilter)) leaf_name_data.push_back(cac_state.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "general-stats")
    {
        if(general_stats == nullptr)
        {
            general_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats>();
        }
        return general_stats;
    }

    if(child_yang_name == "iphc-stats")
    {
        if(iphc_stats == nullptr)
        {
            iphc_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats>();
        }
        return iphc_stats;
    }

    if(child_yang_name == "child-policy")
    {
        if(child_policy == nullptr)
        {
            child_policy = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy>();
        }
        return child_policy;
    }

    if(child_yang_name == "cac-stats")
    {
        if(cac_stats == nullptr)
        {
            cac_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats>();
        }
        return cac_stats;
    }

    if(child_yang_name == "queue-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray>();
        c->parent = this;
        queue_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "police-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray>();
        c->parent = this;
        police_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "wred-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray>();
        c->parent = this;
        wred_stats_array.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(general_stats != nullptr)
    {
        children["general-stats"] = general_stats;
    }

    if(iphc_stats != nullptr)
    {
        children["iphc-stats"] = iphc_stats;
    }

    if(child_policy != nullptr)
    {
        children["child-policy"] = child_policy;
    }

    if(cac_stats != nullptr)
    {
        children["cac-stats"] = cac_stats;
    }

    count = 0;
    for (auto const & c : queue_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : police_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : wred_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask = value;
        counter_validity_bitmask.value_namespace = name_space;
        counter_validity_bitmask.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "class-name")
    {
        class_name = value;
        class_name.value_namespace = name_space;
        class_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id = value;
        shared_queue_id.value_namespace = name_space;
        shared_queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-descr")
    {
        queue_descr = value;
        queue_descr.value_namespace = name_space;
        queue_descr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cac-state")
    {
        cac_state = value;
        cac_state.value_namespace = name_space;
        cac_state.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask.yfilter = yfilter;
    }
    if(value_path == "class-name")
    {
        class_name.yfilter = yfilter;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id.yfilter = yfilter;
    }
    if(value_path == "queue-descr")
    {
        queue_descr.yfilter = yfilter;
    }
    if(value_path == "cac-state")
    {
        cac_state.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "general-stats" || name == "iphc-stats" || name == "child-policy" || name == "cac-stats" || name == "queue-stats-array" || name == "police-stats-array" || name == "wred-stats-array" || name == "counter-validity-bitmask" || name == "class-name" || name == "shared-queue-id" || name == "queue-descr" || name == "cac-state")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::GeneralStats()
    :
    transmit_packets{YType::uint64, "transmit-packets"},
    transmit_bytes{YType::uint64, "transmit-bytes"},
    total_drop_packets{YType::uint64, "total-drop-packets"},
    total_drop_bytes{YType::uint64, "total-drop-bytes"},
    total_drop_rate{YType::uint32, "total-drop-rate"},
    match_data_rate{YType::uint32, "match-data-rate"},
    total_transmit_rate{YType::uint32, "total-transmit-rate"},
    pre_policy_matched_packets{YType::uint64, "pre-policy-matched-packets"},
    pre_policy_matched_bytes{YType::uint64, "pre-policy-matched-bytes"}
{

    yang_name = "general-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::~GeneralStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_data() const
{
    return transmit_packets.is_set
	|| transmit_bytes.is_set
	|| total_drop_packets.is_set
	|| total_drop_bytes.is_set
	|| total_drop_rate.is_set
	|| match_data_rate.is_set
	|| total_transmit_rate.is_set
	|| pre_policy_matched_packets.is_set
	|| pre_policy_matched_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(transmit_packets.yfilter)
	|| ydk::is_set(transmit_bytes.yfilter)
	|| ydk::is_set(total_drop_packets.yfilter)
	|| ydk::is_set(total_drop_bytes.yfilter)
	|| ydk::is_set(total_drop_rate.yfilter)
	|| ydk::is_set(match_data_rate.yfilter)
	|| ydk::is_set(total_transmit_rate.yfilter)
	|| ydk::is_set(pre_policy_matched_packets.yfilter)
	|| ydk::is_set(pre_policy_matched_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "general-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (transmit_packets.is_set || is_set(transmit_packets.yfilter)) leaf_name_data.push_back(transmit_packets.get_name_leafdata());
    if (transmit_bytes.is_set || is_set(transmit_bytes.yfilter)) leaf_name_data.push_back(transmit_bytes.get_name_leafdata());
    if (total_drop_packets.is_set || is_set(total_drop_packets.yfilter)) leaf_name_data.push_back(total_drop_packets.get_name_leafdata());
    if (total_drop_bytes.is_set || is_set(total_drop_bytes.yfilter)) leaf_name_data.push_back(total_drop_bytes.get_name_leafdata());
    if (total_drop_rate.is_set || is_set(total_drop_rate.yfilter)) leaf_name_data.push_back(total_drop_rate.get_name_leafdata());
    if (match_data_rate.is_set || is_set(match_data_rate.yfilter)) leaf_name_data.push_back(match_data_rate.get_name_leafdata());
    if (total_transmit_rate.is_set || is_set(total_transmit_rate.yfilter)) leaf_name_data.push_back(total_transmit_rate.get_name_leafdata());
    if (pre_policy_matched_packets.is_set || is_set(pre_policy_matched_packets.yfilter)) leaf_name_data.push_back(pre_policy_matched_packets.get_name_leafdata());
    if (pre_policy_matched_bytes.is_set || is_set(pre_policy_matched_bytes.yfilter)) leaf_name_data.push_back(pre_policy_matched_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets = value;
        transmit_packets.value_namespace = name_space;
        transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes = value;
        transmit_bytes.value_namespace = name_space;
        transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets = value;
        total_drop_packets.value_namespace = name_space;
        total_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes = value;
        total_drop_bytes.value_namespace = name_space;
        total_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate = value;
        total_drop_rate.value_namespace = name_space;
        total_drop_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate = value;
        match_data_rate.value_namespace = name_space;
        match_data_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate = value;
        total_transmit_rate.value_namespace = name_space;
        total_transmit_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets = value;
        pre_policy_matched_packets.value_namespace = name_space;
        pre_policy_matched_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes = value;
        pre_policy_matched_bytes.value_namespace = name_space;
        pre_policy_matched_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets.yfilter = yfilter;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets.yfilter = yfilter;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate.yfilter = yfilter;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate.yfilter = yfilter;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "transmit-packets" || name == "transmit-bytes" || name == "total-drop-packets" || name == "total-drop-bytes" || name == "total-drop-rate" || name == "match-data-rate" || name == "total-transmit-rate" || name == "pre-policy-matched-packets" || name == "pre-policy-matched-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::IphcStats()
    :
    non_tcp_total_out_packets{YType::uint64, "non-tcp-total-out-packets"},
    non_tcp_total_out_bytes{YType::uint64, "non-tcp-total-out-bytes"},
    non_tcp_bytes_saved{YType::uint64, "non-tcp-bytes-saved"},
    non_tcp_compressed_packets_out{YType::uint64, "non-tcp-compressed-packets-out"},
    non_tcp_bytes_sent_rate{YType::uint32, "non-tcp-bytes-sent-rate"},
    non_tcp_full_header_packets_out{YType::uint64, "non-tcp-full-header-packets-out"},
    tcp_total_out_packets{YType::uint64, "tcp-total-out-packets"},
    tcp_total_out_bytes{YType::uint64, "tcp-total-out-bytes"},
    tcp_bytes_saved{YType::uint64, "tcp-bytes-saved"},
    tcp_compressed_packets_out{YType::uint64, "tcp-compressed-packets-out"},
    tcp_bytes_sent_rate{YType::uint32, "tcp-bytes-sent-rate"},
    tcp_full_header_packets_out{YType::uint64, "tcp-full-header-packets-out"}
{

    yang_name = "iphc-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::~IphcStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_data() const
{
    return non_tcp_total_out_packets.is_set
	|| non_tcp_total_out_bytes.is_set
	|| non_tcp_bytes_saved.is_set
	|| non_tcp_compressed_packets_out.is_set
	|| non_tcp_bytes_sent_rate.is_set
	|| non_tcp_full_header_packets_out.is_set
	|| tcp_total_out_packets.is_set
	|| tcp_total_out_bytes.is_set
	|| tcp_bytes_saved.is_set
	|| tcp_compressed_packets_out.is_set
	|| tcp_bytes_sent_rate.is_set
	|| tcp_full_header_packets_out.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(non_tcp_total_out_packets.yfilter)
	|| ydk::is_set(non_tcp_total_out_bytes.yfilter)
	|| ydk::is_set(non_tcp_bytes_saved.yfilter)
	|| ydk::is_set(non_tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(non_tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(non_tcp_full_header_packets_out.yfilter)
	|| ydk::is_set(tcp_total_out_packets.yfilter)
	|| ydk::is_set(tcp_total_out_bytes.yfilter)
	|| ydk::is_set(tcp_bytes_saved.yfilter)
	|| ydk::is_set(tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(tcp_full_header_packets_out.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "iphc-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (non_tcp_total_out_packets.is_set || is_set(non_tcp_total_out_packets.yfilter)) leaf_name_data.push_back(non_tcp_total_out_packets.get_name_leafdata());
    if (non_tcp_total_out_bytes.is_set || is_set(non_tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(non_tcp_total_out_bytes.get_name_leafdata());
    if (non_tcp_bytes_saved.is_set || is_set(non_tcp_bytes_saved.yfilter)) leaf_name_data.push_back(non_tcp_bytes_saved.get_name_leafdata());
    if (non_tcp_compressed_packets_out.is_set || is_set(non_tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_compressed_packets_out.get_name_leafdata());
    if (non_tcp_bytes_sent_rate.is_set || is_set(non_tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(non_tcp_bytes_sent_rate.get_name_leafdata());
    if (non_tcp_full_header_packets_out.is_set || is_set(non_tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_full_header_packets_out.get_name_leafdata());
    if (tcp_total_out_packets.is_set || is_set(tcp_total_out_packets.yfilter)) leaf_name_data.push_back(tcp_total_out_packets.get_name_leafdata());
    if (tcp_total_out_bytes.is_set || is_set(tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(tcp_total_out_bytes.get_name_leafdata());
    if (tcp_bytes_saved.is_set || is_set(tcp_bytes_saved.yfilter)) leaf_name_data.push_back(tcp_bytes_saved.get_name_leafdata());
    if (tcp_compressed_packets_out.is_set || is_set(tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(tcp_compressed_packets_out.get_name_leafdata());
    if (tcp_bytes_sent_rate.is_set || is_set(tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(tcp_bytes_sent_rate.get_name_leafdata());
    if (tcp_full_header_packets_out.is_set || is_set(tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(tcp_full_header_packets_out.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets = value;
        non_tcp_total_out_packets.value_namespace = name_space;
        non_tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes = value;
        non_tcp_total_out_bytes.value_namespace = name_space;
        non_tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved = value;
        non_tcp_bytes_saved.value_namespace = name_space;
        non_tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out = value;
        non_tcp_compressed_packets_out.value_namespace = name_space;
        non_tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate = value;
        non_tcp_bytes_sent_rate.value_namespace = name_space;
        non_tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out = value;
        non_tcp_full_header_packets_out.value_namespace = name_space;
        non_tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets = value;
        tcp_total_out_packets.value_namespace = name_space;
        tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes = value;
        tcp_total_out_bytes.value_namespace = name_space;
        tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved = value;
        tcp_bytes_saved.value_namespace = name_space;
        tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out = value;
        tcp_compressed_packets_out.value_namespace = name_space;
        tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate = value;
        tcp_bytes_sent_rate.value_namespace = name_space;
        tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out = value;
        tcp_full_header_packets_out.value_namespace = name_space;
        tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "non-tcp-total-out-packets" || name == "non-tcp-total-out-bytes" || name == "non-tcp-bytes-saved" || name == "non-tcp-compressed-packets-out" || name == "non-tcp-bytes-sent-rate" || name == "non-tcp-full-header-packets-out" || name == "tcp-total-out-packets" || name == "tcp-total-out-bytes" || name == "tcp-bytes-saved" || name == "tcp-compressed-packets-out" || name == "tcp-bytes-sent-rate" || name == "tcp-full-header-packets-out")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ChildPolicy()
    :
    policy_name{YType::str, "policy-name"},
    state{YType::enumeration, "state"},
    state_description{YType::str, "state-description"},
    satid{YType::uint32, "satid"}
{

    yang_name = "child-policy"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::~ChildPolicy()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_data() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_data())
            return true;
    }
    return policy_name.is_set
	|| state.is_set
	|| state_description.is_set
	|| satid.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_operation() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(policy_name.yfilter)
	|| ydk::is_set(state.yfilter)
	|| ydk::is_set(state_description.yfilter)
	|| ydk::is_set(satid.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "child-policy";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (policy_name.is_set || is_set(policy_name.yfilter)) leaf_name_data.push_back(policy_name.get_name_leafdata());
    if (state.is_set || is_set(state.yfilter)) leaf_name_data.push_back(state.get_name_leafdata());
    if (state_description.is_set || is_set(state_description.yfilter)) leaf_name_data.push_back(state_description.get_name_leafdata());
    if (satid.is_set || is_set(satid.yfilter)) leaf_name_data.push_back(satid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "class-stats")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_>();
        c->parent = this;
        class_stats.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : class_stats)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "policy-name")
    {
        policy_name = value;
        policy_name.value_namespace = name_space;
        policy_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state")
    {
        state = value;
        state.value_namespace = name_space;
        state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state-description")
    {
        state_description = value;
        state_description.value_namespace = name_space;
        state_description.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "satid")
    {
        satid = value;
        satid.value_namespace = name_space;
        satid.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "policy-name")
    {
        policy_name.yfilter = yfilter;
    }
    if(value_path == "state")
    {
        state.yfilter = yfilter;
    }
    if(value_path == "state-description")
    {
        state_description.yfilter = yfilter;
    }
    if(value_path == "satid")
    {
        satid.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "class-stats" || name == "policy-name" || name == "state" || name == "state-description" || name == "satid")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::ClassStats_()
    :
    counter_validity_bitmask{YType::uint64, "counter-validity-bitmask"},
    class_name{YType::str, "class-name"},
    shared_queue_id{YType::uint32, "shared-queue-id"},
    queue_descr{YType::str, "queue-descr"},
    cac_state{YType::enumeration, "cac-state"}
    	,
    general_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats>())
	,iphc_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats>())
	,cac_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats>())
{
    general_stats->parent = this;
    iphc_stats->parent = this;
    cac_stats->parent = this;

    yang_name = "class-stats"; yang_parent_name = "child-policy"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::~ClassStats_()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_data() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_data())
            return true;
    }
    return counter_validity_bitmask.is_set
	|| class_name.is_set
	|| shared_queue_id.is_set
	|| queue_descr.is_set
	|| cac_state.is_set
	|| (general_stats !=  nullptr && general_stats->has_data())
	|| (iphc_stats !=  nullptr && iphc_stats->has_data())
	|| (cac_stats !=  nullptr && cac_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_operation() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(counter_validity_bitmask.yfilter)
	|| ydk::is_set(class_name.yfilter)
	|| ydk::is_set(shared_queue_id.yfilter)
	|| ydk::is_set(queue_descr.yfilter)
	|| ydk::is_set(cac_state.yfilter)
	|| (general_stats !=  nullptr && general_stats->has_operation())
	|| (iphc_stats !=  nullptr && iphc_stats->has_operation())
	|| (cac_stats !=  nullptr && cac_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (counter_validity_bitmask.is_set || is_set(counter_validity_bitmask.yfilter)) leaf_name_data.push_back(counter_validity_bitmask.get_name_leafdata());
    if (class_name.is_set || is_set(class_name.yfilter)) leaf_name_data.push_back(class_name.get_name_leafdata());
    if (shared_queue_id.is_set || is_set(shared_queue_id.yfilter)) leaf_name_data.push_back(shared_queue_id.get_name_leafdata());
    if (queue_descr.is_set || is_set(queue_descr.yfilter)) leaf_name_data.push_back(queue_descr.get_name_leafdata());
    if (cac_state.is_set || is_set(cac_state.yfilter)) leaf_name_data.push_back(cac_state.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "general-stats")
    {
        if(general_stats == nullptr)
        {
            general_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats>();
        }
        return general_stats;
    }

    if(child_yang_name == "iphc-stats")
    {
        if(iphc_stats == nullptr)
        {
            iphc_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats>();
        }
        return iphc_stats;
    }

    if(child_yang_name == "cac-stats")
    {
        if(cac_stats == nullptr)
        {
            cac_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats>();
        }
        return cac_stats;
    }

    if(child_yang_name == "queue-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray>();
        c->parent = this;
        queue_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "police-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray>();
        c->parent = this;
        police_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "wred-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray>();
        c->parent = this;
        wred_stats_array.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(general_stats != nullptr)
    {
        children["general-stats"] = general_stats;
    }

    if(iphc_stats != nullptr)
    {
        children["iphc-stats"] = iphc_stats;
    }

    if(cac_stats != nullptr)
    {
        children["cac-stats"] = cac_stats;
    }

    count = 0;
    for (auto const & c : queue_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : police_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : wred_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask = value;
        counter_validity_bitmask.value_namespace = name_space;
        counter_validity_bitmask.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "class-name")
    {
        class_name = value;
        class_name.value_namespace = name_space;
        class_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id = value;
        shared_queue_id.value_namespace = name_space;
        shared_queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-descr")
    {
        queue_descr = value;
        queue_descr.value_namespace = name_space;
        queue_descr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cac-state")
    {
        cac_state = value;
        cac_state.value_namespace = name_space;
        cac_state.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask.yfilter = yfilter;
    }
    if(value_path == "class-name")
    {
        class_name.yfilter = yfilter;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id.yfilter = yfilter;
    }
    if(value_path == "queue-descr")
    {
        queue_descr.yfilter = yfilter;
    }
    if(value_path == "cac-state")
    {
        cac_state.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "general-stats" || name == "iphc-stats" || name == "cac-stats" || name == "queue-stats-array" || name == "police-stats-array" || name == "wred-stats-array" || name == "counter-validity-bitmask" || name == "class-name" || name == "shared-queue-id" || name == "queue-descr" || name == "cac-state")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::GeneralStats()
    :
    transmit_packets{YType::uint64, "transmit-packets"},
    transmit_bytes{YType::uint64, "transmit-bytes"},
    total_drop_packets{YType::uint64, "total-drop-packets"},
    total_drop_bytes{YType::uint64, "total-drop-bytes"},
    total_drop_rate{YType::uint32, "total-drop-rate"},
    match_data_rate{YType::uint32, "match-data-rate"},
    total_transmit_rate{YType::uint32, "total-transmit-rate"},
    pre_policy_matched_packets{YType::uint64, "pre-policy-matched-packets"},
    pre_policy_matched_bytes{YType::uint64, "pre-policy-matched-bytes"}
{

    yang_name = "general-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::~GeneralStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_data() const
{
    return transmit_packets.is_set
	|| transmit_bytes.is_set
	|| total_drop_packets.is_set
	|| total_drop_bytes.is_set
	|| total_drop_rate.is_set
	|| match_data_rate.is_set
	|| total_transmit_rate.is_set
	|| pre_policy_matched_packets.is_set
	|| pre_policy_matched_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(transmit_packets.yfilter)
	|| ydk::is_set(transmit_bytes.yfilter)
	|| ydk::is_set(total_drop_packets.yfilter)
	|| ydk::is_set(total_drop_bytes.yfilter)
	|| ydk::is_set(total_drop_rate.yfilter)
	|| ydk::is_set(match_data_rate.yfilter)
	|| ydk::is_set(total_transmit_rate.yfilter)
	|| ydk::is_set(pre_policy_matched_packets.yfilter)
	|| ydk::is_set(pre_policy_matched_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "general-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (transmit_packets.is_set || is_set(transmit_packets.yfilter)) leaf_name_data.push_back(transmit_packets.get_name_leafdata());
    if (transmit_bytes.is_set || is_set(transmit_bytes.yfilter)) leaf_name_data.push_back(transmit_bytes.get_name_leafdata());
    if (total_drop_packets.is_set || is_set(total_drop_packets.yfilter)) leaf_name_data.push_back(total_drop_packets.get_name_leafdata());
    if (total_drop_bytes.is_set || is_set(total_drop_bytes.yfilter)) leaf_name_data.push_back(total_drop_bytes.get_name_leafdata());
    if (total_drop_rate.is_set || is_set(total_drop_rate.yfilter)) leaf_name_data.push_back(total_drop_rate.get_name_leafdata());
    if (match_data_rate.is_set || is_set(match_data_rate.yfilter)) leaf_name_data.push_back(match_data_rate.get_name_leafdata());
    if (total_transmit_rate.is_set || is_set(total_transmit_rate.yfilter)) leaf_name_data.push_back(total_transmit_rate.get_name_leafdata());
    if (pre_policy_matched_packets.is_set || is_set(pre_policy_matched_packets.yfilter)) leaf_name_data.push_back(pre_policy_matched_packets.get_name_leafdata());
    if (pre_policy_matched_bytes.is_set || is_set(pre_policy_matched_bytes.yfilter)) leaf_name_data.push_back(pre_policy_matched_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets = value;
        transmit_packets.value_namespace = name_space;
        transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes = value;
        transmit_bytes.value_namespace = name_space;
        transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets = value;
        total_drop_packets.value_namespace = name_space;
        total_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes = value;
        total_drop_bytes.value_namespace = name_space;
        total_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate = value;
        total_drop_rate.value_namespace = name_space;
        total_drop_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate = value;
        match_data_rate.value_namespace = name_space;
        match_data_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate = value;
        total_transmit_rate.value_namespace = name_space;
        total_transmit_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets = value;
        pre_policy_matched_packets.value_namespace = name_space;
        pre_policy_matched_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes = value;
        pre_policy_matched_bytes.value_namespace = name_space;
        pre_policy_matched_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets.yfilter = yfilter;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets.yfilter = yfilter;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate.yfilter = yfilter;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate.yfilter = yfilter;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "transmit-packets" || name == "transmit-bytes" || name == "total-drop-packets" || name == "total-drop-bytes" || name == "total-drop-rate" || name == "match-data-rate" || name == "total-transmit-rate" || name == "pre-policy-matched-packets" || name == "pre-policy-matched-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::IphcStats()
    :
    non_tcp_total_out_packets{YType::uint64, "non-tcp-total-out-packets"},
    non_tcp_total_out_bytes{YType::uint64, "non-tcp-total-out-bytes"},
    non_tcp_bytes_saved{YType::uint64, "non-tcp-bytes-saved"},
    non_tcp_compressed_packets_out{YType::uint64, "non-tcp-compressed-packets-out"},
    non_tcp_bytes_sent_rate{YType::uint32, "non-tcp-bytes-sent-rate"},
    non_tcp_full_header_packets_out{YType::uint64, "non-tcp-full-header-packets-out"},
    tcp_total_out_packets{YType::uint64, "tcp-total-out-packets"},
    tcp_total_out_bytes{YType::uint64, "tcp-total-out-bytes"},
    tcp_bytes_saved{YType::uint64, "tcp-bytes-saved"},
    tcp_compressed_packets_out{YType::uint64, "tcp-compressed-packets-out"},
    tcp_bytes_sent_rate{YType::uint32, "tcp-bytes-sent-rate"},
    tcp_full_header_packets_out{YType::uint64, "tcp-full-header-packets-out"}
{

    yang_name = "iphc-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::~IphcStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_data() const
{
    return non_tcp_total_out_packets.is_set
	|| non_tcp_total_out_bytes.is_set
	|| non_tcp_bytes_saved.is_set
	|| non_tcp_compressed_packets_out.is_set
	|| non_tcp_bytes_sent_rate.is_set
	|| non_tcp_full_header_packets_out.is_set
	|| tcp_total_out_packets.is_set
	|| tcp_total_out_bytes.is_set
	|| tcp_bytes_saved.is_set
	|| tcp_compressed_packets_out.is_set
	|| tcp_bytes_sent_rate.is_set
	|| tcp_full_header_packets_out.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(non_tcp_total_out_packets.yfilter)
	|| ydk::is_set(non_tcp_total_out_bytes.yfilter)
	|| ydk::is_set(non_tcp_bytes_saved.yfilter)
	|| ydk::is_set(non_tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(non_tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(non_tcp_full_header_packets_out.yfilter)
	|| ydk::is_set(tcp_total_out_packets.yfilter)
	|| ydk::is_set(tcp_total_out_bytes.yfilter)
	|| ydk::is_set(tcp_bytes_saved.yfilter)
	|| ydk::is_set(tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(tcp_full_header_packets_out.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "iphc-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (non_tcp_total_out_packets.is_set || is_set(non_tcp_total_out_packets.yfilter)) leaf_name_data.push_back(non_tcp_total_out_packets.get_name_leafdata());
    if (non_tcp_total_out_bytes.is_set || is_set(non_tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(non_tcp_total_out_bytes.get_name_leafdata());
    if (non_tcp_bytes_saved.is_set || is_set(non_tcp_bytes_saved.yfilter)) leaf_name_data.push_back(non_tcp_bytes_saved.get_name_leafdata());
    if (non_tcp_compressed_packets_out.is_set || is_set(non_tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_compressed_packets_out.get_name_leafdata());
    if (non_tcp_bytes_sent_rate.is_set || is_set(non_tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(non_tcp_bytes_sent_rate.get_name_leafdata());
    if (non_tcp_full_header_packets_out.is_set || is_set(non_tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_full_header_packets_out.get_name_leafdata());
    if (tcp_total_out_packets.is_set || is_set(tcp_total_out_packets.yfilter)) leaf_name_data.push_back(tcp_total_out_packets.get_name_leafdata());
    if (tcp_total_out_bytes.is_set || is_set(tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(tcp_total_out_bytes.get_name_leafdata());
    if (tcp_bytes_saved.is_set || is_set(tcp_bytes_saved.yfilter)) leaf_name_data.push_back(tcp_bytes_saved.get_name_leafdata());
    if (tcp_compressed_packets_out.is_set || is_set(tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(tcp_compressed_packets_out.get_name_leafdata());
    if (tcp_bytes_sent_rate.is_set || is_set(tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(tcp_bytes_sent_rate.get_name_leafdata());
    if (tcp_full_header_packets_out.is_set || is_set(tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(tcp_full_header_packets_out.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets = value;
        non_tcp_total_out_packets.value_namespace = name_space;
        non_tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes = value;
        non_tcp_total_out_bytes.value_namespace = name_space;
        non_tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved = value;
        non_tcp_bytes_saved.value_namespace = name_space;
        non_tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out = value;
        non_tcp_compressed_packets_out.value_namespace = name_space;
        non_tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate = value;
        non_tcp_bytes_sent_rate.value_namespace = name_space;
        non_tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out = value;
        non_tcp_full_header_packets_out.value_namespace = name_space;
        non_tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets = value;
        tcp_total_out_packets.value_namespace = name_space;
        tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes = value;
        tcp_total_out_bytes.value_namespace = name_space;
        tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved = value;
        tcp_bytes_saved.value_namespace = name_space;
        tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out = value;
        tcp_compressed_packets_out.value_namespace = name_space;
        tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate = value;
        tcp_bytes_sent_rate.value_namespace = name_space;
        tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out = value;
        tcp_full_header_packets_out.value_namespace = name_space;
        tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "non-tcp-total-out-packets" || name == "non-tcp-total-out-bytes" || name == "non-tcp-bytes-saved" || name == "non-tcp-compressed-packets-out" || name == "non-tcp-bytes-sent-rate" || name == "non-tcp-full-header-packets-out" || name == "tcp-total-out-packets" || name == "tcp-total-out-bytes" || name == "tcp-bytes-saved" || name == "tcp-compressed-packets-out" || name == "tcp-bytes-sent-rate" || name == "tcp-full-header-packets-out")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::CacStats()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    drop_rates{YType::uint32, "drop-rates"},
    admitpackets{YType::uint64, "admitpackets"},
    admit_bytes{YType::uint64, "admit-bytes"},
    admit_rates{YType::uint32, "admit-rates"}
{

    yang_name = "cac-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::~CacStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| drop_rates.is_set
	|| admitpackets.is_set
	|| admit_bytes.is_set
	|| admit_rates.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(drop_rates.yfilter)
	|| ydk::is_set(admitpackets.yfilter)
	|| ydk::is_set(admit_bytes.yfilter)
	|| ydk::is_set(admit_rates.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cac-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (drop_rates.is_set || is_set(drop_rates.yfilter)) leaf_name_data.push_back(drop_rates.get_name_leafdata());
    if (admitpackets.is_set || is_set(admitpackets.yfilter)) leaf_name_data.push_back(admitpackets.get_name_leafdata());
    if (admit_bytes.is_set || is_set(admit_bytes.yfilter)) leaf_name_data.push_back(admit_bytes.get_name_leafdata());
    if (admit_rates.is_set || is_set(admit_rates.yfilter)) leaf_name_data.push_back(admit_rates.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-rates")
    {
        drop_rates = value;
        drop_rates.value_namespace = name_space;
        drop_rates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admitpackets")
    {
        admitpackets = value;
        admitpackets.value_namespace = name_space;
        admitpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes = value;
        admit_bytes.value_namespace = name_space;
        admit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-rates")
    {
        admit_rates = value;
        admit_rates.value_namespace = name_space;
        admit_rates.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "drop-rates")
    {
        drop_rates.yfilter = yfilter;
    }
    if(value_path == "admitpackets")
    {
        admitpackets.yfilter = yfilter;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes.yfilter = yfilter;
    }
    if(value_path == "admit-rates")
    {
        admit_rates.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drop-packets" || name == "drop-bytes" || name == "drop-rates" || name == "admitpackets" || name == "admit-bytes" || name == "admit-rates")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueStatsArray()
    :
    queue_id{YType::uint32, "queue-id"},
    tail_drop_packets{YType::uint64, "tail-drop-packets"},
    tail_drop_bytes{YType::uint64, "tail-drop-bytes"},
    atm_clp0_drop_packets{YType::uint64, "atm-clp0-drop-packets"},
    atm_clp0_drop_bytes{YType::uint64, "atm-clp0-drop-bytes"},
    atm_clp1_drop_packets{YType::uint64, "atm-clp1-drop-packets"},
    atm_clp1_drop_bytes{YType::uint64, "atm-clp1-drop-bytes"},
    queue_drop_threshold{YType::uint32, "queue-drop-threshold"},
    forced_wred_stats_display{YType::boolean, "forced-wred-stats-display"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"}
{

    yang_name = "queue-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::~QueueStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_data() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_data())
            return true;
    }
    return queue_id.is_set
	|| tail_drop_packets.is_set
	|| tail_drop_bytes.is_set
	|| atm_clp0_drop_packets.is_set
	|| atm_clp0_drop_bytes.is_set
	|| atm_clp1_drop_packets.is_set
	|| atm_clp1_drop_bytes.is_set
	|| queue_drop_threshold.is_set
	|| forced_wred_stats_display.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_operation() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(queue_id.yfilter)
	|| ydk::is_set(tail_drop_packets.yfilter)
	|| ydk::is_set(tail_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp0_drop_packets.yfilter)
	|| ydk::is_set(atm_clp0_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp1_drop_packets.yfilter)
	|| ydk::is_set(atm_clp1_drop_bytes.yfilter)
	|| ydk::is_set(queue_drop_threshold.yfilter)
	|| ydk::is_set(forced_wred_stats_display.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (queue_id.is_set || is_set(queue_id.yfilter)) leaf_name_data.push_back(queue_id.get_name_leafdata());
    if (tail_drop_packets.is_set || is_set(tail_drop_packets.yfilter)) leaf_name_data.push_back(tail_drop_packets.get_name_leafdata());
    if (tail_drop_bytes.is_set || is_set(tail_drop_bytes.yfilter)) leaf_name_data.push_back(tail_drop_bytes.get_name_leafdata());
    if (atm_clp0_drop_packets.is_set || is_set(atm_clp0_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp0_drop_packets.get_name_leafdata());
    if (atm_clp0_drop_bytes.is_set || is_set(atm_clp0_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp0_drop_bytes.get_name_leafdata());
    if (atm_clp1_drop_packets.is_set || is_set(atm_clp1_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp1_drop_packets.get_name_leafdata());
    if (atm_clp1_drop_bytes.is_set || is_set(atm_clp1_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp1_drop_bytes.get_name_leafdata());
    if (queue_drop_threshold.is_set || is_set(queue_drop_threshold.yfilter)) leaf_name_data.push_back(queue_drop_threshold.get_name_leafdata());
    if (forced_wred_stats_display.is_set || is_set(forced_wred_stats_display.yfilter)) leaf_name_data.push_back(forced_wred_stats_display.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "queue-instance-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength>();
        c->parent = this;
        queue_instance_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-average-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength>();
        c->parent = this;
        queue_average_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-max-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength>();
        c->parent = this;
        queue_max_length.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : queue_instance_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_average_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_max_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "queue-id")
    {
        queue_id = value;
        queue_id.value_namespace = name_space;
        queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets = value;
        tail_drop_packets.value_namespace = name_space;
        tail_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes = value;
        tail_drop_bytes.value_namespace = name_space;
        tail_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets = value;
        atm_clp0_drop_packets.value_namespace = name_space;
        atm_clp0_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes = value;
        atm_clp0_drop_bytes.value_namespace = name_space;
        atm_clp0_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets = value;
        atm_clp1_drop_packets.value_namespace = name_space;
        atm_clp1_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes = value;
        atm_clp1_drop_bytes.value_namespace = name_space;
        atm_clp1_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold = value;
        queue_drop_threshold.value_namespace = name_space;
        queue_drop_threshold.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display = value;
        forced_wred_stats_display.value_namespace = name_space;
        forced_wred_stats_display.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "queue-id")
    {
        queue_id.yfilter = yfilter;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets.yfilter = yfilter;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold.yfilter = yfilter;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "queue-instance-length" || name == "queue-average-length" || name == "queue-max-length" || name == "queue-id" || name == "tail-drop-packets" || name == "tail-drop-bytes" || name == "atm-clp0-drop-packets" || name == "atm-clp0-drop-bytes" || name == "atm-clp1-drop-packets" || name == "atm-clp1-drop-bytes" || name == "queue-drop-threshold" || name == "forced-wred-stats-display" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "conform-rate" || name == "exceed-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::QueueInstanceLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-instance-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::~QueueInstanceLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-instance-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::QueueAverageLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-average-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::~QueueAverageLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-average-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::QueueMaxLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-max-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::~QueueMaxLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-max-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::PoliceStatsArray()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    violate_packets{YType::uint64, "violate-packets"},
    violate_bytes{YType::uint64, "violate-bytes"},
    parent_drop_packets{YType::uint64, "parent-drop-packets"},
    parent_drop_bytes{YType::uint64, "parent-drop-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"},
    violate_rate{YType::uint32, "violate-rate"}
    	,
    color_class_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats>())
{
    color_class_stats->parent = this;

    yang_name = "police-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::~PoliceStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| violate_packets.is_set
	|| violate_bytes.is_set
	|| parent_drop_packets.is_set
	|| parent_drop_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set
	|| violate_rate.is_set
	|| (color_class_stats !=  nullptr && color_class_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(violate_packets.yfilter)
	|| ydk::is_set(violate_bytes.yfilter)
	|| ydk::is_set(parent_drop_packets.yfilter)
	|| ydk::is_set(parent_drop_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter)
	|| ydk::is_set(violate_rate.yfilter)
	|| (color_class_stats !=  nullptr && color_class_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "police-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (violate_packets.is_set || is_set(violate_packets.yfilter)) leaf_name_data.push_back(violate_packets.get_name_leafdata());
    if (violate_bytes.is_set || is_set(violate_bytes.yfilter)) leaf_name_data.push_back(violate_bytes.get_name_leafdata());
    if (parent_drop_packets.is_set || is_set(parent_drop_packets.yfilter)) leaf_name_data.push_back(parent_drop_packets.get_name_leafdata());
    if (parent_drop_bytes.is_set || is_set(parent_drop_bytes.yfilter)) leaf_name_data.push_back(parent_drop_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());
    if (violate_rate.is_set || is_set(violate_rate.yfilter)) leaf_name_data.push_back(violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "color-class-stats")
    {
        if(color_class_stats == nullptr)
        {
            color_class_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats>();
        }
        return color_class_stats;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(color_class_stats != nullptr)
    {
        children["color-class-stats"] = color_class_stats;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-packets")
    {
        violate_packets = value;
        violate_packets.value_namespace = name_space;
        violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes = value;
        violate_bytes.value_namespace = name_space;
        violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets = value;
        parent_drop_packets.value_namespace = name_space;
        parent_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes = value;
        parent_drop_bytes.value_namespace = name_space;
        parent_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-rate")
    {
        violate_rate = value;
        violate_rate.value_namespace = name_space;
        violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-packets")
    {
        violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes.yfilter = yfilter;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets.yfilter = yfilter;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
    if(value_path == "violate-rate")
    {
        violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "color-class-stats" || name == "drop-packets" || name == "drop-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "violate-packets" || name == "violate-bytes" || name == "parent-drop-packets" || name == "parent-drop-bytes" || name == "conform-rate" || name == "exceed-rate" || name == "violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::ColorClassStats()
    :
    conform_class_conform_packets{YType::uint64, "conform-class-conform-packets"},
    conform_class_conform_bytes{YType::uint64, "conform-class-conform-bytes"},
    conform_class_conform_rate{YType::uint32, "conform-class-conform-rate"},
    conform_class_exceed_packets{YType::uint64, "conform-class-exceed-packets"},
    conform_class_exceed_bytes{YType::uint64, "conform-class-exceed-bytes"},
    conform_class_exceed_rate{YType::uint32, "conform-class-exceed-rate"},
    conform_class_violate_packets{YType::uint64, "conform-class-violate-packets"},
    conform_class_violate_bytes{YType::uint64, "conform-class-violate-bytes"},
    conform_class_violate_rate{YType::uint32, "conform-class-violate-rate"},
    exceed_class_exceed_packets{YType::uint64, "exceed-class-exceed-packets"},
    exceed_class_exceed_bytes{YType::uint64, "exceed-class-exceed-bytes"},
    exceed_class_exceed_rate{YType::uint32, "exceed-class-exceed-rate"},
    exceed_class_violate_packets{YType::uint64, "exceed-class-violate-packets"},
    exceed_class_violate_bytes{YType::uint64, "exceed-class-violate-bytes"},
    exceed_class_violate_rate{YType::uint32, "exceed-class-violate-rate"},
    violate_class_violate_packets{YType::uint64, "violate-class-violate-packets"},
    violate_class_violate_bytes{YType::uint64, "violate-class-violate-bytes"},
    violate_class_violate_rate{YType::uint32, "violate-class-violate-rate"}
{

    yang_name = "color-class-stats"; yang_parent_name = "police-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::~ColorClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_data() const
{
    return conform_class_conform_packets.is_set
	|| conform_class_conform_bytes.is_set
	|| conform_class_conform_rate.is_set
	|| conform_class_exceed_packets.is_set
	|| conform_class_exceed_bytes.is_set
	|| conform_class_exceed_rate.is_set
	|| conform_class_violate_packets.is_set
	|| conform_class_violate_bytes.is_set
	|| conform_class_violate_rate.is_set
	|| exceed_class_exceed_packets.is_set
	|| exceed_class_exceed_bytes.is_set
	|| exceed_class_exceed_rate.is_set
	|| exceed_class_violate_packets.is_set
	|| exceed_class_violate_bytes.is_set
	|| exceed_class_violate_rate.is_set
	|| violate_class_violate_packets.is_set
	|| violate_class_violate_bytes.is_set
	|| violate_class_violate_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(conform_class_conform_packets.yfilter)
	|| ydk::is_set(conform_class_conform_bytes.yfilter)
	|| ydk::is_set(conform_class_conform_rate.yfilter)
	|| ydk::is_set(conform_class_exceed_packets.yfilter)
	|| ydk::is_set(conform_class_exceed_bytes.yfilter)
	|| ydk::is_set(conform_class_exceed_rate.yfilter)
	|| ydk::is_set(conform_class_violate_packets.yfilter)
	|| ydk::is_set(conform_class_violate_bytes.yfilter)
	|| ydk::is_set(conform_class_violate_rate.yfilter)
	|| ydk::is_set(exceed_class_exceed_packets.yfilter)
	|| ydk::is_set(exceed_class_exceed_bytes.yfilter)
	|| ydk::is_set(exceed_class_exceed_rate.yfilter)
	|| ydk::is_set(exceed_class_violate_packets.yfilter)
	|| ydk::is_set(exceed_class_violate_bytes.yfilter)
	|| ydk::is_set(exceed_class_violate_rate.yfilter)
	|| ydk::is_set(violate_class_violate_packets.yfilter)
	|| ydk::is_set(violate_class_violate_bytes.yfilter)
	|| ydk::is_set(violate_class_violate_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "color-class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (conform_class_conform_packets.is_set || is_set(conform_class_conform_packets.yfilter)) leaf_name_data.push_back(conform_class_conform_packets.get_name_leafdata());
    if (conform_class_conform_bytes.is_set || is_set(conform_class_conform_bytes.yfilter)) leaf_name_data.push_back(conform_class_conform_bytes.get_name_leafdata());
    if (conform_class_conform_rate.is_set || is_set(conform_class_conform_rate.yfilter)) leaf_name_data.push_back(conform_class_conform_rate.get_name_leafdata());
    if (conform_class_exceed_packets.is_set || is_set(conform_class_exceed_packets.yfilter)) leaf_name_data.push_back(conform_class_exceed_packets.get_name_leafdata());
    if (conform_class_exceed_bytes.is_set || is_set(conform_class_exceed_bytes.yfilter)) leaf_name_data.push_back(conform_class_exceed_bytes.get_name_leafdata());
    if (conform_class_exceed_rate.is_set || is_set(conform_class_exceed_rate.yfilter)) leaf_name_data.push_back(conform_class_exceed_rate.get_name_leafdata());
    if (conform_class_violate_packets.is_set || is_set(conform_class_violate_packets.yfilter)) leaf_name_data.push_back(conform_class_violate_packets.get_name_leafdata());
    if (conform_class_violate_bytes.is_set || is_set(conform_class_violate_bytes.yfilter)) leaf_name_data.push_back(conform_class_violate_bytes.get_name_leafdata());
    if (conform_class_violate_rate.is_set || is_set(conform_class_violate_rate.yfilter)) leaf_name_data.push_back(conform_class_violate_rate.get_name_leafdata());
    if (exceed_class_exceed_packets.is_set || is_set(exceed_class_exceed_packets.yfilter)) leaf_name_data.push_back(exceed_class_exceed_packets.get_name_leafdata());
    if (exceed_class_exceed_bytes.is_set || is_set(exceed_class_exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_class_exceed_bytes.get_name_leafdata());
    if (exceed_class_exceed_rate.is_set || is_set(exceed_class_exceed_rate.yfilter)) leaf_name_data.push_back(exceed_class_exceed_rate.get_name_leafdata());
    if (exceed_class_violate_packets.is_set || is_set(exceed_class_violate_packets.yfilter)) leaf_name_data.push_back(exceed_class_violate_packets.get_name_leafdata());
    if (exceed_class_violate_bytes.is_set || is_set(exceed_class_violate_bytes.yfilter)) leaf_name_data.push_back(exceed_class_violate_bytes.get_name_leafdata());
    if (exceed_class_violate_rate.is_set || is_set(exceed_class_violate_rate.yfilter)) leaf_name_data.push_back(exceed_class_violate_rate.get_name_leafdata());
    if (violate_class_violate_packets.is_set || is_set(violate_class_violate_packets.yfilter)) leaf_name_data.push_back(violate_class_violate_packets.get_name_leafdata());
    if (violate_class_violate_bytes.is_set || is_set(violate_class_violate_bytes.yfilter)) leaf_name_data.push_back(violate_class_violate_bytes.get_name_leafdata());
    if (violate_class_violate_rate.is_set || is_set(violate_class_violate_rate.yfilter)) leaf_name_data.push_back(violate_class_violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets = value;
        conform_class_conform_packets.value_namespace = name_space;
        conform_class_conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes = value;
        conform_class_conform_bytes.value_namespace = name_space;
        conform_class_conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate = value;
        conform_class_conform_rate.value_namespace = name_space;
        conform_class_conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets = value;
        conform_class_exceed_packets.value_namespace = name_space;
        conform_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes = value;
        conform_class_exceed_bytes.value_namespace = name_space;
        conform_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate = value;
        conform_class_exceed_rate.value_namespace = name_space;
        conform_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets = value;
        conform_class_violate_packets.value_namespace = name_space;
        conform_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes = value;
        conform_class_violate_bytes.value_namespace = name_space;
        conform_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate = value;
        conform_class_violate_rate.value_namespace = name_space;
        conform_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets = value;
        exceed_class_exceed_packets.value_namespace = name_space;
        exceed_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes = value;
        exceed_class_exceed_bytes.value_namespace = name_space;
        exceed_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate = value;
        exceed_class_exceed_rate.value_namespace = name_space;
        exceed_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets = value;
        exceed_class_violate_packets.value_namespace = name_space;
        exceed_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes = value;
        exceed_class_violate_bytes.value_namespace = name_space;
        exceed_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate = value;
        exceed_class_violate_rate.value_namespace = name_space;
        exceed_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets = value;
        violate_class_violate_packets.value_namespace = name_space;
        violate_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes = value;
        violate_class_violate_bytes.value_namespace = name_space;
        violate_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate = value;
        violate_class_violate_rate.value_namespace = name_space;
        violate_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "conform-class-conform-packets" || name == "conform-class-conform-bytes" || name == "conform-class-conform-rate" || name == "conform-class-exceed-packets" || name == "conform-class-exceed-bytes" || name == "conform-class-exceed-rate" || name == "conform-class-violate-packets" || name == "conform-class-violate-bytes" || name == "conform-class-violate-rate" || name == "exceed-class-exceed-packets" || name == "exceed-class-exceed-bytes" || name == "exceed-class-exceed-rate" || name == "exceed-class-violate-packets" || name == "exceed-class-violate-bytes" || name == "exceed-class-violate-rate" || name == "violate-class-violate-packets" || name == "violate-class-violate-bytes" || name == "violate-class-violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::WredStatsArray()
    :
    profile_title{YType::str, "profile-title"},
    red_transmit_packets{YType::uint64, "red-transmit-packets"},
    red_transmit_bytes{YType::uint64, "red-transmit-bytes"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    red_ecn_marked_packets{YType::uint64, "red-ecn-marked-packets"},
    red_ecn_marked_bytes{YType::uint64, "red-ecn-marked-bytes"}
{

    yang_name = "wred-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::~WredStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_data() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_data())
            return true;
    }
    return profile_title.is_set
	|| red_transmit_packets.is_set
	|| red_transmit_bytes.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| red_ecn_marked_packets.is_set
	|| red_ecn_marked_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_operation() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(profile_title.yfilter)
	|| ydk::is_set(red_transmit_packets.yfilter)
	|| ydk::is_set(red_transmit_bytes.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(red_ecn_marked_packets.yfilter)
	|| ydk::is_set(red_ecn_marked_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "wred-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (profile_title.is_set || is_set(profile_title.yfilter)) leaf_name_data.push_back(profile_title.get_name_leafdata());
    if (red_transmit_packets.is_set || is_set(red_transmit_packets.yfilter)) leaf_name_data.push_back(red_transmit_packets.get_name_leafdata());
    if (red_transmit_bytes.is_set || is_set(red_transmit_bytes.yfilter)) leaf_name_data.push_back(red_transmit_bytes.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (red_ecn_marked_packets.is_set || is_set(red_ecn_marked_packets.yfilter)) leaf_name_data.push_back(red_ecn_marked_packets.get_name_leafdata());
    if (red_ecn_marked_bytes.is_set || is_set(red_ecn_marked_bytes.yfilter)) leaf_name_data.push_back(red_ecn_marked_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "red-label")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel>();
        c->parent = this;
        red_label.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : red_label)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "profile-title")
    {
        profile_title = value;
        profile_title.value_namespace = name_space;
        profile_title.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets = value;
        red_transmit_packets.value_namespace = name_space;
        red_transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes = value;
        red_transmit_bytes.value_namespace = name_space;
        red_transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets = value;
        red_ecn_marked_packets.value_namespace = name_space;
        red_ecn_marked_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes = value;
        red_ecn_marked_bytes.value_namespace = name_space;
        red_ecn_marked_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "profile-title")
    {
        profile_title.yfilter = yfilter;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets.yfilter = yfilter;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "red-label" || name == "profile-title" || name == "red-transmit-packets" || name == "red-transmit-bytes" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "red-ecn-marked-packets" || name == "red-ecn-marked-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::RedLabel()
    :
    wred_type{YType::enumeration, "wred-type"},
    value_{YType::uint8, "value"}
{

    yang_name = "red-label"; yang_parent_name = "wred-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::~RedLabel()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_data() const
{
    return wred_type.is_set
	|| value_.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(wred_type.yfilter)
	|| ydk::is_set(value_.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "red-label";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (wred_type.is_set || is_set(wred_type.yfilter)) leaf_name_data.push_back(wred_type.get_name_leafdata());
    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "wred-type")
    {
        wred_type = value;
        wred_type.value_namespace = name_space;
        wred_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "wred-type")
    {
        wred_type.yfilter = yfilter;
    }
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "wred-type" || name == "value")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::CacStats()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    drop_rates{YType::uint32, "drop-rates"},
    admitpackets{YType::uint64, "admitpackets"},
    admit_bytes{YType::uint64, "admit-bytes"},
    admit_rates{YType::uint32, "admit-rates"}
{

    yang_name = "cac-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::~CacStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| drop_rates.is_set
	|| admitpackets.is_set
	|| admit_bytes.is_set
	|| admit_rates.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(drop_rates.yfilter)
	|| ydk::is_set(admitpackets.yfilter)
	|| ydk::is_set(admit_bytes.yfilter)
	|| ydk::is_set(admit_rates.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cac-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (drop_rates.is_set || is_set(drop_rates.yfilter)) leaf_name_data.push_back(drop_rates.get_name_leafdata());
    if (admitpackets.is_set || is_set(admitpackets.yfilter)) leaf_name_data.push_back(admitpackets.get_name_leafdata());
    if (admit_bytes.is_set || is_set(admit_bytes.yfilter)) leaf_name_data.push_back(admit_bytes.get_name_leafdata());
    if (admit_rates.is_set || is_set(admit_rates.yfilter)) leaf_name_data.push_back(admit_rates.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-rates")
    {
        drop_rates = value;
        drop_rates.value_namespace = name_space;
        drop_rates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admitpackets")
    {
        admitpackets = value;
        admitpackets.value_namespace = name_space;
        admitpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes = value;
        admit_bytes.value_namespace = name_space;
        admit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-rates")
    {
        admit_rates = value;
        admit_rates.value_namespace = name_space;
        admit_rates.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "drop-rates")
    {
        drop_rates.yfilter = yfilter;
    }
    if(value_path == "admitpackets")
    {
        admitpackets.yfilter = yfilter;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes.yfilter = yfilter;
    }
    if(value_path == "admit-rates")
    {
        admit_rates.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drop-packets" || name == "drop-bytes" || name == "drop-rates" || name == "admitpackets" || name == "admit-bytes" || name == "admit-rates")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueStatsArray()
    :
    queue_id{YType::uint32, "queue-id"},
    tail_drop_packets{YType::uint64, "tail-drop-packets"},
    tail_drop_bytes{YType::uint64, "tail-drop-bytes"},
    atm_clp0_drop_packets{YType::uint64, "atm-clp0-drop-packets"},
    atm_clp0_drop_bytes{YType::uint64, "atm-clp0-drop-bytes"},
    atm_clp1_drop_packets{YType::uint64, "atm-clp1-drop-packets"},
    atm_clp1_drop_bytes{YType::uint64, "atm-clp1-drop-bytes"},
    queue_drop_threshold{YType::uint32, "queue-drop-threshold"},
    forced_wred_stats_display{YType::boolean, "forced-wred-stats-display"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"}
{

    yang_name = "queue-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::~QueueStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_data() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_data())
            return true;
    }
    return queue_id.is_set
	|| tail_drop_packets.is_set
	|| tail_drop_bytes.is_set
	|| atm_clp0_drop_packets.is_set
	|| atm_clp0_drop_bytes.is_set
	|| atm_clp1_drop_packets.is_set
	|| atm_clp1_drop_bytes.is_set
	|| queue_drop_threshold.is_set
	|| forced_wred_stats_display.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_operation() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(queue_id.yfilter)
	|| ydk::is_set(tail_drop_packets.yfilter)
	|| ydk::is_set(tail_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp0_drop_packets.yfilter)
	|| ydk::is_set(atm_clp0_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp1_drop_packets.yfilter)
	|| ydk::is_set(atm_clp1_drop_bytes.yfilter)
	|| ydk::is_set(queue_drop_threshold.yfilter)
	|| ydk::is_set(forced_wred_stats_display.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (queue_id.is_set || is_set(queue_id.yfilter)) leaf_name_data.push_back(queue_id.get_name_leafdata());
    if (tail_drop_packets.is_set || is_set(tail_drop_packets.yfilter)) leaf_name_data.push_back(tail_drop_packets.get_name_leafdata());
    if (tail_drop_bytes.is_set || is_set(tail_drop_bytes.yfilter)) leaf_name_data.push_back(tail_drop_bytes.get_name_leafdata());
    if (atm_clp0_drop_packets.is_set || is_set(atm_clp0_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp0_drop_packets.get_name_leafdata());
    if (atm_clp0_drop_bytes.is_set || is_set(atm_clp0_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp0_drop_bytes.get_name_leafdata());
    if (atm_clp1_drop_packets.is_set || is_set(atm_clp1_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp1_drop_packets.get_name_leafdata());
    if (atm_clp1_drop_bytes.is_set || is_set(atm_clp1_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp1_drop_bytes.get_name_leafdata());
    if (queue_drop_threshold.is_set || is_set(queue_drop_threshold.yfilter)) leaf_name_data.push_back(queue_drop_threshold.get_name_leafdata());
    if (forced_wred_stats_display.is_set || is_set(forced_wred_stats_display.yfilter)) leaf_name_data.push_back(forced_wred_stats_display.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "queue-instance-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength>();
        c->parent = this;
        queue_instance_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-average-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength>();
        c->parent = this;
        queue_average_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-max-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength>();
        c->parent = this;
        queue_max_length.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : queue_instance_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_average_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_max_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "queue-id")
    {
        queue_id = value;
        queue_id.value_namespace = name_space;
        queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets = value;
        tail_drop_packets.value_namespace = name_space;
        tail_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes = value;
        tail_drop_bytes.value_namespace = name_space;
        tail_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets = value;
        atm_clp0_drop_packets.value_namespace = name_space;
        atm_clp0_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes = value;
        atm_clp0_drop_bytes.value_namespace = name_space;
        atm_clp0_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets = value;
        atm_clp1_drop_packets.value_namespace = name_space;
        atm_clp1_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes = value;
        atm_clp1_drop_bytes.value_namespace = name_space;
        atm_clp1_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold = value;
        queue_drop_threshold.value_namespace = name_space;
        queue_drop_threshold.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display = value;
        forced_wred_stats_display.value_namespace = name_space;
        forced_wred_stats_display.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "queue-id")
    {
        queue_id.yfilter = yfilter;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets.yfilter = yfilter;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold.yfilter = yfilter;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "queue-instance-length" || name == "queue-average-length" || name == "queue-max-length" || name == "queue-id" || name == "tail-drop-packets" || name == "tail-drop-bytes" || name == "atm-clp0-drop-packets" || name == "atm-clp0-drop-bytes" || name == "atm-clp1-drop-packets" || name == "atm-clp1-drop-bytes" || name == "queue-drop-threshold" || name == "forced-wred-stats-display" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "conform-rate" || name == "exceed-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::QueueInstanceLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-instance-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::~QueueInstanceLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-instance-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::QueueAverageLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-average-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::~QueueAverageLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-average-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::QueueMaxLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-max-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::~QueueMaxLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-max-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::PoliceStatsArray()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    violate_packets{YType::uint64, "violate-packets"},
    violate_bytes{YType::uint64, "violate-bytes"},
    parent_drop_packets{YType::uint64, "parent-drop-packets"},
    parent_drop_bytes{YType::uint64, "parent-drop-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"},
    violate_rate{YType::uint32, "violate-rate"}
    	,
    color_class_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats>())
{
    color_class_stats->parent = this;

    yang_name = "police-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::~PoliceStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| violate_packets.is_set
	|| violate_bytes.is_set
	|| parent_drop_packets.is_set
	|| parent_drop_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set
	|| violate_rate.is_set
	|| (color_class_stats !=  nullptr && color_class_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(violate_packets.yfilter)
	|| ydk::is_set(violate_bytes.yfilter)
	|| ydk::is_set(parent_drop_packets.yfilter)
	|| ydk::is_set(parent_drop_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter)
	|| ydk::is_set(violate_rate.yfilter)
	|| (color_class_stats !=  nullptr && color_class_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "police-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (violate_packets.is_set || is_set(violate_packets.yfilter)) leaf_name_data.push_back(violate_packets.get_name_leafdata());
    if (violate_bytes.is_set || is_set(violate_bytes.yfilter)) leaf_name_data.push_back(violate_bytes.get_name_leafdata());
    if (parent_drop_packets.is_set || is_set(parent_drop_packets.yfilter)) leaf_name_data.push_back(parent_drop_packets.get_name_leafdata());
    if (parent_drop_bytes.is_set || is_set(parent_drop_bytes.yfilter)) leaf_name_data.push_back(parent_drop_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());
    if (violate_rate.is_set || is_set(violate_rate.yfilter)) leaf_name_data.push_back(violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "color-class-stats")
    {
        if(color_class_stats == nullptr)
        {
            color_class_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats>();
        }
        return color_class_stats;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(color_class_stats != nullptr)
    {
        children["color-class-stats"] = color_class_stats;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-packets")
    {
        violate_packets = value;
        violate_packets.value_namespace = name_space;
        violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes = value;
        violate_bytes.value_namespace = name_space;
        violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets = value;
        parent_drop_packets.value_namespace = name_space;
        parent_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes = value;
        parent_drop_bytes.value_namespace = name_space;
        parent_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-rate")
    {
        violate_rate = value;
        violate_rate.value_namespace = name_space;
        violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-packets")
    {
        violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes.yfilter = yfilter;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets.yfilter = yfilter;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
    if(value_path == "violate-rate")
    {
        violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "color-class-stats" || name == "drop-packets" || name == "drop-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "violate-packets" || name == "violate-bytes" || name == "parent-drop-packets" || name == "parent-drop-bytes" || name == "conform-rate" || name == "exceed-rate" || name == "violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::ColorClassStats()
    :
    conform_class_conform_packets{YType::uint64, "conform-class-conform-packets"},
    conform_class_conform_bytes{YType::uint64, "conform-class-conform-bytes"},
    conform_class_conform_rate{YType::uint32, "conform-class-conform-rate"},
    conform_class_exceed_packets{YType::uint64, "conform-class-exceed-packets"},
    conform_class_exceed_bytes{YType::uint64, "conform-class-exceed-bytes"},
    conform_class_exceed_rate{YType::uint32, "conform-class-exceed-rate"},
    conform_class_violate_packets{YType::uint64, "conform-class-violate-packets"},
    conform_class_violate_bytes{YType::uint64, "conform-class-violate-bytes"},
    conform_class_violate_rate{YType::uint32, "conform-class-violate-rate"},
    exceed_class_exceed_packets{YType::uint64, "exceed-class-exceed-packets"},
    exceed_class_exceed_bytes{YType::uint64, "exceed-class-exceed-bytes"},
    exceed_class_exceed_rate{YType::uint32, "exceed-class-exceed-rate"},
    exceed_class_violate_packets{YType::uint64, "exceed-class-violate-packets"},
    exceed_class_violate_bytes{YType::uint64, "exceed-class-violate-bytes"},
    exceed_class_violate_rate{YType::uint32, "exceed-class-violate-rate"},
    violate_class_violate_packets{YType::uint64, "violate-class-violate-packets"},
    violate_class_violate_bytes{YType::uint64, "violate-class-violate-bytes"},
    violate_class_violate_rate{YType::uint32, "violate-class-violate-rate"}
{

    yang_name = "color-class-stats"; yang_parent_name = "police-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::~ColorClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_data() const
{
    return conform_class_conform_packets.is_set
	|| conform_class_conform_bytes.is_set
	|| conform_class_conform_rate.is_set
	|| conform_class_exceed_packets.is_set
	|| conform_class_exceed_bytes.is_set
	|| conform_class_exceed_rate.is_set
	|| conform_class_violate_packets.is_set
	|| conform_class_violate_bytes.is_set
	|| conform_class_violate_rate.is_set
	|| exceed_class_exceed_packets.is_set
	|| exceed_class_exceed_bytes.is_set
	|| exceed_class_exceed_rate.is_set
	|| exceed_class_violate_packets.is_set
	|| exceed_class_violate_bytes.is_set
	|| exceed_class_violate_rate.is_set
	|| violate_class_violate_packets.is_set
	|| violate_class_violate_bytes.is_set
	|| violate_class_violate_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(conform_class_conform_packets.yfilter)
	|| ydk::is_set(conform_class_conform_bytes.yfilter)
	|| ydk::is_set(conform_class_conform_rate.yfilter)
	|| ydk::is_set(conform_class_exceed_packets.yfilter)
	|| ydk::is_set(conform_class_exceed_bytes.yfilter)
	|| ydk::is_set(conform_class_exceed_rate.yfilter)
	|| ydk::is_set(conform_class_violate_packets.yfilter)
	|| ydk::is_set(conform_class_violate_bytes.yfilter)
	|| ydk::is_set(conform_class_violate_rate.yfilter)
	|| ydk::is_set(exceed_class_exceed_packets.yfilter)
	|| ydk::is_set(exceed_class_exceed_bytes.yfilter)
	|| ydk::is_set(exceed_class_exceed_rate.yfilter)
	|| ydk::is_set(exceed_class_violate_packets.yfilter)
	|| ydk::is_set(exceed_class_violate_bytes.yfilter)
	|| ydk::is_set(exceed_class_violate_rate.yfilter)
	|| ydk::is_set(violate_class_violate_packets.yfilter)
	|| ydk::is_set(violate_class_violate_bytes.yfilter)
	|| ydk::is_set(violate_class_violate_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "color-class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (conform_class_conform_packets.is_set || is_set(conform_class_conform_packets.yfilter)) leaf_name_data.push_back(conform_class_conform_packets.get_name_leafdata());
    if (conform_class_conform_bytes.is_set || is_set(conform_class_conform_bytes.yfilter)) leaf_name_data.push_back(conform_class_conform_bytes.get_name_leafdata());
    if (conform_class_conform_rate.is_set || is_set(conform_class_conform_rate.yfilter)) leaf_name_data.push_back(conform_class_conform_rate.get_name_leafdata());
    if (conform_class_exceed_packets.is_set || is_set(conform_class_exceed_packets.yfilter)) leaf_name_data.push_back(conform_class_exceed_packets.get_name_leafdata());
    if (conform_class_exceed_bytes.is_set || is_set(conform_class_exceed_bytes.yfilter)) leaf_name_data.push_back(conform_class_exceed_bytes.get_name_leafdata());
    if (conform_class_exceed_rate.is_set || is_set(conform_class_exceed_rate.yfilter)) leaf_name_data.push_back(conform_class_exceed_rate.get_name_leafdata());
    if (conform_class_violate_packets.is_set || is_set(conform_class_violate_packets.yfilter)) leaf_name_data.push_back(conform_class_violate_packets.get_name_leafdata());
    if (conform_class_violate_bytes.is_set || is_set(conform_class_violate_bytes.yfilter)) leaf_name_data.push_back(conform_class_violate_bytes.get_name_leafdata());
    if (conform_class_violate_rate.is_set || is_set(conform_class_violate_rate.yfilter)) leaf_name_data.push_back(conform_class_violate_rate.get_name_leafdata());
    if (exceed_class_exceed_packets.is_set || is_set(exceed_class_exceed_packets.yfilter)) leaf_name_data.push_back(exceed_class_exceed_packets.get_name_leafdata());
    if (exceed_class_exceed_bytes.is_set || is_set(exceed_class_exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_class_exceed_bytes.get_name_leafdata());
    if (exceed_class_exceed_rate.is_set || is_set(exceed_class_exceed_rate.yfilter)) leaf_name_data.push_back(exceed_class_exceed_rate.get_name_leafdata());
    if (exceed_class_violate_packets.is_set || is_set(exceed_class_violate_packets.yfilter)) leaf_name_data.push_back(exceed_class_violate_packets.get_name_leafdata());
    if (exceed_class_violate_bytes.is_set || is_set(exceed_class_violate_bytes.yfilter)) leaf_name_data.push_back(exceed_class_violate_bytes.get_name_leafdata());
    if (exceed_class_violate_rate.is_set || is_set(exceed_class_violate_rate.yfilter)) leaf_name_data.push_back(exceed_class_violate_rate.get_name_leafdata());
    if (violate_class_violate_packets.is_set || is_set(violate_class_violate_packets.yfilter)) leaf_name_data.push_back(violate_class_violate_packets.get_name_leafdata());
    if (violate_class_violate_bytes.is_set || is_set(violate_class_violate_bytes.yfilter)) leaf_name_data.push_back(violate_class_violate_bytes.get_name_leafdata());
    if (violate_class_violate_rate.is_set || is_set(violate_class_violate_rate.yfilter)) leaf_name_data.push_back(violate_class_violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets = value;
        conform_class_conform_packets.value_namespace = name_space;
        conform_class_conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes = value;
        conform_class_conform_bytes.value_namespace = name_space;
        conform_class_conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate = value;
        conform_class_conform_rate.value_namespace = name_space;
        conform_class_conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets = value;
        conform_class_exceed_packets.value_namespace = name_space;
        conform_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes = value;
        conform_class_exceed_bytes.value_namespace = name_space;
        conform_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate = value;
        conform_class_exceed_rate.value_namespace = name_space;
        conform_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets = value;
        conform_class_violate_packets.value_namespace = name_space;
        conform_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes = value;
        conform_class_violate_bytes.value_namespace = name_space;
        conform_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate = value;
        conform_class_violate_rate.value_namespace = name_space;
        conform_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets = value;
        exceed_class_exceed_packets.value_namespace = name_space;
        exceed_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes = value;
        exceed_class_exceed_bytes.value_namespace = name_space;
        exceed_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate = value;
        exceed_class_exceed_rate.value_namespace = name_space;
        exceed_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets = value;
        exceed_class_violate_packets.value_namespace = name_space;
        exceed_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes = value;
        exceed_class_violate_bytes.value_namespace = name_space;
        exceed_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate = value;
        exceed_class_violate_rate.value_namespace = name_space;
        exceed_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets = value;
        violate_class_violate_packets.value_namespace = name_space;
        violate_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes = value;
        violate_class_violate_bytes.value_namespace = name_space;
        violate_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate = value;
        violate_class_violate_rate.value_namespace = name_space;
        violate_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "conform-class-conform-packets" || name == "conform-class-conform-bytes" || name == "conform-class-conform-rate" || name == "conform-class-exceed-packets" || name == "conform-class-exceed-bytes" || name == "conform-class-exceed-rate" || name == "conform-class-violate-packets" || name == "conform-class-violate-bytes" || name == "conform-class-violate-rate" || name == "exceed-class-exceed-packets" || name == "exceed-class-exceed-bytes" || name == "exceed-class-exceed-rate" || name == "exceed-class-violate-packets" || name == "exceed-class-violate-bytes" || name == "exceed-class-violate-rate" || name == "violate-class-violate-packets" || name == "violate-class-violate-bytes" || name == "violate-class-violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::WredStatsArray()
    :
    profile_title{YType::str, "profile-title"},
    red_transmit_packets{YType::uint64, "red-transmit-packets"},
    red_transmit_bytes{YType::uint64, "red-transmit-bytes"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    red_ecn_marked_packets{YType::uint64, "red-ecn-marked-packets"},
    red_ecn_marked_bytes{YType::uint64, "red-ecn-marked-bytes"}
{

    yang_name = "wred-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::~WredStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_data() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_data())
            return true;
    }
    return profile_title.is_set
	|| red_transmit_packets.is_set
	|| red_transmit_bytes.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| red_ecn_marked_packets.is_set
	|| red_ecn_marked_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_operation() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(profile_title.yfilter)
	|| ydk::is_set(red_transmit_packets.yfilter)
	|| ydk::is_set(red_transmit_bytes.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(red_ecn_marked_packets.yfilter)
	|| ydk::is_set(red_ecn_marked_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "wred-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (profile_title.is_set || is_set(profile_title.yfilter)) leaf_name_data.push_back(profile_title.get_name_leafdata());
    if (red_transmit_packets.is_set || is_set(red_transmit_packets.yfilter)) leaf_name_data.push_back(red_transmit_packets.get_name_leafdata());
    if (red_transmit_bytes.is_set || is_set(red_transmit_bytes.yfilter)) leaf_name_data.push_back(red_transmit_bytes.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (red_ecn_marked_packets.is_set || is_set(red_ecn_marked_packets.yfilter)) leaf_name_data.push_back(red_ecn_marked_packets.get_name_leafdata());
    if (red_ecn_marked_bytes.is_set || is_set(red_ecn_marked_bytes.yfilter)) leaf_name_data.push_back(red_ecn_marked_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "red-label")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel>();
        c->parent = this;
        red_label.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : red_label)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "profile-title")
    {
        profile_title = value;
        profile_title.value_namespace = name_space;
        profile_title.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets = value;
        red_transmit_packets.value_namespace = name_space;
        red_transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes = value;
        red_transmit_bytes.value_namespace = name_space;
        red_transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets = value;
        red_ecn_marked_packets.value_namespace = name_space;
        red_ecn_marked_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes = value;
        red_ecn_marked_bytes.value_namespace = name_space;
        red_ecn_marked_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "profile-title")
    {
        profile_title.yfilter = yfilter;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets.yfilter = yfilter;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "red-label" || name == "profile-title" || name == "red-transmit-packets" || name == "red-transmit-bytes" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "red-ecn-marked-packets" || name == "red-ecn-marked-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::RedLabel()
    :
    wred_type{YType::enumeration, "wred-type"},
    value_{YType::uint8, "value"}
{

    yang_name = "red-label"; yang_parent_name = "wred-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::~RedLabel()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_data() const
{
    return wred_type.is_set
	|| value_.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(wred_type.yfilter)
	|| ydk::is_set(value_.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "red-label";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (wred_type.is_set || is_set(wred_type.yfilter)) leaf_name_data.push_back(wred_type.get_name_leafdata());
    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "wred-type")
    {
        wred_type = value;
        wred_type.value_namespace = name_space;
        wred_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "wred-type")
    {
        wred_type.yfilter = yfilter;
    }
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "wred-type" || name == "value")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::Output()
    :
    service_policy_names(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames>())
{
    service_policy_names->parent = this;

    yang_name = "output"; yang_parent_name = "node"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::~Output()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::has_data() const
{
    return (service_policy_names !=  nullptr && service_policy_names->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::has_operation() const
{
    return is_set(yfilter)
	|| (service_policy_names !=  nullptr && service_policy_names->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "service-policy-names")
    {
        if(service_policy_names == nullptr)
        {
            service_policy_names = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames>();
        }
        return service_policy_names;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(service_policy_names != nullptr)
    {
        children["service-policy-names"] = service_policy_names;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "service-policy-names")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyNames()
{

    yang_name = "service-policy-names"; yang_parent_name = "output"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::~ServicePolicyNames()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::has_data() const
{
    for (std::size_t index=0; index<service_policy_instance.size(); index++)
    {
        if(service_policy_instance[index]->has_data())
            return true;
    }
    return false;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::has_operation() const
{
    for (std::size_t index=0; index<service_policy_instance.size(); index++)
    {
        if(service_policy_instance[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "service-policy-names";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "service-policy-instance")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance>();
        c->parent = this;
        service_policy_instance.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : service_policy_instance)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "service-policy-instance")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::ServicePolicyInstance()
    :
    service_policy_name{YType::str, "service-policy-name"}
    	,
    statistics(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics>())
{
    statistics->parent = this;

    yang_name = "service-policy-instance"; yang_parent_name = "service-policy-names"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::~ServicePolicyInstance()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::has_data() const
{
    return service_policy_name.is_set
	|| (statistics !=  nullptr && statistics->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(service_policy_name.yfilter)
	|| (statistics !=  nullptr && statistics->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "service-policy-instance" <<"[service-policy-name='" <<service_policy_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (service_policy_name.is_set || is_set(service_policy_name.yfilter)) leaf_name_data.push_back(service_policy_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "statistics")
    {
        if(statistics == nullptr)
        {
            statistics = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics>();
        }
        return statistics;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(statistics != nullptr)
    {
        children["statistics"] = statistics;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "service-policy-name")
    {
        service_policy_name = value;
        service_policy_name.value_namespace = name_space;
        service_policy_name.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "service-policy-name")
    {
        service_policy_name.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "statistics" || name == "service-policy-name")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::Statistics()
    :
    policy_name{YType::str, "policy-name"},
    state{YType::enumeration, "state"},
    state_description{YType::str, "state-description"},
    satid{YType::uint32, "satid"}
{

    yang_name = "statistics"; yang_parent_name = "service-policy-instance"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::~Statistics()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::has_data() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_data())
            return true;
    }
    return policy_name.is_set
	|| state.is_set
	|| state_description.is_set
	|| satid.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::has_operation() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(policy_name.yfilter)
	|| ydk::is_set(state.yfilter)
	|| ydk::is_set(state_description.yfilter)
	|| ydk::is_set(satid.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "statistics";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (policy_name.is_set || is_set(policy_name.yfilter)) leaf_name_data.push_back(policy_name.get_name_leafdata());
    if (state.is_set || is_set(state.yfilter)) leaf_name_data.push_back(state.get_name_leafdata());
    if (state_description.is_set || is_set(state_description.yfilter)) leaf_name_data.push_back(state_description.get_name_leafdata());
    if (satid.is_set || is_set(satid.yfilter)) leaf_name_data.push_back(satid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "class-stats")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats>();
        c->parent = this;
        class_stats.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : class_stats)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "policy-name")
    {
        policy_name = value;
        policy_name.value_namespace = name_space;
        policy_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state")
    {
        state = value;
        state.value_namespace = name_space;
        state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state-description")
    {
        state_description = value;
        state_description.value_namespace = name_space;
        state_description.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "satid")
    {
        satid = value;
        satid.value_namespace = name_space;
        satid.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "policy-name")
    {
        policy_name.yfilter = yfilter;
    }
    if(value_path == "state")
    {
        state.yfilter = yfilter;
    }
    if(value_path == "state-description")
    {
        state_description.yfilter = yfilter;
    }
    if(value_path == "satid")
    {
        satid.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "class-stats" || name == "policy-name" || name == "state" || name == "state-description" || name == "satid")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ClassStats()
    :
    counter_validity_bitmask{YType::uint64, "counter-validity-bitmask"},
    class_name{YType::str, "class-name"},
    shared_queue_id{YType::uint32, "shared-queue-id"},
    queue_descr{YType::str, "queue-descr"},
    cac_state{YType::enumeration, "cac-state"}
    	,
    general_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats>())
	,iphc_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats>())
	,child_policy(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy>())
	,cac_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats>())
{
    general_stats->parent = this;
    iphc_stats->parent = this;
    child_policy->parent = this;
    cac_stats->parent = this;

    yang_name = "class-stats"; yang_parent_name = "statistics"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::~ClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_data() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_data())
            return true;
    }
    return counter_validity_bitmask.is_set
	|| class_name.is_set
	|| shared_queue_id.is_set
	|| queue_descr.is_set
	|| cac_state.is_set
	|| (general_stats !=  nullptr && general_stats->has_data())
	|| (iphc_stats !=  nullptr && iphc_stats->has_data())
	|| (child_policy !=  nullptr && child_policy->has_data())
	|| (cac_stats !=  nullptr && cac_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_operation() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(counter_validity_bitmask.yfilter)
	|| ydk::is_set(class_name.yfilter)
	|| ydk::is_set(shared_queue_id.yfilter)
	|| ydk::is_set(queue_descr.yfilter)
	|| ydk::is_set(cac_state.yfilter)
	|| (general_stats !=  nullptr && general_stats->has_operation())
	|| (iphc_stats !=  nullptr && iphc_stats->has_operation())
	|| (child_policy !=  nullptr && child_policy->has_operation())
	|| (cac_stats !=  nullptr && cac_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (counter_validity_bitmask.is_set || is_set(counter_validity_bitmask.yfilter)) leaf_name_data.push_back(counter_validity_bitmask.get_name_leafdata());
    if (class_name.is_set || is_set(class_name.yfilter)) leaf_name_data.push_back(class_name.get_name_leafdata());
    if (shared_queue_id.is_set || is_set(shared_queue_id.yfilter)) leaf_name_data.push_back(shared_queue_id.get_name_leafdata());
    if (queue_descr.is_set || is_set(queue_descr.yfilter)) leaf_name_data.push_back(queue_descr.get_name_leafdata());
    if (cac_state.is_set || is_set(cac_state.yfilter)) leaf_name_data.push_back(cac_state.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "general-stats")
    {
        if(general_stats == nullptr)
        {
            general_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats>();
        }
        return general_stats;
    }

    if(child_yang_name == "iphc-stats")
    {
        if(iphc_stats == nullptr)
        {
            iphc_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats>();
        }
        return iphc_stats;
    }

    if(child_yang_name == "child-policy")
    {
        if(child_policy == nullptr)
        {
            child_policy = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy>();
        }
        return child_policy;
    }

    if(child_yang_name == "cac-stats")
    {
        if(cac_stats == nullptr)
        {
            cac_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats>();
        }
        return cac_stats;
    }

    if(child_yang_name == "queue-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray>();
        c->parent = this;
        queue_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "police-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray>();
        c->parent = this;
        police_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "wred-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray>();
        c->parent = this;
        wred_stats_array.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(general_stats != nullptr)
    {
        children["general-stats"] = general_stats;
    }

    if(iphc_stats != nullptr)
    {
        children["iphc-stats"] = iphc_stats;
    }

    if(child_policy != nullptr)
    {
        children["child-policy"] = child_policy;
    }

    if(cac_stats != nullptr)
    {
        children["cac-stats"] = cac_stats;
    }

    count = 0;
    for (auto const & c : queue_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : police_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : wred_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask = value;
        counter_validity_bitmask.value_namespace = name_space;
        counter_validity_bitmask.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "class-name")
    {
        class_name = value;
        class_name.value_namespace = name_space;
        class_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id = value;
        shared_queue_id.value_namespace = name_space;
        shared_queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-descr")
    {
        queue_descr = value;
        queue_descr.value_namespace = name_space;
        queue_descr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cac-state")
    {
        cac_state = value;
        cac_state.value_namespace = name_space;
        cac_state.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask.yfilter = yfilter;
    }
    if(value_path == "class-name")
    {
        class_name.yfilter = yfilter;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id.yfilter = yfilter;
    }
    if(value_path == "queue-descr")
    {
        queue_descr.yfilter = yfilter;
    }
    if(value_path == "cac-state")
    {
        cac_state.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "general-stats" || name == "iphc-stats" || name == "child-policy" || name == "cac-stats" || name == "queue-stats-array" || name == "police-stats-array" || name == "wred-stats-array" || name == "counter-validity-bitmask" || name == "class-name" || name == "shared-queue-id" || name == "queue-descr" || name == "cac-state")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::GeneralStats()
    :
    transmit_packets{YType::uint64, "transmit-packets"},
    transmit_bytes{YType::uint64, "transmit-bytes"},
    total_drop_packets{YType::uint64, "total-drop-packets"},
    total_drop_bytes{YType::uint64, "total-drop-bytes"},
    total_drop_rate{YType::uint32, "total-drop-rate"},
    match_data_rate{YType::uint32, "match-data-rate"},
    total_transmit_rate{YType::uint32, "total-transmit-rate"},
    pre_policy_matched_packets{YType::uint64, "pre-policy-matched-packets"},
    pre_policy_matched_bytes{YType::uint64, "pre-policy-matched-bytes"}
{

    yang_name = "general-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::~GeneralStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_data() const
{
    return transmit_packets.is_set
	|| transmit_bytes.is_set
	|| total_drop_packets.is_set
	|| total_drop_bytes.is_set
	|| total_drop_rate.is_set
	|| match_data_rate.is_set
	|| total_transmit_rate.is_set
	|| pre_policy_matched_packets.is_set
	|| pre_policy_matched_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(transmit_packets.yfilter)
	|| ydk::is_set(transmit_bytes.yfilter)
	|| ydk::is_set(total_drop_packets.yfilter)
	|| ydk::is_set(total_drop_bytes.yfilter)
	|| ydk::is_set(total_drop_rate.yfilter)
	|| ydk::is_set(match_data_rate.yfilter)
	|| ydk::is_set(total_transmit_rate.yfilter)
	|| ydk::is_set(pre_policy_matched_packets.yfilter)
	|| ydk::is_set(pre_policy_matched_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "general-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (transmit_packets.is_set || is_set(transmit_packets.yfilter)) leaf_name_data.push_back(transmit_packets.get_name_leafdata());
    if (transmit_bytes.is_set || is_set(transmit_bytes.yfilter)) leaf_name_data.push_back(transmit_bytes.get_name_leafdata());
    if (total_drop_packets.is_set || is_set(total_drop_packets.yfilter)) leaf_name_data.push_back(total_drop_packets.get_name_leafdata());
    if (total_drop_bytes.is_set || is_set(total_drop_bytes.yfilter)) leaf_name_data.push_back(total_drop_bytes.get_name_leafdata());
    if (total_drop_rate.is_set || is_set(total_drop_rate.yfilter)) leaf_name_data.push_back(total_drop_rate.get_name_leafdata());
    if (match_data_rate.is_set || is_set(match_data_rate.yfilter)) leaf_name_data.push_back(match_data_rate.get_name_leafdata());
    if (total_transmit_rate.is_set || is_set(total_transmit_rate.yfilter)) leaf_name_data.push_back(total_transmit_rate.get_name_leafdata());
    if (pre_policy_matched_packets.is_set || is_set(pre_policy_matched_packets.yfilter)) leaf_name_data.push_back(pre_policy_matched_packets.get_name_leafdata());
    if (pre_policy_matched_bytes.is_set || is_set(pre_policy_matched_bytes.yfilter)) leaf_name_data.push_back(pre_policy_matched_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets = value;
        transmit_packets.value_namespace = name_space;
        transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes = value;
        transmit_bytes.value_namespace = name_space;
        transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets = value;
        total_drop_packets.value_namespace = name_space;
        total_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes = value;
        total_drop_bytes.value_namespace = name_space;
        total_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate = value;
        total_drop_rate.value_namespace = name_space;
        total_drop_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate = value;
        match_data_rate.value_namespace = name_space;
        match_data_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate = value;
        total_transmit_rate.value_namespace = name_space;
        total_transmit_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets = value;
        pre_policy_matched_packets.value_namespace = name_space;
        pre_policy_matched_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes = value;
        pre_policy_matched_bytes.value_namespace = name_space;
        pre_policy_matched_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets.yfilter = yfilter;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets.yfilter = yfilter;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate.yfilter = yfilter;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate.yfilter = yfilter;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "transmit-packets" || name == "transmit-bytes" || name == "total-drop-packets" || name == "total-drop-bytes" || name == "total-drop-rate" || name == "match-data-rate" || name == "total-transmit-rate" || name == "pre-policy-matched-packets" || name == "pre-policy-matched-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::IphcStats()
    :
    non_tcp_total_out_packets{YType::uint64, "non-tcp-total-out-packets"},
    non_tcp_total_out_bytes{YType::uint64, "non-tcp-total-out-bytes"},
    non_tcp_bytes_saved{YType::uint64, "non-tcp-bytes-saved"},
    non_tcp_compressed_packets_out{YType::uint64, "non-tcp-compressed-packets-out"},
    non_tcp_bytes_sent_rate{YType::uint32, "non-tcp-bytes-sent-rate"},
    non_tcp_full_header_packets_out{YType::uint64, "non-tcp-full-header-packets-out"},
    tcp_total_out_packets{YType::uint64, "tcp-total-out-packets"},
    tcp_total_out_bytes{YType::uint64, "tcp-total-out-bytes"},
    tcp_bytes_saved{YType::uint64, "tcp-bytes-saved"},
    tcp_compressed_packets_out{YType::uint64, "tcp-compressed-packets-out"},
    tcp_bytes_sent_rate{YType::uint32, "tcp-bytes-sent-rate"},
    tcp_full_header_packets_out{YType::uint64, "tcp-full-header-packets-out"}
{

    yang_name = "iphc-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::~IphcStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_data() const
{
    return non_tcp_total_out_packets.is_set
	|| non_tcp_total_out_bytes.is_set
	|| non_tcp_bytes_saved.is_set
	|| non_tcp_compressed_packets_out.is_set
	|| non_tcp_bytes_sent_rate.is_set
	|| non_tcp_full_header_packets_out.is_set
	|| tcp_total_out_packets.is_set
	|| tcp_total_out_bytes.is_set
	|| tcp_bytes_saved.is_set
	|| tcp_compressed_packets_out.is_set
	|| tcp_bytes_sent_rate.is_set
	|| tcp_full_header_packets_out.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(non_tcp_total_out_packets.yfilter)
	|| ydk::is_set(non_tcp_total_out_bytes.yfilter)
	|| ydk::is_set(non_tcp_bytes_saved.yfilter)
	|| ydk::is_set(non_tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(non_tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(non_tcp_full_header_packets_out.yfilter)
	|| ydk::is_set(tcp_total_out_packets.yfilter)
	|| ydk::is_set(tcp_total_out_bytes.yfilter)
	|| ydk::is_set(tcp_bytes_saved.yfilter)
	|| ydk::is_set(tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(tcp_full_header_packets_out.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "iphc-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (non_tcp_total_out_packets.is_set || is_set(non_tcp_total_out_packets.yfilter)) leaf_name_data.push_back(non_tcp_total_out_packets.get_name_leafdata());
    if (non_tcp_total_out_bytes.is_set || is_set(non_tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(non_tcp_total_out_bytes.get_name_leafdata());
    if (non_tcp_bytes_saved.is_set || is_set(non_tcp_bytes_saved.yfilter)) leaf_name_data.push_back(non_tcp_bytes_saved.get_name_leafdata());
    if (non_tcp_compressed_packets_out.is_set || is_set(non_tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_compressed_packets_out.get_name_leafdata());
    if (non_tcp_bytes_sent_rate.is_set || is_set(non_tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(non_tcp_bytes_sent_rate.get_name_leafdata());
    if (non_tcp_full_header_packets_out.is_set || is_set(non_tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_full_header_packets_out.get_name_leafdata());
    if (tcp_total_out_packets.is_set || is_set(tcp_total_out_packets.yfilter)) leaf_name_data.push_back(tcp_total_out_packets.get_name_leafdata());
    if (tcp_total_out_bytes.is_set || is_set(tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(tcp_total_out_bytes.get_name_leafdata());
    if (tcp_bytes_saved.is_set || is_set(tcp_bytes_saved.yfilter)) leaf_name_data.push_back(tcp_bytes_saved.get_name_leafdata());
    if (tcp_compressed_packets_out.is_set || is_set(tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(tcp_compressed_packets_out.get_name_leafdata());
    if (tcp_bytes_sent_rate.is_set || is_set(tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(tcp_bytes_sent_rate.get_name_leafdata());
    if (tcp_full_header_packets_out.is_set || is_set(tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(tcp_full_header_packets_out.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets = value;
        non_tcp_total_out_packets.value_namespace = name_space;
        non_tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes = value;
        non_tcp_total_out_bytes.value_namespace = name_space;
        non_tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved = value;
        non_tcp_bytes_saved.value_namespace = name_space;
        non_tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out = value;
        non_tcp_compressed_packets_out.value_namespace = name_space;
        non_tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate = value;
        non_tcp_bytes_sent_rate.value_namespace = name_space;
        non_tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out = value;
        non_tcp_full_header_packets_out.value_namespace = name_space;
        non_tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets = value;
        tcp_total_out_packets.value_namespace = name_space;
        tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes = value;
        tcp_total_out_bytes.value_namespace = name_space;
        tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved = value;
        tcp_bytes_saved.value_namespace = name_space;
        tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out = value;
        tcp_compressed_packets_out.value_namespace = name_space;
        tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate = value;
        tcp_bytes_sent_rate.value_namespace = name_space;
        tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out = value;
        tcp_full_header_packets_out.value_namespace = name_space;
        tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "non-tcp-total-out-packets" || name == "non-tcp-total-out-bytes" || name == "non-tcp-bytes-saved" || name == "non-tcp-compressed-packets-out" || name == "non-tcp-bytes-sent-rate" || name == "non-tcp-full-header-packets-out" || name == "tcp-total-out-packets" || name == "tcp-total-out-bytes" || name == "tcp-bytes-saved" || name == "tcp-compressed-packets-out" || name == "tcp-bytes-sent-rate" || name == "tcp-full-header-packets-out")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ChildPolicy()
    :
    policy_name{YType::str, "policy-name"},
    state{YType::enumeration, "state"},
    state_description{YType::str, "state-description"},
    satid{YType::uint32, "satid"}
{

    yang_name = "child-policy"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::~ChildPolicy()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_data() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_data())
            return true;
    }
    return policy_name.is_set
	|| state.is_set
	|| state_description.is_set
	|| satid.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_operation() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(policy_name.yfilter)
	|| ydk::is_set(state.yfilter)
	|| ydk::is_set(state_description.yfilter)
	|| ydk::is_set(satid.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "child-policy";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (policy_name.is_set || is_set(policy_name.yfilter)) leaf_name_data.push_back(policy_name.get_name_leafdata());
    if (state.is_set || is_set(state.yfilter)) leaf_name_data.push_back(state.get_name_leafdata());
    if (state_description.is_set || is_set(state_description.yfilter)) leaf_name_data.push_back(state_description.get_name_leafdata());
    if (satid.is_set || is_set(satid.yfilter)) leaf_name_data.push_back(satid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "class-stats")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_>();
        c->parent = this;
        class_stats.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : class_stats)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "policy-name")
    {
        policy_name = value;
        policy_name.value_namespace = name_space;
        policy_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state")
    {
        state = value;
        state.value_namespace = name_space;
        state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state-description")
    {
        state_description = value;
        state_description.value_namespace = name_space;
        state_description.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "satid")
    {
        satid = value;
        satid.value_namespace = name_space;
        satid.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "policy-name")
    {
        policy_name.yfilter = yfilter;
    }
    if(value_path == "state")
    {
        state.yfilter = yfilter;
    }
    if(value_path == "state-description")
    {
        state_description.yfilter = yfilter;
    }
    if(value_path == "satid")
    {
        satid.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "class-stats" || name == "policy-name" || name == "state" || name == "state-description" || name == "satid")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::ClassStats_()
    :
    counter_validity_bitmask{YType::uint64, "counter-validity-bitmask"},
    class_name{YType::str, "class-name"},
    shared_queue_id{YType::uint32, "shared-queue-id"},
    queue_descr{YType::str, "queue-descr"},
    cac_state{YType::enumeration, "cac-state"}
    	,
    general_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats>())
	,iphc_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats>())
	,cac_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats>())
{
    general_stats->parent = this;
    iphc_stats->parent = this;
    cac_stats->parent = this;

    yang_name = "class-stats"; yang_parent_name = "child-policy"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::~ClassStats_()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_data() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_data())
            return true;
    }
    return counter_validity_bitmask.is_set
	|| class_name.is_set
	|| shared_queue_id.is_set
	|| queue_descr.is_set
	|| cac_state.is_set
	|| (general_stats !=  nullptr && general_stats->has_data())
	|| (iphc_stats !=  nullptr && iphc_stats->has_data())
	|| (cac_stats !=  nullptr && cac_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_operation() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(counter_validity_bitmask.yfilter)
	|| ydk::is_set(class_name.yfilter)
	|| ydk::is_set(shared_queue_id.yfilter)
	|| ydk::is_set(queue_descr.yfilter)
	|| ydk::is_set(cac_state.yfilter)
	|| (general_stats !=  nullptr && general_stats->has_operation())
	|| (iphc_stats !=  nullptr && iphc_stats->has_operation())
	|| (cac_stats !=  nullptr && cac_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (counter_validity_bitmask.is_set || is_set(counter_validity_bitmask.yfilter)) leaf_name_data.push_back(counter_validity_bitmask.get_name_leafdata());
    if (class_name.is_set || is_set(class_name.yfilter)) leaf_name_data.push_back(class_name.get_name_leafdata());
    if (shared_queue_id.is_set || is_set(shared_queue_id.yfilter)) leaf_name_data.push_back(shared_queue_id.get_name_leafdata());
    if (queue_descr.is_set || is_set(queue_descr.yfilter)) leaf_name_data.push_back(queue_descr.get_name_leafdata());
    if (cac_state.is_set || is_set(cac_state.yfilter)) leaf_name_data.push_back(cac_state.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "general-stats")
    {
        if(general_stats == nullptr)
        {
            general_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats>();
        }
        return general_stats;
    }

    if(child_yang_name == "iphc-stats")
    {
        if(iphc_stats == nullptr)
        {
            iphc_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats>();
        }
        return iphc_stats;
    }

    if(child_yang_name == "cac-stats")
    {
        if(cac_stats == nullptr)
        {
            cac_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats>();
        }
        return cac_stats;
    }

    if(child_yang_name == "queue-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray>();
        c->parent = this;
        queue_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "police-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray>();
        c->parent = this;
        police_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "wred-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray>();
        c->parent = this;
        wred_stats_array.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(general_stats != nullptr)
    {
        children["general-stats"] = general_stats;
    }

    if(iphc_stats != nullptr)
    {
        children["iphc-stats"] = iphc_stats;
    }

    if(cac_stats != nullptr)
    {
        children["cac-stats"] = cac_stats;
    }

    count = 0;
    for (auto const & c : queue_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : police_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : wred_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask = value;
        counter_validity_bitmask.value_namespace = name_space;
        counter_validity_bitmask.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "class-name")
    {
        class_name = value;
        class_name.value_namespace = name_space;
        class_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id = value;
        shared_queue_id.value_namespace = name_space;
        shared_queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-descr")
    {
        queue_descr = value;
        queue_descr.value_namespace = name_space;
        queue_descr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cac-state")
    {
        cac_state = value;
        cac_state.value_namespace = name_space;
        cac_state.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask.yfilter = yfilter;
    }
    if(value_path == "class-name")
    {
        class_name.yfilter = yfilter;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id.yfilter = yfilter;
    }
    if(value_path == "queue-descr")
    {
        queue_descr.yfilter = yfilter;
    }
    if(value_path == "cac-state")
    {
        cac_state.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "general-stats" || name == "iphc-stats" || name == "cac-stats" || name == "queue-stats-array" || name == "police-stats-array" || name == "wred-stats-array" || name == "counter-validity-bitmask" || name == "class-name" || name == "shared-queue-id" || name == "queue-descr" || name == "cac-state")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::GeneralStats()
    :
    transmit_packets{YType::uint64, "transmit-packets"},
    transmit_bytes{YType::uint64, "transmit-bytes"},
    total_drop_packets{YType::uint64, "total-drop-packets"},
    total_drop_bytes{YType::uint64, "total-drop-bytes"},
    total_drop_rate{YType::uint32, "total-drop-rate"},
    match_data_rate{YType::uint32, "match-data-rate"},
    total_transmit_rate{YType::uint32, "total-transmit-rate"},
    pre_policy_matched_packets{YType::uint64, "pre-policy-matched-packets"},
    pre_policy_matched_bytes{YType::uint64, "pre-policy-matched-bytes"}
{

    yang_name = "general-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::~GeneralStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_data() const
{
    return transmit_packets.is_set
	|| transmit_bytes.is_set
	|| total_drop_packets.is_set
	|| total_drop_bytes.is_set
	|| total_drop_rate.is_set
	|| match_data_rate.is_set
	|| total_transmit_rate.is_set
	|| pre_policy_matched_packets.is_set
	|| pre_policy_matched_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(transmit_packets.yfilter)
	|| ydk::is_set(transmit_bytes.yfilter)
	|| ydk::is_set(total_drop_packets.yfilter)
	|| ydk::is_set(total_drop_bytes.yfilter)
	|| ydk::is_set(total_drop_rate.yfilter)
	|| ydk::is_set(match_data_rate.yfilter)
	|| ydk::is_set(total_transmit_rate.yfilter)
	|| ydk::is_set(pre_policy_matched_packets.yfilter)
	|| ydk::is_set(pre_policy_matched_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "general-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (transmit_packets.is_set || is_set(transmit_packets.yfilter)) leaf_name_data.push_back(transmit_packets.get_name_leafdata());
    if (transmit_bytes.is_set || is_set(transmit_bytes.yfilter)) leaf_name_data.push_back(transmit_bytes.get_name_leafdata());
    if (total_drop_packets.is_set || is_set(total_drop_packets.yfilter)) leaf_name_data.push_back(total_drop_packets.get_name_leafdata());
    if (total_drop_bytes.is_set || is_set(total_drop_bytes.yfilter)) leaf_name_data.push_back(total_drop_bytes.get_name_leafdata());
    if (total_drop_rate.is_set || is_set(total_drop_rate.yfilter)) leaf_name_data.push_back(total_drop_rate.get_name_leafdata());
    if (match_data_rate.is_set || is_set(match_data_rate.yfilter)) leaf_name_data.push_back(match_data_rate.get_name_leafdata());
    if (total_transmit_rate.is_set || is_set(total_transmit_rate.yfilter)) leaf_name_data.push_back(total_transmit_rate.get_name_leafdata());
    if (pre_policy_matched_packets.is_set || is_set(pre_policy_matched_packets.yfilter)) leaf_name_data.push_back(pre_policy_matched_packets.get_name_leafdata());
    if (pre_policy_matched_bytes.is_set || is_set(pre_policy_matched_bytes.yfilter)) leaf_name_data.push_back(pre_policy_matched_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets = value;
        transmit_packets.value_namespace = name_space;
        transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes = value;
        transmit_bytes.value_namespace = name_space;
        transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets = value;
        total_drop_packets.value_namespace = name_space;
        total_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes = value;
        total_drop_bytes.value_namespace = name_space;
        total_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate = value;
        total_drop_rate.value_namespace = name_space;
        total_drop_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate = value;
        match_data_rate.value_namespace = name_space;
        match_data_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate = value;
        total_transmit_rate.value_namespace = name_space;
        total_transmit_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets = value;
        pre_policy_matched_packets.value_namespace = name_space;
        pre_policy_matched_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes = value;
        pre_policy_matched_bytes.value_namespace = name_space;
        pre_policy_matched_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets.yfilter = yfilter;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets.yfilter = yfilter;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate.yfilter = yfilter;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate.yfilter = yfilter;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "transmit-packets" || name == "transmit-bytes" || name == "total-drop-packets" || name == "total-drop-bytes" || name == "total-drop-rate" || name == "match-data-rate" || name == "total-transmit-rate" || name == "pre-policy-matched-packets" || name == "pre-policy-matched-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::IphcStats()
    :
    non_tcp_total_out_packets{YType::uint64, "non-tcp-total-out-packets"},
    non_tcp_total_out_bytes{YType::uint64, "non-tcp-total-out-bytes"},
    non_tcp_bytes_saved{YType::uint64, "non-tcp-bytes-saved"},
    non_tcp_compressed_packets_out{YType::uint64, "non-tcp-compressed-packets-out"},
    non_tcp_bytes_sent_rate{YType::uint32, "non-tcp-bytes-sent-rate"},
    non_tcp_full_header_packets_out{YType::uint64, "non-tcp-full-header-packets-out"},
    tcp_total_out_packets{YType::uint64, "tcp-total-out-packets"},
    tcp_total_out_bytes{YType::uint64, "tcp-total-out-bytes"},
    tcp_bytes_saved{YType::uint64, "tcp-bytes-saved"},
    tcp_compressed_packets_out{YType::uint64, "tcp-compressed-packets-out"},
    tcp_bytes_sent_rate{YType::uint32, "tcp-bytes-sent-rate"},
    tcp_full_header_packets_out{YType::uint64, "tcp-full-header-packets-out"}
{

    yang_name = "iphc-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::~IphcStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_data() const
{
    return non_tcp_total_out_packets.is_set
	|| non_tcp_total_out_bytes.is_set
	|| non_tcp_bytes_saved.is_set
	|| non_tcp_compressed_packets_out.is_set
	|| non_tcp_bytes_sent_rate.is_set
	|| non_tcp_full_header_packets_out.is_set
	|| tcp_total_out_packets.is_set
	|| tcp_total_out_bytes.is_set
	|| tcp_bytes_saved.is_set
	|| tcp_compressed_packets_out.is_set
	|| tcp_bytes_sent_rate.is_set
	|| tcp_full_header_packets_out.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(non_tcp_total_out_packets.yfilter)
	|| ydk::is_set(non_tcp_total_out_bytes.yfilter)
	|| ydk::is_set(non_tcp_bytes_saved.yfilter)
	|| ydk::is_set(non_tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(non_tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(non_tcp_full_header_packets_out.yfilter)
	|| ydk::is_set(tcp_total_out_packets.yfilter)
	|| ydk::is_set(tcp_total_out_bytes.yfilter)
	|| ydk::is_set(tcp_bytes_saved.yfilter)
	|| ydk::is_set(tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(tcp_full_header_packets_out.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "iphc-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (non_tcp_total_out_packets.is_set || is_set(non_tcp_total_out_packets.yfilter)) leaf_name_data.push_back(non_tcp_total_out_packets.get_name_leafdata());
    if (non_tcp_total_out_bytes.is_set || is_set(non_tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(non_tcp_total_out_bytes.get_name_leafdata());
    if (non_tcp_bytes_saved.is_set || is_set(non_tcp_bytes_saved.yfilter)) leaf_name_data.push_back(non_tcp_bytes_saved.get_name_leafdata());
    if (non_tcp_compressed_packets_out.is_set || is_set(non_tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_compressed_packets_out.get_name_leafdata());
    if (non_tcp_bytes_sent_rate.is_set || is_set(non_tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(non_tcp_bytes_sent_rate.get_name_leafdata());
    if (non_tcp_full_header_packets_out.is_set || is_set(non_tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_full_header_packets_out.get_name_leafdata());
    if (tcp_total_out_packets.is_set || is_set(tcp_total_out_packets.yfilter)) leaf_name_data.push_back(tcp_total_out_packets.get_name_leafdata());
    if (tcp_total_out_bytes.is_set || is_set(tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(tcp_total_out_bytes.get_name_leafdata());
    if (tcp_bytes_saved.is_set || is_set(tcp_bytes_saved.yfilter)) leaf_name_data.push_back(tcp_bytes_saved.get_name_leafdata());
    if (tcp_compressed_packets_out.is_set || is_set(tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(tcp_compressed_packets_out.get_name_leafdata());
    if (tcp_bytes_sent_rate.is_set || is_set(tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(tcp_bytes_sent_rate.get_name_leafdata());
    if (tcp_full_header_packets_out.is_set || is_set(tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(tcp_full_header_packets_out.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets = value;
        non_tcp_total_out_packets.value_namespace = name_space;
        non_tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes = value;
        non_tcp_total_out_bytes.value_namespace = name_space;
        non_tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved = value;
        non_tcp_bytes_saved.value_namespace = name_space;
        non_tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out = value;
        non_tcp_compressed_packets_out.value_namespace = name_space;
        non_tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate = value;
        non_tcp_bytes_sent_rate.value_namespace = name_space;
        non_tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out = value;
        non_tcp_full_header_packets_out.value_namespace = name_space;
        non_tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets = value;
        tcp_total_out_packets.value_namespace = name_space;
        tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes = value;
        tcp_total_out_bytes.value_namespace = name_space;
        tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved = value;
        tcp_bytes_saved.value_namespace = name_space;
        tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out = value;
        tcp_compressed_packets_out.value_namespace = name_space;
        tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate = value;
        tcp_bytes_sent_rate.value_namespace = name_space;
        tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out = value;
        tcp_full_header_packets_out.value_namespace = name_space;
        tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "non-tcp-total-out-packets" || name == "non-tcp-total-out-bytes" || name == "non-tcp-bytes-saved" || name == "non-tcp-compressed-packets-out" || name == "non-tcp-bytes-sent-rate" || name == "non-tcp-full-header-packets-out" || name == "tcp-total-out-packets" || name == "tcp-total-out-bytes" || name == "tcp-bytes-saved" || name == "tcp-compressed-packets-out" || name == "tcp-bytes-sent-rate" || name == "tcp-full-header-packets-out")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::CacStats()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    drop_rates{YType::uint32, "drop-rates"},
    admitpackets{YType::uint64, "admitpackets"},
    admit_bytes{YType::uint64, "admit-bytes"},
    admit_rates{YType::uint32, "admit-rates"}
{

    yang_name = "cac-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::~CacStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| drop_rates.is_set
	|| admitpackets.is_set
	|| admit_bytes.is_set
	|| admit_rates.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(drop_rates.yfilter)
	|| ydk::is_set(admitpackets.yfilter)
	|| ydk::is_set(admit_bytes.yfilter)
	|| ydk::is_set(admit_rates.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cac-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (drop_rates.is_set || is_set(drop_rates.yfilter)) leaf_name_data.push_back(drop_rates.get_name_leafdata());
    if (admitpackets.is_set || is_set(admitpackets.yfilter)) leaf_name_data.push_back(admitpackets.get_name_leafdata());
    if (admit_bytes.is_set || is_set(admit_bytes.yfilter)) leaf_name_data.push_back(admit_bytes.get_name_leafdata());
    if (admit_rates.is_set || is_set(admit_rates.yfilter)) leaf_name_data.push_back(admit_rates.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-rates")
    {
        drop_rates = value;
        drop_rates.value_namespace = name_space;
        drop_rates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admitpackets")
    {
        admitpackets = value;
        admitpackets.value_namespace = name_space;
        admitpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes = value;
        admit_bytes.value_namespace = name_space;
        admit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-rates")
    {
        admit_rates = value;
        admit_rates.value_namespace = name_space;
        admit_rates.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "drop-rates")
    {
        drop_rates.yfilter = yfilter;
    }
    if(value_path == "admitpackets")
    {
        admitpackets.yfilter = yfilter;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes.yfilter = yfilter;
    }
    if(value_path == "admit-rates")
    {
        admit_rates.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drop-packets" || name == "drop-bytes" || name == "drop-rates" || name == "admitpackets" || name == "admit-bytes" || name == "admit-rates")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueStatsArray()
    :
    queue_id{YType::uint32, "queue-id"},
    tail_drop_packets{YType::uint64, "tail-drop-packets"},
    tail_drop_bytes{YType::uint64, "tail-drop-bytes"},
    atm_clp0_drop_packets{YType::uint64, "atm-clp0-drop-packets"},
    atm_clp0_drop_bytes{YType::uint64, "atm-clp0-drop-bytes"},
    atm_clp1_drop_packets{YType::uint64, "atm-clp1-drop-packets"},
    atm_clp1_drop_bytes{YType::uint64, "atm-clp1-drop-bytes"},
    queue_drop_threshold{YType::uint32, "queue-drop-threshold"},
    forced_wred_stats_display{YType::boolean, "forced-wred-stats-display"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"}
{

    yang_name = "queue-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::~QueueStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_data() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_data())
            return true;
    }
    return queue_id.is_set
	|| tail_drop_packets.is_set
	|| tail_drop_bytes.is_set
	|| atm_clp0_drop_packets.is_set
	|| atm_clp0_drop_bytes.is_set
	|| atm_clp1_drop_packets.is_set
	|| atm_clp1_drop_bytes.is_set
	|| queue_drop_threshold.is_set
	|| forced_wred_stats_display.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_operation() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(queue_id.yfilter)
	|| ydk::is_set(tail_drop_packets.yfilter)
	|| ydk::is_set(tail_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp0_drop_packets.yfilter)
	|| ydk::is_set(atm_clp0_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp1_drop_packets.yfilter)
	|| ydk::is_set(atm_clp1_drop_bytes.yfilter)
	|| ydk::is_set(queue_drop_threshold.yfilter)
	|| ydk::is_set(forced_wred_stats_display.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (queue_id.is_set || is_set(queue_id.yfilter)) leaf_name_data.push_back(queue_id.get_name_leafdata());
    if (tail_drop_packets.is_set || is_set(tail_drop_packets.yfilter)) leaf_name_data.push_back(tail_drop_packets.get_name_leafdata());
    if (tail_drop_bytes.is_set || is_set(tail_drop_bytes.yfilter)) leaf_name_data.push_back(tail_drop_bytes.get_name_leafdata());
    if (atm_clp0_drop_packets.is_set || is_set(atm_clp0_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp0_drop_packets.get_name_leafdata());
    if (atm_clp0_drop_bytes.is_set || is_set(atm_clp0_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp0_drop_bytes.get_name_leafdata());
    if (atm_clp1_drop_packets.is_set || is_set(atm_clp1_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp1_drop_packets.get_name_leafdata());
    if (atm_clp1_drop_bytes.is_set || is_set(atm_clp1_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp1_drop_bytes.get_name_leafdata());
    if (queue_drop_threshold.is_set || is_set(queue_drop_threshold.yfilter)) leaf_name_data.push_back(queue_drop_threshold.get_name_leafdata());
    if (forced_wred_stats_display.is_set || is_set(forced_wred_stats_display.yfilter)) leaf_name_data.push_back(forced_wred_stats_display.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "queue-instance-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength>();
        c->parent = this;
        queue_instance_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-average-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength>();
        c->parent = this;
        queue_average_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-max-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength>();
        c->parent = this;
        queue_max_length.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : queue_instance_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_average_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_max_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "queue-id")
    {
        queue_id = value;
        queue_id.value_namespace = name_space;
        queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets = value;
        tail_drop_packets.value_namespace = name_space;
        tail_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes = value;
        tail_drop_bytes.value_namespace = name_space;
        tail_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets = value;
        atm_clp0_drop_packets.value_namespace = name_space;
        atm_clp0_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes = value;
        atm_clp0_drop_bytes.value_namespace = name_space;
        atm_clp0_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets = value;
        atm_clp1_drop_packets.value_namespace = name_space;
        atm_clp1_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes = value;
        atm_clp1_drop_bytes.value_namespace = name_space;
        atm_clp1_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold = value;
        queue_drop_threshold.value_namespace = name_space;
        queue_drop_threshold.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display = value;
        forced_wred_stats_display.value_namespace = name_space;
        forced_wred_stats_display.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "queue-id")
    {
        queue_id.yfilter = yfilter;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets.yfilter = yfilter;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold.yfilter = yfilter;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "queue-instance-length" || name == "queue-average-length" || name == "queue-max-length" || name == "queue-id" || name == "tail-drop-packets" || name == "tail-drop-bytes" || name == "atm-clp0-drop-packets" || name == "atm-clp0-drop-bytes" || name == "atm-clp1-drop-packets" || name == "atm-clp1-drop-bytes" || name == "queue-drop-threshold" || name == "forced-wred-stats-display" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "conform-rate" || name == "exceed-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::QueueInstanceLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-instance-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::~QueueInstanceLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-instance-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::QueueAverageLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-average-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::~QueueAverageLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-average-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::QueueMaxLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-max-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::~QueueMaxLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-max-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::PoliceStatsArray()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    violate_packets{YType::uint64, "violate-packets"},
    violate_bytes{YType::uint64, "violate-bytes"},
    parent_drop_packets{YType::uint64, "parent-drop-packets"},
    parent_drop_bytes{YType::uint64, "parent-drop-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"},
    violate_rate{YType::uint32, "violate-rate"}
    	,
    color_class_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats>())
{
    color_class_stats->parent = this;

    yang_name = "police-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::~PoliceStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| violate_packets.is_set
	|| violate_bytes.is_set
	|| parent_drop_packets.is_set
	|| parent_drop_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set
	|| violate_rate.is_set
	|| (color_class_stats !=  nullptr && color_class_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(violate_packets.yfilter)
	|| ydk::is_set(violate_bytes.yfilter)
	|| ydk::is_set(parent_drop_packets.yfilter)
	|| ydk::is_set(parent_drop_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter)
	|| ydk::is_set(violate_rate.yfilter)
	|| (color_class_stats !=  nullptr && color_class_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "police-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (violate_packets.is_set || is_set(violate_packets.yfilter)) leaf_name_data.push_back(violate_packets.get_name_leafdata());
    if (violate_bytes.is_set || is_set(violate_bytes.yfilter)) leaf_name_data.push_back(violate_bytes.get_name_leafdata());
    if (parent_drop_packets.is_set || is_set(parent_drop_packets.yfilter)) leaf_name_data.push_back(parent_drop_packets.get_name_leafdata());
    if (parent_drop_bytes.is_set || is_set(parent_drop_bytes.yfilter)) leaf_name_data.push_back(parent_drop_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());
    if (violate_rate.is_set || is_set(violate_rate.yfilter)) leaf_name_data.push_back(violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "color-class-stats")
    {
        if(color_class_stats == nullptr)
        {
            color_class_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats>();
        }
        return color_class_stats;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(color_class_stats != nullptr)
    {
        children["color-class-stats"] = color_class_stats;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-packets")
    {
        violate_packets = value;
        violate_packets.value_namespace = name_space;
        violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes = value;
        violate_bytes.value_namespace = name_space;
        violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets = value;
        parent_drop_packets.value_namespace = name_space;
        parent_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes = value;
        parent_drop_bytes.value_namespace = name_space;
        parent_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-rate")
    {
        violate_rate = value;
        violate_rate.value_namespace = name_space;
        violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-packets")
    {
        violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes.yfilter = yfilter;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets.yfilter = yfilter;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
    if(value_path == "violate-rate")
    {
        violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "color-class-stats" || name == "drop-packets" || name == "drop-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "violate-packets" || name == "violate-bytes" || name == "parent-drop-packets" || name == "parent-drop-bytes" || name == "conform-rate" || name == "exceed-rate" || name == "violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::ColorClassStats()
    :
    conform_class_conform_packets{YType::uint64, "conform-class-conform-packets"},
    conform_class_conform_bytes{YType::uint64, "conform-class-conform-bytes"},
    conform_class_conform_rate{YType::uint32, "conform-class-conform-rate"},
    conform_class_exceed_packets{YType::uint64, "conform-class-exceed-packets"},
    conform_class_exceed_bytes{YType::uint64, "conform-class-exceed-bytes"},
    conform_class_exceed_rate{YType::uint32, "conform-class-exceed-rate"},
    conform_class_violate_packets{YType::uint64, "conform-class-violate-packets"},
    conform_class_violate_bytes{YType::uint64, "conform-class-violate-bytes"},
    conform_class_violate_rate{YType::uint32, "conform-class-violate-rate"},
    exceed_class_exceed_packets{YType::uint64, "exceed-class-exceed-packets"},
    exceed_class_exceed_bytes{YType::uint64, "exceed-class-exceed-bytes"},
    exceed_class_exceed_rate{YType::uint32, "exceed-class-exceed-rate"},
    exceed_class_violate_packets{YType::uint64, "exceed-class-violate-packets"},
    exceed_class_violate_bytes{YType::uint64, "exceed-class-violate-bytes"},
    exceed_class_violate_rate{YType::uint32, "exceed-class-violate-rate"},
    violate_class_violate_packets{YType::uint64, "violate-class-violate-packets"},
    violate_class_violate_bytes{YType::uint64, "violate-class-violate-bytes"},
    violate_class_violate_rate{YType::uint32, "violate-class-violate-rate"}
{

    yang_name = "color-class-stats"; yang_parent_name = "police-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::~ColorClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_data() const
{
    return conform_class_conform_packets.is_set
	|| conform_class_conform_bytes.is_set
	|| conform_class_conform_rate.is_set
	|| conform_class_exceed_packets.is_set
	|| conform_class_exceed_bytes.is_set
	|| conform_class_exceed_rate.is_set
	|| conform_class_violate_packets.is_set
	|| conform_class_violate_bytes.is_set
	|| conform_class_violate_rate.is_set
	|| exceed_class_exceed_packets.is_set
	|| exceed_class_exceed_bytes.is_set
	|| exceed_class_exceed_rate.is_set
	|| exceed_class_violate_packets.is_set
	|| exceed_class_violate_bytes.is_set
	|| exceed_class_violate_rate.is_set
	|| violate_class_violate_packets.is_set
	|| violate_class_violate_bytes.is_set
	|| violate_class_violate_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(conform_class_conform_packets.yfilter)
	|| ydk::is_set(conform_class_conform_bytes.yfilter)
	|| ydk::is_set(conform_class_conform_rate.yfilter)
	|| ydk::is_set(conform_class_exceed_packets.yfilter)
	|| ydk::is_set(conform_class_exceed_bytes.yfilter)
	|| ydk::is_set(conform_class_exceed_rate.yfilter)
	|| ydk::is_set(conform_class_violate_packets.yfilter)
	|| ydk::is_set(conform_class_violate_bytes.yfilter)
	|| ydk::is_set(conform_class_violate_rate.yfilter)
	|| ydk::is_set(exceed_class_exceed_packets.yfilter)
	|| ydk::is_set(exceed_class_exceed_bytes.yfilter)
	|| ydk::is_set(exceed_class_exceed_rate.yfilter)
	|| ydk::is_set(exceed_class_violate_packets.yfilter)
	|| ydk::is_set(exceed_class_violate_bytes.yfilter)
	|| ydk::is_set(exceed_class_violate_rate.yfilter)
	|| ydk::is_set(violate_class_violate_packets.yfilter)
	|| ydk::is_set(violate_class_violate_bytes.yfilter)
	|| ydk::is_set(violate_class_violate_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "color-class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (conform_class_conform_packets.is_set || is_set(conform_class_conform_packets.yfilter)) leaf_name_data.push_back(conform_class_conform_packets.get_name_leafdata());
    if (conform_class_conform_bytes.is_set || is_set(conform_class_conform_bytes.yfilter)) leaf_name_data.push_back(conform_class_conform_bytes.get_name_leafdata());
    if (conform_class_conform_rate.is_set || is_set(conform_class_conform_rate.yfilter)) leaf_name_data.push_back(conform_class_conform_rate.get_name_leafdata());
    if (conform_class_exceed_packets.is_set || is_set(conform_class_exceed_packets.yfilter)) leaf_name_data.push_back(conform_class_exceed_packets.get_name_leafdata());
    if (conform_class_exceed_bytes.is_set || is_set(conform_class_exceed_bytes.yfilter)) leaf_name_data.push_back(conform_class_exceed_bytes.get_name_leafdata());
    if (conform_class_exceed_rate.is_set || is_set(conform_class_exceed_rate.yfilter)) leaf_name_data.push_back(conform_class_exceed_rate.get_name_leafdata());
    if (conform_class_violate_packets.is_set || is_set(conform_class_violate_packets.yfilter)) leaf_name_data.push_back(conform_class_violate_packets.get_name_leafdata());
    if (conform_class_violate_bytes.is_set || is_set(conform_class_violate_bytes.yfilter)) leaf_name_data.push_back(conform_class_violate_bytes.get_name_leafdata());
    if (conform_class_violate_rate.is_set || is_set(conform_class_violate_rate.yfilter)) leaf_name_data.push_back(conform_class_violate_rate.get_name_leafdata());
    if (exceed_class_exceed_packets.is_set || is_set(exceed_class_exceed_packets.yfilter)) leaf_name_data.push_back(exceed_class_exceed_packets.get_name_leafdata());
    if (exceed_class_exceed_bytes.is_set || is_set(exceed_class_exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_class_exceed_bytes.get_name_leafdata());
    if (exceed_class_exceed_rate.is_set || is_set(exceed_class_exceed_rate.yfilter)) leaf_name_data.push_back(exceed_class_exceed_rate.get_name_leafdata());
    if (exceed_class_violate_packets.is_set || is_set(exceed_class_violate_packets.yfilter)) leaf_name_data.push_back(exceed_class_violate_packets.get_name_leafdata());
    if (exceed_class_violate_bytes.is_set || is_set(exceed_class_violate_bytes.yfilter)) leaf_name_data.push_back(exceed_class_violate_bytes.get_name_leafdata());
    if (exceed_class_violate_rate.is_set || is_set(exceed_class_violate_rate.yfilter)) leaf_name_data.push_back(exceed_class_violate_rate.get_name_leafdata());
    if (violate_class_violate_packets.is_set || is_set(violate_class_violate_packets.yfilter)) leaf_name_data.push_back(violate_class_violate_packets.get_name_leafdata());
    if (violate_class_violate_bytes.is_set || is_set(violate_class_violate_bytes.yfilter)) leaf_name_data.push_back(violate_class_violate_bytes.get_name_leafdata());
    if (violate_class_violate_rate.is_set || is_set(violate_class_violate_rate.yfilter)) leaf_name_data.push_back(violate_class_violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets = value;
        conform_class_conform_packets.value_namespace = name_space;
        conform_class_conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes = value;
        conform_class_conform_bytes.value_namespace = name_space;
        conform_class_conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate = value;
        conform_class_conform_rate.value_namespace = name_space;
        conform_class_conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets = value;
        conform_class_exceed_packets.value_namespace = name_space;
        conform_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes = value;
        conform_class_exceed_bytes.value_namespace = name_space;
        conform_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate = value;
        conform_class_exceed_rate.value_namespace = name_space;
        conform_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets = value;
        conform_class_violate_packets.value_namespace = name_space;
        conform_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes = value;
        conform_class_violate_bytes.value_namespace = name_space;
        conform_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate = value;
        conform_class_violate_rate.value_namespace = name_space;
        conform_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets = value;
        exceed_class_exceed_packets.value_namespace = name_space;
        exceed_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes = value;
        exceed_class_exceed_bytes.value_namespace = name_space;
        exceed_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate = value;
        exceed_class_exceed_rate.value_namespace = name_space;
        exceed_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets = value;
        exceed_class_violate_packets.value_namespace = name_space;
        exceed_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes = value;
        exceed_class_violate_bytes.value_namespace = name_space;
        exceed_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate = value;
        exceed_class_violate_rate.value_namespace = name_space;
        exceed_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets = value;
        violate_class_violate_packets.value_namespace = name_space;
        violate_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes = value;
        violate_class_violate_bytes.value_namespace = name_space;
        violate_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate = value;
        violate_class_violate_rate.value_namespace = name_space;
        violate_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "conform-class-conform-packets" || name == "conform-class-conform-bytes" || name == "conform-class-conform-rate" || name == "conform-class-exceed-packets" || name == "conform-class-exceed-bytes" || name == "conform-class-exceed-rate" || name == "conform-class-violate-packets" || name == "conform-class-violate-bytes" || name == "conform-class-violate-rate" || name == "exceed-class-exceed-packets" || name == "exceed-class-exceed-bytes" || name == "exceed-class-exceed-rate" || name == "exceed-class-violate-packets" || name == "exceed-class-violate-bytes" || name == "exceed-class-violate-rate" || name == "violate-class-violate-packets" || name == "violate-class-violate-bytes" || name == "violate-class-violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::WredStatsArray()
    :
    profile_title{YType::str, "profile-title"},
    red_transmit_packets{YType::uint64, "red-transmit-packets"},
    red_transmit_bytes{YType::uint64, "red-transmit-bytes"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    red_ecn_marked_packets{YType::uint64, "red-ecn-marked-packets"},
    red_ecn_marked_bytes{YType::uint64, "red-ecn-marked-bytes"}
{

    yang_name = "wred-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::~WredStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_data() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_data())
            return true;
    }
    return profile_title.is_set
	|| red_transmit_packets.is_set
	|| red_transmit_bytes.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| red_ecn_marked_packets.is_set
	|| red_ecn_marked_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_operation() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(profile_title.yfilter)
	|| ydk::is_set(red_transmit_packets.yfilter)
	|| ydk::is_set(red_transmit_bytes.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(red_ecn_marked_packets.yfilter)
	|| ydk::is_set(red_ecn_marked_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "wred-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (profile_title.is_set || is_set(profile_title.yfilter)) leaf_name_data.push_back(profile_title.get_name_leafdata());
    if (red_transmit_packets.is_set || is_set(red_transmit_packets.yfilter)) leaf_name_data.push_back(red_transmit_packets.get_name_leafdata());
    if (red_transmit_bytes.is_set || is_set(red_transmit_bytes.yfilter)) leaf_name_data.push_back(red_transmit_bytes.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (red_ecn_marked_packets.is_set || is_set(red_ecn_marked_packets.yfilter)) leaf_name_data.push_back(red_ecn_marked_packets.get_name_leafdata());
    if (red_ecn_marked_bytes.is_set || is_set(red_ecn_marked_bytes.yfilter)) leaf_name_data.push_back(red_ecn_marked_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "red-label")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel>();
        c->parent = this;
        red_label.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : red_label)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "profile-title")
    {
        profile_title = value;
        profile_title.value_namespace = name_space;
        profile_title.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets = value;
        red_transmit_packets.value_namespace = name_space;
        red_transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes = value;
        red_transmit_bytes.value_namespace = name_space;
        red_transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets = value;
        red_ecn_marked_packets.value_namespace = name_space;
        red_ecn_marked_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes = value;
        red_ecn_marked_bytes.value_namespace = name_space;
        red_ecn_marked_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "profile-title")
    {
        profile_title.yfilter = yfilter;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets.yfilter = yfilter;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "red-label" || name == "profile-title" || name == "red-transmit-packets" || name == "red-transmit-bytes" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "red-ecn-marked-packets" || name == "red-ecn-marked-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::RedLabel()
    :
    wred_type{YType::enumeration, "wred-type"},
    value_{YType::uint8, "value"}
{

    yang_name = "red-label"; yang_parent_name = "wred-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::~RedLabel()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_data() const
{
    return wred_type.is_set
	|| value_.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(wred_type.yfilter)
	|| ydk::is_set(value_.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "red-label";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (wred_type.is_set || is_set(wred_type.yfilter)) leaf_name_data.push_back(wred_type.get_name_leafdata());
    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "wred-type")
    {
        wred_type = value;
        wred_type.value_namespace = name_space;
        wred_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "wred-type")
    {
        wred_type.yfilter = yfilter;
    }
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "wred-type" || name == "value")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::CacStats()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    drop_rates{YType::uint32, "drop-rates"},
    admitpackets{YType::uint64, "admitpackets"},
    admit_bytes{YType::uint64, "admit-bytes"},
    admit_rates{YType::uint32, "admit-rates"}
{

    yang_name = "cac-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::~CacStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| drop_rates.is_set
	|| admitpackets.is_set
	|| admit_bytes.is_set
	|| admit_rates.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(drop_rates.yfilter)
	|| ydk::is_set(admitpackets.yfilter)
	|| ydk::is_set(admit_bytes.yfilter)
	|| ydk::is_set(admit_rates.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cac-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (drop_rates.is_set || is_set(drop_rates.yfilter)) leaf_name_data.push_back(drop_rates.get_name_leafdata());
    if (admitpackets.is_set || is_set(admitpackets.yfilter)) leaf_name_data.push_back(admitpackets.get_name_leafdata());
    if (admit_bytes.is_set || is_set(admit_bytes.yfilter)) leaf_name_data.push_back(admit_bytes.get_name_leafdata());
    if (admit_rates.is_set || is_set(admit_rates.yfilter)) leaf_name_data.push_back(admit_rates.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-rates")
    {
        drop_rates = value;
        drop_rates.value_namespace = name_space;
        drop_rates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admitpackets")
    {
        admitpackets = value;
        admitpackets.value_namespace = name_space;
        admitpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes = value;
        admit_bytes.value_namespace = name_space;
        admit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-rates")
    {
        admit_rates = value;
        admit_rates.value_namespace = name_space;
        admit_rates.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "drop-rates")
    {
        drop_rates.yfilter = yfilter;
    }
    if(value_path == "admitpackets")
    {
        admitpackets.yfilter = yfilter;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes.yfilter = yfilter;
    }
    if(value_path == "admit-rates")
    {
        admit_rates.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drop-packets" || name == "drop-bytes" || name == "drop-rates" || name == "admitpackets" || name == "admit-bytes" || name == "admit-rates")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueStatsArray()
    :
    queue_id{YType::uint32, "queue-id"},
    tail_drop_packets{YType::uint64, "tail-drop-packets"},
    tail_drop_bytes{YType::uint64, "tail-drop-bytes"},
    atm_clp0_drop_packets{YType::uint64, "atm-clp0-drop-packets"},
    atm_clp0_drop_bytes{YType::uint64, "atm-clp0-drop-bytes"},
    atm_clp1_drop_packets{YType::uint64, "atm-clp1-drop-packets"},
    atm_clp1_drop_bytes{YType::uint64, "atm-clp1-drop-bytes"},
    queue_drop_threshold{YType::uint32, "queue-drop-threshold"},
    forced_wred_stats_display{YType::boolean, "forced-wred-stats-display"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"}
{

    yang_name = "queue-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::~QueueStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_data() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_data())
            return true;
    }
    return queue_id.is_set
	|| tail_drop_packets.is_set
	|| tail_drop_bytes.is_set
	|| atm_clp0_drop_packets.is_set
	|| atm_clp0_drop_bytes.is_set
	|| atm_clp1_drop_packets.is_set
	|| atm_clp1_drop_bytes.is_set
	|| queue_drop_threshold.is_set
	|| forced_wred_stats_display.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_operation() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(queue_id.yfilter)
	|| ydk::is_set(tail_drop_packets.yfilter)
	|| ydk::is_set(tail_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp0_drop_packets.yfilter)
	|| ydk::is_set(atm_clp0_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp1_drop_packets.yfilter)
	|| ydk::is_set(atm_clp1_drop_bytes.yfilter)
	|| ydk::is_set(queue_drop_threshold.yfilter)
	|| ydk::is_set(forced_wred_stats_display.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (queue_id.is_set || is_set(queue_id.yfilter)) leaf_name_data.push_back(queue_id.get_name_leafdata());
    if (tail_drop_packets.is_set || is_set(tail_drop_packets.yfilter)) leaf_name_data.push_back(tail_drop_packets.get_name_leafdata());
    if (tail_drop_bytes.is_set || is_set(tail_drop_bytes.yfilter)) leaf_name_data.push_back(tail_drop_bytes.get_name_leafdata());
    if (atm_clp0_drop_packets.is_set || is_set(atm_clp0_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp0_drop_packets.get_name_leafdata());
    if (atm_clp0_drop_bytes.is_set || is_set(atm_clp0_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp0_drop_bytes.get_name_leafdata());
    if (atm_clp1_drop_packets.is_set || is_set(atm_clp1_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp1_drop_packets.get_name_leafdata());
    if (atm_clp1_drop_bytes.is_set || is_set(atm_clp1_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp1_drop_bytes.get_name_leafdata());
    if (queue_drop_threshold.is_set || is_set(queue_drop_threshold.yfilter)) leaf_name_data.push_back(queue_drop_threshold.get_name_leafdata());
    if (forced_wred_stats_display.is_set || is_set(forced_wred_stats_display.yfilter)) leaf_name_data.push_back(forced_wred_stats_display.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "queue-instance-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength>();
        c->parent = this;
        queue_instance_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-average-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength>();
        c->parent = this;
        queue_average_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-max-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength>();
        c->parent = this;
        queue_max_length.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : queue_instance_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_average_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_max_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "queue-id")
    {
        queue_id = value;
        queue_id.value_namespace = name_space;
        queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets = value;
        tail_drop_packets.value_namespace = name_space;
        tail_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes = value;
        tail_drop_bytes.value_namespace = name_space;
        tail_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets = value;
        atm_clp0_drop_packets.value_namespace = name_space;
        atm_clp0_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes = value;
        atm_clp0_drop_bytes.value_namespace = name_space;
        atm_clp0_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets = value;
        atm_clp1_drop_packets.value_namespace = name_space;
        atm_clp1_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes = value;
        atm_clp1_drop_bytes.value_namespace = name_space;
        atm_clp1_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold = value;
        queue_drop_threshold.value_namespace = name_space;
        queue_drop_threshold.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display = value;
        forced_wred_stats_display.value_namespace = name_space;
        forced_wred_stats_display.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "queue-id")
    {
        queue_id.yfilter = yfilter;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets.yfilter = yfilter;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold.yfilter = yfilter;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "queue-instance-length" || name == "queue-average-length" || name == "queue-max-length" || name == "queue-id" || name == "tail-drop-packets" || name == "tail-drop-bytes" || name == "atm-clp0-drop-packets" || name == "atm-clp0-drop-bytes" || name == "atm-clp1-drop-packets" || name == "atm-clp1-drop-bytes" || name == "queue-drop-threshold" || name == "forced-wred-stats-display" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "conform-rate" || name == "exceed-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::QueueInstanceLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-instance-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::~QueueInstanceLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-instance-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::QueueAverageLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-average-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::~QueueAverageLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-average-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::QueueMaxLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-max-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::~QueueMaxLength()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-max-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::PoliceStatsArray()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    violate_packets{YType::uint64, "violate-packets"},
    violate_bytes{YType::uint64, "violate-bytes"},
    parent_drop_packets{YType::uint64, "parent-drop-packets"},
    parent_drop_bytes{YType::uint64, "parent-drop-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"},
    violate_rate{YType::uint32, "violate-rate"}
    	,
    color_class_stats(std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats>())
{
    color_class_stats->parent = this;

    yang_name = "police-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::~PoliceStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| violate_packets.is_set
	|| violate_bytes.is_set
	|| parent_drop_packets.is_set
	|| parent_drop_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set
	|| violate_rate.is_set
	|| (color_class_stats !=  nullptr && color_class_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(violate_packets.yfilter)
	|| ydk::is_set(violate_bytes.yfilter)
	|| ydk::is_set(parent_drop_packets.yfilter)
	|| ydk::is_set(parent_drop_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter)
	|| ydk::is_set(violate_rate.yfilter)
	|| (color_class_stats !=  nullptr && color_class_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "police-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (violate_packets.is_set || is_set(violate_packets.yfilter)) leaf_name_data.push_back(violate_packets.get_name_leafdata());
    if (violate_bytes.is_set || is_set(violate_bytes.yfilter)) leaf_name_data.push_back(violate_bytes.get_name_leafdata());
    if (parent_drop_packets.is_set || is_set(parent_drop_packets.yfilter)) leaf_name_data.push_back(parent_drop_packets.get_name_leafdata());
    if (parent_drop_bytes.is_set || is_set(parent_drop_bytes.yfilter)) leaf_name_data.push_back(parent_drop_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());
    if (violate_rate.is_set || is_set(violate_rate.yfilter)) leaf_name_data.push_back(violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "color-class-stats")
    {
        if(color_class_stats == nullptr)
        {
            color_class_stats = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats>();
        }
        return color_class_stats;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(color_class_stats != nullptr)
    {
        children["color-class-stats"] = color_class_stats;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-packets")
    {
        violate_packets = value;
        violate_packets.value_namespace = name_space;
        violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes = value;
        violate_bytes.value_namespace = name_space;
        violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets = value;
        parent_drop_packets.value_namespace = name_space;
        parent_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes = value;
        parent_drop_bytes.value_namespace = name_space;
        parent_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-rate")
    {
        violate_rate = value;
        violate_rate.value_namespace = name_space;
        violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-packets")
    {
        violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes.yfilter = yfilter;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets.yfilter = yfilter;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
    if(value_path == "violate-rate")
    {
        violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "color-class-stats" || name == "drop-packets" || name == "drop-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "violate-packets" || name == "violate-bytes" || name == "parent-drop-packets" || name == "parent-drop-bytes" || name == "conform-rate" || name == "exceed-rate" || name == "violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::ColorClassStats()
    :
    conform_class_conform_packets{YType::uint64, "conform-class-conform-packets"},
    conform_class_conform_bytes{YType::uint64, "conform-class-conform-bytes"},
    conform_class_conform_rate{YType::uint32, "conform-class-conform-rate"},
    conform_class_exceed_packets{YType::uint64, "conform-class-exceed-packets"},
    conform_class_exceed_bytes{YType::uint64, "conform-class-exceed-bytes"},
    conform_class_exceed_rate{YType::uint32, "conform-class-exceed-rate"},
    conform_class_violate_packets{YType::uint64, "conform-class-violate-packets"},
    conform_class_violate_bytes{YType::uint64, "conform-class-violate-bytes"},
    conform_class_violate_rate{YType::uint32, "conform-class-violate-rate"},
    exceed_class_exceed_packets{YType::uint64, "exceed-class-exceed-packets"},
    exceed_class_exceed_bytes{YType::uint64, "exceed-class-exceed-bytes"},
    exceed_class_exceed_rate{YType::uint32, "exceed-class-exceed-rate"},
    exceed_class_violate_packets{YType::uint64, "exceed-class-violate-packets"},
    exceed_class_violate_bytes{YType::uint64, "exceed-class-violate-bytes"},
    exceed_class_violate_rate{YType::uint32, "exceed-class-violate-rate"},
    violate_class_violate_packets{YType::uint64, "violate-class-violate-packets"},
    violate_class_violate_bytes{YType::uint64, "violate-class-violate-bytes"},
    violate_class_violate_rate{YType::uint32, "violate-class-violate-rate"}
{

    yang_name = "color-class-stats"; yang_parent_name = "police-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::~ColorClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_data() const
{
    return conform_class_conform_packets.is_set
	|| conform_class_conform_bytes.is_set
	|| conform_class_conform_rate.is_set
	|| conform_class_exceed_packets.is_set
	|| conform_class_exceed_bytes.is_set
	|| conform_class_exceed_rate.is_set
	|| conform_class_violate_packets.is_set
	|| conform_class_violate_bytes.is_set
	|| conform_class_violate_rate.is_set
	|| exceed_class_exceed_packets.is_set
	|| exceed_class_exceed_bytes.is_set
	|| exceed_class_exceed_rate.is_set
	|| exceed_class_violate_packets.is_set
	|| exceed_class_violate_bytes.is_set
	|| exceed_class_violate_rate.is_set
	|| violate_class_violate_packets.is_set
	|| violate_class_violate_bytes.is_set
	|| violate_class_violate_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(conform_class_conform_packets.yfilter)
	|| ydk::is_set(conform_class_conform_bytes.yfilter)
	|| ydk::is_set(conform_class_conform_rate.yfilter)
	|| ydk::is_set(conform_class_exceed_packets.yfilter)
	|| ydk::is_set(conform_class_exceed_bytes.yfilter)
	|| ydk::is_set(conform_class_exceed_rate.yfilter)
	|| ydk::is_set(conform_class_violate_packets.yfilter)
	|| ydk::is_set(conform_class_violate_bytes.yfilter)
	|| ydk::is_set(conform_class_violate_rate.yfilter)
	|| ydk::is_set(exceed_class_exceed_packets.yfilter)
	|| ydk::is_set(exceed_class_exceed_bytes.yfilter)
	|| ydk::is_set(exceed_class_exceed_rate.yfilter)
	|| ydk::is_set(exceed_class_violate_packets.yfilter)
	|| ydk::is_set(exceed_class_violate_bytes.yfilter)
	|| ydk::is_set(exceed_class_violate_rate.yfilter)
	|| ydk::is_set(violate_class_violate_packets.yfilter)
	|| ydk::is_set(violate_class_violate_bytes.yfilter)
	|| ydk::is_set(violate_class_violate_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "color-class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (conform_class_conform_packets.is_set || is_set(conform_class_conform_packets.yfilter)) leaf_name_data.push_back(conform_class_conform_packets.get_name_leafdata());
    if (conform_class_conform_bytes.is_set || is_set(conform_class_conform_bytes.yfilter)) leaf_name_data.push_back(conform_class_conform_bytes.get_name_leafdata());
    if (conform_class_conform_rate.is_set || is_set(conform_class_conform_rate.yfilter)) leaf_name_data.push_back(conform_class_conform_rate.get_name_leafdata());
    if (conform_class_exceed_packets.is_set || is_set(conform_class_exceed_packets.yfilter)) leaf_name_data.push_back(conform_class_exceed_packets.get_name_leafdata());
    if (conform_class_exceed_bytes.is_set || is_set(conform_class_exceed_bytes.yfilter)) leaf_name_data.push_back(conform_class_exceed_bytes.get_name_leafdata());
    if (conform_class_exceed_rate.is_set || is_set(conform_class_exceed_rate.yfilter)) leaf_name_data.push_back(conform_class_exceed_rate.get_name_leafdata());
    if (conform_class_violate_packets.is_set || is_set(conform_class_violate_packets.yfilter)) leaf_name_data.push_back(conform_class_violate_packets.get_name_leafdata());
    if (conform_class_violate_bytes.is_set || is_set(conform_class_violate_bytes.yfilter)) leaf_name_data.push_back(conform_class_violate_bytes.get_name_leafdata());
    if (conform_class_violate_rate.is_set || is_set(conform_class_violate_rate.yfilter)) leaf_name_data.push_back(conform_class_violate_rate.get_name_leafdata());
    if (exceed_class_exceed_packets.is_set || is_set(exceed_class_exceed_packets.yfilter)) leaf_name_data.push_back(exceed_class_exceed_packets.get_name_leafdata());
    if (exceed_class_exceed_bytes.is_set || is_set(exceed_class_exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_class_exceed_bytes.get_name_leafdata());
    if (exceed_class_exceed_rate.is_set || is_set(exceed_class_exceed_rate.yfilter)) leaf_name_data.push_back(exceed_class_exceed_rate.get_name_leafdata());
    if (exceed_class_violate_packets.is_set || is_set(exceed_class_violate_packets.yfilter)) leaf_name_data.push_back(exceed_class_violate_packets.get_name_leafdata());
    if (exceed_class_violate_bytes.is_set || is_set(exceed_class_violate_bytes.yfilter)) leaf_name_data.push_back(exceed_class_violate_bytes.get_name_leafdata());
    if (exceed_class_violate_rate.is_set || is_set(exceed_class_violate_rate.yfilter)) leaf_name_data.push_back(exceed_class_violate_rate.get_name_leafdata());
    if (violate_class_violate_packets.is_set || is_set(violate_class_violate_packets.yfilter)) leaf_name_data.push_back(violate_class_violate_packets.get_name_leafdata());
    if (violate_class_violate_bytes.is_set || is_set(violate_class_violate_bytes.yfilter)) leaf_name_data.push_back(violate_class_violate_bytes.get_name_leafdata());
    if (violate_class_violate_rate.is_set || is_set(violate_class_violate_rate.yfilter)) leaf_name_data.push_back(violate_class_violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets = value;
        conform_class_conform_packets.value_namespace = name_space;
        conform_class_conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes = value;
        conform_class_conform_bytes.value_namespace = name_space;
        conform_class_conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate = value;
        conform_class_conform_rate.value_namespace = name_space;
        conform_class_conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets = value;
        conform_class_exceed_packets.value_namespace = name_space;
        conform_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes = value;
        conform_class_exceed_bytes.value_namespace = name_space;
        conform_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate = value;
        conform_class_exceed_rate.value_namespace = name_space;
        conform_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets = value;
        conform_class_violate_packets.value_namespace = name_space;
        conform_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes = value;
        conform_class_violate_bytes.value_namespace = name_space;
        conform_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate = value;
        conform_class_violate_rate.value_namespace = name_space;
        conform_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets = value;
        exceed_class_exceed_packets.value_namespace = name_space;
        exceed_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes = value;
        exceed_class_exceed_bytes.value_namespace = name_space;
        exceed_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate = value;
        exceed_class_exceed_rate.value_namespace = name_space;
        exceed_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets = value;
        exceed_class_violate_packets.value_namespace = name_space;
        exceed_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes = value;
        exceed_class_violate_bytes.value_namespace = name_space;
        exceed_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate = value;
        exceed_class_violate_rate.value_namespace = name_space;
        exceed_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets = value;
        violate_class_violate_packets.value_namespace = name_space;
        violate_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes = value;
        violate_class_violate_bytes.value_namespace = name_space;
        violate_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate = value;
        violate_class_violate_rate.value_namespace = name_space;
        violate_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "conform-class-conform-packets" || name == "conform-class-conform-bytes" || name == "conform-class-conform-rate" || name == "conform-class-exceed-packets" || name == "conform-class-exceed-bytes" || name == "conform-class-exceed-rate" || name == "conform-class-violate-packets" || name == "conform-class-violate-bytes" || name == "conform-class-violate-rate" || name == "exceed-class-exceed-packets" || name == "exceed-class-exceed-bytes" || name == "exceed-class-exceed-rate" || name == "exceed-class-violate-packets" || name == "exceed-class-violate-bytes" || name == "exceed-class-violate-rate" || name == "violate-class-violate-packets" || name == "violate-class-violate-bytes" || name == "violate-class-violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::WredStatsArray()
    :
    profile_title{YType::str, "profile-title"},
    red_transmit_packets{YType::uint64, "red-transmit-packets"},
    red_transmit_bytes{YType::uint64, "red-transmit-bytes"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    red_ecn_marked_packets{YType::uint64, "red-ecn-marked-packets"},
    red_ecn_marked_bytes{YType::uint64, "red-ecn-marked-bytes"}
{

    yang_name = "wred-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::~WredStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_data() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_data())
            return true;
    }
    return profile_title.is_set
	|| red_transmit_packets.is_set
	|| red_transmit_bytes.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| red_ecn_marked_packets.is_set
	|| red_ecn_marked_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_operation() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(profile_title.yfilter)
	|| ydk::is_set(red_transmit_packets.yfilter)
	|| ydk::is_set(red_transmit_bytes.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(red_ecn_marked_packets.yfilter)
	|| ydk::is_set(red_ecn_marked_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "wred-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (profile_title.is_set || is_set(profile_title.yfilter)) leaf_name_data.push_back(profile_title.get_name_leafdata());
    if (red_transmit_packets.is_set || is_set(red_transmit_packets.yfilter)) leaf_name_data.push_back(red_transmit_packets.get_name_leafdata());
    if (red_transmit_bytes.is_set || is_set(red_transmit_bytes.yfilter)) leaf_name_data.push_back(red_transmit_bytes.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (red_ecn_marked_packets.is_set || is_set(red_ecn_marked_packets.yfilter)) leaf_name_data.push_back(red_ecn_marked_packets.get_name_leafdata());
    if (red_ecn_marked_bytes.is_set || is_set(red_ecn_marked_bytes.yfilter)) leaf_name_data.push_back(red_ecn_marked_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "red-label")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel>();
        c->parent = this;
        red_label.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : red_label)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "profile-title")
    {
        profile_title = value;
        profile_title.value_namespace = name_space;
        profile_title.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets = value;
        red_transmit_packets.value_namespace = name_space;
        red_transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes = value;
        red_transmit_bytes.value_namespace = name_space;
        red_transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets = value;
        red_ecn_marked_packets.value_namespace = name_space;
        red_ecn_marked_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes = value;
        red_ecn_marked_bytes.value_namespace = name_space;
        red_ecn_marked_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "profile-title")
    {
        profile_title.yfilter = yfilter;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets.yfilter = yfilter;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "red-label" || name == "profile-title" || name == "red-transmit-packets" || name == "red-transmit-bytes" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "red-ecn-marked-packets" || name == "red-ecn-marked-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::RedLabel()
    :
    wred_type{YType::enumeration, "wred-type"},
    value_{YType::uint8, "value"}
{

    yang_name = "red-label"; yang_parent_name = "wred-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::~RedLabel()
{
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_data() const
{
    return wred_type.is_set
	|| value_.is_set;
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(wred_type.yfilter)
	|| ydk::is_set(value_.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "red-label";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (wred_type.is_set || is_set(wred_type.yfilter)) leaf_name_data.push_back(wred_type.get_name_leafdata());
    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "wred-type")
    {
        wred_type = value;
        wred_type.value_namespace = name_space;
        wred_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "wred-type")
    {
        wred_type.yfilter = yfilter;
    }
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::Nodes::Node::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "wred-type" || name == "value")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterfaces()
{

    yang_name = "member-interfaces"; yang_parent_name = "interface"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::~MemberInterfaces()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::has_data() const
{
    for (std::size_t index=0; index<member_interface.size(); index++)
    {
        if(member_interface[index]->has_data())
            return true;
    }
    return false;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::has_operation() const
{
    for (std::size_t index=0; index<member_interface.size(); index++)
    {
        if(member_interface[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "member-interfaces";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "member-interface")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface>();
        c->parent = this;
        member_interface.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : member_interface)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "member-interface")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::MemberInterface()
    :
    interface_name{YType::str, "interface-name"}
    	,
    satellite_ids(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds>())
	,input(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input>())
	,output(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Output>())
{
    satellite_ids->parent = this;
    input->parent = this;
    output->parent = this;

    yang_name = "member-interface"; yang_parent_name = "member-interfaces"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::~MemberInterface()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::has_data() const
{
    return interface_name.is_set
	|| (satellite_ids !=  nullptr && satellite_ids->has_data())
	|| (input !=  nullptr && input->has_data())
	|| (output !=  nullptr && output->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(interface_name.yfilter)
	|| (satellite_ids !=  nullptr && satellite_ids->has_operation())
	|| (input !=  nullptr && input->has_operation())
	|| (output !=  nullptr && output->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "member-interface" <<"[interface-name='" <<interface_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.yfilter)) leaf_name_data.push_back(interface_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "satellite-ids")
    {
        if(satellite_ids == nullptr)
        {
            satellite_ids = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds>();
        }
        return satellite_ids;
    }

    if(child_yang_name == "input")
    {
        if(input == nullptr)
        {
            input = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input>();
        }
        return input;
    }

    if(child_yang_name == "output")
    {
        if(output == nullptr)
        {
            output = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Output>();
        }
        return output;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(satellite_ids != nullptr)
    {
        children["satellite-ids"] = satellite_ids;
    }

    if(input != nullptr)
    {
        children["input"] = input;
    }

    if(output != nullptr)
    {
        children["output"] = output;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
        interface_name.value_namespace = name_space;
        interface_name.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "interface-name")
    {
        interface_name.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "satellite-ids" || name == "input" || name == "output" || name == "interface-name")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteIds()
{

    yang_name = "satellite-ids"; yang_parent_name = "member-interface"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::~SatelliteIds()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::has_data() const
{
    for (std::size_t index=0; index<satellite_id.size(); index++)
    {
        if(satellite_id[index]->has_data())
            return true;
    }
    return false;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::has_operation() const
{
    for (std::size_t index=0; index<satellite_id.size(); index++)
    {
        if(satellite_id[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "satellite-ids";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "satellite-id")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId>();
        c->parent = this;
        satellite_id.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : satellite_id)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "satellite-id")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::SatelliteId()
    :
    nv_satellite_id{YType::int32, "nv-satellite-id"}
    	,
    input(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input>())
	,output(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output>())
{
    input->parent = this;
    output->parent = this;

    yang_name = "satellite-id"; yang_parent_name = "satellite-ids"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::~SatelliteId()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::has_data() const
{
    return nv_satellite_id.is_set
	|| (input !=  nullptr && input->has_data())
	|| (output !=  nullptr && output->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nv_satellite_id.yfilter)
	|| (input !=  nullptr && input->has_operation())
	|| (output !=  nullptr && output->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "satellite-id" <<"[nv-satellite-id='" <<nv_satellite_id <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nv_satellite_id.is_set || is_set(nv_satellite_id.yfilter)) leaf_name_data.push_back(nv_satellite_id.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "input")
    {
        if(input == nullptr)
        {
            input = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input>();
        }
        return input;
    }

    if(child_yang_name == "output")
    {
        if(output == nullptr)
        {
            output = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output>();
        }
        return output;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(input != nullptr)
    {
        children["input"] = input;
    }

    if(output != nullptr)
    {
        children["output"] = output;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nv-satellite-id")
    {
        nv_satellite_id = value;
        nv_satellite_id.value_namespace = name_space;
        nv_satellite_id.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nv-satellite-id")
    {
        nv_satellite_id.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "input" || name == "output" || name == "nv-satellite-id")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::Input()
    :
    service_policy_names(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames>())
{
    service_policy_names->parent = this;

    yang_name = "input"; yang_parent_name = "satellite-id"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::~Input()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::has_data() const
{
    return (service_policy_names !=  nullptr && service_policy_names->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::has_operation() const
{
    return is_set(yfilter)
	|| (service_policy_names !=  nullptr && service_policy_names->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "service-policy-names")
    {
        if(service_policy_names == nullptr)
        {
            service_policy_names = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames>();
        }
        return service_policy_names;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(service_policy_names != nullptr)
    {
        children["service-policy-names"] = service_policy_names;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "service-policy-names")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyNames()
{

    yang_name = "service-policy-names"; yang_parent_name = "input"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::~ServicePolicyNames()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::has_data() const
{
    for (std::size_t index=0; index<service_policy_instance.size(); index++)
    {
        if(service_policy_instance[index]->has_data())
            return true;
    }
    return false;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::has_operation() const
{
    for (std::size_t index=0; index<service_policy_instance.size(); index++)
    {
        if(service_policy_instance[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "service-policy-names";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "service-policy-instance")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance>();
        c->parent = this;
        service_policy_instance.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : service_policy_instance)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "service-policy-instance")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::ServicePolicyInstance()
    :
    service_policy_name{YType::str, "service-policy-name"}
    	,
    statistics(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics>())
{
    statistics->parent = this;

    yang_name = "service-policy-instance"; yang_parent_name = "service-policy-names"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::~ServicePolicyInstance()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::has_data() const
{
    return service_policy_name.is_set
	|| (statistics !=  nullptr && statistics->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(service_policy_name.yfilter)
	|| (statistics !=  nullptr && statistics->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "service-policy-instance" <<"[service-policy-name='" <<service_policy_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (service_policy_name.is_set || is_set(service_policy_name.yfilter)) leaf_name_data.push_back(service_policy_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "statistics")
    {
        if(statistics == nullptr)
        {
            statistics = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics>();
        }
        return statistics;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(statistics != nullptr)
    {
        children["statistics"] = statistics;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "service-policy-name")
    {
        service_policy_name = value;
        service_policy_name.value_namespace = name_space;
        service_policy_name.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "service-policy-name")
    {
        service_policy_name.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "statistics" || name == "service-policy-name")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::Statistics()
    :
    policy_name{YType::str, "policy-name"},
    state{YType::enumeration, "state"},
    state_description{YType::str, "state-description"},
    satid{YType::uint32, "satid"}
{

    yang_name = "statistics"; yang_parent_name = "service-policy-instance"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::~Statistics()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::has_data() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_data())
            return true;
    }
    return policy_name.is_set
	|| state.is_set
	|| state_description.is_set
	|| satid.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::has_operation() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(policy_name.yfilter)
	|| ydk::is_set(state.yfilter)
	|| ydk::is_set(state_description.yfilter)
	|| ydk::is_set(satid.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "statistics";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (policy_name.is_set || is_set(policy_name.yfilter)) leaf_name_data.push_back(policy_name.get_name_leafdata());
    if (state.is_set || is_set(state.yfilter)) leaf_name_data.push_back(state.get_name_leafdata());
    if (state_description.is_set || is_set(state_description.yfilter)) leaf_name_data.push_back(state_description.get_name_leafdata());
    if (satid.is_set || is_set(satid.yfilter)) leaf_name_data.push_back(satid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "class-stats")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats>();
        c->parent = this;
        class_stats.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : class_stats)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "policy-name")
    {
        policy_name = value;
        policy_name.value_namespace = name_space;
        policy_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state")
    {
        state = value;
        state.value_namespace = name_space;
        state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state-description")
    {
        state_description = value;
        state_description.value_namespace = name_space;
        state_description.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "satid")
    {
        satid = value;
        satid.value_namespace = name_space;
        satid.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "policy-name")
    {
        policy_name.yfilter = yfilter;
    }
    if(value_path == "state")
    {
        state.yfilter = yfilter;
    }
    if(value_path == "state-description")
    {
        state_description.yfilter = yfilter;
    }
    if(value_path == "satid")
    {
        satid.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "class-stats" || name == "policy-name" || name == "state" || name == "state-description" || name == "satid")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ClassStats()
    :
    counter_validity_bitmask{YType::uint64, "counter-validity-bitmask"},
    class_name{YType::str, "class-name"},
    shared_queue_id{YType::uint32, "shared-queue-id"},
    queue_descr{YType::str, "queue-descr"},
    cac_state{YType::enumeration, "cac-state"}
    	,
    general_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats>())
	,iphc_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats>())
	,child_policy(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy>())
	,cac_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats>())
{
    general_stats->parent = this;
    iphc_stats->parent = this;
    child_policy->parent = this;
    cac_stats->parent = this;

    yang_name = "class-stats"; yang_parent_name = "statistics"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::~ClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_data() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_data())
            return true;
    }
    return counter_validity_bitmask.is_set
	|| class_name.is_set
	|| shared_queue_id.is_set
	|| queue_descr.is_set
	|| cac_state.is_set
	|| (general_stats !=  nullptr && general_stats->has_data())
	|| (iphc_stats !=  nullptr && iphc_stats->has_data())
	|| (child_policy !=  nullptr && child_policy->has_data())
	|| (cac_stats !=  nullptr && cac_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_operation() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(counter_validity_bitmask.yfilter)
	|| ydk::is_set(class_name.yfilter)
	|| ydk::is_set(shared_queue_id.yfilter)
	|| ydk::is_set(queue_descr.yfilter)
	|| ydk::is_set(cac_state.yfilter)
	|| (general_stats !=  nullptr && general_stats->has_operation())
	|| (iphc_stats !=  nullptr && iphc_stats->has_operation())
	|| (child_policy !=  nullptr && child_policy->has_operation())
	|| (cac_stats !=  nullptr && cac_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (counter_validity_bitmask.is_set || is_set(counter_validity_bitmask.yfilter)) leaf_name_data.push_back(counter_validity_bitmask.get_name_leafdata());
    if (class_name.is_set || is_set(class_name.yfilter)) leaf_name_data.push_back(class_name.get_name_leafdata());
    if (shared_queue_id.is_set || is_set(shared_queue_id.yfilter)) leaf_name_data.push_back(shared_queue_id.get_name_leafdata());
    if (queue_descr.is_set || is_set(queue_descr.yfilter)) leaf_name_data.push_back(queue_descr.get_name_leafdata());
    if (cac_state.is_set || is_set(cac_state.yfilter)) leaf_name_data.push_back(cac_state.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "general-stats")
    {
        if(general_stats == nullptr)
        {
            general_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats>();
        }
        return general_stats;
    }

    if(child_yang_name == "iphc-stats")
    {
        if(iphc_stats == nullptr)
        {
            iphc_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats>();
        }
        return iphc_stats;
    }

    if(child_yang_name == "child-policy")
    {
        if(child_policy == nullptr)
        {
            child_policy = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy>();
        }
        return child_policy;
    }

    if(child_yang_name == "cac-stats")
    {
        if(cac_stats == nullptr)
        {
            cac_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats>();
        }
        return cac_stats;
    }

    if(child_yang_name == "queue-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray>();
        c->parent = this;
        queue_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "police-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray>();
        c->parent = this;
        police_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "wred-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray>();
        c->parent = this;
        wred_stats_array.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(general_stats != nullptr)
    {
        children["general-stats"] = general_stats;
    }

    if(iphc_stats != nullptr)
    {
        children["iphc-stats"] = iphc_stats;
    }

    if(child_policy != nullptr)
    {
        children["child-policy"] = child_policy;
    }

    if(cac_stats != nullptr)
    {
        children["cac-stats"] = cac_stats;
    }

    count = 0;
    for (auto const & c : queue_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : police_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : wred_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask = value;
        counter_validity_bitmask.value_namespace = name_space;
        counter_validity_bitmask.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "class-name")
    {
        class_name = value;
        class_name.value_namespace = name_space;
        class_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id = value;
        shared_queue_id.value_namespace = name_space;
        shared_queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-descr")
    {
        queue_descr = value;
        queue_descr.value_namespace = name_space;
        queue_descr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cac-state")
    {
        cac_state = value;
        cac_state.value_namespace = name_space;
        cac_state.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask.yfilter = yfilter;
    }
    if(value_path == "class-name")
    {
        class_name.yfilter = yfilter;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id.yfilter = yfilter;
    }
    if(value_path == "queue-descr")
    {
        queue_descr.yfilter = yfilter;
    }
    if(value_path == "cac-state")
    {
        cac_state.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "general-stats" || name == "iphc-stats" || name == "child-policy" || name == "cac-stats" || name == "queue-stats-array" || name == "police-stats-array" || name == "wred-stats-array" || name == "counter-validity-bitmask" || name == "class-name" || name == "shared-queue-id" || name == "queue-descr" || name == "cac-state")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::GeneralStats()
    :
    transmit_packets{YType::uint64, "transmit-packets"},
    transmit_bytes{YType::uint64, "transmit-bytes"},
    total_drop_packets{YType::uint64, "total-drop-packets"},
    total_drop_bytes{YType::uint64, "total-drop-bytes"},
    total_drop_rate{YType::uint32, "total-drop-rate"},
    match_data_rate{YType::uint32, "match-data-rate"},
    total_transmit_rate{YType::uint32, "total-transmit-rate"},
    pre_policy_matched_packets{YType::uint64, "pre-policy-matched-packets"},
    pre_policy_matched_bytes{YType::uint64, "pre-policy-matched-bytes"}
{

    yang_name = "general-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::~GeneralStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_data() const
{
    return transmit_packets.is_set
	|| transmit_bytes.is_set
	|| total_drop_packets.is_set
	|| total_drop_bytes.is_set
	|| total_drop_rate.is_set
	|| match_data_rate.is_set
	|| total_transmit_rate.is_set
	|| pre_policy_matched_packets.is_set
	|| pre_policy_matched_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(transmit_packets.yfilter)
	|| ydk::is_set(transmit_bytes.yfilter)
	|| ydk::is_set(total_drop_packets.yfilter)
	|| ydk::is_set(total_drop_bytes.yfilter)
	|| ydk::is_set(total_drop_rate.yfilter)
	|| ydk::is_set(match_data_rate.yfilter)
	|| ydk::is_set(total_transmit_rate.yfilter)
	|| ydk::is_set(pre_policy_matched_packets.yfilter)
	|| ydk::is_set(pre_policy_matched_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "general-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (transmit_packets.is_set || is_set(transmit_packets.yfilter)) leaf_name_data.push_back(transmit_packets.get_name_leafdata());
    if (transmit_bytes.is_set || is_set(transmit_bytes.yfilter)) leaf_name_data.push_back(transmit_bytes.get_name_leafdata());
    if (total_drop_packets.is_set || is_set(total_drop_packets.yfilter)) leaf_name_data.push_back(total_drop_packets.get_name_leafdata());
    if (total_drop_bytes.is_set || is_set(total_drop_bytes.yfilter)) leaf_name_data.push_back(total_drop_bytes.get_name_leafdata());
    if (total_drop_rate.is_set || is_set(total_drop_rate.yfilter)) leaf_name_data.push_back(total_drop_rate.get_name_leafdata());
    if (match_data_rate.is_set || is_set(match_data_rate.yfilter)) leaf_name_data.push_back(match_data_rate.get_name_leafdata());
    if (total_transmit_rate.is_set || is_set(total_transmit_rate.yfilter)) leaf_name_data.push_back(total_transmit_rate.get_name_leafdata());
    if (pre_policy_matched_packets.is_set || is_set(pre_policy_matched_packets.yfilter)) leaf_name_data.push_back(pre_policy_matched_packets.get_name_leafdata());
    if (pre_policy_matched_bytes.is_set || is_set(pre_policy_matched_bytes.yfilter)) leaf_name_data.push_back(pre_policy_matched_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets = value;
        transmit_packets.value_namespace = name_space;
        transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes = value;
        transmit_bytes.value_namespace = name_space;
        transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets = value;
        total_drop_packets.value_namespace = name_space;
        total_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes = value;
        total_drop_bytes.value_namespace = name_space;
        total_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate = value;
        total_drop_rate.value_namespace = name_space;
        total_drop_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate = value;
        match_data_rate.value_namespace = name_space;
        match_data_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate = value;
        total_transmit_rate.value_namespace = name_space;
        total_transmit_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets = value;
        pre_policy_matched_packets.value_namespace = name_space;
        pre_policy_matched_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes = value;
        pre_policy_matched_bytes.value_namespace = name_space;
        pre_policy_matched_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets.yfilter = yfilter;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets.yfilter = yfilter;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate.yfilter = yfilter;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate.yfilter = yfilter;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "transmit-packets" || name == "transmit-bytes" || name == "total-drop-packets" || name == "total-drop-bytes" || name == "total-drop-rate" || name == "match-data-rate" || name == "total-transmit-rate" || name == "pre-policy-matched-packets" || name == "pre-policy-matched-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::IphcStats()
    :
    non_tcp_total_out_packets{YType::uint64, "non-tcp-total-out-packets"},
    non_tcp_total_out_bytes{YType::uint64, "non-tcp-total-out-bytes"},
    non_tcp_bytes_saved{YType::uint64, "non-tcp-bytes-saved"},
    non_tcp_compressed_packets_out{YType::uint64, "non-tcp-compressed-packets-out"},
    non_tcp_bytes_sent_rate{YType::uint32, "non-tcp-bytes-sent-rate"},
    non_tcp_full_header_packets_out{YType::uint64, "non-tcp-full-header-packets-out"},
    tcp_total_out_packets{YType::uint64, "tcp-total-out-packets"},
    tcp_total_out_bytes{YType::uint64, "tcp-total-out-bytes"},
    tcp_bytes_saved{YType::uint64, "tcp-bytes-saved"},
    tcp_compressed_packets_out{YType::uint64, "tcp-compressed-packets-out"},
    tcp_bytes_sent_rate{YType::uint32, "tcp-bytes-sent-rate"},
    tcp_full_header_packets_out{YType::uint64, "tcp-full-header-packets-out"}
{

    yang_name = "iphc-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::~IphcStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_data() const
{
    return non_tcp_total_out_packets.is_set
	|| non_tcp_total_out_bytes.is_set
	|| non_tcp_bytes_saved.is_set
	|| non_tcp_compressed_packets_out.is_set
	|| non_tcp_bytes_sent_rate.is_set
	|| non_tcp_full_header_packets_out.is_set
	|| tcp_total_out_packets.is_set
	|| tcp_total_out_bytes.is_set
	|| tcp_bytes_saved.is_set
	|| tcp_compressed_packets_out.is_set
	|| tcp_bytes_sent_rate.is_set
	|| tcp_full_header_packets_out.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(non_tcp_total_out_packets.yfilter)
	|| ydk::is_set(non_tcp_total_out_bytes.yfilter)
	|| ydk::is_set(non_tcp_bytes_saved.yfilter)
	|| ydk::is_set(non_tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(non_tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(non_tcp_full_header_packets_out.yfilter)
	|| ydk::is_set(tcp_total_out_packets.yfilter)
	|| ydk::is_set(tcp_total_out_bytes.yfilter)
	|| ydk::is_set(tcp_bytes_saved.yfilter)
	|| ydk::is_set(tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(tcp_full_header_packets_out.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "iphc-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (non_tcp_total_out_packets.is_set || is_set(non_tcp_total_out_packets.yfilter)) leaf_name_data.push_back(non_tcp_total_out_packets.get_name_leafdata());
    if (non_tcp_total_out_bytes.is_set || is_set(non_tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(non_tcp_total_out_bytes.get_name_leafdata());
    if (non_tcp_bytes_saved.is_set || is_set(non_tcp_bytes_saved.yfilter)) leaf_name_data.push_back(non_tcp_bytes_saved.get_name_leafdata());
    if (non_tcp_compressed_packets_out.is_set || is_set(non_tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_compressed_packets_out.get_name_leafdata());
    if (non_tcp_bytes_sent_rate.is_set || is_set(non_tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(non_tcp_bytes_sent_rate.get_name_leafdata());
    if (non_tcp_full_header_packets_out.is_set || is_set(non_tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_full_header_packets_out.get_name_leafdata());
    if (tcp_total_out_packets.is_set || is_set(tcp_total_out_packets.yfilter)) leaf_name_data.push_back(tcp_total_out_packets.get_name_leafdata());
    if (tcp_total_out_bytes.is_set || is_set(tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(tcp_total_out_bytes.get_name_leafdata());
    if (tcp_bytes_saved.is_set || is_set(tcp_bytes_saved.yfilter)) leaf_name_data.push_back(tcp_bytes_saved.get_name_leafdata());
    if (tcp_compressed_packets_out.is_set || is_set(tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(tcp_compressed_packets_out.get_name_leafdata());
    if (tcp_bytes_sent_rate.is_set || is_set(tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(tcp_bytes_sent_rate.get_name_leafdata());
    if (tcp_full_header_packets_out.is_set || is_set(tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(tcp_full_header_packets_out.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets = value;
        non_tcp_total_out_packets.value_namespace = name_space;
        non_tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes = value;
        non_tcp_total_out_bytes.value_namespace = name_space;
        non_tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved = value;
        non_tcp_bytes_saved.value_namespace = name_space;
        non_tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out = value;
        non_tcp_compressed_packets_out.value_namespace = name_space;
        non_tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate = value;
        non_tcp_bytes_sent_rate.value_namespace = name_space;
        non_tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out = value;
        non_tcp_full_header_packets_out.value_namespace = name_space;
        non_tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets = value;
        tcp_total_out_packets.value_namespace = name_space;
        tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes = value;
        tcp_total_out_bytes.value_namespace = name_space;
        tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved = value;
        tcp_bytes_saved.value_namespace = name_space;
        tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out = value;
        tcp_compressed_packets_out.value_namespace = name_space;
        tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate = value;
        tcp_bytes_sent_rate.value_namespace = name_space;
        tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out = value;
        tcp_full_header_packets_out.value_namespace = name_space;
        tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "non-tcp-total-out-packets" || name == "non-tcp-total-out-bytes" || name == "non-tcp-bytes-saved" || name == "non-tcp-compressed-packets-out" || name == "non-tcp-bytes-sent-rate" || name == "non-tcp-full-header-packets-out" || name == "tcp-total-out-packets" || name == "tcp-total-out-bytes" || name == "tcp-bytes-saved" || name == "tcp-compressed-packets-out" || name == "tcp-bytes-sent-rate" || name == "tcp-full-header-packets-out")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ChildPolicy()
    :
    policy_name{YType::str, "policy-name"},
    state{YType::enumeration, "state"},
    state_description{YType::str, "state-description"},
    satid{YType::uint32, "satid"}
{

    yang_name = "child-policy"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::~ChildPolicy()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_data() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_data())
            return true;
    }
    return policy_name.is_set
	|| state.is_set
	|| state_description.is_set
	|| satid.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_operation() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(policy_name.yfilter)
	|| ydk::is_set(state.yfilter)
	|| ydk::is_set(state_description.yfilter)
	|| ydk::is_set(satid.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "child-policy";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (policy_name.is_set || is_set(policy_name.yfilter)) leaf_name_data.push_back(policy_name.get_name_leafdata());
    if (state.is_set || is_set(state.yfilter)) leaf_name_data.push_back(state.get_name_leafdata());
    if (state_description.is_set || is_set(state_description.yfilter)) leaf_name_data.push_back(state_description.get_name_leafdata());
    if (satid.is_set || is_set(satid.yfilter)) leaf_name_data.push_back(satid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "class-stats")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_>();
        c->parent = this;
        class_stats.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : class_stats)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "policy-name")
    {
        policy_name = value;
        policy_name.value_namespace = name_space;
        policy_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state")
    {
        state = value;
        state.value_namespace = name_space;
        state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state-description")
    {
        state_description = value;
        state_description.value_namespace = name_space;
        state_description.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "satid")
    {
        satid = value;
        satid.value_namespace = name_space;
        satid.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "policy-name")
    {
        policy_name.yfilter = yfilter;
    }
    if(value_path == "state")
    {
        state.yfilter = yfilter;
    }
    if(value_path == "state-description")
    {
        state_description.yfilter = yfilter;
    }
    if(value_path == "satid")
    {
        satid.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "class-stats" || name == "policy-name" || name == "state" || name == "state-description" || name == "satid")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::ClassStats_()
    :
    counter_validity_bitmask{YType::uint64, "counter-validity-bitmask"},
    class_name{YType::str, "class-name"},
    shared_queue_id{YType::uint32, "shared-queue-id"},
    queue_descr{YType::str, "queue-descr"},
    cac_state{YType::enumeration, "cac-state"}
    	,
    general_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats>())
	,iphc_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats>())
	,cac_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats>())
{
    general_stats->parent = this;
    iphc_stats->parent = this;
    cac_stats->parent = this;

    yang_name = "class-stats"; yang_parent_name = "child-policy"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::~ClassStats_()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_data() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_data())
            return true;
    }
    return counter_validity_bitmask.is_set
	|| class_name.is_set
	|| shared_queue_id.is_set
	|| queue_descr.is_set
	|| cac_state.is_set
	|| (general_stats !=  nullptr && general_stats->has_data())
	|| (iphc_stats !=  nullptr && iphc_stats->has_data())
	|| (cac_stats !=  nullptr && cac_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_operation() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(counter_validity_bitmask.yfilter)
	|| ydk::is_set(class_name.yfilter)
	|| ydk::is_set(shared_queue_id.yfilter)
	|| ydk::is_set(queue_descr.yfilter)
	|| ydk::is_set(cac_state.yfilter)
	|| (general_stats !=  nullptr && general_stats->has_operation())
	|| (iphc_stats !=  nullptr && iphc_stats->has_operation())
	|| (cac_stats !=  nullptr && cac_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (counter_validity_bitmask.is_set || is_set(counter_validity_bitmask.yfilter)) leaf_name_data.push_back(counter_validity_bitmask.get_name_leafdata());
    if (class_name.is_set || is_set(class_name.yfilter)) leaf_name_data.push_back(class_name.get_name_leafdata());
    if (shared_queue_id.is_set || is_set(shared_queue_id.yfilter)) leaf_name_data.push_back(shared_queue_id.get_name_leafdata());
    if (queue_descr.is_set || is_set(queue_descr.yfilter)) leaf_name_data.push_back(queue_descr.get_name_leafdata());
    if (cac_state.is_set || is_set(cac_state.yfilter)) leaf_name_data.push_back(cac_state.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "general-stats")
    {
        if(general_stats == nullptr)
        {
            general_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats>();
        }
        return general_stats;
    }

    if(child_yang_name == "iphc-stats")
    {
        if(iphc_stats == nullptr)
        {
            iphc_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats>();
        }
        return iphc_stats;
    }

    if(child_yang_name == "cac-stats")
    {
        if(cac_stats == nullptr)
        {
            cac_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats>();
        }
        return cac_stats;
    }

    if(child_yang_name == "queue-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray>();
        c->parent = this;
        queue_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "police-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray>();
        c->parent = this;
        police_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "wred-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray>();
        c->parent = this;
        wred_stats_array.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(general_stats != nullptr)
    {
        children["general-stats"] = general_stats;
    }

    if(iphc_stats != nullptr)
    {
        children["iphc-stats"] = iphc_stats;
    }

    if(cac_stats != nullptr)
    {
        children["cac-stats"] = cac_stats;
    }

    count = 0;
    for (auto const & c : queue_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : police_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : wred_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask = value;
        counter_validity_bitmask.value_namespace = name_space;
        counter_validity_bitmask.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "class-name")
    {
        class_name = value;
        class_name.value_namespace = name_space;
        class_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id = value;
        shared_queue_id.value_namespace = name_space;
        shared_queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-descr")
    {
        queue_descr = value;
        queue_descr.value_namespace = name_space;
        queue_descr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cac-state")
    {
        cac_state = value;
        cac_state.value_namespace = name_space;
        cac_state.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask.yfilter = yfilter;
    }
    if(value_path == "class-name")
    {
        class_name.yfilter = yfilter;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id.yfilter = yfilter;
    }
    if(value_path == "queue-descr")
    {
        queue_descr.yfilter = yfilter;
    }
    if(value_path == "cac-state")
    {
        cac_state.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "general-stats" || name == "iphc-stats" || name == "cac-stats" || name == "queue-stats-array" || name == "police-stats-array" || name == "wred-stats-array" || name == "counter-validity-bitmask" || name == "class-name" || name == "shared-queue-id" || name == "queue-descr" || name == "cac-state")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::GeneralStats()
    :
    transmit_packets{YType::uint64, "transmit-packets"},
    transmit_bytes{YType::uint64, "transmit-bytes"},
    total_drop_packets{YType::uint64, "total-drop-packets"},
    total_drop_bytes{YType::uint64, "total-drop-bytes"},
    total_drop_rate{YType::uint32, "total-drop-rate"},
    match_data_rate{YType::uint32, "match-data-rate"},
    total_transmit_rate{YType::uint32, "total-transmit-rate"},
    pre_policy_matched_packets{YType::uint64, "pre-policy-matched-packets"},
    pre_policy_matched_bytes{YType::uint64, "pre-policy-matched-bytes"}
{

    yang_name = "general-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::~GeneralStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_data() const
{
    return transmit_packets.is_set
	|| transmit_bytes.is_set
	|| total_drop_packets.is_set
	|| total_drop_bytes.is_set
	|| total_drop_rate.is_set
	|| match_data_rate.is_set
	|| total_transmit_rate.is_set
	|| pre_policy_matched_packets.is_set
	|| pre_policy_matched_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(transmit_packets.yfilter)
	|| ydk::is_set(transmit_bytes.yfilter)
	|| ydk::is_set(total_drop_packets.yfilter)
	|| ydk::is_set(total_drop_bytes.yfilter)
	|| ydk::is_set(total_drop_rate.yfilter)
	|| ydk::is_set(match_data_rate.yfilter)
	|| ydk::is_set(total_transmit_rate.yfilter)
	|| ydk::is_set(pre_policy_matched_packets.yfilter)
	|| ydk::is_set(pre_policy_matched_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "general-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (transmit_packets.is_set || is_set(transmit_packets.yfilter)) leaf_name_data.push_back(transmit_packets.get_name_leafdata());
    if (transmit_bytes.is_set || is_set(transmit_bytes.yfilter)) leaf_name_data.push_back(transmit_bytes.get_name_leafdata());
    if (total_drop_packets.is_set || is_set(total_drop_packets.yfilter)) leaf_name_data.push_back(total_drop_packets.get_name_leafdata());
    if (total_drop_bytes.is_set || is_set(total_drop_bytes.yfilter)) leaf_name_data.push_back(total_drop_bytes.get_name_leafdata());
    if (total_drop_rate.is_set || is_set(total_drop_rate.yfilter)) leaf_name_data.push_back(total_drop_rate.get_name_leafdata());
    if (match_data_rate.is_set || is_set(match_data_rate.yfilter)) leaf_name_data.push_back(match_data_rate.get_name_leafdata());
    if (total_transmit_rate.is_set || is_set(total_transmit_rate.yfilter)) leaf_name_data.push_back(total_transmit_rate.get_name_leafdata());
    if (pre_policy_matched_packets.is_set || is_set(pre_policy_matched_packets.yfilter)) leaf_name_data.push_back(pre_policy_matched_packets.get_name_leafdata());
    if (pre_policy_matched_bytes.is_set || is_set(pre_policy_matched_bytes.yfilter)) leaf_name_data.push_back(pre_policy_matched_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets = value;
        transmit_packets.value_namespace = name_space;
        transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes = value;
        transmit_bytes.value_namespace = name_space;
        transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets = value;
        total_drop_packets.value_namespace = name_space;
        total_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes = value;
        total_drop_bytes.value_namespace = name_space;
        total_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate = value;
        total_drop_rate.value_namespace = name_space;
        total_drop_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate = value;
        match_data_rate.value_namespace = name_space;
        match_data_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate = value;
        total_transmit_rate.value_namespace = name_space;
        total_transmit_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets = value;
        pre_policy_matched_packets.value_namespace = name_space;
        pre_policy_matched_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes = value;
        pre_policy_matched_bytes.value_namespace = name_space;
        pre_policy_matched_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets.yfilter = yfilter;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets.yfilter = yfilter;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate.yfilter = yfilter;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate.yfilter = yfilter;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "transmit-packets" || name == "transmit-bytes" || name == "total-drop-packets" || name == "total-drop-bytes" || name == "total-drop-rate" || name == "match-data-rate" || name == "total-transmit-rate" || name == "pre-policy-matched-packets" || name == "pre-policy-matched-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::IphcStats()
    :
    non_tcp_total_out_packets{YType::uint64, "non-tcp-total-out-packets"},
    non_tcp_total_out_bytes{YType::uint64, "non-tcp-total-out-bytes"},
    non_tcp_bytes_saved{YType::uint64, "non-tcp-bytes-saved"},
    non_tcp_compressed_packets_out{YType::uint64, "non-tcp-compressed-packets-out"},
    non_tcp_bytes_sent_rate{YType::uint32, "non-tcp-bytes-sent-rate"},
    non_tcp_full_header_packets_out{YType::uint64, "non-tcp-full-header-packets-out"},
    tcp_total_out_packets{YType::uint64, "tcp-total-out-packets"},
    tcp_total_out_bytes{YType::uint64, "tcp-total-out-bytes"},
    tcp_bytes_saved{YType::uint64, "tcp-bytes-saved"},
    tcp_compressed_packets_out{YType::uint64, "tcp-compressed-packets-out"},
    tcp_bytes_sent_rate{YType::uint32, "tcp-bytes-sent-rate"},
    tcp_full_header_packets_out{YType::uint64, "tcp-full-header-packets-out"}
{

    yang_name = "iphc-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::~IphcStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_data() const
{
    return non_tcp_total_out_packets.is_set
	|| non_tcp_total_out_bytes.is_set
	|| non_tcp_bytes_saved.is_set
	|| non_tcp_compressed_packets_out.is_set
	|| non_tcp_bytes_sent_rate.is_set
	|| non_tcp_full_header_packets_out.is_set
	|| tcp_total_out_packets.is_set
	|| tcp_total_out_bytes.is_set
	|| tcp_bytes_saved.is_set
	|| tcp_compressed_packets_out.is_set
	|| tcp_bytes_sent_rate.is_set
	|| tcp_full_header_packets_out.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(non_tcp_total_out_packets.yfilter)
	|| ydk::is_set(non_tcp_total_out_bytes.yfilter)
	|| ydk::is_set(non_tcp_bytes_saved.yfilter)
	|| ydk::is_set(non_tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(non_tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(non_tcp_full_header_packets_out.yfilter)
	|| ydk::is_set(tcp_total_out_packets.yfilter)
	|| ydk::is_set(tcp_total_out_bytes.yfilter)
	|| ydk::is_set(tcp_bytes_saved.yfilter)
	|| ydk::is_set(tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(tcp_full_header_packets_out.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "iphc-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (non_tcp_total_out_packets.is_set || is_set(non_tcp_total_out_packets.yfilter)) leaf_name_data.push_back(non_tcp_total_out_packets.get_name_leafdata());
    if (non_tcp_total_out_bytes.is_set || is_set(non_tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(non_tcp_total_out_bytes.get_name_leafdata());
    if (non_tcp_bytes_saved.is_set || is_set(non_tcp_bytes_saved.yfilter)) leaf_name_data.push_back(non_tcp_bytes_saved.get_name_leafdata());
    if (non_tcp_compressed_packets_out.is_set || is_set(non_tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_compressed_packets_out.get_name_leafdata());
    if (non_tcp_bytes_sent_rate.is_set || is_set(non_tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(non_tcp_bytes_sent_rate.get_name_leafdata());
    if (non_tcp_full_header_packets_out.is_set || is_set(non_tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_full_header_packets_out.get_name_leafdata());
    if (tcp_total_out_packets.is_set || is_set(tcp_total_out_packets.yfilter)) leaf_name_data.push_back(tcp_total_out_packets.get_name_leafdata());
    if (tcp_total_out_bytes.is_set || is_set(tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(tcp_total_out_bytes.get_name_leafdata());
    if (tcp_bytes_saved.is_set || is_set(tcp_bytes_saved.yfilter)) leaf_name_data.push_back(tcp_bytes_saved.get_name_leafdata());
    if (tcp_compressed_packets_out.is_set || is_set(tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(tcp_compressed_packets_out.get_name_leafdata());
    if (tcp_bytes_sent_rate.is_set || is_set(tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(tcp_bytes_sent_rate.get_name_leafdata());
    if (tcp_full_header_packets_out.is_set || is_set(tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(tcp_full_header_packets_out.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets = value;
        non_tcp_total_out_packets.value_namespace = name_space;
        non_tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes = value;
        non_tcp_total_out_bytes.value_namespace = name_space;
        non_tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved = value;
        non_tcp_bytes_saved.value_namespace = name_space;
        non_tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out = value;
        non_tcp_compressed_packets_out.value_namespace = name_space;
        non_tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate = value;
        non_tcp_bytes_sent_rate.value_namespace = name_space;
        non_tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out = value;
        non_tcp_full_header_packets_out.value_namespace = name_space;
        non_tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets = value;
        tcp_total_out_packets.value_namespace = name_space;
        tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes = value;
        tcp_total_out_bytes.value_namespace = name_space;
        tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved = value;
        tcp_bytes_saved.value_namespace = name_space;
        tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out = value;
        tcp_compressed_packets_out.value_namespace = name_space;
        tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate = value;
        tcp_bytes_sent_rate.value_namespace = name_space;
        tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out = value;
        tcp_full_header_packets_out.value_namespace = name_space;
        tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "non-tcp-total-out-packets" || name == "non-tcp-total-out-bytes" || name == "non-tcp-bytes-saved" || name == "non-tcp-compressed-packets-out" || name == "non-tcp-bytes-sent-rate" || name == "non-tcp-full-header-packets-out" || name == "tcp-total-out-packets" || name == "tcp-total-out-bytes" || name == "tcp-bytes-saved" || name == "tcp-compressed-packets-out" || name == "tcp-bytes-sent-rate" || name == "tcp-full-header-packets-out")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::CacStats()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    drop_rates{YType::uint32, "drop-rates"},
    admitpackets{YType::uint64, "admitpackets"},
    admit_bytes{YType::uint64, "admit-bytes"},
    admit_rates{YType::uint32, "admit-rates"}
{

    yang_name = "cac-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::~CacStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| drop_rates.is_set
	|| admitpackets.is_set
	|| admit_bytes.is_set
	|| admit_rates.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(drop_rates.yfilter)
	|| ydk::is_set(admitpackets.yfilter)
	|| ydk::is_set(admit_bytes.yfilter)
	|| ydk::is_set(admit_rates.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cac-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (drop_rates.is_set || is_set(drop_rates.yfilter)) leaf_name_data.push_back(drop_rates.get_name_leafdata());
    if (admitpackets.is_set || is_set(admitpackets.yfilter)) leaf_name_data.push_back(admitpackets.get_name_leafdata());
    if (admit_bytes.is_set || is_set(admit_bytes.yfilter)) leaf_name_data.push_back(admit_bytes.get_name_leafdata());
    if (admit_rates.is_set || is_set(admit_rates.yfilter)) leaf_name_data.push_back(admit_rates.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-rates")
    {
        drop_rates = value;
        drop_rates.value_namespace = name_space;
        drop_rates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admitpackets")
    {
        admitpackets = value;
        admitpackets.value_namespace = name_space;
        admitpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes = value;
        admit_bytes.value_namespace = name_space;
        admit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-rates")
    {
        admit_rates = value;
        admit_rates.value_namespace = name_space;
        admit_rates.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "drop-rates")
    {
        drop_rates.yfilter = yfilter;
    }
    if(value_path == "admitpackets")
    {
        admitpackets.yfilter = yfilter;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes.yfilter = yfilter;
    }
    if(value_path == "admit-rates")
    {
        admit_rates.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drop-packets" || name == "drop-bytes" || name == "drop-rates" || name == "admitpackets" || name == "admit-bytes" || name == "admit-rates")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueStatsArray()
    :
    queue_id{YType::uint32, "queue-id"},
    tail_drop_packets{YType::uint64, "tail-drop-packets"},
    tail_drop_bytes{YType::uint64, "tail-drop-bytes"},
    atm_clp0_drop_packets{YType::uint64, "atm-clp0-drop-packets"},
    atm_clp0_drop_bytes{YType::uint64, "atm-clp0-drop-bytes"},
    atm_clp1_drop_packets{YType::uint64, "atm-clp1-drop-packets"},
    atm_clp1_drop_bytes{YType::uint64, "atm-clp1-drop-bytes"},
    queue_drop_threshold{YType::uint32, "queue-drop-threshold"},
    forced_wred_stats_display{YType::boolean, "forced-wred-stats-display"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"}
{

    yang_name = "queue-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::~QueueStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_data() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_data())
            return true;
    }
    return queue_id.is_set
	|| tail_drop_packets.is_set
	|| tail_drop_bytes.is_set
	|| atm_clp0_drop_packets.is_set
	|| atm_clp0_drop_bytes.is_set
	|| atm_clp1_drop_packets.is_set
	|| atm_clp1_drop_bytes.is_set
	|| queue_drop_threshold.is_set
	|| forced_wred_stats_display.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_operation() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(queue_id.yfilter)
	|| ydk::is_set(tail_drop_packets.yfilter)
	|| ydk::is_set(tail_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp0_drop_packets.yfilter)
	|| ydk::is_set(atm_clp0_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp1_drop_packets.yfilter)
	|| ydk::is_set(atm_clp1_drop_bytes.yfilter)
	|| ydk::is_set(queue_drop_threshold.yfilter)
	|| ydk::is_set(forced_wred_stats_display.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (queue_id.is_set || is_set(queue_id.yfilter)) leaf_name_data.push_back(queue_id.get_name_leafdata());
    if (tail_drop_packets.is_set || is_set(tail_drop_packets.yfilter)) leaf_name_data.push_back(tail_drop_packets.get_name_leafdata());
    if (tail_drop_bytes.is_set || is_set(tail_drop_bytes.yfilter)) leaf_name_data.push_back(tail_drop_bytes.get_name_leafdata());
    if (atm_clp0_drop_packets.is_set || is_set(atm_clp0_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp0_drop_packets.get_name_leafdata());
    if (atm_clp0_drop_bytes.is_set || is_set(atm_clp0_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp0_drop_bytes.get_name_leafdata());
    if (atm_clp1_drop_packets.is_set || is_set(atm_clp1_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp1_drop_packets.get_name_leafdata());
    if (atm_clp1_drop_bytes.is_set || is_set(atm_clp1_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp1_drop_bytes.get_name_leafdata());
    if (queue_drop_threshold.is_set || is_set(queue_drop_threshold.yfilter)) leaf_name_data.push_back(queue_drop_threshold.get_name_leafdata());
    if (forced_wred_stats_display.is_set || is_set(forced_wred_stats_display.yfilter)) leaf_name_data.push_back(forced_wred_stats_display.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "queue-instance-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength>();
        c->parent = this;
        queue_instance_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-average-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength>();
        c->parent = this;
        queue_average_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-max-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength>();
        c->parent = this;
        queue_max_length.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : queue_instance_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_average_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_max_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "queue-id")
    {
        queue_id = value;
        queue_id.value_namespace = name_space;
        queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets = value;
        tail_drop_packets.value_namespace = name_space;
        tail_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes = value;
        tail_drop_bytes.value_namespace = name_space;
        tail_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets = value;
        atm_clp0_drop_packets.value_namespace = name_space;
        atm_clp0_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes = value;
        atm_clp0_drop_bytes.value_namespace = name_space;
        atm_clp0_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets = value;
        atm_clp1_drop_packets.value_namespace = name_space;
        atm_clp1_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes = value;
        atm_clp1_drop_bytes.value_namespace = name_space;
        atm_clp1_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold = value;
        queue_drop_threshold.value_namespace = name_space;
        queue_drop_threshold.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display = value;
        forced_wred_stats_display.value_namespace = name_space;
        forced_wred_stats_display.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "queue-id")
    {
        queue_id.yfilter = yfilter;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets.yfilter = yfilter;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold.yfilter = yfilter;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "queue-instance-length" || name == "queue-average-length" || name == "queue-max-length" || name == "queue-id" || name == "tail-drop-packets" || name == "tail-drop-bytes" || name == "atm-clp0-drop-packets" || name == "atm-clp0-drop-bytes" || name == "atm-clp1-drop-packets" || name == "atm-clp1-drop-bytes" || name == "queue-drop-threshold" || name == "forced-wred-stats-display" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "conform-rate" || name == "exceed-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::QueueInstanceLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-instance-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::~QueueInstanceLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-instance-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::QueueAverageLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-average-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::~QueueAverageLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-average-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::QueueMaxLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-max-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::~QueueMaxLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-max-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::PoliceStatsArray()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    violate_packets{YType::uint64, "violate-packets"},
    violate_bytes{YType::uint64, "violate-bytes"},
    parent_drop_packets{YType::uint64, "parent-drop-packets"},
    parent_drop_bytes{YType::uint64, "parent-drop-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"},
    violate_rate{YType::uint32, "violate-rate"}
    	,
    color_class_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats>())
{
    color_class_stats->parent = this;

    yang_name = "police-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::~PoliceStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| violate_packets.is_set
	|| violate_bytes.is_set
	|| parent_drop_packets.is_set
	|| parent_drop_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set
	|| violate_rate.is_set
	|| (color_class_stats !=  nullptr && color_class_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(violate_packets.yfilter)
	|| ydk::is_set(violate_bytes.yfilter)
	|| ydk::is_set(parent_drop_packets.yfilter)
	|| ydk::is_set(parent_drop_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter)
	|| ydk::is_set(violate_rate.yfilter)
	|| (color_class_stats !=  nullptr && color_class_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "police-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (violate_packets.is_set || is_set(violate_packets.yfilter)) leaf_name_data.push_back(violate_packets.get_name_leafdata());
    if (violate_bytes.is_set || is_set(violate_bytes.yfilter)) leaf_name_data.push_back(violate_bytes.get_name_leafdata());
    if (parent_drop_packets.is_set || is_set(parent_drop_packets.yfilter)) leaf_name_data.push_back(parent_drop_packets.get_name_leafdata());
    if (parent_drop_bytes.is_set || is_set(parent_drop_bytes.yfilter)) leaf_name_data.push_back(parent_drop_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());
    if (violate_rate.is_set || is_set(violate_rate.yfilter)) leaf_name_data.push_back(violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "color-class-stats")
    {
        if(color_class_stats == nullptr)
        {
            color_class_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats>();
        }
        return color_class_stats;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(color_class_stats != nullptr)
    {
        children["color-class-stats"] = color_class_stats;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-packets")
    {
        violate_packets = value;
        violate_packets.value_namespace = name_space;
        violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes = value;
        violate_bytes.value_namespace = name_space;
        violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets = value;
        parent_drop_packets.value_namespace = name_space;
        parent_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes = value;
        parent_drop_bytes.value_namespace = name_space;
        parent_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-rate")
    {
        violate_rate = value;
        violate_rate.value_namespace = name_space;
        violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-packets")
    {
        violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes.yfilter = yfilter;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets.yfilter = yfilter;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
    if(value_path == "violate-rate")
    {
        violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "color-class-stats" || name == "drop-packets" || name == "drop-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "violate-packets" || name == "violate-bytes" || name == "parent-drop-packets" || name == "parent-drop-bytes" || name == "conform-rate" || name == "exceed-rate" || name == "violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::ColorClassStats()
    :
    conform_class_conform_packets{YType::uint64, "conform-class-conform-packets"},
    conform_class_conform_bytes{YType::uint64, "conform-class-conform-bytes"},
    conform_class_conform_rate{YType::uint32, "conform-class-conform-rate"},
    conform_class_exceed_packets{YType::uint64, "conform-class-exceed-packets"},
    conform_class_exceed_bytes{YType::uint64, "conform-class-exceed-bytes"},
    conform_class_exceed_rate{YType::uint32, "conform-class-exceed-rate"},
    conform_class_violate_packets{YType::uint64, "conform-class-violate-packets"},
    conform_class_violate_bytes{YType::uint64, "conform-class-violate-bytes"},
    conform_class_violate_rate{YType::uint32, "conform-class-violate-rate"},
    exceed_class_exceed_packets{YType::uint64, "exceed-class-exceed-packets"},
    exceed_class_exceed_bytes{YType::uint64, "exceed-class-exceed-bytes"},
    exceed_class_exceed_rate{YType::uint32, "exceed-class-exceed-rate"},
    exceed_class_violate_packets{YType::uint64, "exceed-class-violate-packets"},
    exceed_class_violate_bytes{YType::uint64, "exceed-class-violate-bytes"},
    exceed_class_violate_rate{YType::uint32, "exceed-class-violate-rate"},
    violate_class_violate_packets{YType::uint64, "violate-class-violate-packets"},
    violate_class_violate_bytes{YType::uint64, "violate-class-violate-bytes"},
    violate_class_violate_rate{YType::uint32, "violate-class-violate-rate"}
{

    yang_name = "color-class-stats"; yang_parent_name = "police-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::~ColorClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_data() const
{
    return conform_class_conform_packets.is_set
	|| conform_class_conform_bytes.is_set
	|| conform_class_conform_rate.is_set
	|| conform_class_exceed_packets.is_set
	|| conform_class_exceed_bytes.is_set
	|| conform_class_exceed_rate.is_set
	|| conform_class_violate_packets.is_set
	|| conform_class_violate_bytes.is_set
	|| conform_class_violate_rate.is_set
	|| exceed_class_exceed_packets.is_set
	|| exceed_class_exceed_bytes.is_set
	|| exceed_class_exceed_rate.is_set
	|| exceed_class_violate_packets.is_set
	|| exceed_class_violate_bytes.is_set
	|| exceed_class_violate_rate.is_set
	|| violate_class_violate_packets.is_set
	|| violate_class_violate_bytes.is_set
	|| violate_class_violate_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(conform_class_conform_packets.yfilter)
	|| ydk::is_set(conform_class_conform_bytes.yfilter)
	|| ydk::is_set(conform_class_conform_rate.yfilter)
	|| ydk::is_set(conform_class_exceed_packets.yfilter)
	|| ydk::is_set(conform_class_exceed_bytes.yfilter)
	|| ydk::is_set(conform_class_exceed_rate.yfilter)
	|| ydk::is_set(conform_class_violate_packets.yfilter)
	|| ydk::is_set(conform_class_violate_bytes.yfilter)
	|| ydk::is_set(conform_class_violate_rate.yfilter)
	|| ydk::is_set(exceed_class_exceed_packets.yfilter)
	|| ydk::is_set(exceed_class_exceed_bytes.yfilter)
	|| ydk::is_set(exceed_class_exceed_rate.yfilter)
	|| ydk::is_set(exceed_class_violate_packets.yfilter)
	|| ydk::is_set(exceed_class_violate_bytes.yfilter)
	|| ydk::is_set(exceed_class_violate_rate.yfilter)
	|| ydk::is_set(violate_class_violate_packets.yfilter)
	|| ydk::is_set(violate_class_violate_bytes.yfilter)
	|| ydk::is_set(violate_class_violate_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "color-class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (conform_class_conform_packets.is_set || is_set(conform_class_conform_packets.yfilter)) leaf_name_data.push_back(conform_class_conform_packets.get_name_leafdata());
    if (conform_class_conform_bytes.is_set || is_set(conform_class_conform_bytes.yfilter)) leaf_name_data.push_back(conform_class_conform_bytes.get_name_leafdata());
    if (conform_class_conform_rate.is_set || is_set(conform_class_conform_rate.yfilter)) leaf_name_data.push_back(conform_class_conform_rate.get_name_leafdata());
    if (conform_class_exceed_packets.is_set || is_set(conform_class_exceed_packets.yfilter)) leaf_name_data.push_back(conform_class_exceed_packets.get_name_leafdata());
    if (conform_class_exceed_bytes.is_set || is_set(conform_class_exceed_bytes.yfilter)) leaf_name_data.push_back(conform_class_exceed_bytes.get_name_leafdata());
    if (conform_class_exceed_rate.is_set || is_set(conform_class_exceed_rate.yfilter)) leaf_name_data.push_back(conform_class_exceed_rate.get_name_leafdata());
    if (conform_class_violate_packets.is_set || is_set(conform_class_violate_packets.yfilter)) leaf_name_data.push_back(conform_class_violate_packets.get_name_leafdata());
    if (conform_class_violate_bytes.is_set || is_set(conform_class_violate_bytes.yfilter)) leaf_name_data.push_back(conform_class_violate_bytes.get_name_leafdata());
    if (conform_class_violate_rate.is_set || is_set(conform_class_violate_rate.yfilter)) leaf_name_data.push_back(conform_class_violate_rate.get_name_leafdata());
    if (exceed_class_exceed_packets.is_set || is_set(exceed_class_exceed_packets.yfilter)) leaf_name_data.push_back(exceed_class_exceed_packets.get_name_leafdata());
    if (exceed_class_exceed_bytes.is_set || is_set(exceed_class_exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_class_exceed_bytes.get_name_leafdata());
    if (exceed_class_exceed_rate.is_set || is_set(exceed_class_exceed_rate.yfilter)) leaf_name_data.push_back(exceed_class_exceed_rate.get_name_leafdata());
    if (exceed_class_violate_packets.is_set || is_set(exceed_class_violate_packets.yfilter)) leaf_name_data.push_back(exceed_class_violate_packets.get_name_leafdata());
    if (exceed_class_violate_bytes.is_set || is_set(exceed_class_violate_bytes.yfilter)) leaf_name_data.push_back(exceed_class_violate_bytes.get_name_leafdata());
    if (exceed_class_violate_rate.is_set || is_set(exceed_class_violate_rate.yfilter)) leaf_name_data.push_back(exceed_class_violate_rate.get_name_leafdata());
    if (violate_class_violate_packets.is_set || is_set(violate_class_violate_packets.yfilter)) leaf_name_data.push_back(violate_class_violate_packets.get_name_leafdata());
    if (violate_class_violate_bytes.is_set || is_set(violate_class_violate_bytes.yfilter)) leaf_name_data.push_back(violate_class_violate_bytes.get_name_leafdata());
    if (violate_class_violate_rate.is_set || is_set(violate_class_violate_rate.yfilter)) leaf_name_data.push_back(violate_class_violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets = value;
        conform_class_conform_packets.value_namespace = name_space;
        conform_class_conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes = value;
        conform_class_conform_bytes.value_namespace = name_space;
        conform_class_conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate = value;
        conform_class_conform_rate.value_namespace = name_space;
        conform_class_conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets = value;
        conform_class_exceed_packets.value_namespace = name_space;
        conform_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes = value;
        conform_class_exceed_bytes.value_namespace = name_space;
        conform_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate = value;
        conform_class_exceed_rate.value_namespace = name_space;
        conform_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets = value;
        conform_class_violate_packets.value_namespace = name_space;
        conform_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes = value;
        conform_class_violate_bytes.value_namespace = name_space;
        conform_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate = value;
        conform_class_violate_rate.value_namespace = name_space;
        conform_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets = value;
        exceed_class_exceed_packets.value_namespace = name_space;
        exceed_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes = value;
        exceed_class_exceed_bytes.value_namespace = name_space;
        exceed_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate = value;
        exceed_class_exceed_rate.value_namespace = name_space;
        exceed_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets = value;
        exceed_class_violate_packets.value_namespace = name_space;
        exceed_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes = value;
        exceed_class_violate_bytes.value_namespace = name_space;
        exceed_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate = value;
        exceed_class_violate_rate.value_namespace = name_space;
        exceed_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets = value;
        violate_class_violate_packets.value_namespace = name_space;
        violate_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes = value;
        violate_class_violate_bytes.value_namespace = name_space;
        violate_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate = value;
        violate_class_violate_rate.value_namespace = name_space;
        violate_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "conform-class-conform-packets" || name == "conform-class-conform-bytes" || name == "conform-class-conform-rate" || name == "conform-class-exceed-packets" || name == "conform-class-exceed-bytes" || name == "conform-class-exceed-rate" || name == "conform-class-violate-packets" || name == "conform-class-violate-bytes" || name == "conform-class-violate-rate" || name == "exceed-class-exceed-packets" || name == "exceed-class-exceed-bytes" || name == "exceed-class-exceed-rate" || name == "exceed-class-violate-packets" || name == "exceed-class-violate-bytes" || name == "exceed-class-violate-rate" || name == "violate-class-violate-packets" || name == "violate-class-violate-bytes" || name == "violate-class-violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::WredStatsArray()
    :
    profile_title{YType::str, "profile-title"},
    red_transmit_packets{YType::uint64, "red-transmit-packets"},
    red_transmit_bytes{YType::uint64, "red-transmit-bytes"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    red_ecn_marked_packets{YType::uint64, "red-ecn-marked-packets"},
    red_ecn_marked_bytes{YType::uint64, "red-ecn-marked-bytes"}
{

    yang_name = "wred-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::~WredStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_data() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_data())
            return true;
    }
    return profile_title.is_set
	|| red_transmit_packets.is_set
	|| red_transmit_bytes.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| red_ecn_marked_packets.is_set
	|| red_ecn_marked_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_operation() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(profile_title.yfilter)
	|| ydk::is_set(red_transmit_packets.yfilter)
	|| ydk::is_set(red_transmit_bytes.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(red_ecn_marked_packets.yfilter)
	|| ydk::is_set(red_ecn_marked_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "wred-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (profile_title.is_set || is_set(profile_title.yfilter)) leaf_name_data.push_back(profile_title.get_name_leafdata());
    if (red_transmit_packets.is_set || is_set(red_transmit_packets.yfilter)) leaf_name_data.push_back(red_transmit_packets.get_name_leafdata());
    if (red_transmit_bytes.is_set || is_set(red_transmit_bytes.yfilter)) leaf_name_data.push_back(red_transmit_bytes.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (red_ecn_marked_packets.is_set || is_set(red_ecn_marked_packets.yfilter)) leaf_name_data.push_back(red_ecn_marked_packets.get_name_leafdata());
    if (red_ecn_marked_bytes.is_set || is_set(red_ecn_marked_bytes.yfilter)) leaf_name_data.push_back(red_ecn_marked_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "red-label")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel>();
        c->parent = this;
        red_label.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : red_label)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "profile-title")
    {
        profile_title = value;
        profile_title.value_namespace = name_space;
        profile_title.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets = value;
        red_transmit_packets.value_namespace = name_space;
        red_transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes = value;
        red_transmit_bytes.value_namespace = name_space;
        red_transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets = value;
        red_ecn_marked_packets.value_namespace = name_space;
        red_ecn_marked_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes = value;
        red_ecn_marked_bytes.value_namespace = name_space;
        red_ecn_marked_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "profile-title")
    {
        profile_title.yfilter = yfilter;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets.yfilter = yfilter;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "red-label" || name == "profile-title" || name == "red-transmit-packets" || name == "red-transmit-bytes" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "red-ecn-marked-packets" || name == "red-ecn-marked-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::RedLabel()
    :
    wred_type{YType::enumeration, "wred-type"},
    value_{YType::uint8, "value"}
{

    yang_name = "red-label"; yang_parent_name = "wred-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::~RedLabel()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_data() const
{
    return wred_type.is_set
	|| value_.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(wred_type.yfilter)
	|| ydk::is_set(value_.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "red-label";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (wred_type.is_set || is_set(wred_type.yfilter)) leaf_name_data.push_back(wred_type.get_name_leafdata());
    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "wred-type")
    {
        wred_type = value;
        wred_type.value_namespace = name_space;
        wred_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "wred-type")
    {
        wred_type.yfilter = yfilter;
    }
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "wred-type" || name == "value")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::CacStats()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    drop_rates{YType::uint32, "drop-rates"},
    admitpackets{YType::uint64, "admitpackets"},
    admit_bytes{YType::uint64, "admit-bytes"},
    admit_rates{YType::uint32, "admit-rates"}
{

    yang_name = "cac-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::~CacStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| drop_rates.is_set
	|| admitpackets.is_set
	|| admit_bytes.is_set
	|| admit_rates.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(drop_rates.yfilter)
	|| ydk::is_set(admitpackets.yfilter)
	|| ydk::is_set(admit_bytes.yfilter)
	|| ydk::is_set(admit_rates.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cac-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (drop_rates.is_set || is_set(drop_rates.yfilter)) leaf_name_data.push_back(drop_rates.get_name_leafdata());
    if (admitpackets.is_set || is_set(admitpackets.yfilter)) leaf_name_data.push_back(admitpackets.get_name_leafdata());
    if (admit_bytes.is_set || is_set(admit_bytes.yfilter)) leaf_name_data.push_back(admit_bytes.get_name_leafdata());
    if (admit_rates.is_set || is_set(admit_rates.yfilter)) leaf_name_data.push_back(admit_rates.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-rates")
    {
        drop_rates = value;
        drop_rates.value_namespace = name_space;
        drop_rates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admitpackets")
    {
        admitpackets = value;
        admitpackets.value_namespace = name_space;
        admitpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes = value;
        admit_bytes.value_namespace = name_space;
        admit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-rates")
    {
        admit_rates = value;
        admit_rates.value_namespace = name_space;
        admit_rates.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "drop-rates")
    {
        drop_rates.yfilter = yfilter;
    }
    if(value_path == "admitpackets")
    {
        admitpackets.yfilter = yfilter;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes.yfilter = yfilter;
    }
    if(value_path == "admit-rates")
    {
        admit_rates.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drop-packets" || name == "drop-bytes" || name == "drop-rates" || name == "admitpackets" || name == "admit-bytes" || name == "admit-rates")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueStatsArray()
    :
    queue_id{YType::uint32, "queue-id"},
    tail_drop_packets{YType::uint64, "tail-drop-packets"},
    tail_drop_bytes{YType::uint64, "tail-drop-bytes"},
    atm_clp0_drop_packets{YType::uint64, "atm-clp0-drop-packets"},
    atm_clp0_drop_bytes{YType::uint64, "atm-clp0-drop-bytes"},
    atm_clp1_drop_packets{YType::uint64, "atm-clp1-drop-packets"},
    atm_clp1_drop_bytes{YType::uint64, "atm-clp1-drop-bytes"},
    queue_drop_threshold{YType::uint32, "queue-drop-threshold"},
    forced_wred_stats_display{YType::boolean, "forced-wred-stats-display"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"}
{

    yang_name = "queue-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::~QueueStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_data() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_data())
            return true;
    }
    return queue_id.is_set
	|| tail_drop_packets.is_set
	|| tail_drop_bytes.is_set
	|| atm_clp0_drop_packets.is_set
	|| atm_clp0_drop_bytes.is_set
	|| atm_clp1_drop_packets.is_set
	|| atm_clp1_drop_bytes.is_set
	|| queue_drop_threshold.is_set
	|| forced_wred_stats_display.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_operation() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(queue_id.yfilter)
	|| ydk::is_set(tail_drop_packets.yfilter)
	|| ydk::is_set(tail_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp0_drop_packets.yfilter)
	|| ydk::is_set(atm_clp0_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp1_drop_packets.yfilter)
	|| ydk::is_set(atm_clp1_drop_bytes.yfilter)
	|| ydk::is_set(queue_drop_threshold.yfilter)
	|| ydk::is_set(forced_wred_stats_display.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (queue_id.is_set || is_set(queue_id.yfilter)) leaf_name_data.push_back(queue_id.get_name_leafdata());
    if (tail_drop_packets.is_set || is_set(tail_drop_packets.yfilter)) leaf_name_data.push_back(tail_drop_packets.get_name_leafdata());
    if (tail_drop_bytes.is_set || is_set(tail_drop_bytes.yfilter)) leaf_name_data.push_back(tail_drop_bytes.get_name_leafdata());
    if (atm_clp0_drop_packets.is_set || is_set(atm_clp0_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp0_drop_packets.get_name_leafdata());
    if (atm_clp0_drop_bytes.is_set || is_set(atm_clp0_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp0_drop_bytes.get_name_leafdata());
    if (atm_clp1_drop_packets.is_set || is_set(atm_clp1_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp1_drop_packets.get_name_leafdata());
    if (atm_clp1_drop_bytes.is_set || is_set(atm_clp1_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp1_drop_bytes.get_name_leafdata());
    if (queue_drop_threshold.is_set || is_set(queue_drop_threshold.yfilter)) leaf_name_data.push_back(queue_drop_threshold.get_name_leafdata());
    if (forced_wred_stats_display.is_set || is_set(forced_wred_stats_display.yfilter)) leaf_name_data.push_back(forced_wred_stats_display.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "queue-instance-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength>();
        c->parent = this;
        queue_instance_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-average-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength>();
        c->parent = this;
        queue_average_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-max-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength>();
        c->parent = this;
        queue_max_length.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : queue_instance_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_average_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_max_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "queue-id")
    {
        queue_id = value;
        queue_id.value_namespace = name_space;
        queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets = value;
        tail_drop_packets.value_namespace = name_space;
        tail_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes = value;
        tail_drop_bytes.value_namespace = name_space;
        tail_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets = value;
        atm_clp0_drop_packets.value_namespace = name_space;
        atm_clp0_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes = value;
        atm_clp0_drop_bytes.value_namespace = name_space;
        atm_clp0_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets = value;
        atm_clp1_drop_packets.value_namespace = name_space;
        atm_clp1_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes = value;
        atm_clp1_drop_bytes.value_namespace = name_space;
        atm_clp1_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold = value;
        queue_drop_threshold.value_namespace = name_space;
        queue_drop_threshold.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display = value;
        forced_wred_stats_display.value_namespace = name_space;
        forced_wred_stats_display.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "queue-id")
    {
        queue_id.yfilter = yfilter;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets.yfilter = yfilter;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold.yfilter = yfilter;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "queue-instance-length" || name == "queue-average-length" || name == "queue-max-length" || name == "queue-id" || name == "tail-drop-packets" || name == "tail-drop-bytes" || name == "atm-clp0-drop-packets" || name == "atm-clp0-drop-bytes" || name == "atm-clp1-drop-packets" || name == "atm-clp1-drop-bytes" || name == "queue-drop-threshold" || name == "forced-wred-stats-display" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "conform-rate" || name == "exceed-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::QueueInstanceLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-instance-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::~QueueInstanceLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-instance-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::QueueAverageLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-average-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::~QueueAverageLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-average-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::QueueMaxLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-max-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::~QueueMaxLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-max-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::PoliceStatsArray()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    violate_packets{YType::uint64, "violate-packets"},
    violate_bytes{YType::uint64, "violate-bytes"},
    parent_drop_packets{YType::uint64, "parent-drop-packets"},
    parent_drop_bytes{YType::uint64, "parent-drop-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"},
    violate_rate{YType::uint32, "violate-rate"}
    	,
    color_class_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats>())
{
    color_class_stats->parent = this;

    yang_name = "police-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::~PoliceStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| violate_packets.is_set
	|| violate_bytes.is_set
	|| parent_drop_packets.is_set
	|| parent_drop_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set
	|| violate_rate.is_set
	|| (color_class_stats !=  nullptr && color_class_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(violate_packets.yfilter)
	|| ydk::is_set(violate_bytes.yfilter)
	|| ydk::is_set(parent_drop_packets.yfilter)
	|| ydk::is_set(parent_drop_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter)
	|| ydk::is_set(violate_rate.yfilter)
	|| (color_class_stats !=  nullptr && color_class_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "police-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (violate_packets.is_set || is_set(violate_packets.yfilter)) leaf_name_data.push_back(violate_packets.get_name_leafdata());
    if (violate_bytes.is_set || is_set(violate_bytes.yfilter)) leaf_name_data.push_back(violate_bytes.get_name_leafdata());
    if (parent_drop_packets.is_set || is_set(parent_drop_packets.yfilter)) leaf_name_data.push_back(parent_drop_packets.get_name_leafdata());
    if (parent_drop_bytes.is_set || is_set(parent_drop_bytes.yfilter)) leaf_name_data.push_back(parent_drop_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());
    if (violate_rate.is_set || is_set(violate_rate.yfilter)) leaf_name_data.push_back(violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "color-class-stats")
    {
        if(color_class_stats == nullptr)
        {
            color_class_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats>();
        }
        return color_class_stats;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(color_class_stats != nullptr)
    {
        children["color-class-stats"] = color_class_stats;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-packets")
    {
        violate_packets = value;
        violate_packets.value_namespace = name_space;
        violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes = value;
        violate_bytes.value_namespace = name_space;
        violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets = value;
        parent_drop_packets.value_namespace = name_space;
        parent_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes = value;
        parent_drop_bytes.value_namespace = name_space;
        parent_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-rate")
    {
        violate_rate = value;
        violate_rate.value_namespace = name_space;
        violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-packets")
    {
        violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes.yfilter = yfilter;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets.yfilter = yfilter;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
    if(value_path == "violate-rate")
    {
        violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "color-class-stats" || name == "drop-packets" || name == "drop-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "violate-packets" || name == "violate-bytes" || name == "parent-drop-packets" || name == "parent-drop-bytes" || name == "conform-rate" || name == "exceed-rate" || name == "violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::ColorClassStats()
    :
    conform_class_conform_packets{YType::uint64, "conform-class-conform-packets"},
    conform_class_conform_bytes{YType::uint64, "conform-class-conform-bytes"},
    conform_class_conform_rate{YType::uint32, "conform-class-conform-rate"},
    conform_class_exceed_packets{YType::uint64, "conform-class-exceed-packets"},
    conform_class_exceed_bytes{YType::uint64, "conform-class-exceed-bytes"},
    conform_class_exceed_rate{YType::uint32, "conform-class-exceed-rate"},
    conform_class_violate_packets{YType::uint64, "conform-class-violate-packets"},
    conform_class_violate_bytes{YType::uint64, "conform-class-violate-bytes"},
    conform_class_violate_rate{YType::uint32, "conform-class-violate-rate"},
    exceed_class_exceed_packets{YType::uint64, "exceed-class-exceed-packets"},
    exceed_class_exceed_bytes{YType::uint64, "exceed-class-exceed-bytes"},
    exceed_class_exceed_rate{YType::uint32, "exceed-class-exceed-rate"},
    exceed_class_violate_packets{YType::uint64, "exceed-class-violate-packets"},
    exceed_class_violate_bytes{YType::uint64, "exceed-class-violate-bytes"},
    exceed_class_violate_rate{YType::uint32, "exceed-class-violate-rate"},
    violate_class_violate_packets{YType::uint64, "violate-class-violate-packets"},
    violate_class_violate_bytes{YType::uint64, "violate-class-violate-bytes"},
    violate_class_violate_rate{YType::uint32, "violate-class-violate-rate"}
{

    yang_name = "color-class-stats"; yang_parent_name = "police-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::~ColorClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_data() const
{
    return conform_class_conform_packets.is_set
	|| conform_class_conform_bytes.is_set
	|| conform_class_conform_rate.is_set
	|| conform_class_exceed_packets.is_set
	|| conform_class_exceed_bytes.is_set
	|| conform_class_exceed_rate.is_set
	|| conform_class_violate_packets.is_set
	|| conform_class_violate_bytes.is_set
	|| conform_class_violate_rate.is_set
	|| exceed_class_exceed_packets.is_set
	|| exceed_class_exceed_bytes.is_set
	|| exceed_class_exceed_rate.is_set
	|| exceed_class_violate_packets.is_set
	|| exceed_class_violate_bytes.is_set
	|| exceed_class_violate_rate.is_set
	|| violate_class_violate_packets.is_set
	|| violate_class_violate_bytes.is_set
	|| violate_class_violate_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(conform_class_conform_packets.yfilter)
	|| ydk::is_set(conform_class_conform_bytes.yfilter)
	|| ydk::is_set(conform_class_conform_rate.yfilter)
	|| ydk::is_set(conform_class_exceed_packets.yfilter)
	|| ydk::is_set(conform_class_exceed_bytes.yfilter)
	|| ydk::is_set(conform_class_exceed_rate.yfilter)
	|| ydk::is_set(conform_class_violate_packets.yfilter)
	|| ydk::is_set(conform_class_violate_bytes.yfilter)
	|| ydk::is_set(conform_class_violate_rate.yfilter)
	|| ydk::is_set(exceed_class_exceed_packets.yfilter)
	|| ydk::is_set(exceed_class_exceed_bytes.yfilter)
	|| ydk::is_set(exceed_class_exceed_rate.yfilter)
	|| ydk::is_set(exceed_class_violate_packets.yfilter)
	|| ydk::is_set(exceed_class_violate_bytes.yfilter)
	|| ydk::is_set(exceed_class_violate_rate.yfilter)
	|| ydk::is_set(violate_class_violate_packets.yfilter)
	|| ydk::is_set(violate_class_violate_bytes.yfilter)
	|| ydk::is_set(violate_class_violate_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "color-class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (conform_class_conform_packets.is_set || is_set(conform_class_conform_packets.yfilter)) leaf_name_data.push_back(conform_class_conform_packets.get_name_leafdata());
    if (conform_class_conform_bytes.is_set || is_set(conform_class_conform_bytes.yfilter)) leaf_name_data.push_back(conform_class_conform_bytes.get_name_leafdata());
    if (conform_class_conform_rate.is_set || is_set(conform_class_conform_rate.yfilter)) leaf_name_data.push_back(conform_class_conform_rate.get_name_leafdata());
    if (conform_class_exceed_packets.is_set || is_set(conform_class_exceed_packets.yfilter)) leaf_name_data.push_back(conform_class_exceed_packets.get_name_leafdata());
    if (conform_class_exceed_bytes.is_set || is_set(conform_class_exceed_bytes.yfilter)) leaf_name_data.push_back(conform_class_exceed_bytes.get_name_leafdata());
    if (conform_class_exceed_rate.is_set || is_set(conform_class_exceed_rate.yfilter)) leaf_name_data.push_back(conform_class_exceed_rate.get_name_leafdata());
    if (conform_class_violate_packets.is_set || is_set(conform_class_violate_packets.yfilter)) leaf_name_data.push_back(conform_class_violate_packets.get_name_leafdata());
    if (conform_class_violate_bytes.is_set || is_set(conform_class_violate_bytes.yfilter)) leaf_name_data.push_back(conform_class_violate_bytes.get_name_leafdata());
    if (conform_class_violate_rate.is_set || is_set(conform_class_violate_rate.yfilter)) leaf_name_data.push_back(conform_class_violate_rate.get_name_leafdata());
    if (exceed_class_exceed_packets.is_set || is_set(exceed_class_exceed_packets.yfilter)) leaf_name_data.push_back(exceed_class_exceed_packets.get_name_leafdata());
    if (exceed_class_exceed_bytes.is_set || is_set(exceed_class_exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_class_exceed_bytes.get_name_leafdata());
    if (exceed_class_exceed_rate.is_set || is_set(exceed_class_exceed_rate.yfilter)) leaf_name_data.push_back(exceed_class_exceed_rate.get_name_leafdata());
    if (exceed_class_violate_packets.is_set || is_set(exceed_class_violate_packets.yfilter)) leaf_name_data.push_back(exceed_class_violate_packets.get_name_leafdata());
    if (exceed_class_violate_bytes.is_set || is_set(exceed_class_violate_bytes.yfilter)) leaf_name_data.push_back(exceed_class_violate_bytes.get_name_leafdata());
    if (exceed_class_violate_rate.is_set || is_set(exceed_class_violate_rate.yfilter)) leaf_name_data.push_back(exceed_class_violate_rate.get_name_leafdata());
    if (violate_class_violate_packets.is_set || is_set(violate_class_violate_packets.yfilter)) leaf_name_data.push_back(violate_class_violate_packets.get_name_leafdata());
    if (violate_class_violate_bytes.is_set || is_set(violate_class_violate_bytes.yfilter)) leaf_name_data.push_back(violate_class_violate_bytes.get_name_leafdata());
    if (violate_class_violate_rate.is_set || is_set(violate_class_violate_rate.yfilter)) leaf_name_data.push_back(violate_class_violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets = value;
        conform_class_conform_packets.value_namespace = name_space;
        conform_class_conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes = value;
        conform_class_conform_bytes.value_namespace = name_space;
        conform_class_conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate = value;
        conform_class_conform_rate.value_namespace = name_space;
        conform_class_conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets = value;
        conform_class_exceed_packets.value_namespace = name_space;
        conform_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes = value;
        conform_class_exceed_bytes.value_namespace = name_space;
        conform_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate = value;
        conform_class_exceed_rate.value_namespace = name_space;
        conform_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets = value;
        conform_class_violate_packets.value_namespace = name_space;
        conform_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes = value;
        conform_class_violate_bytes.value_namespace = name_space;
        conform_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate = value;
        conform_class_violate_rate.value_namespace = name_space;
        conform_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets = value;
        exceed_class_exceed_packets.value_namespace = name_space;
        exceed_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes = value;
        exceed_class_exceed_bytes.value_namespace = name_space;
        exceed_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate = value;
        exceed_class_exceed_rate.value_namespace = name_space;
        exceed_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets = value;
        exceed_class_violate_packets.value_namespace = name_space;
        exceed_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes = value;
        exceed_class_violate_bytes.value_namespace = name_space;
        exceed_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate = value;
        exceed_class_violate_rate.value_namespace = name_space;
        exceed_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets = value;
        violate_class_violate_packets.value_namespace = name_space;
        violate_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes = value;
        violate_class_violate_bytes.value_namespace = name_space;
        violate_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate = value;
        violate_class_violate_rate.value_namespace = name_space;
        violate_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "conform-class-conform-packets" || name == "conform-class-conform-bytes" || name == "conform-class-conform-rate" || name == "conform-class-exceed-packets" || name == "conform-class-exceed-bytes" || name == "conform-class-exceed-rate" || name == "conform-class-violate-packets" || name == "conform-class-violate-bytes" || name == "conform-class-violate-rate" || name == "exceed-class-exceed-packets" || name == "exceed-class-exceed-bytes" || name == "exceed-class-exceed-rate" || name == "exceed-class-violate-packets" || name == "exceed-class-violate-bytes" || name == "exceed-class-violate-rate" || name == "violate-class-violate-packets" || name == "violate-class-violate-bytes" || name == "violate-class-violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::WredStatsArray()
    :
    profile_title{YType::str, "profile-title"},
    red_transmit_packets{YType::uint64, "red-transmit-packets"},
    red_transmit_bytes{YType::uint64, "red-transmit-bytes"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    red_ecn_marked_packets{YType::uint64, "red-ecn-marked-packets"},
    red_ecn_marked_bytes{YType::uint64, "red-ecn-marked-bytes"}
{

    yang_name = "wred-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::~WredStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_data() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_data())
            return true;
    }
    return profile_title.is_set
	|| red_transmit_packets.is_set
	|| red_transmit_bytes.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| red_ecn_marked_packets.is_set
	|| red_ecn_marked_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_operation() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(profile_title.yfilter)
	|| ydk::is_set(red_transmit_packets.yfilter)
	|| ydk::is_set(red_transmit_bytes.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(red_ecn_marked_packets.yfilter)
	|| ydk::is_set(red_ecn_marked_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "wred-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (profile_title.is_set || is_set(profile_title.yfilter)) leaf_name_data.push_back(profile_title.get_name_leafdata());
    if (red_transmit_packets.is_set || is_set(red_transmit_packets.yfilter)) leaf_name_data.push_back(red_transmit_packets.get_name_leafdata());
    if (red_transmit_bytes.is_set || is_set(red_transmit_bytes.yfilter)) leaf_name_data.push_back(red_transmit_bytes.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (red_ecn_marked_packets.is_set || is_set(red_ecn_marked_packets.yfilter)) leaf_name_data.push_back(red_ecn_marked_packets.get_name_leafdata());
    if (red_ecn_marked_bytes.is_set || is_set(red_ecn_marked_bytes.yfilter)) leaf_name_data.push_back(red_ecn_marked_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "red-label")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel>();
        c->parent = this;
        red_label.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : red_label)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "profile-title")
    {
        profile_title = value;
        profile_title.value_namespace = name_space;
        profile_title.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets = value;
        red_transmit_packets.value_namespace = name_space;
        red_transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes = value;
        red_transmit_bytes.value_namespace = name_space;
        red_transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets = value;
        red_ecn_marked_packets.value_namespace = name_space;
        red_ecn_marked_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes = value;
        red_ecn_marked_bytes.value_namespace = name_space;
        red_ecn_marked_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "profile-title")
    {
        profile_title.yfilter = yfilter;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets.yfilter = yfilter;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "red-label" || name == "profile-title" || name == "red-transmit-packets" || name == "red-transmit-bytes" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "red-ecn-marked-packets" || name == "red-ecn-marked-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::RedLabel()
    :
    wred_type{YType::enumeration, "wred-type"},
    value_{YType::uint8, "value"}
{

    yang_name = "red-label"; yang_parent_name = "wred-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::~RedLabel()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_data() const
{
    return wred_type.is_set
	|| value_.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(wred_type.yfilter)
	|| ydk::is_set(value_.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "red-label";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (wred_type.is_set || is_set(wred_type.yfilter)) leaf_name_data.push_back(wred_type.get_name_leafdata());
    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "wred-type")
    {
        wred_type = value;
        wred_type.value_namespace = name_space;
        wred_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "wred-type")
    {
        wred_type.yfilter = yfilter;
    }
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "wred-type" || name == "value")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::Output()
    :
    service_policy_names(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames>())
{
    service_policy_names->parent = this;

    yang_name = "output"; yang_parent_name = "satellite-id"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::~Output()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::has_data() const
{
    return (service_policy_names !=  nullptr && service_policy_names->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::has_operation() const
{
    return is_set(yfilter)
	|| (service_policy_names !=  nullptr && service_policy_names->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "service-policy-names")
    {
        if(service_policy_names == nullptr)
        {
            service_policy_names = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames>();
        }
        return service_policy_names;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(service_policy_names != nullptr)
    {
        children["service-policy-names"] = service_policy_names;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "service-policy-names")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyNames()
{

    yang_name = "service-policy-names"; yang_parent_name = "output"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::~ServicePolicyNames()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::has_data() const
{
    for (std::size_t index=0; index<service_policy_instance.size(); index++)
    {
        if(service_policy_instance[index]->has_data())
            return true;
    }
    return false;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::has_operation() const
{
    for (std::size_t index=0; index<service_policy_instance.size(); index++)
    {
        if(service_policy_instance[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "service-policy-names";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "service-policy-instance")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance>();
        c->parent = this;
        service_policy_instance.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : service_policy_instance)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "service-policy-instance")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::ServicePolicyInstance()
    :
    service_policy_name{YType::str, "service-policy-name"}
    	,
    statistics(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics>())
{
    statistics->parent = this;

    yang_name = "service-policy-instance"; yang_parent_name = "service-policy-names"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::~ServicePolicyInstance()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::has_data() const
{
    return service_policy_name.is_set
	|| (statistics !=  nullptr && statistics->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(service_policy_name.yfilter)
	|| (statistics !=  nullptr && statistics->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "service-policy-instance" <<"[service-policy-name='" <<service_policy_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (service_policy_name.is_set || is_set(service_policy_name.yfilter)) leaf_name_data.push_back(service_policy_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "statistics")
    {
        if(statistics == nullptr)
        {
            statistics = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics>();
        }
        return statistics;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(statistics != nullptr)
    {
        children["statistics"] = statistics;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "service-policy-name")
    {
        service_policy_name = value;
        service_policy_name.value_namespace = name_space;
        service_policy_name.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "service-policy-name")
    {
        service_policy_name.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "statistics" || name == "service-policy-name")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::Statistics()
    :
    policy_name{YType::str, "policy-name"},
    state{YType::enumeration, "state"},
    state_description{YType::str, "state-description"},
    satid{YType::uint32, "satid"}
{

    yang_name = "statistics"; yang_parent_name = "service-policy-instance"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::~Statistics()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::has_data() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_data())
            return true;
    }
    return policy_name.is_set
	|| state.is_set
	|| state_description.is_set
	|| satid.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::has_operation() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(policy_name.yfilter)
	|| ydk::is_set(state.yfilter)
	|| ydk::is_set(state_description.yfilter)
	|| ydk::is_set(satid.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "statistics";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (policy_name.is_set || is_set(policy_name.yfilter)) leaf_name_data.push_back(policy_name.get_name_leafdata());
    if (state.is_set || is_set(state.yfilter)) leaf_name_data.push_back(state.get_name_leafdata());
    if (state_description.is_set || is_set(state_description.yfilter)) leaf_name_data.push_back(state_description.get_name_leafdata());
    if (satid.is_set || is_set(satid.yfilter)) leaf_name_data.push_back(satid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "class-stats")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats>();
        c->parent = this;
        class_stats.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : class_stats)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "policy-name")
    {
        policy_name = value;
        policy_name.value_namespace = name_space;
        policy_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state")
    {
        state = value;
        state.value_namespace = name_space;
        state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state-description")
    {
        state_description = value;
        state_description.value_namespace = name_space;
        state_description.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "satid")
    {
        satid = value;
        satid.value_namespace = name_space;
        satid.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "policy-name")
    {
        policy_name.yfilter = yfilter;
    }
    if(value_path == "state")
    {
        state.yfilter = yfilter;
    }
    if(value_path == "state-description")
    {
        state_description.yfilter = yfilter;
    }
    if(value_path == "satid")
    {
        satid.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "class-stats" || name == "policy-name" || name == "state" || name == "state-description" || name == "satid")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ClassStats()
    :
    counter_validity_bitmask{YType::uint64, "counter-validity-bitmask"},
    class_name{YType::str, "class-name"},
    shared_queue_id{YType::uint32, "shared-queue-id"},
    queue_descr{YType::str, "queue-descr"},
    cac_state{YType::enumeration, "cac-state"}
    	,
    general_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats>())
	,iphc_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats>())
	,child_policy(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy>())
	,cac_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats>())
{
    general_stats->parent = this;
    iphc_stats->parent = this;
    child_policy->parent = this;
    cac_stats->parent = this;

    yang_name = "class-stats"; yang_parent_name = "statistics"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::~ClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_data() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_data())
            return true;
    }
    return counter_validity_bitmask.is_set
	|| class_name.is_set
	|| shared_queue_id.is_set
	|| queue_descr.is_set
	|| cac_state.is_set
	|| (general_stats !=  nullptr && general_stats->has_data())
	|| (iphc_stats !=  nullptr && iphc_stats->has_data())
	|| (child_policy !=  nullptr && child_policy->has_data())
	|| (cac_stats !=  nullptr && cac_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_operation() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(counter_validity_bitmask.yfilter)
	|| ydk::is_set(class_name.yfilter)
	|| ydk::is_set(shared_queue_id.yfilter)
	|| ydk::is_set(queue_descr.yfilter)
	|| ydk::is_set(cac_state.yfilter)
	|| (general_stats !=  nullptr && general_stats->has_operation())
	|| (iphc_stats !=  nullptr && iphc_stats->has_operation())
	|| (child_policy !=  nullptr && child_policy->has_operation())
	|| (cac_stats !=  nullptr && cac_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (counter_validity_bitmask.is_set || is_set(counter_validity_bitmask.yfilter)) leaf_name_data.push_back(counter_validity_bitmask.get_name_leafdata());
    if (class_name.is_set || is_set(class_name.yfilter)) leaf_name_data.push_back(class_name.get_name_leafdata());
    if (shared_queue_id.is_set || is_set(shared_queue_id.yfilter)) leaf_name_data.push_back(shared_queue_id.get_name_leafdata());
    if (queue_descr.is_set || is_set(queue_descr.yfilter)) leaf_name_data.push_back(queue_descr.get_name_leafdata());
    if (cac_state.is_set || is_set(cac_state.yfilter)) leaf_name_data.push_back(cac_state.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "general-stats")
    {
        if(general_stats == nullptr)
        {
            general_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats>();
        }
        return general_stats;
    }

    if(child_yang_name == "iphc-stats")
    {
        if(iphc_stats == nullptr)
        {
            iphc_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats>();
        }
        return iphc_stats;
    }

    if(child_yang_name == "child-policy")
    {
        if(child_policy == nullptr)
        {
            child_policy = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy>();
        }
        return child_policy;
    }

    if(child_yang_name == "cac-stats")
    {
        if(cac_stats == nullptr)
        {
            cac_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats>();
        }
        return cac_stats;
    }

    if(child_yang_name == "queue-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray>();
        c->parent = this;
        queue_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "police-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray>();
        c->parent = this;
        police_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "wred-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray>();
        c->parent = this;
        wred_stats_array.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(general_stats != nullptr)
    {
        children["general-stats"] = general_stats;
    }

    if(iphc_stats != nullptr)
    {
        children["iphc-stats"] = iphc_stats;
    }

    if(child_policy != nullptr)
    {
        children["child-policy"] = child_policy;
    }

    if(cac_stats != nullptr)
    {
        children["cac-stats"] = cac_stats;
    }

    count = 0;
    for (auto const & c : queue_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : police_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : wred_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask = value;
        counter_validity_bitmask.value_namespace = name_space;
        counter_validity_bitmask.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "class-name")
    {
        class_name = value;
        class_name.value_namespace = name_space;
        class_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id = value;
        shared_queue_id.value_namespace = name_space;
        shared_queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-descr")
    {
        queue_descr = value;
        queue_descr.value_namespace = name_space;
        queue_descr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cac-state")
    {
        cac_state = value;
        cac_state.value_namespace = name_space;
        cac_state.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask.yfilter = yfilter;
    }
    if(value_path == "class-name")
    {
        class_name.yfilter = yfilter;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id.yfilter = yfilter;
    }
    if(value_path == "queue-descr")
    {
        queue_descr.yfilter = yfilter;
    }
    if(value_path == "cac-state")
    {
        cac_state.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "general-stats" || name == "iphc-stats" || name == "child-policy" || name == "cac-stats" || name == "queue-stats-array" || name == "police-stats-array" || name == "wred-stats-array" || name == "counter-validity-bitmask" || name == "class-name" || name == "shared-queue-id" || name == "queue-descr" || name == "cac-state")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::GeneralStats()
    :
    transmit_packets{YType::uint64, "transmit-packets"},
    transmit_bytes{YType::uint64, "transmit-bytes"},
    total_drop_packets{YType::uint64, "total-drop-packets"},
    total_drop_bytes{YType::uint64, "total-drop-bytes"},
    total_drop_rate{YType::uint32, "total-drop-rate"},
    match_data_rate{YType::uint32, "match-data-rate"},
    total_transmit_rate{YType::uint32, "total-transmit-rate"},
    pre_policy_matched_packets{YType::uint64, "pre-policy-matched-packets"},
    pre_policy_matched_bytes{YType::uint64, "pre-policy-matched-bytes"}
{

    yang_name = "general-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::~GeneralStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_data() const
{
    return transmit_packets.is_set
	|| transmit_bytes.is_set
	|| total_drop_packets.is_set
	|| total_drop_bytes.is_set
	|| total_drop_rate.is_set
	|| match_data_rate.is_set
	|| total_transmit_rate.is_set
	|| pre_policy_matched_packets.is_set
	|| pre_policy_matched_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(transmit_packets.yfilter)
	|| ydk::is_set(transmit_bytes.yfilter)
	|| ydk::is_set(total_drop_packets.yfilter)
	|| ydk::is_set(total_drop_bytes.yfilter)
	|| ydk::is_set(total_drop_rate.yfilter)
	|| ydk::is_set(match_data_rate.yfilter)
	|| ydk::is_set(total_transmit_rate.yfilter)
	|| ydk::is_set(pre_policy_matched_packets.yfilter)
	|| ydk::is_set(pre_policy_matched_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "general-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (transmit_packets.is_set || is_set(transmit_packets.yfilter)) leaf_name_data.push_back(transmit_packets.get_name_leafdata());
    if (transmit_bytes.is_set || is_set(transmit_bytes.yfilter)) leaf_name_data.push_back(transmit_bytes.get_name_leafdata());
    if (total_drop_packets.is_set || is_set(total_drop_packets.yfilter)) leaf_name_data.push_back(total_drop_packets.get_name_leafdata());
    if (total_drop_bytes.is_set || is_set(total_drop_bytes.yfilter)) leaf_name_data.push_back(total_drop_bytes.get_name_leafdata());
    if (total_drop_rate.is_set || is_set(total_drop_rate.yfilter)) leaf_name_data.push_back(total_drop_rate.get_name_leafdata());
    if (match_data_rate.is_set || is_set(match_data_rate.yfilter)) leaf_name_data.push_back(match_data_rate.get_name_leafdata());
    if (total_transmit_rate.is_set || is_set(total_transmit_rate.yfilter)) leaf_name_data.push_back(total_transmit_rate.get_name_leafdata());
    if (pre_policy_matched_packets.is_set || is_set(pre_policy_matched_packets.yfilter)) leaf_name_data.push_back(pre_policy_matched_packets.get_name_leafdata());
    if (pre_policy_matched_bytes.is_set || is_set(pre_policy_matched_bytes.yfilter)) leaf_name_data.push_back(pre_policy_matched_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets = value;
        transmit_packets.value_namespace = name_space;
        transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes = value;
        transmit_bytes.value_namespace = name_space;
        transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets = value;
        total_drop_packets.value_namespace = name_space;
        total_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes = value;
        total_drop_bytes.value_namespace = name_space;
        total_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate = value;
        total_drop_rate.value_namespace = name_space;
        total_drop_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate = value;
        match_data_rate.value_namespace = name_space;
        match_data_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate = value;
        total_transmit_rate.value_namespace = name_space;
        total_transmit_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets = value;
        pre_policy_matched_packets.value_namespace = name_space;
        pre_policy_matched_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes = value;
        pre_policy_matched_bytes.value_namespace = name_space;
        pre_policy_matched_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets.yfilter = yfilter;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets.yfilter = yfilter;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate.yfilter = yfilter;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate.yfilter = yfilter;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "transmit-packets" || name == "transmit-bytes" || name == "total-drop-packets" || name == "total-drop-bytes" || name == "total-drop-rate" || name == "match-data-rate" || name == "total-transmit-rate" || name == "pre-policy-matched-packets" || name == "pre-policy-matched-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::IphcStats()
    :
    non_tcp_total_out_packets{YType::uint64, "non-tcp-total-out-packets"},
    non_tcp_total_out_bytes{YType::uint64, "non-tcp-total-out-bytes"},
    non_tcp_bytes_saved{YType::uint64, "non-tcp-bytes-saved"},
    non_tcp_compressed_packets_out{YType::uint64, "non-tcp-compressed-packets-out"},
    non_tcp_bytes_sent_rate{YType::uint32, "non-tcp-bytes-sent-rate"},
    non_tcp_full_header_packets_out{YType::uint64, "non-tcp-full-header-packets-out"},
    tcp_total_out_packets{YType::uint64, "tcp-total-out-packets"},
    tcp_total_out_bytes{YType::uint64, "tcp-total-out-bytes"},
    tcp_bytes_saved{YType::uint64, "tcp-bytes-saved"},
    tcp_compressed_packets_out{YType::uint64, "tcp-compressed-packets-out"},
    tcp_bytes_sent_rate{YType::uint32, "tcp-bytes-sent-rate"},
    tcp_full_header_packets_out{YType::uint64, "tcp-full-header-packets-out"}
{

    yang_name = "iphc-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::~IphcStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_data() const
{
    return non_tcp_total_out_packets.is_set
	|| non_tcp_total_out_bytes.is_set
	|| non_tcp_bytes_saved.is_set
	|| non_tcp_compressed_packets_out.is_set
	|| non_tcp_bytes_sent_rate.is_set
	|| non_tcp_full_header_packets_out.is_set
	|| tcp_total_out_packets.is_set
	|| tcp_total_out_bytes.is_set
	|| tcp_bytes_saved.is_set
	|| tcp_compressed_packets_out.is_set
	|| tcp_bytes_sent_rate.is_set
	|| tcp_full_header_packets_out.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(non_tcp_total_out_packets.yfilter)
	|| ydk::is_set(non_tcp_total_out_bytes.yfilter)
	|| ydk::is_set(non_tcp_bytes_saved.yfilter)
	|| ydk::is_set(non_tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(non_tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(non_tcp_full_header_packets_out.yfilter)
	|| ydk::is_set(tcp_total_out_packets.yfilter)
	|| ydk::is_set(tcp_total_out_bytes.yfilter)
	|| ydk::is_set(tcp_bytes_saved.yfilter)
	|| ydk::is_set(tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(tcp_full_header_packets_out.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "iphc-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (non_tcp_total_out_packets.is_set || is_set(non_tcp_total_out_packets.yfilter)) leaf_name_data.push_back(non_tcp_total_out_packets.get_name_leafdata());
    if (non_tcp_total_out_bytes.is_set || is_set(non_tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(non_tcp_total_out_bytes.get_name_leafdata());
    if (non_tcp_bytes_saved.is_set || is_set(non_tcp_bytes_saved.yfilter)) leaf_name_data.push_back(non_tcp_bytes_saved.get_name_leafdata());
    if (non_tcp_compressed_packets_out.is_set || is_set(non_tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_compressed_packets_out.get_name_leafdata());
    if (non_tcp_bytes_sent_rate.is_set || is_set(non_tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(non_tcp_bytes_sent_rate.get_name_leafdata());
    if (non_tcp_full_header_packets_out.is_set || is_set(non_tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_full_header_packets_out.get_name_leafdata());
    if (tcp_total_out_packets.is_set || is_set(tcp_total_out_packets.yfilter)) leaf_name_data.push_back(tcp_total_out_packets.get_name_leafdata());
    if (tcp_total_out_bytes.is_set || is_set(tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(tcp_total_out_bytes.get_name_leafdata());
    if (tcp_bytes_saved.is_set || is_set(tcp_bytes_saved.yfilter)) leaf_name_data.push_back(tcp_bytes_saved.get_name_leafdata());
    if (tcp_compressed_packets_out.is_set || is_set(tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(tcp_compressed_packets_out.get_name_leafdata());
    if (tcp_bytes_sent_rate.is_set || is_set(tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(tcp_bytes_sent_rate.get_name_leafdata());
    if (tcp_full_header_packets_out.is_set || is_set(tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(tcp_full_header_packets_out.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets = value;
        non_tcp_total_out_packets.value_namespace = name_space;
        non_tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes = value;
        non_tcp_total_out_bytes.value_namespace = name_space;
        non_tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved = value;
        non_tcp_bytes_saved.value_namespace = name_space;
        non_tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out = value;
        non_tcp_compressed_packets_out.value_namespace = name_space;
        non_tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate = value;
        non_tcp_bytes_sent_rate.value_namespace = name_space;
        non_tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out = value;
        non_tcp_full_header_packets_out.value_namespace = name_space;
        non_tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets = value;
        tcp_total_out_packets.value_namespace = name_space;
        tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes = value;
        tcp_total_out_bytes.value_namespace = name_space;
        tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved = value;
        tcp_bytes_saved.value_namespace = name_space;
        tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out = value;
        tcp_compressed_packets_out.value_namespace = name_space;
        tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate = value;
        tcp_bytes_sent_rate.value_namespace = name_space;
        tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out = value;
        tcp_full_header_packets_out.value_namespace = name_space;
        tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "non-tcp-total-out-packets" || name == "non-tcp-total-out-bytes" || name == "non-tcp-bytes-saved" || name == "non-tcp-compressed-packets-out" || name == "non-tcp-bytes-sent-rate" || name == "non-tcp-full-header-packets-out" || name == "tcp-total-out-packets" || name == "tcp-total-out-bytes" || name == "tcp-bytes-saved" || name == "tcp-compressed-packets-out" || name == "tcp-bytes-sent-rate" || name == "tcp-full-header-packets-out")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ChildPolicy()
    :
    policy_name{YType::str, "policy-name"},
    state{YType::enumeration, "state"},
    state_description{YType::str, "state-description"},
    satid{YType::uint32, "satid"}
{

    yang_name = "child-policy"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::~ChildPolicy()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_data() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_data())
            return true;
    }
    return policy_name.is_set
	|| state.is_set
	|| state_description.is_set
	|| satid.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_operation() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(policy_name.yfilter)
	|| ydk::is_set(state.yfilter)
	|| ydk::is_set(state_description.yfilter)
	|| ydk::is_set(satid.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "child-policy";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (policy_name.is_set || is_set(policy_name.yfilter)) leaf_name_data.push_back(policy_name.get_name_leafdata());
    if (state.is_set || is_set(state.yfilter)) leaf_name_data.push_back(state.get_name_leafdata());
    if (state_description.is_set || is_set(state_description.yfilter)) leaf_name_data.push_back(state_description.get_name_leafdata());
    if (satid.is_set || is_set(satid.yfilter)) leaf_name_data.push_back(satid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "class-stats")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_>();
        c->parent = this;
        class_stats.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : class_stats)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "policy-name")
    {
        policy_name = value;
        policy_name.value_namespace = name_space;
        policy_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state")
    {
        state = value;
        state.value_namespace = name_space;
        state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state-description")
    {
        state_description = value;
        state_description.value_namespace = name_space;
        state_description.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "satid")
    {
        satid = value;
        satid.value_namespace = name_space;
        satid.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "policy-name")
    {
        policy_name.yfilter = yfilter;
    }
    if(value_path == "state")
    {
        state.yfilter = yfilter;
    }
    if(value_path == "state-description")
    {
        state_description.yfilter = yfilter;
    }
    if(value_path == "satid")
    {
        satid.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "class-stats" || name == "policy-name" || name == "state" || name == "state-description" || name == "satid")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::ClassStats_()
    :
    counter_validity_bitmask{YType::uint64, "counter-validity-bitmask"},
    class_name{YType::str, "class-name"},
    shared_queue_id{YType::uint32, "shared-queue-id"},
    queue_descr{YType::str, "queue-descr"},
    cac_state{YType::enumeration, "cac-state"}
    	,
    general_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats>())
	,iphc_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats>())
	,cac_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats>())
{
    general_stats->parent = this;
    iphc_stats->parent = this;
    cac_stats->parent = this;

    yang_name = "class-stats"; yang_parent_name = "child-policy"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::~ClassStats_()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_data() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_data())
            return true;
    }
    return counter_validity_bitmask.is_set
	|| class_name.is_set
	|| shared_queue_id.is_set
	|| queue_descr.is_set
	|| cac_state.is_set
	|| (general_stats !=  nullptr && general_stats->has_data())
	|| (iphc_stats !=  nullptr && iphc_stats->has_data())
	|| (cac_stats !=  nullptr && cac_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_operation() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(counter_validity_bitmask.yfilter)
	|| ydk::is_set(class_name.yfilter)
	|| ydk::is_set(shared_queue_id.yfilter)
	|| ydk::is_set(queue_descr.yfilter)
	|| ydk::is_set(cac_state.yfilter)
	|| (general_stats !=  nullptr && general_stats->has_operation())
	|| (iphc_stats !=  nullptr && iphc_stats->has_operation())
	|| (cac_stats !=  nullptr && cac_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (counter_validity_bitmask.is_set || is_set(counter_validity_bitmask.yfilter)) leaf_name_data.push_back(counter_validity_bitmask.get_name_leafdata());
    if (class_name.is_set || is_set(class_name.yfilter)) leaf_name_data.push_back(class_name.get_name_leafdata());
    if (shared_queue_id.is_set || is_set(shared_queue_id.yfilter)) leaf_name_data.push_back(shared_queue_id.get_name_leafdata());
    if (queue_descr.is_set || is_set(queue_descr.yfilter)) leaf_name_data.push_back(queue_descr.get_name_leafdata());
    if (cac_state.is_set || is_set(cac_state.yfilter)) leaf_name_data.push_back(cac_state.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "general-stats")
    {
        if(general_stats == nullptr)
        {
            general_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats>();
        }
        return general_stats;
    }

    if(child_yang_name == "iphc-stats")
    {
        if(iphc_stats == nullptr)
        {
            iphc_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats>();
        }
        return iphc_stats;
    }

    if(child_yang_name == "cac-stats")
    {
        if(cac_stats == nullptr)
        {
            cac_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats>();
        }
        return cac_stats;
    }

    if(child_yang_name == "queue-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray>();
        c->parent = this;
        queue_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "police-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray>();
        c->parent = this;
        police_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "wred-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray>();
        c->parent = this;
        wred_stats_array.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(general_stats != nullptr)
    {
        children["general-stats"] = general_stats;
    }

    if(iphc_stats != nullptr)
    {
        children["iphc-stats"] = iphc_stats;
    }

    if(cac_stats != nullptr)
    {
        children["cac-stats"] = cac_stats;
    }

    count = 0;
    for (auto const & c : queue_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : police_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : wred_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask = value;
        counter_validity_bitmask.value_namespace = name_space;
        counter_validity_bitmask.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "class-name")
    {
        class_name = value;
        class_name.value_namespace = name_space;
        class_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id = value;
        shared_queue_id.value_namespace = name_space;
        shared_queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-descr")
    {
        queue_descr = value;
        queue_descr.value_namespace = name_space;
        queue_descr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cac-state")
    {
        cac_state = value;
        cac_state.value_namespace = name_space;
        cac_state.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask.yfilter = yfilter;
    }
    if(value_path == "class-name")
    {
        class_name.yfilter = yfilter;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id.yfilter = yfilter;
    }
    if(value_path == "queue-descr")
    {
        queue_descr.yfilter = yfilter;
    }
    if(value_path == "cac-state")
    {
        cac_state.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "general-stats" || name == "iphc-stats" || name == "cac-stats" || name == "queue-stats-array" || name == "police-stats-array" || name == "wred-stats-array" || name == "counter-validity-bitmask" || name == "class-name" || name == "shared-queue-id" || name == "queue-descr" || name == "cac-state")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::GeneralStats()
    :
    transmit_packets{YType::uint64, "transmit-packets"},
    transmit_bytes{YType::uint64, "transmit-bytes"},
    total_drop_packets{YType::uint64, "total-drop-packets"},
    total_drop_bytes{YType::uint64, "total-drop-bytes"},
    total_drop_rate{YType::uint32, "total-drop-rate"},
    match_data_rate{YType::uint32, "match-data-rate"},
    total_transmit_rate{YType::uint32, "total-transmit-rate"},
    pre_policy_matched_packets{YType::uint64, "pre-policy-matched-packets"},
    pre_policy_matched_bytes{YType::uint64, "pre-policy-matched-bytes"}
{

    yang_name = "general-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::~GeneralStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_data() const
{
    return transmit_packets.is_set
	|| transmit_bytes.is_set
	|| total_drop_packets.is_set
	|| total_drop_bytes.is_set
	|| total_drop_rate.is_set
	|| match_data_rate.is_set
	|| total_transmit_rate.is_set
	|| pre_policy_matched_packets.is_set
	|| pre_policy_matched_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(transmit_packets.yfilter)
	|| ydk::is_set(transmit_bytes.yfilter)
	|| ydk::is_set(total_drop_packets.yfilter)
	|| ydk::is_set(total_drop_bytes.yfilter)
	|| ydk::is_set(total_drop_rate.yfilter)
	|| ydk::is_set(match_data_rate.yfilter)
	|| ydk::is_set(total_transmit_rate.yfilter)
	|| ydk::is_set(pre_policy_matched_packets.yfilter)
	|| ydk::is_set(pre_policy_matched_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "general-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (transmit_packets.is_set || is_set(transmit_packets.yfilter)) leaf_name_data.push_back(transmit_packets.get_name_leafdata());
    if (transmit_bytes.is_set || is_set(transmit_bytes.yfilter)) leaf_name_data.push_back(transmit_bytes.get_name_leafdata());
    if (total_drop_packets.is_set || is_set(total_drop_packets.yfilter)) leaf_name_data.push_back(total_drop_packets.get_name_leafdata());
    if (total_drop_bytes.is_set || is_set(total_drop_bytes.yfilter)) leaf_name_data.push_back(total_drop_bytes.get_name_leafdata());
    if (total_drop_rate.is_set || is_set(total_drop_rate.yfilter)) leaf_name_data.push_back(total_drop_rate.get_name_leafdata());
    if (match_data_rate.is_set || is_set(match_data_rate.yfilter)) leaf_name_data.push_back(match_data_rate.get_name_leafdata());
    if (total_transmit_rate.is_set || is_set(total_transmit_rate.yfilter)) leaf_name_data.push_back(total_transmit_rate.get_name_leafdata());
    if (pre_policy_matched_packets.is_set || is_set(pre_policy_matched_packets.yfilter)) leaf_name_data.push_back(pre_policy_matched_packets.get_name_leafdata());
    if (pre_policy_matched_bytes.is_set || is_set(pre_policy_matched_bytes.yfilter)) leaf_name_data.push_back(pre_policy_matched_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets = value;
        transmit_packets.value_namespace = name_space;
        transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes = value;
        transmit_bytes.value_namespace = name_space;
        transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets = value;
        total_drop_packets.value_namespace = name_space;
        total_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes = value;
        total_drop_bytes.value_namespace = name_space;
        total_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate = value;
        total_drop_rate.value_namespace = name_space;
        total_drop_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate = value;
        match_data_rate.value_namespace = name_space;
        match_data_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate = value;
        total_transmit_rate.value_namespace = name_space;
        total_transmit_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets = value;
        pre_policy_matched_packets.value_namespace = name_space;
        pre_policy_matched_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes = value;
        pre_policy_matched_bytes.value_namespace = name_space;
        pre_policy_matched_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets.yfilter = yfilter;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets.yfilter = yfilter;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate.yfilter = yfilter;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate.yfilter = yfilter;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "transmit-packets" || name == "transmit-bytes" || name == "total-drop-packets" || name == "total-drop-bytes" || name == "total-drop-rate" || name == "match-data-rate" || name == "total-transmit-rate" || name == "pre-policy-matched-packets" || name == "pre-policy-matched-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::IphcStats()
    :
    non_tcp_total_out_packets{YType::uint64, "non-tcp-total-out-packets"},
    non_tcp_total_out_bytes{YType::uint64, "non-tcp-total-out-bytes"},
    non_tcp_bytes_saved{YType::uint64, "non-tcp-bytes-saved"},
    non_tcp_compressed_packets_out{YType::uint64, "non-tcp-compressed-packets-out"},
    non_tcp_bytes_sent_rate{YType::uint32, "non-tcp-bytes-sent-rate"},
    non_tcp_full_header_packets_out{YType::uint64, "non-tcp-full-header-packets-out"},
    tcp_total_out_packets{YType::uint64, "tcp-total-out-packets"},
    tcp_total_out_bytes{YType::uint64, "tcp-total-out-bytes"},
    tcp_bytes_saved{YType::uint64, "tcp-bytes-saved"},
    tcp_compressed_packets_out{YType::uint64, "tcp-compressed-packets-out"},
    tcp_bytes_sent_rate{YType::uint32, "tcp-bytes-sent-rate"},
    tcp_full_header_packets_out{YType::uint64, "tcp-full-header-packets-out"}
{

    yang_name = "iphc-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::~IphcStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_data() const
{
    return non_tcp_total_out_packets.is_set
	|| non_tcp_total_out_bytes.is_set
	|| non_tcp_bytes_saved.is_set
	|| non_tcp_compressed_packets_out.is_set
	|| non_tcp_bytes_sent_rate.is_set
	|| non_tcp_full_header_packets_out.is_set
	|| tcp_total_out_packets.is_set
	|| tcp_total_out_bytes.is_set
	|| tcp_bytes_saved.is_set
	|| tcp_compressed_packets_out.is_set
	|| tcp_bytes_sent_rate.is_set
	|| tcp_full_header_packets_out.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(non_tcp_total_out_packets.yfilter)
	|| ydk::is_set(non_tcp_total_out_bytes.yfilter)
	|| ydk::is_set(non_tcp_bytes_saved.yfilter)
	|| ydk::is_set(non_tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(non_tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(non_tcp_full_header_packets_out.yfilter)
	|| ydk::is_set(tcp_total_out_packets.yfilter)
	|| ydk::is_set(tcp_total_out_bytes.yfilter)
	|| ydk::is_set(tcp_bytes_saved.yfilter)
	|| ydk::is_set(tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(tcp_full_header_packets_out.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "iphc-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (non_tcp_total_out_packets.is_set || is_set(non_tcp_total_out_packets.yfilter)) leaf_name_data.push_back(non_tcp_total_out_packets.get_name_leafdata());
    if (non_tcp_total_out_bytes.is_set || is_set(non_tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(non_tcp_total_out_bytes.get_name_leafdata());
    if (non_tcp_bytes_saved.is_set || is_set(non_tcp_bytes_saved.yfilter)) leaf_name_data.push_back(non_tcp_bytes_saved.get_name_leafdata());
    if (non_tcp_compressed_packets_out.is_set || is_set(non_tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_compressed_packets_out.get_name_leafdata());
    if (non_tcp_bytes_sent_rate.is_set || is_set(non_tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(non_tcp_bytes_sent_rate.get_name_leafdata());
    if (non_tcp_full_header_packets_out.is_set || is_set(non_tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_full_header_packets_out.get_name_leafdata());
    if (tcp_total_out_packets.is_set || is_set(tcp_total_out_packets.yfilter)) leaf_name_data.push_back(tcp_total_out_packets.get_name_leafdata());
    if (tcp_total_out_bytes.is_set || is_set(tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(tcp_total_out_bytes.get_name_leafdata());
    if (tcp_bytes_saved.is_set || is_set(tcp_bytes_saved.yfilter)) leaf_name_data.push_back(tcp_bytes_saved.get_name_leafdata());
    if (tcp_compressed_packets_out.is_set || is_set(tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(tcp_compressed_packets_out.get_name_leafdata());
    if (tcp_bytes_sent_rate.is_set || is_set(tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(tcp_bytes_sent_rate.get_name_leafdata());
    if (tcp_full_header_packets_out.is_set || is_set(tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(tcp_full_header_packets_out.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets = value;
        non_tcp_total_out_packets.value_namespace = name_space;
        non_tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes = value;
        non_tcp_total_out_bytes.value_namespace = name_space;
        non_tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved = value;
        non_tcp_bytes_saved.value_namespace = name_space;
        non_tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out = value;
        non_tcp_compressed_packets_out.value_namespace = name_space;
        non_tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate = value;
        non_tcp_bytes_sent_rate.value_namespace = name_space;
        non_tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out = value;
        non_tcp_full_header_packets_out.value_namespace = name_space;
        non_tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets = value;
        tcp_total_out_packets.value_namespace = name_space;
        tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes = value;
        tcp_total_out_bytes.value_namespace = name_space;
        tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved = value;
        tcp_bytes_saved.value_namespace = name_space;
        tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out = value;
        tcp_compressed_packets_out.value_namespace = name_space;
        tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate = value;
        tcp_bytes_sent_rate.value_namespace = name_space;
        tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out = value;
        tcp_full_header_packets_out.value_namespace = name_space;
        tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "non-tcp-total-out-packets" || name == "non-tcp-total-out-bytes" || name == "non-tcp-bytes-saved" || name == "non-tcp-compressed-packets-out" || name == "non-tcp-bytes-sent-rate" || name == "non-tcp-full-header-packets-out" || name == "tcp-total-out-packets" || name == "tcp-total-out-bytes" || name == "tcp-bytes-saved" || name == "tcp-compressed-packets-out" || name == "tcp-bytes-sent-rate" || name == "tcp-full-header-packets-out")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::CacStats()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    drop_rates{YType::uint32, "drop-rates"},
    admitpackets{YType::uint64, "admitpackets"},
    admit_bytes{YType::uint64, "admit-bytes"},
    admit_rates{YType::uint32, "admit-rates"}
{

    yang_name = "cac-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::~CacStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| drop_rates.is_set
	|| admitpackets.is_set
	|| admit_bytes.is_set
	|| admit_rates.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(drop_rates.yfilter)
	|| ydk::is_set(admitpackets.yfilter)
	|| ydk::is_set(admit_bytes.yfilter)
	|| ydk::is_set(admit_rates.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cac-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (drop_rates.is_set || is_set(drop_rates.yfilter)) leaf_name_data.push_back(drop_rates.get_name_leafdata());
    if (admitpackets.is_set || is_set(admitpackets.yfilter)) leaf_name_data.push_back(admitpackets.get_name_leafdata());
    if (admit_bytes.is_set || is_set(admit_bytes.yfilter)) leaf_name_data.push_back(admit_bytes.get_name_leafdata());
    if (admit_rates.is_set || is_set(admit_rates.yfilter)) leaf_name_data.push_back(admit_rates.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-rates")
    {
        drop_rates = value;
        drop_rates.value_namespace = name_space;
        drop_rates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admitpackets")
    {
        admitpackets = value;
        admitpackets.value_namespace = name_space;
        admitpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes = value;
        admit_bytes.value_namespace = name_space;
        admit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-rates")
    {
        admit_rates = value;
        admit_rates.value_namespace = name_space;
        admit_rates.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "drop-rates")
    {
        drop_rates.yfilter = yfilter;
    }
    if(value_path == "admitpackets")
    {
        admitpackets.yfilter = yfilter;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes.yfilter = yfilter;
    }
    if(value_path == "admit-rates")
    {
        admit_rates.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drop-packets" || name == "drop-bytes" || name == "drop-rates" || name == "admitpackets" || name == "admit-bytes" || name == "admit-rates")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueStatsArray()
    :
    queue_id{YType::uint32, "queue-id"},
    tail_drop_packets{YType::uint64, "tail-drop-packets"},
    tail_drop_bytes{YType::uint64, "tail-drop-bytes"},
    atm_clp0_drop_packets{YType::uint64, "atm-clp0-drop-packets"},
    atm_clp0_drop_bytes{YType::uint64, "atm-clp0-drop-bytes"},
    atm_clp1_drop_packets{YType::uint64, "atm-clp1-drop-packets"},
    atm_clp1_drop_bytes{YType::uint64, "atm-clp1-drop-bytes"},
    queue_drop_threshold{YType::uint32, "queue-drop-threshold"},
    forced_wred_stats_display{YType::boolean, "forced-wred-stats-display"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"}
{

    yang_name = "queue-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::~QueueStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_data() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_data())
            return true;
    }
    return queue_id.is_set
	|| tail_drop_packets.is_set
	|| tail_drop_bytes.is_set
	|| atm_clp0_drop_packets.is_set
	|| atm_clp0_drop_bytes.is_set
	|| atm_clp1_drop_packets.is_set
	|| atm_clp1_drop_bytes.is_set
	|| queue_drop_threshold.is_set
	|| forced_wred_stats_display.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_operation() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(queue_id.yfilter)
	|| ydk::is_set(tail_drop_packets.yfilter)
	|| ydk::is_set(tail_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp0_drop_packets.yfilter)
	|| ydk::is_set(atm_clp0_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp1_drop_packets.yfilter)
	|| ydk::is_set(atm_clp1_drop_bytes.yfilter)
	|| ydk::is_set(queue_drop_threshold.yfilter)
	|| ydk::is_set(forced_wred_stats_display.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (queue_id.is_set || is_set(queue_id.yfilter)) leaf_name_data.push_back(queue_id.get_name_leafdata());
    if (tail_drop_packets.is_set || is_set(tail_drop_packets.yfilter)) leaf_name_data.push_back(tail_drop_packets.get_name_leafdata());
    if (tail_drop_bytes.is_set || is_set(tail_drop_bytes.yfilter)) leaf_name_data.push_back(tail_drop_bytes.get_name_leafdata());
    if (atm_clp0_drop_packets.is_set || is_set(atm_clp0_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp0_drop_packets.get_name_leafdata());
    if (atm_clp0_drop_bytes.is_set || is_set(atm_clp0_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp0_drop_bytes.get_name_leafdata());
    if (atm_clp1_drop_packets.is_set || is_set(atm_clp1_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp1_drop_packets.get_name_leafdata());
    if (atm_clp1_drop_bytes.is_set || is_set(atm_clp1_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp1_drop_bytes.get_name_leafdata());
    if (queue_drop_threshold.is_set || is_set(queue_drop_threshold.yfilter)) leaf_name_data.push_back(queue_drop_threshold.get_name_leafdata());
    if (forced_wred_stats_display.is_set || is_set(forced_wred_stats_display.yfilter)) leaf_name_data.push_back(forced_wred_stats_display.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "queue-instance-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength>();
        c->parent = this;
        queue_instance_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-average-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength>();
        c->parent = this;
        queue_average_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-max-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength>();
        c->parent = this;
        queue_max_length.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : queue_instance_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_average_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_max_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "queue-id")
    {
        queue_id = value;
        queue_id.value_namespace = name_space;
        queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets = value;
        tail_drop_packets.value_namespace = name_space;
        tail_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes = value;
        tail_drop_bytes.value_namespace = name_space;
        tail_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets = value;
        atm_clp0_drop_packets.value_namespace = name_space;
        atm_clp0_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes = value;
        atm_clp0_drop_bytes.value_namespace = name_space;
        atm_clp0_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets = value;
        atm_clp1_drop_packets.value_namespace = name_space;
        atm_clp1_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes = value;
        atm_clp1_drop_bytes.value_namespace = name_space;
        atm_clp1_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold = value;
        queue_drop_threshold.value_namespace = name_space;
        queue_drop_threshold.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display = value;
        forced_wred_stats_display.value_namespace = name_space;
        forced_wred_stats_display.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "queue-id")
    {
        queue_id.yfilter = yfilter;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets.yfilter = yfilter;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold.yfilter = yfilter;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "queue-instance-length" || name == "queue-average-length" || name == "queue-max-length" || name == "queue-id" || name == "tail-drop-packets" || name == "tail-drop-bytes" || name == "atm-clp0-drop-packets" || name == "atm-clp0-drop-bytes" || name == "atm-clp1-drop-packets" || name == "atm-clp1-drop-bytes" || name == "queue-drop-threshold" || name == "forced-wred-stats-display" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "conform-rate" || name == "exceed-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::QueueInstanceLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-instance-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::~QueueInstanceLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-instance-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::QueueAverageLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-average-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::~QueueAverageLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-average-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::QueueMaxLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-max-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::~QueueMaxLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-max-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::PoliceStatsArray()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    violate_packets{YType::uint64, "violate-packets"},
    violate_bytes{YType::uint64, "violate-bytes"},
    parent_drop_packets{YType::uint64, "parent-drop-packets"},
    parent_drop_bytes{YType::uint64, "parent-drop-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"},
    violate_rate{YType::uint32, "violate-rate"}
    	,
    color_class_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats>())
{
    color_class_stats->parent = this;

    yang_name = "police-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::~PoliceStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| violate_packets.is_set
	|| violate_bytes.is_set
	|| parent_drop_packets.is_set
	|| parent_drop_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set
	|| violate_rate.is_set
	|| (color_class_stats !=  nullptr && color_class_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(violate_packets.yfilter)
	|| ydk::is_set(violate_bytes.yfilter)
	|| ydk::is_set(parent_drop_packets.yfilter)
	|| ydk::is_set(parent_drop_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter)
	|| ydk::is_set(violate_rate.yfilter)
	|| (color_class_stats !=  nullptr && color_class_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "police-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (violate_packets.is_set || is_set(violate_packets.yfilter)) leaf_name_data.push_back(violate_packets.get_name_leafdata());
    if (violate_bytes.is_set || is_set(violate_bytes.yfilter)) leaf_name_data.push_back(violate_bytes.get_name_leafdata());
    if (parent_drop_packets.is_set || is_set(parent_drop_packets.yfilter)) leaf_name_data.push_back(parent_drop_packets.get_name_leafdata());
    if (parent_drop_bytes.is_set || is_set(parent_drop_bytes.yfilter)) leaf_name_data.push_back(parent_drop_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());
    if (violate_rate.is_set || is_set(violate_rate.yfilter)) leaf_name_data.push_back(violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "color-class-stats")
    {
        if(color_class_stats == nullptr)
        {
            color_class_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats>();
        }
        return color_class_stats;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(color_class_stats != nullptr)
    {
        children["color-class-stats"] = color_class_stats;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-packets")
    {
        violate_packets = value;
        violate_packets.value_namespace = name_space;
        violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes = value;
        violate_bytes.value_namespace = name_space;
        violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets = value;
        parent_drop_packets.value_namespace = name_space;
        parent_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes = value;
        parent_drop_bytes.value_namespace = name_space;
        parent_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-rate")
    {
        violate_rate = value;
        violate_rate.value_namespace = name_space;
        violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-packets")
    {
        violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes.yfilter = yfilter;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets.yfilter = yfilter;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
    if(value_path == "violate-rate")
    {
        violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "color-class-stats" || name == "drop-packets" || name == "drop-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "violate-packets" || name == "violate-bytes" || name == "parent-drop-packets" || name == "parent-drop-bytes" || name == "conform-rate" || name == "exceed-rate" || name == "violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::ColorClassStats()
    :
    conform_class_conform_packets{YType::uint64, "conform-class-conform-packets"},
    conform_class_conform_bytes{YType::uint64, "conform-class-conform-bytes"},
    conform_class_conform_rate{YType::uint32, "conform-class-conform-rate"},
    conform_class_exceed_packets{YType::uint64, "conform-class-exceed-packets"},
    conform_class_exceed_bytes{YType::uint64, "conform-class-exceed-bytes"},
    conform_class_exceed_rate{YType::uint32, "conform-class-exceed-rate"},
    conform_class_violate_packets{YType::uint64, "conform-class-violate-packets"},
    conform_class_violate_bytes{YType::uint64, "conform-class-violate-bytes"},
    conform_class_violate_rate{YType::uint32, "conform-class-violate-rate"},
    exceed_class_exceed_packets{YType::uint64, "exceed-class-exceed-packets"},
    exceed_class_exceed_bytes{YType::uint64, "exceed-class-exceed-bytes"},
    exceed_class_exceed_rate{YType::uint32, "exceed-class-exceed-rate"},
    exceed_class_violate_packets{YType::uint64, "exceed-class-violate-packets"},
    exceed_class_violate_bytes{YType::uint64, "exceed-class-violate-bytes"},
    exceed_class_violate_rate{YType::uint32, "exceed-class-violate-rate"},
    violate_class_violate_packets{YType::uint64, "violate-class-violate-packets"},
    violate_class_violate_bytes{YType::uint64, "violate-class-violate-bytes"},
    violate_class_violate_rate{YType::uint32, "violate-class-violate-rate"}
{

    yang_name = "color-class-stats"; yang_parent_name = "police-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::~ColorClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_data() const
{
    return conform_class_conform_packets.is_set
	|| conform_class_conform_bytes.is_set
	|| conform_class_conform_rate.is_set
	|| conform_class_exceed_packets.is_set
	|| conform_class_exceed_bytes.is_set
	|| conform_class_exceed_rate.is_set
	|| conform_class_violate_packets.is_set
	|| conform_class_violate_bytes.is_set
	|| conform_class_violate_rate.is_set
	|| exceed_class_exceed_packets.is_set
	|| exceed_class_exceed_bytes.is_set
	|| exceed_class_exceed_rate.is_set
	|| exceed_class_violate_packets.is_set
	|| exceed_class_violate_bytes.is_set
	|| exceed_class_violate_rate.is_set
	|| violate_class_violate_packets.is_set
	|| violate_class_violate_bytes.is_set
	|| violate_class_violate_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(conform_class_conform_packets.yfilter)
	|| ydk::is_set(conform_class_conform_bytes.yfilter)
	|| ydk::is_set(conform_class_conform_rate.yfilter)
	|| ydk::is_set(conform_class_exceed_packets.yfilter)
	|| ydk::is_set(conform_class_exceed_bytes.yfilter)
	|| ydk::is_set(conform_class_exceed_rate.yfilter)
	|| ydk::is_set(conform_class_violate_packets.yfilter)
	|| ydk::is_set(conform_class_violate_bytes.yfilter)
	|| ydk::is_set(conform_class_violate_rate.yfilter)
	|| ydk::is_set(exceed_class_exceed_packets.yfilter)
	|| ydk::is_set(exceed_class_exceed_bytes.yfilter)
	|| ydk::is_set(exceed_class_exceed_rate.yfilter)
	|| ydk::is_set(exceed_class_violate_packets.yfilter)
	|| ydk::is_set(exceed_class_violate_bytes.yfilter)
	|| ydk::is_set(exceed_class_violate_rate.yfilter)
	|| ydk::is_set(violate_class_violate_packets.yfilter)
	|| ydk::is_set(violate_class_violate_bytes.yfilter)
	|| ydk::is_set(violate_class_violate_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "color-class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (conform_class_conform_packets.is_set || is_set(conform_class_conform_packets.yfilter)) leaf_name_data.push_back(conform_class_conform_packets.get_name_leafdata());
    if (conform_class_conform_bytes.is_set || is_set(conform_class_conform_bytes.yfilter)) leaf_name_data.push_back(conform_class_conform_bytes.get_name_leafdata());
    if (conform_class_conform_rate.is_set || is_set(conform_class_conform_rate.yfilter)) leaf_name_data.push_back(conform_class_conform_rate.get_name_leafdata());
    if (conform_class_exceed_packets.is_set || is_set(conform_class_exceed_packets.yfilter)) leaf_name_data.push_back(conform_class_exceed_packets.get_name_leafdata());
    if (conform_class_exceed_bytes.is_set || is_set(conform_class_exceed_bytes.yfilter)) leaf_name_data.push_back(conform_class_exceed_bytes.get_name_leafdata());
    if (conform_class_exceed_rate.is_set || is_set(conform_class_exceed_rate.yfilter)) leaf_name_data.push_back(conform_class_exceed_rate.get_name_leafdata());
    if (conform_class_violate_packets.is_set || is_set(conform_class_violate_packets.yfilter)) leaf_name_data.push_back(conform_class_violate_packets.get_name_leafdata());
    if (conform_class_violate_bytes.is_set || is_set(conform_class_violate_bytes.yfilter)) leaf_name_data.push_back(conform_class_violate_bytes.get_name_leafdata());
    if (conform_class_violate_rate.is_set || is_set(conform_class_violate_rate.yfilter)) leaf_name_data.push_back(conform_class_violate_rate.get_name_leafdata());
    if (exceed_class_exceed_packets.is_set || is_set(exceed_class_exceed_packets.yfilter)) leaf_name_data.push_back(exceed_class_exceed_packets.get_name_leafdata());
    if (exceed_class_exceed_bytes.is_set || is_set(exceed_class_exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_class_exceed_bytes.get_name_leafdata());
    if (exceed_class_exceed_rate.is_set || is_set(exceed_class_exceed_rate.yfilter)) leaf_name_data.push_back(exceed_class_exceed_rate.get_name_leafdata());
    if (exceed_class_violate_packets.is_set || is_set(exceed_class_violate_packets.yfilter)) leaf_name_data.push_back(exceed_class_violate_packets.get_name_leafdata());
    if (exceed_class_violate_bytes.is_set || is_set(exceed_class_violate_bytes.yfilter)) leaf_name_data.push_back(exceed_class_violate_bytes.get_name_leafdata());
    if (exceed_class_violate_rate.is_set || is_set(exceed_class_violate_rate.yfilter)) leaf_name_data.push_back(exceed_class_violate_rate.get_name_leafdata());
    if (violate_class_violate_packets.is_set || is_set(violate_class_violate_packets.yfilter)) leaf_name_data.push_back(violate_class_violate_packets.get_name_leafdata());
    if (violate_class_violate_bytes.is_set || is_set(violate_class_violate_bytes.yfilter)) leaf_name_data.push_back(violate_class_violate_bytes.get_name_leafdata());
    if (violate_class_violate_rate.is_set || is_set(violate_class_violate_rate.yfilter)) leaf_name_data.push_back(violate_class_violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets = value;
        conform_class_conform_packets.value_namespace = name_space;
        conform_class_conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes = value;
        conform_class_conform_bytes.value_namespace = name_space;
        conform_class_conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate = value;
        conform_class_conform_rate.value_namespace = name_space;
        conform_class_conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets = value;
        conform_class_exceed_packets.value_namespace = name_space;
        conform_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes = value;
        conform_class_exceed_bytes.value_namespace = name_space;
        conform_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate = value;
        conform_class_exceed_rate.value_namespace = name_space;
        conform_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets = value;
        conform_class_violate_packets.value_namespace = name_space;
        conform_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes = value;
        conform_class_violate_bytes.value_namespace = name_space;
        conform_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate = value;
        conform_class_violate_rate.value_namespace = name_space;
        conform_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets = value;
        exceed_class_exceed_packets.value_namespace = name_space;
        exceed_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes = value;
        exceed_class_exceed_bytes.value_namespace = name_space;
        exceed_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate = value;
        exceed_class_exceed_rate.value_namespace = name_space;
        exceed_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets = value;
        exceed_class_violate_packets.value_namespace = name_space;
        exceed_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes = value;
        exceed_class_violate_bytes.value_namespace = name_space;
        exceed_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate = value;
        exceed_class_violate_rate.value_namespace = name_space;
        exceed_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets = value;
        violate_class_violate_packets.value_namespace = name_space;
        violate_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes = value;
        violate_class_violate_bytes.value_namespace = name_space;
        violate_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate = value;
        violate_class_violate_rate.value_namespace = name_space;
        violate_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "conform-class-conform-packets" || name == "conform-class-conform-bytes" || name == "conform-class-conform-rate" || name == "conform-class-exceed-packets" || name == "conform-class-exceed-bytes" || name == "conform-class-exceed-rate" || name == "conform-class-violate-packets" || name == "conform-class-violate-bytes" || name == "conform-class-violate-rate" || name == "exceed-class-exceed-packets" || name == "exceed-class-exceed-bytes" || name == "exceed-class-exceed-rate" || name == "exceed-class-violate-packets" || name == "exceed-class-violate-bytes" || name == "exceed-class-violate-rate" || name == "violate-class-violate-packets" || name == "violate-class-violate-bytes" || name == "violate-class-violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::WredStatsArray()
    :
    profile_title{YType::str, "profile-title"},
    red_transmit_packets{YType::uint64, "red-transmit-packets"},
    red_transmit_bytes{YType::uint64, "red-transmit-bytes"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    red_ecn_marked_packets{YType::uint64, "red-ecn-marked-packets"},
    red_ecn_marked_bytes{YType::uint64, "red-ecn-marked-bytes"}
{

    yang_name = "wred-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::~WredStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_data() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_data())
            return true;
    }
    return profile_title.is_set
	|| red_transmit_packets.is_set
	|| red_transmit_bytes.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| red_ecn_marked_packets.is_set
	|| red_ecn_marked_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_operation() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(profile_title.yfilter)
	|| ydk::is_set(red_transmit_packets.yfilter)
	|| ydk::is_set(red_transmit_bytes.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(red_ecn_marked_packets.yfilter)
	|| ydk::is_set(red_ecn_marked_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "wred-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (profile_title.is_set || is_set(profile_title.yfilter)) leaf_name_data.push_back(profile_title.get_name_leafdata());
    if (red_transmit_packets.is_set || is_set(red_transmit_packets.yfilter)) leaf_name_data.push_back(red_transmit_packets.get_name_leafdata());
    if (red_transmit_bytes.is_set || is_set(red_transmit_bytes.yfilter)) leaf_name_data.push_back(red_transmit_bytes.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (red_ecn_marked_packets.is_set || is_set(red_ecn_marked_packets.yfilter)) leaf_name_data.push_back(red_ecn_marked_packets.get_name_leafdata());
    if (red_ecn_marked_bytes.is_set || is_set(red_ecn_marked_bytes.yfilter)) leaf_name_data.push_back(red_ecn_marked_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "red-label")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel>();
        c->parent = this;
        red_label.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : red_label)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "profile-title")
    {
        profile_title = value;
        profile_title.value_namespace = name_space;
        profile_title.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets = value;
        red_transmit_packets.value_namespace = name_space;
        red_transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes = value;
        red_transmit_bytes.value_namespace = name_space;
        red_transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets = value;
        red_ecn_marked_packets.value_namespace = name_space;
        red_ecn_marked_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes = value;
        red_ecn_marked_bytes.value_namespace = name_space;
        red_ecn_marked_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "profile-title")
    {
        profile_title.yfilter = yfilter;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets.yfilter = yfilter;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "red-label" || name == "profile-title" || name == "red-transmit-packets" || name == "red-transmit-bytes" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "red-ecn-marked-packets" || name == "red-ecn-marked-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::RedLabel()
    :
    wred_type{YType::enumeration, "wred-type"},
    value_{YType::uint8, "value"}
{

    yang_name = "red-label"; yang_parent_name = "wred-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::~RedLabel()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_data() const
{
    return wred_type.is_set
	|| value_.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(wred_type.yfilter)
	|| ydk::is_set(value_.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "red-label";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (wred_type.is_set || is_set(wred_type.yfilter)) leaf_name_data.push_back(wred_type.get_name_leafdata());
    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "wred-type")
    {
        wred_type = value;
        wred_type.value_namespace = name_space;
        wred_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "wred-type")
    {
        wred_type.yfilter = yfilter;
    }
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "wred-type" || name == "value")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::CacStats()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    drop_rates{YType::uint32, "drop-rates"},
    admitpackets{YType::uint64, "admitpackets"},
    admit_bytes{YType::uint64, "admit-bytes"},
    admit_rates{YType::uint32, "admit-rates"}
{

    yang_name = "cac-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::~CacStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| drop_rates.is_set
	|| admitpackets.is_set
	|| admit_bytes.is_set
	|| admit_rates.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(drop_rates.yfilter)
	|| ydk::is_set(admitpackets.yfilter)
	|| ydk::is_set(admit_bytes.yfilter)
	|| ydk::is_set(admit_rates.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cac-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (drop_rates.is_set || is_set(drop_rates.yfilter)) leaf_name_data.push_back(drop_rates.get_name_leafdata());
    if (admitpackets.is_set || is_set(admitpackets.yfilter)) leaf_name_data.push_back(admitpackets.get_name_leafdata());
    if (admit_bytes.is_set || is_set(admit_bytes.yfilter)) leaf_name_data.push_back(admit_bytes.get_name_leafdata());
    if (admit_rates.is_set || is_set(admit_rates.yfilter)) leaf_name_data.push_back(admit_rates.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-rates")
    {
        drop_rates = value;
        drop_rates.value_namespace = name_space;
        drop_rates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admitpackets")
    {
        admitpackets = value;
        admitpackets.value_namespace = name_space;
        admitpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes = value;
        admit_bytes.value_namespace = name_space;
        admit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-rates")
    {
        admit_rates = value;
        admit_rates.value_namespace = name_space;
        admit_rates.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "drop-rates")
    {
        drop_rates.yfilter = yfilter;
    }
    if(value_path == "admitpackets")
    {
        admitpackets.yfilter = yfilter;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes.yfilter = yfilter;
    }
    if(value_path == "admit-rates")
    {
        admit_rates.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drop-packets" || name == "drop-bytes" || name == "drop-rates" || name == "admitpackets" || name == "admit-bytes" || name == "admit-rates")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueStatsArray()
    :
    queue_id{YType::uint32, "queue-id"},
    tail_drop_packets{YType::uint64, "tail-drop-packets"},
    tail_drop_bytes{YType::uint64, "tail-drop-bytes"},
    atm_clp0_drop_packets{YType::uint64, "atm-clp0-drop-packets"},
    atm_clp0_drop_bytes{YType::uint64, "atm-clp0-drop-bytes"},
    atm_clp1_drop_packets{YType::uint64, "atm-clp1-drop-packets"},
    atm_clp1_drop_bytes{YType::uint64, "atm-clp1-drop-bytes"},
    queue_drop_threshold{YType::uint32, "queue-drop-threshold"},
    forced_wred_stats_display{YType::boolean, "forced-wred-stats-display"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"}
{

    yang_name = "queue-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::~QueueStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_data() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_data())
            return true;
    }
    return queue_id.is_set
	|| tail_drop_packets.is_set
	|| tail_drop_bytes.is_set
	|| atm_clp0_drop_packets.is_set
	|| atm_clp0_drop_bytes.is_set
	|| atm_clp1_drop_packets.is_set
	|| atm_clp1_drop_bytes.is_set
	|| queue_drop_threshold.is_set
	|| forced_wred_stats_display.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_operation() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(queue_id.yfilter)
	|| ydk::is_set(tail_drop_packets.yfilter)
	|| ydk::is_set(tail_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp0_drop_packets.yfilter)
	|| ydk::is_set(atm_clp0_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp1_drop_packets.yfilter)
	|| ydk::is_set(atm_clp1_drop_bytes.yfilter)
	|| ydk::is_set(queue_drop_threshold.yfilter)
	|| ydk::is_set(forced_wred_stats_display.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (queue_id.is_set || is_set(queue_id.yfilter)) leaf_name_data.push_back(queue_id.get_name_leafdata());
    if (tail_drop_packets.is_set || is_set(tail_drop_packets.yfilter)) leaf_name_data.push_back(tail_drop_packets.get_name_leafdata());
    if (tail_drop_bytes.is_set || is_set(tail_drop_bytes.yfilter)) leaf_name_data.push_back(tail_drop_bytes.get_name_leafdata());
    if (atm_clp0_drop_packets.is_set || is_set(atm_clp0_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp0_drop_packets.get_name_leafdata());
    if (atm_clp0_drop_bytes.is_set || is_set(atm_clp0_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp0_drop_bytes.get_name_leafdata());
    if (atm_clp1_drop_packets.is_set || is_set(atm_clp1_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp1_drop_packets.get_name_leafdata());
    if (atm_clp1_drop_bytes.is_set || is_set(atm_clp1_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp1_drop_bytes.get_name_leafdata());
    if (queue_drop_threshold.is_set || is_set(queue_drop_threshold.yfilter)) leaf_name_data.push_back(queue_drop_threshold.get_name_leafdata());
    if (forced_wred_stats_display.is_set || is_set(forced_wred_stats_display.yfilter)) leaf_name_data.push_back(forced_wred_stats_display.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "queue-instance-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength>();
        c->parent = this;
        queue_instance_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-average-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength>();
        c->parent = this;
        queue_average_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-max-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength>();
        c->parent = this;
        queue_max_length.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : queue_instance_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_average_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_max_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "queue-id")
    {
        queue_id = value;
        queue_id.value_namespace = name_space;
        queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets = value;
        tail_drop_packets.value_namespace = name_space;
        tail_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes = value;
        tail_drop_bytes.value_namespace = name_space;
        tail_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets = value;
        atm_clp0_drop_packets.value_namespace = name_space;
        atm_clp0_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes = value;
        atm_clp0_drop_bytes.value_namespace = name_space;
        atm_clp0_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets = value;
        atm_clp1_drop_packets.value_namespace = name_space;
        atm_clp1_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes = value;
        atm_clp1_drop_bytes.value_namespace = name_space;
        atm_clp1_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold = value;
        queue_drop_threshold.value_namespace = name_space;
        queue_drop_threshold.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display = value;
        forced_wred_stats_display.value_namespace = name_space;
        forced_wred_stats_display.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "queue-id")
    {
        queue_id.yfilter = yfilter;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets.yfilter = yfilter;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold.yfilter = yfilter;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "queue-instance-length" || name == "queue-average-length" || name == "queue-max-length" || name == "queue-id" || name == "tail-drop-packets" || name == "tail-drop-bytes" || name == "atm-clp0-drop-packets" || name == "atm-clp0-drop-bytes" || name == "atm-clp1-drop-packets" || name == "atm-clp1-drop-bytes" || name == "queue-drop-threshold" || name == "forced-wred-stats-display" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "conform-rate" || name == "exceed-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::QueueInstanceLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-instance-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::~QueueInstanceLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-instance-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::QueueAverageLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-average-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::~QueueAverageLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-average-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::QueueMaxLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-max-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::~QueueMaxLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-max-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::PoliceStatsArray()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    violate_packets{YType::uint64, "violate-packets"},
    violate_bytes{YType::uint64, "violate-bytes"},
    parent_drop_packets{YType::uint64, "parent-drop-packets"},
    parent_drop_bytes{YType::uint64, "parent-drop-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"},
    violate_rate{YType::uint32, "violate-rate"}
    	,
    color_class_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats>())
{
    color_class_stats->parent = this;

    yang_name = "police-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::~PoliceStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| violate_packets.is_set
	|| violate_bytes.is_set
	|| parent_drop_packets.is_set
	|| parent_drop_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set
	|| violate_rate.is_set
	|| (color_class_stats !=  nullptr && color_class_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(violate_packets.yfilter)
	|| ydk::is_set(violate_bytes.yfilter)
	|| ydk::is_set(parent_drop_packets.yfilter)
	|| ydk::is_set(parent_drop_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter)
	|| ydk::is_set(violate_rate.yfilter)
	|| (color_class_stats !=  nullptr && color_class_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "police-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (violate_packets.is_set || is_set(violate_packets.yfilter)) leaf_name_data.push_back(violate_packets.get_name_leafdata());
    if (violate_bytes.is_set || is_set(violate_bytes.yfilter)) leaf_name_data.push_back(violate_bytes.get_name_leafdata());
    if (parent_drop_packets.is_set || is_set(parent_drop_packets.yfilter)) leaf_name_data.push_back(parent_drop_packets.get_name_leafdata());
    if (parent_drop_bytes.is_set || is_set(parent_drop_bytes.yfilter)) leaf_name_data.push_back(parent_drop_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());
    if (violate_rate.is_set || is_set(violate_rate.yfilter)) leaf_name_data.push_back(violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "color-class-stats")
    {
        if(color_class_stats == nullptr)
        {
            color_class_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats>();
        }
        return color_class_stats;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(color_class_stats != nullptr)
    {
        children["color-class-stats"] = color_class_stats;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-packets")
    {
        violate_packets = value;
        violate_packets.value_namespace = name_space;
        violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes = value;
        violate_bytes.value_namespace = name_space;
        violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets = value;
        parent_drop_packets.value_namespace = name_space;
        parent_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes = value;
        parent_drop_bytes.value_namespace = name_space;
        parent_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-rate")
    {
        violate_rate = value;
        violate_rate.value_namespace = name_space;
        violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-packets")
    {
        violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes.yfilter = yfilter;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets.yfilter = yfilter;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
    if(value_path == "violate-rate")
    {
        violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "color-class-stats" || name == "drop-packets" || name == "drop-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "violate-packets" || name == "violate-bytes" || name == "parent-drop-packets" || name == "parent-drop-bytes" || name == "conform-rate" || name == "exceed-rate" || name == "violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::ColorClassStats()
    :
    conform_class_conform_packets{YType::uint64, "conform-class-conform-packets"},
    conform_class_conform_bytes{YType::uint64, "conform-class-conform-bytes"},
    conform_class_conform_rate{YType::uint32, "conform-class-conform-rate"},
    conform_class_exceed_packets{YType::uint64, "conform-class-exceed-packets"},
    conform_class_exceed_bytes{YType::uint64, "conform-class-exceed-bytes"},
    conform_class_exceed_rate{YType::uint32, "conform-class-exceed-rate"},
    conform_class_violate_packets{YType::uint64, "conform-class-violate-packets"},
    conform_class_violate_bytes{YType::uint64, "conform-class-violate-bytes"},
    conform_class_violate_rate{YType::uint32, "conform-class-violate-rate"},
    exceed_class_exceed_packets{YType::uint64, "exceed-class-exceed-packets"},
    exceed_class_exceed_bytes{YType::uint64, "exceed-class-exceed-bytes"},
    exceed_class_exceed_rate{YType::uint32, "exceed-class-exceed-rate"},
    exceed_class_violate_packets{YType::uint64, "exceed-class-violate-packets"},
    exceed_class_violate_bytes{YType::uint64, "exceed-class-violate-bytes"},
    exceed_class_violate_rate{YType::uint32, "exceed-class-violate-rate"},
    violate_class_violate_packets{YType::uint64, "violate-class-violate-packets"},
    violate_class_violate_bytes{YType::uint64, "violate-class-violate-bytes"},
    violate_class_violate_rate{YType::uint32, "violate-class-violate-rate"}
{

    yang_name = "color-class-stats"; yang_parent_name = "police-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::~ColorClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_data() const
{
    return conform_class_conform_packets.is_set
	|| conform_class_conform_bytes.is_set
	|| conform_class_conform_rate.is_set
	|| conform_class_exceed_packets.is_set
	|| conform_class_exceed_bytes.is_set
	|| conform_class_exceed_rate.is_set
	|| conform_class_violate_packets.is_set
	|| conform_class_violate_bytes.is_set
	|| conform_class_violate_rate.is_set
	|| exceed_class_exceed_packets.is_set
	|| exceed_class_exceed_bytes.is_set
	|| exceed_class_exceed_rate.is_set
	|| exceed_class_violate_packets.is_set
	|| exceed_class_violate_bytes.is_set
	|| exceed_class_violate_rate.is_set
	|| violate_class_violate_packets.is_set
	|| violate_class_violate_bytes.is_set
	|| violate_class_violate_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(conform_class_conform_packets.yfilter)
	|| ydk::is_set(conform_class_conform_bytes.yfilter)
	|| ydk::is_set(conform_class_conform_rate.yfilter)
	|| ydk::is_set(conform_class_exceed_packets.yfilter)
	|| ydk::is_set(conform_class_exceed_bytes.yfilter)
	|| ydk::is_set(conform_class_exceed_rate.yfilter)
	|| ydk::is_set(conform_class_violate_packets.yfilter)
	|| ydk::is_set(conform_class_violate_bytes.yfilter)
	|| ydk::is_set(conform_class_violate_rate.yfilter)
	|| ydk::is_set(exceed_class_exceed_packets.yfilter)
	|| ydk::is_set(exceed_class_exceed_bytes.yfilter)
	|| ydk::is_set(exceed_class_exceed_rate.yfilter)
	|| ydk::is_set(exceed_class_violate_packets.yfilter)
	|| ydk::is_set(exceed_class_violate_bytes.yfilter)
	|| ydk::is_set(exceed_class_violate_rate.yfilter)
	|| ydk::is_set(violate_class_violate_packets.yfilter)
	|| ydk::is_set(violate_class_violate_bytes.yfilter)
	|| ydk::is_set(violate_class_violate_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "color-class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (conform_class_conform_packets.is_set || is_set(conform_class_conform_packets.yfilter)) leaf_name_data.push_back(conform_class_conform_packets.get_name_leafdata());
    if (conform_class_conform_bytes.is_set || is_set(conform_class_conform_bytes.yfilter)) leaf_name_data.push_back(conform_class_conform_bytes.get_name_leafdata());
    if (conform_class_conform_rate.is_set || is_set(conform_class_conform_rate.yfilter)) leaf_name_data.push_back(conform_class_conform_rate.get_name_leafdata());
    if (conform_class_exceed_packets.is_set || is_set(conform_class_exceed_packets.yfilter)) leaf_name_data.push_back(conform_class_exceed_packets.get_name_leafdata());
    if (conform_class_exceed_bytes.is_set || is_set(conform_class_exceed_bytes.yfilter)) leaf_name_data.push_back(conform_class_exceed_bytes.get_name_leafdata());
    if (conform_class_exceed_rate.is_set || is_set(conform_class_exceed_rate.yfilter)) leaf_name_data.push_back(conform_class_exceed_rate.get_name_leafdata());
    if (conform_class_violate_packets.is_set || is_set(conform_class_violate_packets.yfilter)) leaf_name_data.push_back(conform_class_violate_packets.get_name_leafdata());
    if (conform_class_violate_bytes.is_set || is_set(conform_class_violate_bytes.yfilter)) leaf_name_data.push_back(conform_class_violate_bytes.get_name_leafdata());
    if (conform_class_violate_rate.is_set || is_set(conform_class_violate_rate.yfilter)) leaf_name_data.push_back(conform_class_violate_rate.get_name_leafdata());
    if (exceed_class_exceed_packets.is_set || is_set(exceed_class_exceed_packets.yfilter)) leaf_name_data.push_back(exceed_class_exceed_packets.get_name_leafdata());
    if (exceed_class_exceed_bytes.is_set || is_set(exceed_class_exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_class_exceed_bytes.get_name_leafdata());
    if (exceed_class_exceed_rate.is_set || is_set(exceed_class_exceed_rate.yfilter)) leaf_name_data.push_back(exceed_class_exceed_rate.get_name_leafdata());
    if (exceed_class_violate_packets.is_set || is_set(exceed_class_violate_packets.yfilter)) leaf_name_data.push_back(exceed_class_violate_packets.get_name_leafdata());
    if (exceed_class_violate_bytes.is_set || is_set(exceed_class_violate_bytes.yfilter)) leaf_name_data.push_back(exceed_class_violate_bytes.get_name_leafdata());
    if (exceed_class_violate_rate.is_set || is_set(exceed_class_violate_rate.yfilter)) leaf_name_data.push_back(exceed_class_violate_rate.get_name_leafdata());
    if (violate_class_violate_packets.is_set || is_set(violate_class_violate_packets.yfilter)) leaf_name_data.push_back(violate_class_violate_packets.get_name_leafdata());
    if (violate_class_violate_bytes.is_set || is_set(violate_class_violate_bytes.yfilter)) leaf_name_data.push_back(violate_class_violate_bytes.get_name_leafdata());
    if (violate_class_violate_rate.is_set || is_set(violate_class_violate_rate.yfilter)) leaf_name_data.push_back(violate_class_violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets = value;
        conform_class_conform_packets.value_namespace = name_space;
        conform_class_conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes = value;
        conform_class_conform_bytes.value_namespace = name_space;
        conform_class_conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate = value;
        conform_class_conform_rate.value_namespace = name_space;
        conform_class_conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets = value;
        conform_class_exceed_packets.value_namespace = name_space;
        conform_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes = value;
        conform_class_exceed_bytes.value_namespace = name_space;
        conform_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate = value;
        conform_class_exceed_rate.value_namespace = name_space;
        conform_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets = value;
        conform_class_violate_packets.value_namespace = name_space;
        conform_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes = value;
        conform_class_violate_bytes.value_namespace = name_space;
        conform_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate = value;
        conform_class_violate_rate.value_namespace = name_space;
        conform_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets = value;
        exceed_class_exceed_packets.value_namespace = name_space;
        exceed_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes = value;
        exceed_class_exceed_bytes.value_namespace = name_space;
        exceed_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate = value;
        exceed_class_exceed_rate.value_namespace = name_space;
        exceed_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets = value;
        exceed_class_violate_packets.value_namespace = name_space;
        exceed_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes = value;
        exceed_class_violate_bytes.value_namespace = name_space;
        exceed_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate = value;
        exceed_class_violate_rate.value_namespace = name_space;
        exceed_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets = value;
        violate_class_violate_packets.value_namespace = name_space;
        violate_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes = value;
        violate_class_violate_bytes.value_namespace = name_space;
        violate_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate = value;
        violate_class_violate_rate.value_namespace = name_space;
        violate_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray::ColorClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "conform-class-conform-packets" || name == "conform-class-conform-bytes" || name == "conform-class-conform-rate" || name == "conform-class-exceed-packets" || name == "conform-class-exceed-bytes" || name == "conform-class-exceed-rate" || name == "conform-class-violate-packets" || name == "conform-class-violate-bytes" || name == "conform-class-violate-rate" || name == "exceed-class-exceed-packets" || name == "exceed-class-exceed-bytes" || name == "exceed-class-exceed-rate" || name == "exceed-class-violate-packets" || name == "exceed-class-violate-bytes" || name == "exceed-class-violate-rate" || name == "violate-class-violate-packets" || name == "violate-class-violate-bytes" || name == "violate-class-violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::WredStatsArray()
    :
    profile_title{YType::str, "profile-title"},
    red_transmit_packets{YType::uint64, "red-transmit-packets"},
    red_transmit_bytes{YType::uint64, "red-transmit-bytes"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    red_ecn_marked_packets{YType::uint64, "red-ecn-marked-packets"},
    red_ecn_marked_bytes{YType::uint64, "red-ecn-marked-bytes"}
{

    yang_name = "wred-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::~WredStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_data() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_data())
            return true;
    }
    return profile_title.is_set
	|| red_transmit_packets.is_set
	|| red_transmit_bytes.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| red_ecn_marked_packets.is_set
	|| red_ecn_marked_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_operation() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(profile_title.yfilter)
	|| ydk::is_set(red_transmit_packets.yfilter)
	|| ydk::is_set(red_transmit_bytes.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(red_ecn_marked_packets.yfilter)
	|| ydk::is_set(red_ecn_marked_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "wred-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (profile_title.is_set || is_set(profile_title.yfilter)) leaf_name_data.push_back(profile_title.get_name_leafdata());
    if (red_transmit_packets.is_set || is_set(red_transmit_packets.yfilter)) leaf_name_data.push_back(red_transmit_packets.get_name_leafdata());
    if (red_transmit_bytes.is_set || is_set(red_transmit_bytes.yfilter)) leaf_name_data.push_back(red_transmit_bytes.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (red_ecn_marked_packets.is_set || is_set(red_ecn_marked_packets.yfilter)) leaf_name_data.push_back(red_ecn_marked_packets.get_name_leafdata());
    if (red_ecn_marked_bytes.is_set || is_set(red_ecn_marked_bytes.yfilter)) leaf_name_data.push_back(red_ecn_marked_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "red-label")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel>();
        c->parent = this;
        red_label.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : red_label)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "profile-title")
    {
        profile_title = value;
        profile_title.value_namespace = name_space;
        profile_title.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets = value;
        red_transmit_packets.value_namespace = name_space;
        red_transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes = value;
        red_transmit_bytes.value_namespace = name_space;
        red_transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets = value;
        red_ecn_marked_packets.value_namespace = name_space;
        red_ecn_marked_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes = value;
        red_ecn_marked_bytes.value_namespace = name_space;
        red_ecn_marked_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "profile-title")
    {
        profile_title.yfilter = yfilter;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets.yfilter = yfilter;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "red-label" || name == "profile-title" || name == "red-transmit-packets" || name == "red-transmit-bytes" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "red-ecn-marked-packets" || name == "red-ecn-marked-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::RedLabel()
    :
    wred_type{YType::enumeration, "wred-type"},
    value_{YType::uint8, "value"}
{

    yang_name = "red-label"; yang_parent_name = "wred-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::~RedLabel()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_data() const
{
    return wred_type.is_set
	|| value_.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(wred_type.yfilter)
	|| ydk::is_set(value_.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "red-label";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (wred_type.is_set || is_set(wred_type.yfilter)) leaf_name_data.push_back(wred_type.get_name_leafdata());
    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "wred-type")
    {
        wred_type = value;
        wred_type.value_namespace = name_space;
        wred_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "wred-type")
    {
        wred_type.yfilter = yfilter;
    }
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::SatelliteIds::SatelliteId::Output::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray::RedLabel::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "wred-type" || name == "value")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::Input()
    :
    service_policy_names(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames>())
{
    service_policy_names->parent = this;

    yang_name = "input"; yang_parent_name = "member-interface"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::~Input()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::has_data() const
{
    return (service_policy_names !=  nullptr && service_policy_names->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::has_operation() const
{
    return is_set(yfilter)
	|| (service_policy_names !=  nullptr && service_policy_names->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "service-policy-names")
    {
        if(service_policy_names == nullptr)
        {
            service_policy_names = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames>();
        }
        return service_policy_names;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(service_policy_names != nullptr)
    {
        children["service-policy-names"] = service_policy_names;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "service-policy-names")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyNames()
{

    yang_name = "service-policy-names"; yang_parent_name = "input"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::~ServicePolicyNames()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::has_data() const
{
    for (std::size_t index=0; index<service_policy_instance.size(); index++)
    {
        if(service_policy_instance[index]->has_data())
            return true;
    }
    return false;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::has_operation() const
{
    for (std::size_t index=0; index<service_policy_instance.size(); index++)
    {
        if(service_policy_instance[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "service-policy-names";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "service-policy-instance")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance>();
        c->parent = this;
        service_policy_instance.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : service_policy_instance)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "service-policy-instance")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::ServicePolicyInstance()
    :
    service_policy_name{YType::str, "service-policy-name"}
    	,
    statistics(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics>())
{
    statistics->parent = this;

    yang_name = "service-policy-instance"; yang_parent_name = "service-policy-names"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::~ServicePolicyInstance()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::has_data() const
{
    return service_policy_name.is_set
	|| (statistics !=  nullptr && statistics->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(service_policy_name.yfilter)
	|| (statistics !=  nullptr && statistics->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "service-policy-instance" <<"[service-policy-name='" <<service_policy_name <<"']";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (service_policy_name.is_set || is_set(service_policy_name.yfilter)) leaf_name_data.push_back(service_policy_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "statistics")
    {
        if(statistics == nullptr)
        {
            statistics = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics>();
        }
        return statistics;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(statistics != nullptr)
    {
        children["statistics"] = statistics;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "service-policy-name")
    {
        service_policy_name = value;
        service_policy_name.value_namespace = name_space;
        service_policy_name.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "service-policy-name")
    {
        service_policy_name.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "statistics" || name == "service-policy-name")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::Statistics()
    :
    policy_name{YType::str, "policy-name"},
    state{YType::enumeration, "state"},
    state_description{YType::str, "state-description"},
    satid{YType::uint32, "satid"}
{

    yang_name = "statistics"; yang_parent_name = "service-policy-instance"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::~Statistics()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::has_data() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_data())
            return true;
    }
    return policy_name.is_set
	|| state.is_set
	|| state_description.is_set
	|| satid.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::has_operation() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(policy_name.yfilter)
	|| ydk::is_set(state.yfilter)
	|| ydk::is_set(state_description.yfilter)
	|| ydk::is_set(satid.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "statistics";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (policy_name.is_set || is_set(policy_name.yfilter)) leaf_name_data.push_back(policy_name.get_name_leafdata());
    if (state.is_set || is_set(state.yfilter)) leaf_name_data.push_back(state.get_name_leafdata());
    if (state_description.is_set || is_set(state_description.yfilter)) leaf_name_data.push_back(state_description.get_name_leafdata());
    if (satid.is_set || is_set(satid.yfilter)) leaf_name_data.push_back(satid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "class-stats")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats>();
        c->parent = this;
        class_stats.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : class_stats)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "policy-name")
    {
        policy_name = value;
        policy_name.value_namespace = name_space;
        policy_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state")
    {
        state = value;
        state.value_namespace = name_space;
        state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state-description")
    {
        state_description = value;
        state_description.value_namespace = name_space;
        state_description.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "satid")
    {
        satid = value;
        satid.value_namespace = name_space;
        satid.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "policy-name")
    {
        policy_name.yfilter = yfilter;
    }
    if(value_path == "state")
    {
        state.yfilter = yfilter;
    }
    if(value_path == "state-description")
    {
        state_description.yfilter = yfilter;
    }
    if(value_path == "satid")
    {
        satid.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "class-stats" || name == "policy-name" || name == "state" || name == "state-description" || name == "satid")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ClassStats()
    :
    counter_validity_bitmask{YType::uint64, "counter-validity-bitmask"},
    class_name{YType::str, "class-name"},
    shared_queue_id{YType::uint32, "shared-queue-id"},
    queue_descr{YType::str, "queue-descr"},
    cac_state{YType::enumeration, "cac-state"}
    	,
    general_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats>())
	,iphc_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats>())
	,child_policy(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy>())
	,cac_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats>())
{
    general_stats->parent = this;
    iphc_stats->parent = this;
    child_policy->parent = this;
    cac_stats->parent = this;

    yang_name = "class-stats"; yang_parent_name = "statistics"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::~ClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_data() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_data())
            return true;
    }
    return counter_validity_bitmask.is_set
	|| class_name.is_set
	|| shared_queue_id.is_set
	|| queue_descr.is_set
	|| cac_state.is_set
	|| (general_stats !=  nullptr && general_stats->has_data())
	|| (iphc_stats !=  nullptr && iphc_stats->has_data())
	|| (child_policy !=  nullptr && child_policy->has_data())
	|| (cac_stats !=  nullptr && cac_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_operation() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(counter_validity_bitmask.yfilter)
	|| ydk::is_set(class_name.yfilter)
	|| ydk::is_set(shared_queue_id.yfilter)
	|| ydk::is_set(queue_descr.yfilter)
	|| ydk::is_set(cac_state.yfilter)
	|| (general_stats !=  nullptr && general_stats->has_operation())
	|| (iphc_stats !=  nullptr && iphc_stats->has_operation())
	|| (child_policy !=  nullptr && child_policy->has_operation())
	|| (cac_stats !=  nullptr && cac_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (counter_validity_bitmask.is_set || is_set(counter_validity_bitmask.yfilter)) leaf_name_data.push_back(counter_validity_bitmask.get_name_leafdata());
    if (class_name.is_set || is_set(class_name.yfilter)) leaf_name_data.push_back(class_name.get_name_leafdata());
    if (shared_queue_id.is_set || is_set(shared_queue_id.yfilter)) leaf_name_data.push_back(shared_queue_id.get_name_leafdata());
    if (queue_descr.is_set || is_set(queue_descr.yfilter)) leaf_name_data.push_back(queue_descr.get_name_leafdata());
    if (cac_state.is_set || is_set(cac_state.yfilter)) leaf_name_data.push_back(cac_state.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "general-stats")
    {
        if(general_stats == nullptr)
        {
            general_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats>();
        }
        return general_stats;
    }

    if(child_yang_name == "iphc-stats")
    {
        if(iphc_stats == nullptr)
        {
            iphc_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats>();
        }
        return iphc_stats;
    }

    if(child_yang_name == "child-policy")
    {
        if(child_policy == nullptr)
        {
            child_policy = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy>();
        }
        return child_policy;
    }

    if(child_yang_name == "cac-stats")
    {
        if(cac_stats == nullptr)
        {
            cac_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats>();
        }
        return cac_stats;
    }

    if(child_yang_name == "queue-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray>();
        c->parent = this;
        queue_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "police-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::PoliceStatsArray>();
        c->parent = this;
        police_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "wred-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::WredStatsArray>();
        c->parent = this;
        wred_stats_array.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(general_stats != nullptr)
    {
        children["general-stats"] = general_stats;
    }

    if(iphc_stats != nullptr)
    {
        children["iphc-stats"] = iphc_stats;
    }

    if(child_policy != nullptr)
    {
        children["child-policy"] = child_policy;
    }

    if(cac_stats != nullptr)
    {
        children["cac-stats"] = cac_stats;
    }

    count = 0;
    for (auto const & c : queue_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : police_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : wred_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask = value;
        counter_validity_bitmask.value_namespace = name_space;
        counter_validity_bitmask.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "class-name")
    {
        class_name = value;
        class_name.value_namespace = name_space;
        class_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id = value;
        shared_queue_id.value_namespace = name_space;
        shared_queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-descr")
    {
        queue_descr = value;
        queue_descr.value_namespace = name_space;
        queue_descr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cac-state")
    {
        cac_state = value;
        cac_state.value_namespace = name_space;
        cac_state.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask.yfilter = yfilter;
    }
    if(value_path == "class-name")
    {
        class_name.yfilter = yfilter;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id.yfilter = yfilter;
    }
    if(value_path == "queue-descr")
    {
        queue_descr.yfilter = yfilter;
    }
    if(value_path == "cac-state")
    {
        cac_state.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "general-stats" || name == "iphc-stats" || name == "child-policy" || name == "cac-stats" || name == "queue-stats-array" || name == "police-stats-array" || name == "wred-stats-array" || name == "counter-validity-bitmask" || name == "class-name" || name == "shared-queue-id" || name == "queue-descr" || name == "cac-state")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::GeneralStats()
    :
    transmit_packets{YType::uint64, "transmit-packets"},
    transmit_bytes{YType::uint64, "transmit-bytes"},
    total_drop_packets{YType::uint64, "total-drop-packets"},
    total_drop_bytes{YType::uint64, "total-drop-bytes"},
    total_drop_rate{YType::uint32, "total-drop-rate"},
    match_data_rate{YType::uint32, "match-data-rate"},
    total_transmit_rate{YType::uint32, "total-transmit-rate"},
    pre_policy_matched_packets{YType::uint64, "pre-policy-matched-packets"},
    pre_policy_matched_bytes{YType::uint64, "pre-policy-matched-bytes"}
{

    yang_name = "general-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::~GeneralStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_data() const
{
    return transmit_packets.is_set
	|| transmit_bytes.is_set
	|| total_drop_packets.is_set
	|| total_drop_bytes.is_set
	|| total_drop_rate.is_set
	|| match_data_rate.is_set
	|| total_transmit_rate.is_set
	|| pre_policy_matched_packets.is_set
	|| pre_policy_matched_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(transmit_packets.yfilter)
	|| ydk::is_set(transmit_bytes.yfilter)
	|| ydk::is_set(total_drop_packets.yfilter)
	|| ydk::is_set(total_drop_bytes.yfilter)
	|| ydk::is_set(total_drop_rate.yfilter)
	|| ydk::is_set(match_data_rate.yfilter)
	|| ydk::is_set(total_transmit_rate.yfilter)
	|| ydk::is_set(pre_policy_matched_packets.yfilter)
	|| ydk::is_set(pre_policy_matched_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "general-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (transmit_packets.is_set || is_set(transmit_packets.yfilter)) leaf_name_data.push_back(transmit_packets.get_name_leafdata());
    if (transmit_bytes.is_set || is_set(transmit_bytes.yfilter)) leaf_name_data.push_back(transmit_bytes.get_name_leafdata());
    if (total_drop_packets.is_set || is_set(total_drop_packets.yfilter)) leaf_name_data.push_back(total_drop_packets.get_name_leafdata());
    if (total_drop_bytes.is_set || is_set(total_drop_bytes.yfilter)) leaf_name_data.push_back(total_drop_bytes.get_name_leafdata());
    if (total_drop_rate.is_set || is_set(total_drop_rate.yfilter)) leaf_name_data.push_back(total_drop_rate.get_name_leafdata());
    if (match_data_rate.is_set || is_set(match_data_rate.yfilter)) leaf_name_data.push_back(match_data_rate.get_name_leafdata());
    if (total_transmit_rate.is_set || is_set(total_transmit_rate.yfilter)) leaf_name_data.push_back(total_transmit_rate.get_name_leafdata());
    if (pre_policy_matched_packets.is_set || is_set(pre_policy_matched_packets.yfilter)) leaf_name_data.push_back(pre_policy_matched_packets.get_name_leafdata());
    if (pre_policy_matched_bytes.is_set || is_set(pre_policy_matched_bytes.yfilter)) leaf_name_data.push_back(pre_policy_matched_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets = value;
        transmit_packets.value_namespace = name_space;
        transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes = value;
        transmit_bytes.value_namespace = name_space;
        transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets = value;
        total_drop_packets.value_namespace = name_space;
        total_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes = value;
        total_drop_bytes.value_namespace = name_space;
        total_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate = value;
        total_drop_rate.value_namespace = name_space;
        total_drop_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate = value;
        match_data_rate.value_namespace = name_space;
        match_data_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate = value;
        total_transmit_rate.value_namespace = name_space;
        total_transmit_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets = value;
        pre_policy_matched_packets.value_namespace = name_space;
        pre_policy_matched_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes = value;
        pre_policy_matched_bytes.value_namespace = name_space;
        pre_policy_matched_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets.yfilter = yfilter;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets.yfilter = yfilter;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate.yfilter = yfilter;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate.yfilter = yfilter;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::GeneralStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "transmit-packets" || name == "transmit-bytes" || name == "total-drop-packets" || name == "total-drop-bytes" || name == "total-drop-rate" || name == "match-data-rate" || name == "total-transmit-rate" || name == "pre-policy-matched-packets" || name == "pre-policy-matched-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::IphcStats()
    :
    non_tcp_total_out_packets{YType::uint64, "non-tcp-total-out-packets"},
    non_tcp_total_out_bytes{YType::uint64, "non-tcp-total-out-bytes"},
    non_tcp_bytes_saved{YType::uint64, "non-tcp-bytes-saved"},
    non_tcp_compressed_packets_out{YType::uint64, "non-tcp-compressed-packets-out"},
    non_tcp_bytes_sent_rate{YType::uint32, "non-tcp-bytes-sent-rate"},
    non_tcp_full_header_packets_out{YType::uint64, "non-tcp-full-header-packets-out"},
    tcp_total_out_packets{YType::uint64, "tcp-total-out-packets"},
    tcp_total_out_bytes{YType::uint64, "tcp-total-out-bytes"},
    tcp_bytes_saved{YType::uint64, "tcp-bytes-saved"},
    tcp_compressed_packets_out{YType::uint64, "tcp-compressed-packets-out"},
    tcp_bytes_sent_rate{YType::uint32, "tcp-bytes-sent-rate"},
    tcp_full_header_packets_out{YType::uint64, "tcp-full-header-packets-out"}
{

    yang_name = "iphc-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::~IphcStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_data() const
{
    return non_tcp_total_out_packets.is_set
	|| non_tcp_total_out_bytes.is_set
	|| non_tcp_bytes_saved.is_set
	|| non_tcp_compressed_packets_out.is_set
	|| non_tcp_bytes_sent_rate.is_set
	|| non_tcp_full_header_packets_out.is_set
	|| tcp_total_out_packets.is_set
	|| tcp_total_out_bytes.is_set
	|| tcp_bytes_saved.is_set
	|| tcp_compressed_packets_out.is_set
	|| tcp_bytes_sent_rate.is_set
	|| tcp_full_header_packets_out.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(non_tcp_total_out_packets.yfilter)
	|| ydk::is_set(non_tcp_total_out_bytes.yfilter)
	|| ydk::is_set(non_tcp_bytes_saved.yfilter)
	|| ydk::is_set(non_tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(non_tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(non_tcp_full_header_packets_out.yfilter)
	|| ydk::is_set(tcp_total_out_packets.yfilter)
	|| ydk::is_set(tcp_total_out_bytes.yfilter)
	|| ydk::is_set(tcp_bytes_saved.yfilter)
	|| ydk::is_set(tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(tcp_full_header_packets_out.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "iphc-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (non_tcp_total_out_packets.is_set || is_set(non_tcp_total_out_packets.yfilter)) leaf_name_data.push_back(non_tcp_total_out_packets.get_name_leafdata());
    if (non_tcp_total_out_bytes.is_set || is_set(non_tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(non_tcp_total_out_bytes.get_name_leafdata());
    if (non_tcp_bytes_saved.is_set || is_set(non_tcp_bytes_saved.yfilter)) leaf_name_data.push_back(non_tcp_bytes_saved.get_name_leafdata());
    if (non_tcp_compressed_packets_out.is_set || is_set(non_tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_compressed_packets_out.get_name_leafdata());
    if (non_tcp_bytes_sent_rate.is_set || is_set(non_tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(non_tcp_bytes_sent_rate.get_name_leafdata());
    if (non_tcp_full_header_packets_out.is_set || is_set(non_tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_full_header_packets_out.get_name_leafdata());
    if (tcp_total_out_packets.is_set || is_set(tcp_total_out_packets.yfilter)) leaf_name_data.push_back(tcp_total_out_packets.get_name_leafdata());
    if (tcp_total_out_bytes.is_set || is_set(tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(tcp_total_out_bytes.get_name_leafdata());
    if (tcp_bytes_saved.is_set || is_set(tcp_bytes_saved.yfilter)) leaf_name_data.push_back(tcp_bytes_saved.get_name_leafdata());
    if (tcp_compressed_packets_out.is_set || is_set(tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(tcp_compressed_packets_out.get_name_leafdata());
    if (tcp_bytes_sent_rate.is_set || is_set(tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(tcp_bytes_sent_rate.get_name_leafdata());
    if (tcp_full_header_packets_out.is_set || is_set(tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(tcp_full_header_packets_out.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets = value;
        non_tcp_total_out_packets.value_namespace = name_space;
        non_tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes = value;
        non_tcp_total_out_bytes.value_namespace = name_space;
        non_tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved = value;
        non_tcp_bytes_saved.value_namespace = name_space;
        non_tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out = value;
        non_tcp_compressed_packets_out.value_namespace = name_space;
        non_tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate = value;
        non_tcp_bytes_sent_rate.value_namespace = name_space;
        non_tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out = value;
        non_tcp_full_header_packets_out.value_namespace = name_space;
        non_tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets = value;
        tcp_total_out_packets.value_namespace = name_space;
        tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes = value;
        tcp_total_out_bytes.value_namespace = name_space;
        tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved = value;
        tcp_bytes_saved.value_namespace = name_space;
        tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out = value;
        tcp_compressed_packets_out.value_namespace = name_space;
        tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate = value;
        tcp_bytes_sent_rate.value_namespace = name_space;
        tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out = value;
        tcp_full_header_packets_out.value_namespace = name_space;
        tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::IphcStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "non-tcp-total-out-packets" || name == "non-tcp-total-out-bytes" || name == "non-tcp-bytes-saved" || name == "non-tcp-compressed-packets-out" || name == "non-tcp-bytes-sent-rate" || name == "non-tcp-full-header-packets-out" || name == "tcp-total-out-packets" || name == "tcp-total-out-bytes" || name == "tcp-bytes-saved" || name == "tcp-compressed-packets-out" || name == "tcp-bytes-sent-rate" || name == "tcp-full-header-packets-out")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ChildPolicy()
    :
    policy_name{YType::str, "policy-name"},
    state{YType::enumeration, "state"},
    state_description{YType::str, "state-description"},
    satid{YType::uint32, "satid"}
{

    yang_name = "child-policy"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::~ChildPolicy()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_data() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_data())
            return true;
    }
    return policy_name.is_set
	|| state.is_set
	|| state_description.is_set
	|| satid.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_operation() const
{
    for (std::size_t index=0; index<class_stats.size(); index++)
    {
        if(class_stats[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(policy_name.yfilter)
	|| ydk::is_set(state.yfilter)
	|| ydk::is_set(state_description.yfilter)
	|| ydk::is_set(satid.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "child-policy";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (policy_name.is_set || is_set(policy_name.yfilter)) leaf_name_data.push_back(policy_name.get_name_leafdata());
    if (state.is_set || is_set(state.yfilter)) leaf_name_data.push_back(state.get_name_leafdata());
    if (state_description.is_set || is_set(state_description.yfilter)) leaf_name_data.push_back(state_description.get_name_leafdata());
    if (satid.is_set || is_set(satid.yfilter)) leaf_name_data.push_back(satid.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "class-stats")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_>();
        c->parent = this;
        class_stats.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : class_stats)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "policy-name")
    {
        policy_name = value;
        policy_name.value_namespace = name_space;
        policy_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state")
    {
        state = value;
        state.value_namespace = name_space;
        state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "state-description")
    {
        state_description = value;
        state_description.value_namespace = name_space;
        state_description.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "satid")
    {
        satid = value;
        satid.value_namespace = name_space;
        satid.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "policy-name")
    {
        policy_name.yfilter = yfilter;
    }
    if(value_path == "state")
    {
        state.yfilter = yfilter;
    }
    if(value_path == "state-description")
    {
        state_description.yfilter = yfilter;
    }
    if(value_path == "satid")
    {
        satid.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "class-stats" || name == "policy-name" || name == "state" || name == "state-description" || name == "satid")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::ClassStats_()
    :
    counter_validity_bitmask{YType::uint64, "counter-validity-bitmask"},
    class_name{YType::str, "class-name"},
    shared_queue_id{YType::uint32, "shared-queue-id"},
    queue_descr{YType::str, "queue-descr"},
    cac_state{YType::enumeration, "cac-state"}
    	,
    general_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats>())
	,iphc_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats>())
	,cac_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats>())
{
    general_stats->parent = this;
    iphc_stats->parent = this;
    cac_stats->parent = this;

    yang_name = "class-stats"; yang_parent_name = "child-policy"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::~ClassStats_()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_data() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_data())
            return true;
    }
    return counter_validity_bitmask.is_set
	|| class_name.is_set
	|| shared_queue_id.is_set
	|| queue_descr.is_set
	|| cac_state.is_set
	|| (general_stats !=  nullptr && general_stats->has_data())
	|| (iphc_stats !=  nullptr && iphc_stats->has_data())
	|| (cac_stats !=  nullptr && cac_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_operation() const
{
    for (std::size_t index=0; index<queue_stats_array.size(); index++)
    {
        if(queue_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<police_stats_array.size(); index++)
    {
        if(police_stats_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<wred_stats_array.size(); index++)
    {
        if(wred_stats_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(counter_validity_bitmask.yfilter)
	|| ydk::is_set(class_name.yfilter)
	|| ydk::is_set(shared_queue_id.yfilter)
	|| ydk::is_set(queue_descr.yfilter)
	|| ydk::is_set(cac_state.yfilter)
	|| (general_stats !=  nullptr && general_stats->has_operation())
	|| (iphc_stats !=  nullptr && iphc_stats->has_operation())
	|| (cac_stats !=  nullptr && cac_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (counter_validity_bitmask.is_set || is_set(counter_validity_bitmask.yfilter)) leaf_name_data.push_back(counter_validity_bitmask.get_name_leafdata());
    if (class_name.is_set || is_set(class_name.yfilter)) leaf_name_data.push_back(class_name.get_name_leafdata());
    if (shared_queue_id.is_set || is_set(shared_queue_id.yfilter)) leaf_name_data.push_back(shared_queue_id.get_name_leafdata());
    if (queue_descr.is_set || is_set(queue_descr.yfilter)) leaf_name_data.push_back(queue_descr.get_name_leafdata());
    if (cac_state.is_set || is_set(cac_state.yfilter)) leaf_name_data.push_back(cac_state.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "general-stats")
    {
        if(general_stats == nullptr)
        {
            general_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats>();
        }
        return general_stats;
    }

    if(child_yang_name == "iphc-stats")
    {
        if(iphc_stats == nullptr)
        {
            iphc_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats>();
        }
        return iphc_stats;
    }

    if(child_yang_name == "cac-stats")
    {
        if(cac_stats == nullptr)
        {
            cac_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats>();
        }
        return cac_stats;
    }

    if(child_yang_name == "queue-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray>();
        c->parent = this;
        queue_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "police-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray>();
        c->parent = this;
        police_stats_array.push_back(c);
        return c;
    }

    if(child_yang_name == "wred-stats-array")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray>();
        c->parent = this;
        wred_stats_array.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(general_stats != nullptr)
    {
        children["general-stats"] = general_stats;
    }

    if(iphc_stats != nullptr)
    {
        children["iphc-stats"] = iphc_stats;
    }

    if(cac_stats != nullptr)
    {
        children["cac-stats"] = cac_stats;
    }

    count = 0;
    for (auto const & c : queue_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : police_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : wred_stats_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask = value;
        counter_validity_bitmask.value_namespace = name_space;
        counter_validity_bitmask.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "class-name")
    {
        class_name = value;
        class_name.value_namespace = name_space;
        class_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id = value;
        shared_queue_id.value_namespace = name_space;
        shared_queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-descr")
    {
        queue_descr = value;
        queue_descr.value_namespace = name_space;
        queue_descr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cac-state")
    {
        cac_state = value;
        cac_state.value_namespace = name_space;
        cac_state.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "counter-validity-bitmask")
    {
        counter_validity_bitmask.yfilter = yfilter;
    }
    if(value_path == "class-name")
    {
        class_name.yfilter = yfilter;
    }
    if(value_path == "shared-queue-id")
    {
        shared_queue_id.yfilter = yfilter;
    }
    if(value_path == "queue-descr")
    {
        queue_descr.yfilter = yfilter;
    }
    if(value_path == "cac-state")
    {
        cac_state.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "general-stats" || name == "iphc-stats" || name == "cac-stats" || name == "queue-stats-array" || name == "police-stats-array" || name == "wred-stats-array" || name == "counter-validity-bitmask" || name == "class-name" || name == "shared-queue-id" || name == "queue-descr" || name == "cac-state")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::GeneralStats()
    :
    transmit_packets{YType::uint64, "transmit-packets"},
    transmit_bytes{YType::uint64, "transmit-bytes"},
    total_drop_packets{YType::uint64, "total-drop-packets"},
    total_drop_bytes{YType::uint64, "total-drop-bytes"},
    total_drop_rate{YType::uint32, "total-drop-rate"},
    match_data_rate{YType::uint32, "match-data-rate"},
    total_transmit_rate{YType::uint32, "total-transmit-rate"},
    pre_policy_matched_packets{YType::uint64, "pre-policy-matched-packets"},
    pre_policy_matched_bytes{YType::uint64, "pre-policy-matched-bytes"}
{

    yang_name = "general-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::~GeneralStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_data() const
{
    return transmit_packets.is_set
	|| transmit_bytes.is_set
	|| total_drop_packets.is_set
	|| total_drop_bytes.is_set
	|| total_drop_rate.is_set
	|| match_data_rate.is_set
	|| total_transmit_rate.is_set
	|| pre_policy_matched_packets.is_set
	|| pre_policy_matched_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(transmit_packets.yfilter)
	|| ydk::is_set(transmit_bytes.yfilter)
	|| ydk::is_set(total_drop_packets.yfilter)
	|| ydk::is_set(total_drop_bytes.yfilter)
	|| ydk::is_set(total_drop_rate.yfilter)
	|| ydk::is_set(match_data_rate.yfilter)
	|| ydk::is_set(total_transmit_rate.yfilter)
	|| ydk::is_set(pre_policy_matched_packets.yfilter)
	|| ydk::is_set(pre_policy_matched_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "general-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (transmit_packets.is_set || is_set(transmit_packets.yfilter)) leaf_name_data.push_back(transmit_packets.get_name_leafdata());
    if (transmit_bytes.is_set || is_set(transmit_bytes.yfilter)) leaf_name_data.push_back(transmit_bytes.get_name_leafdata());
    if (total_drop_packets.is_set || is_set(total_drop_packets.yfilter)) leaf_name_data.push_back(total_drop_packets.get_name_leafdata());
    if (total_drop_bytes.is_set || is_set(total_drop_bytes.yfilter)) leaf_name_data.push_back(total_drop_bytes.get_name_leafdata());
    if (total_drop_rate.is_set || is_set(total_drop_rate.yfilter)) leaf_name_data.push_back(total_drop_rate.get_name_leafdata());
    if (match_data_rate.is_set || is_set(match_data_rate.yfilter)) leaf_name_data.push_back(match_data_rate.get_name_leafdata());
    if (total_transmit_rate.is_set || is_set(total_transmit_rate.yfilter)) leaf_name_data.push_back(total_transmit_rate.get_name_leafdata());
    if (pre_policy_matched_packets.is_set || is_set(pre_policy_matched_packets.yfilter)) leaf_name_data.push_back(pre_policy_matched_packets.get_name_leafdata());
    if (pre_policy_matched_bytes.is_set || is_set(pre_policy_matched_bytes.yfilter)) leaf_name_data.push_back(pre_policy_matched_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets = value;
        transmit_packets.value_namespace = name_space;
        transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes = value;
        transmit_bytes.value_namespace = name_space;
        transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets = value;
        total_drop_packets.value_namespace = name_space;
        total_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes = value;
        total_drop_bytes.value_namespace = name_space;
        total_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate = value;
        total_drop_rate.value_namespace = name_space;
        total_drop_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate = value;
        match_data_rate.value_namespace = name_space;
        match_data_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate = value;
        total_transmit_rate.value_namespace = name_space;
        total_transmit_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets = value;
        pre_policy_matched_packets.value_namespace = name_space;
        pre_policy_matched_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes = value;
        pre_policy_matched_bytes.value_namespace = name_space;
        pre_policy_matched_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "transmit-packets")
    {
        transmit_packets.yfilter = yfilter;
    }
    if(value_path == "transmit-bytes")
    {
        transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-packets")
    {
        total_drop_packets.yfilter = yfilter;
    }
    if(value_path == "total-drop-bytes")
    {
        total_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "total-drop-rate")
    {
        total_drop_rate.yfilter = yfilter;
    }
    if(value_path == "match-data-rate")
    {
        match_data_rate.yfilter = yfilter;
    }
    if(value_path == "total-transmit-rate")
    {
        total_transmit_rate.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-packets")
    {
        pre_policy_matched_packets.yfilter = yfilter;
    }
    if(value_path == "pre-policy-matched-bytes")
    {
        pre_policy_matched_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::GeneralStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "transmit-packets" || name == "transmit-bytes" || name == "total-drop-packets" || name == "total-drop-bytes" || name == "total-drop-rate" || name == "match-data-rate" || name == "total-transmit-rate" || name == "pre-policy-matched-packets" || name == "pre-policy-matched-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::IphcStats()
    :
    non_tcp_total_out_packets{YType::uint64, "non-tcp-total-out-packets"},
    non_tcp_total_out_bytes{YType::uint64, "non-tcp-total-out-bytes"},
    non_tcp_bytes_saved{YType::uint64, "non-tcp-bytes-saved"},
    non_tcp_compressed_packets_out{YType::uint64, "non-tcp-compressed-packets-out"},
    non_tcp_bytes_sent_rate{YType::uint32, "non-tcp-bytes-sent-rate"},
    non_tcp_full_header_packets_out{YType::uint64, "non-tcp-full-header-packets-out"},
    tcp_total_out_packets{YType::uint64, "tcp-total-out-packets"},
    tcp_total_out_bytes{YType::uint64, "tcp-total-out-bytes"},
    tcp_bytes_saved{YType::uint64, "tcp-bytes-saved"},
    tcp_compressed_packets_out{YType::uint64, "tcp-compressed-packets-out"},
    tcp_bytes_sent_rate{YType::uint32, "tcp-bytes-sent-rate"},
    tcp_full_header_packets_out{YType::uint64, "tcp-full-header-packets-out"}
{

    yang_name = "iphc-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::~IphcStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_data() const
{
    return non_tcp_total_out_packets.is_set
	|| non_tcp_total_out_bytes.is_set
	|| non_tcp_bytes_saved.is_set
	|| non_tcp_compressed_packets_out.is_set
	|| non_tcp_bytes_sent_rate.is_set
	|| non_tcp_full_header_packets_out.is_set
	|| tcp_total_out_packets.is_set
	|| tcp_total_out_bytes.is_set
	|| tcp_bytes_saved.is_set
	|| tcp_compressed_packets_out.is_set
	|| tcp_bytes_sent_rate.is_set
	|| tcp_full_header_packets_out.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(non_tcp_total_out_packets.yfilter)
	|| ydk::is_set(non_tcp_total_out_bytes.yfilter)
	|| ydk::is_set(non_tcp_bytes_saved.yfilter)
	|| ydk::is_set(non_tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(non_tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(non_tcp_full_header_packets_out.yfilter)
	|| ydk::is_set(tcp_total_out_packets.yfilter)
	|| ydk::is_set(tcp_total_out_bytes.yfilter)
	|| ydk::is_set(tcp_bytes_saved.yfilter)
	|| ydk::is_set(tcp_compressed_packets_out.yfilter)
	|| ydk::is_set(tcp_bytes_sent_rate.yfilter)
	|| ydk::is_set(tcp_full_header_packets_out.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "iphc-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (non_tcp_total_out_packets.is_set || is_set(non_tcp_total_out_packets.yfilter)) leaf_name_data.push_back(non_tcp_total_out_packets.get_name_leafdata());
    if (non_tcp_total_out_bytes.is_set || is_set(non_tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(non_tcp_total_out_bytes.get_name_leafdata());
    if (non_tcp_bytes_saved.is_set || is_set(non_tcp_bytes_saved.yfilter)) leaf_name_data.push_back(non_tcp_bytes_saved.get_name_leafdata());
    if (non_tcp_compressed_packets_out.is_set || is_set(non_tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_compressed_packets_out.get_name_leafdata());
    if (non_tcp_bytes_sent_rate.is_set || is_set(non_tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(non_tcp_bytes_sent_rate.get_name_leafdata());
    if (non_tcp_full_header_packets_out.is_set || is_set(non_tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(non_tcp_full_header_packets_out.get_name_leafdata());
    if (tcp_total_out_packets.is_set || is_set(tcp_total_out_packets.yfilter)) leaf_name_data.push_back(tcp_total_out_packets.get_name_leafdata());
    if (tcp_total_out_bytes.is_set || is_set(tcp_total_out_bytes.yfilter)) leaf_name_data.push_back(tcp_total_out_bytes.get_name_leafdata());
    if (tcp_bytes_saved.is_set || is_set(tcp_bytes_saved.yfilter)) leaf_name_data.push_back(tcp_bytes_saved.get_name_leafdata());
    if (tcp_compressed_packets_out.is_set || is_set(tcp_compressed_packets_out.yfilter)) leaf_name_data.push_back(tcp_compressed_packets_out.get_name_leafdata());
    if (tcp_bytes_sent_rate.is_set || is_set(tcp_bytes_sent_rate.yfilter)) leaf_name_data.push_back(tcp_bytes_sent_rate.get_name_leafdata());
    if (tcp_full_header_packets_out.is_set || is_set(tcp_full_header_packets_out.yfilter)) leaf_name_data.push_back(tcp_full_header_packets_out.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets = value;
        non_tcp_total_out_packets.value_namespace = name_space;
        non_tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes = value;
        non_tcp_total_out_bytes.value_namespace = name_space;
        non_tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved = value;
        non_tcp_bytes_saved.value_namespace = name_space;
        non_tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out = value;
        non_tcp_compressed_packets_out.value_namespace = name_space;
        non_tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate = value;
        non_tcp_bytes_sent_rate.value_namespace = name_space;
        non_tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out = value;
        non_tcp_full_header_packets_out.value_namespace = name_space;
        non_tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets = value;
        tcp_total_out_packets.value_namespace = name_space;
        tcp_total_out_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes = value;
        tcp_total_out_bytes.value_namespace = name_space;
        tcp_total_out_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved = value;
        tcp_bytes_saved.value_namespace = name_space;
        tcp_bytes_saved.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out = value;
        tcp_compressed_packets_out.value_namespace = name_space;
        tcp_compressed_packets_out.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate = value;
        tcp_bytes_sent_rate.value_namespace = name_space;
        tcp_bytes_sent_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out = value;
        tcp_full_header_packets_out.value_namespace = name_space;
        tcp_full_header_packets_out.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "non-tcp-total-out-packets")
    {
        non_tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "non-tcp-total-out-bytes")
    {
        non_tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-saved")
    {
        non_tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "non-tcp-compressed-packets-out")
    {
        non_tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "non-tcp-bytes-sent-rate")
    {
        non_tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "non-tcp-full-header-packets-out")
    {
        non_tcp_full_header_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-packets")
    {
        tcp_total_out_packets.yfilter = yfilter;
    }
    if(value_path == "tcp-total-out-bytes")
    {
        tcp_total_out_bytes.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-saved")
    {
        tcp_bytes_saved.yfilter = yfilter;
    }
    if(value_path == "tcp-compressed-packets-out")
    {
        tcp_compressed_packets_out.yfilter = yfilter;
    }
    if(value_path == "tcp-bytes-sent-rate")
    {
        tcp_bytes_sent_rate.yfilter = yfilter;
    }
    if(value_path == "tcp-full-header-packets-out")
    {
        tcp_full_header_packets_out.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::IphcStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "non-tcp-total-out-packets" || name == "non-tcp-total-out-bytes" || name == "non-tcp-bytes-saved" || name == "non-tcp-compressed-packets-out" || name == "non-tcp-bytes-sent-rate" || name == "non-tcp-full-header-packets-out" || name == "tcp-total-out-packets" || name == "tcp-total-out-bytes" || name == "tcp-bytes-saved" || name == "tcp-compressed-packets-out" || name == "tcp-bytes-sent-rate" || name == "tcp-full-header-packets-out")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::CacStats()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    drop_rates{YType::uint32, "drop-rates"},
    admitpackets{YType::uint64, "admitpackets"},
    admit_bytes{YType::uint64, "admit-bytes"},
    admit_rates{YType::uint32, "admit-rates"}
{

    yang_name = "cac-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::~CacStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| drop_rates.is_set
	|| admitpackets.is_set
	|| admit_bytes.is_set
	|| admit_rates.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(drop_rates.yfilter)
	|| ydk::is_set(admitpackets.yfilter)
	|| ydk::is_set(admit_bytes.yfilter)
	|| ydk::is_set(admit_rates.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cac-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (drop_rates.is_set || is_set(drop_rates.yfilter)) leaf_name_data.push_back(drop_rates.get_name_leafdata());
    if (admitpackets.is_set || is_set(admitpackets.yfilter)) leaf_name_data.push_back(admitpackets.get_name_leafdata());
    if (admit_bytes.is_set || is_set(admit_bytes.yfilter)) leaf_name_data.push_back(admit_bytes.get_name_leafdata());
    if (admit_rates.is_set || is_set(admit_rates.yfilter)) leaf_name_data.push_back(admit_rates.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-rates")
    {
        drop_rates = value;
        drop_rates.value_namespace = name_space;
        drop_rates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admitpackets")
    {
        admitpackets = value;
        admitpackets.value_namespace = name_space;
        admitpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes = value;
        admit_bytes.value_namespace = name_space;
        admit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-rates")
    {
        admit_rates = value;
        admit_rates.value_namespace = name_space;
        admit_rates.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "drop-rates")
    {
        drop_rates.yfilter = yfilter;
    }
    if(value_path == "admitpackets")
    {
        admitpackets.yfilter = yfilter;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes.yfilter = yfilter;
    }
    if(value_path == "admit-rates")
    {
        admit_rates.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::CacStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drop-packets" || name == "drop-bytes" || name == "drop-rates" || name == "admitpackets" || name == "admit-bytes" || name == "admit-rates")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueStatsArray()
    :
    queue_id{YType::uint32, "queue-id"},
    tail_drop_packets{YType::uint64, "tail-drop-packets"},
    tail_drop_bytes{YType::uint64, "tail-drop-bytes"},
    atm_clp0_drop_packets{YType::uint64, "atm-clp0-drop-packets"},
    atm_clp0_drop_bytes{YType::uint64, "atm-clp0-drop-bytes"},
    atm_clp1_drop_packets{YType::uint64, "atm-clp1-drop-packets"},
    atm_clp1_drop_bytes{YType::uint64, "atm-clp1-drop-bytes"},
    queue_drop_threshold{YType::uint32, "queue-drop-threshold"},
    forced_wred_stats_display{YType::boolean, "forced-wred-stats-display"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"}
{

    yang_name = "queue-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::~QueueStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_data() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_data())
            return true;
    }
    return queue_id.is_set
	|| tail_drop_packets.is_set
	|| tail_drop_bytes.is_set
	|| atm_clp0_drop_packets.is_set
	|| atm_clp0_drop_bytes.is_set
	|| atm_clp1_drop_packets.is_set
	|| atm_clp1_drop_bytes.is_set
	|| queue_drop_threshold.is_set
	|| forced_wred_stats_display.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_operation() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(queue_id.yfilter)
	|| ydk::is_set(tail_drop_packets.yfilter)
	|| ydk::is_set(tail_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp0_drop_packets.yfilter)
	|| ydk::is_set(atm_clp0_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp1_drop_packets.yfilter)
	|| ydk::is_set(atm_clp1_drop_bytes.yfilter)
	|| ydk::is_set(queue_drop_threshold.yfilter)
	|| ydk::is_set(forced_wred_stats_display.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (queue_id.is_set || is_set(queue_id.yfilter)) leaf_name_data.push_back(queue_id.get_name_leafdata());
    if (tail_drop_packets.is_set || is_set(tail_drop_packets.yfilter)) leaf_name_data.push_back(tail_drop_packets.get_name_leafdata());
    if (tail_drop_bytes.is_set || is_set(tail_drop_bytes.yfilter)) leaf_name_data.push_back(tail_drop_bytes.get_name_leafdata());
    if (atm_clp0_drop_packets.is_set || is_set(atm_clp0_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp0_drop_packets.get_name_leafdata());
    if (atm_clp0_drop_bytes.is_set || is_set(atm_clp0_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp0_drop_bytes.get_name_leafdata());
    if (atm_clp1_drop_packets.is_set || is_set(atm_clp1_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp1_drop_packets.get_name_leafdata());
    if (atm_clp1_drop_bytes.is_set || is_set(atm_clp1_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp1_drop_bytes.get_name_leafdata());
    if (queue_drop_threshold.is_set || is_set(queue_drop_threshold.yfilter)) leaf_name_data.push_back(queue_drop_threshold.get_name_leafdata());
    if (forced_wred_stats_display.is_set || is_set(forced_wred_stats_display.yfilter)) leaf_name_data.push_back(forced_wred_stats_display.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "queue-instance-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength>();
        c->parent = this;
        queue_instance_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-average-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength>();
        c->parent = this;
        queue_average_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-max-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength>();
        c->parent = this;
        queue_max_length.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : queue_instance_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_average_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_max_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "queue-id")
    {
        queue_id = value;
        queue_id.value_namespace = name_space;
        queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets = value;
        tail_drop_packets.value_namespace = name_space;
        tail_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes = value;
        tail_drop_bytes.value_namespace = name_space;
        tail_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets = value;
        atm_clp0_drop_packets.value_namespace = name_space;
        atm_clp0_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes = value;
        atm_clp0_drop_bytes.value_namespace = name_space;
        atm_clp0_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets = value;
        atm_clp1_drop_packets.value_namespace = name_space;
        atm_clp1_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes = value;
        atm_clp1_drop_bytes.value_namespace = name_space;
        atm_clp1_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold = value;
        queue_drop_threshold.value_namespace = name_space;
        queue_drop_threshold.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display = value;
        forced_wred_stats_display.value_namespace = name_space;
        forced_wred_stats_display.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "queue-id")
    {
        queue_id.yfilter = yfilter;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets.yfilter = yfilter;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold.yfilter = yfilter;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "queue-instance-length" || name == "queue-average-length" || name == "queue-max-length" || name == "queue-id" || name == "tail-drop-packets" || name == "tail-drop-bytes" || name == "atm-clp0-drop-packets" || name == "atm-clp0-drop-bytes" || name == "atm-clp1-drop-packets" || name == "atm-clp1-drop-bytes" || name == "queue-drop-threshold" || name == "forced-wred-stats-display" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "conform-rate" || name == "exceed-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::QueueInstanceLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-instance-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::~QueueInstanceLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-instance-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueInstanceLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::QueueAverageLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-average-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::~QueueAverageLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-average-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueAverageLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::QueueMaxLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-max-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::~QueueMaxLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-max-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::QueueStatsArray::QueueMaxLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::PoliceStatsArray()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    violate_packets{YType::uint64, "violate-packets"},
    violate_bytes{YType::uint64, "violate-bytes"},
    parent_drop_packets{YType::uint64, "parent-drop-packets"},
    parent_drop_bytes{YType::uint64, "parent-drop-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"},
    violate_rate{YType::uint32, "violate-rate"}
    	,
    color_class_stats(std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats>())
{
    color_class_stats->parent = this;

    yang_name = "police-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::~PoliceStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| violate_packets.is_set
	|| violate_bytes.is_set
	|| parent_drop_packets.is_set
	|| parent_drop_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set
	|| violate_rate.is_set
	|| (color_class_stats !=  nullptr && color_class_stats->has_data());
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(violate_packets.yfilter)
	|| ydk::is_set(violate_bytes.yfilter)
	|| ydk::is_set(parent_drop_packets.yfilter)
	|| ydk::is_set(parent_drop_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter)
	|| ydk::is_set(violate_rate.yfilter)
	|| (color_class_stats !=  nullptr && color_class_stats->has_operation());
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "police-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (violate_packets.is_set || is_set(violate_packets.yfilter)) leaf_name_data.push_back(violate_packets.get_name_leafdata());
    if (violate_bytes.is_set || is_set(violate_bytes.yfilter)) leaf_name_data.push_back(violate_bytes.get_name_leafdata());
    if (parent_drop_packets.is_set || is_set(parent_drop_packets.yfilter)) leaf_name_data.push_back(parent_drop_packets.get_name_leafdata());
    if (parent_drop_bytes.is_set || is_set(parent_drop_bytes.yfilter)) leaf_name_data.push_back(parent_drop_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());
    if (violate_rate.is_set || is_set(violate_rate.yfilter)) leaf_name_data.push_back(violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "color-class-stats")
    {
        if(color_class_stats == nullptr)
        {
            color_class_stats = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats>();
        }
        return color_class_stats;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    if(color_class_stats != nullptr)
    {
        children["color-class-stats"] = color_class_stats;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-packets")
    {
        violate_packets = value;
        violate_packets.value_namespace = name_space;
        violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes = value;
        violate_bytes.value_namespace = name_space;
        violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets = value;
        parent_drop_packets.value_namespace = name_space;
        parent_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes = value;
        parent_drop_bytes.value_namespace = name_space;
        parent_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-rate")
    {
        violate_rate = value;
        violate_rate.value_namespace = name_space;
        violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-packets")
    {
        violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-bytes")
    {
        violate_bytes.yfilter = yfilter;
    }
    if(value_path == "parent-drop-packets")
    {
        parent_drop_packets.yfilter = yfilter;
    }
    if(value_path == "parent-drop-bytes")
    {
        parent_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
    if(value_path == "violate-rate")
    {
        violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "color-class-stats" || name == "drop-packets" || name == "drop-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "violate-packets" || name == "violate-bytes" || name == "parent-drop-packets" || name == "parent-drop-bytes" || name == "conform-rate" || name == "exceed-rate" || name == "violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::ColorClassStats()
    :
    conform_class_conform_packets{YType::uint64, "conform-class-conform-packets"},
    conform_class_conform_bytes{YType::uint64, "conform-class-conform-bytes"},
    conform_class_conform_rate{YType::uint32, "conform-class-conform-rate"},
    conform_class_exceed_packets{YType::uint64, "conform-class-exceed-packets"},
    conform_class_exceed_bytes{YType::uint64, "conform-class-exceed-bytes"},
    conform_class_exceed_rate{YType::uint32, "conform-class-exceed-rate"},
    conform_class_violate_packets{YType::uint64, "conform-class-violate-packets"},
    conform_class_violate_bytes{YType::uint64, "conform-class-violate-bytes"},
    conform_class_violate_rate{YType::uint32, "conform-class-violate-rate"},
    exceed_class_exceed_packets{YType::uint64, "exceed-class-exceed-packets"},
    exceed_class_exceed_bytes{YType::uint64, "exceed-class-exceed-bytes"},
    exceed_class_exceed_rate{YType::uint32, "exceed-class-exceed-rate"},
    exceed_class_violate_packets{YType::uint64, "exceed-class-violate-packets"},
    exceed_class_violate_bytes{YType::uint64, "exceed-class-violate-bytes"},
    exceed_class_violate_rate{YType::uint32, "exceed-class-violate-rate"},
    violate_class_violate_packets{YType::uint64, "violate-class-violate-packets"},
    violate_class_violate_bytes{YType::uint64, "violate-class-violate-bytes"},
    violate_class_violate_rate{YType::uint32, "violate-class-violate-rate"}
{

    yang_name = "color-class-stats"; yang_parent_name = "police-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::~ColorClassStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_data() const
{
    return conform_class_conform_packets.is_set
	|| conform_class_conform_bytes.is_set
	|| conform_class_conform_rate.is_set
	|| conform_class_exceed_packets.is_set
	|| conform_class_exceed_bytes.is_set
	|| conform_class_exceed_rate.is_set
	|| conform_class_violate_packets.is_set
	|| conform_class_violate_bytes.is_set
	|| conform_class_violate_rate.is_set
	|| exceed_class_exceed_packets.is_set
	|| exceed_class_exceed_bytes.is_set
	|| exceed_class_exceed_rate.is_set
	|| exceed_class_violate_packets.is_set
	|| exceed_class_violate_bytes.is_set
	|| exceed_class_violate_rate.is_set
	|| violate_class_violate_packets.is_set
	|| violate_class_violate_bytes.is_set
	|| violate_class_violate_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(conform_class_conform_packets.yfilter)
	|| ydk::is_set(conform_class_conform_bytes.yfilter)
	|| ydk::is_set(conform_class_conform_rate.yfilter)
	|| ydk::is_set(conform_class_exceed_packets.yfilter)
	|| ydk::is_set(conform_class_exceed_bytes.yfilter)
	|| ydk::is_set(conform_class_exceed_rate.yfilter)
	|| ydk::is_set(conform_class_violate_packets.yfilter)
	|| ydk::is_set(conform_class_violate_bytes.yfilter)
	|| ydk::is_set(conform_class_violate_rate.yfilter)
	|| ydk::is_set(exceed_class_exceed_packets.yfilter)
	|| ydk::is_set(exceed_class_exceed_bytes.yfilter)
	|| ydk::is_set(exceed_class_exceed_rate.yfilter)
	|| ydk::is_set(exceed_class_violate_packets.yfilter)
	|| ydk::is_set(exceed_class_violate_bytes.yfilter)
	|| ydk::is_set(exceed_class_violate_rate.yfilter)
	|| ydk::is_set(violate_class_violate_packets.yfilter)
	|| ydk::is_set(violate_class_violate_bytes.yfilter)
	|| ydk::is_set(violate_class_violate_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "color-class-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (conform_class_conform_packets.is_set || is_set(conform_class_conform_packets.yfilter)) leaf_name_data.push_back(conform_class_conform_packets.get_name_leafdata());
    if (conform_class_conform_bytes.is_set || is_set(conform_class_conform_bytes.yfilter)) leaf_name_data.push_back(conform_class_conform_bytes.get_name_leafdata());
    if (conform_class_conform_rate.is_set || is_set(conform_class_conform_rate.yfilter)) leaf_name_data.push_back(conform_class_conform_rate.get_name_leafdata());
    if (conform_class_exceed_packets.is_set || is_set(conform_class_exceed_packets.yfilter)) leaf_name_data.push_back(conform_class_exceed_packets.get_name_leafdata());
    if (conform_class_exceed_bytes.is_set || is_set(conform_class_exceed_bytes.yfilter)) leaf_name_data.push_back(conform_class_exceed_bytes.get_name_leafdata());
    if (conform_class_exceed_rate.is_set || is_set(conform_class_exceed_rate.yfilter)) leaf_name_data.push_back(conform_class_exceed_rate.get_name_leafdata());
    if (conform_class_violate_packets.is_set || is_set(conform_class_violate_packets.yfilter)) leaf_name_data.push_back(conform_class_violate_packets.get_name_leafdata());
    if (conform_class_violate_bytes.is_set || is_set(conform_class_violate_bytes.yfilter)) leaf_name_data.push_back(conform_class_violate_bytes.get_name_leafdata());
    if (conform_class_violate_rate.is_set || is_set(conform_class_violate_rate.yfilter)) leaf_name_data.push_back(conform_class_violate_rate.get_name_leafdata());
    if (exceed_class_exceed_packets.is_set || is_set(exceed_class_exceed_packets.yfilter)) leaf_name_data.push_back(exceed_class_exceed_packets.get_name_leafdata());
    if (exceed_class_exceed_bytes.is_set || is_set(exceed_class_exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_class_exceed_bytes.get_name_leafdata());
    if (exceed_class_exceed_rate.is_set || is_set(exceed_class_exceed_rate.yfilter)) leaf_name_data.push_back(exceed_class_exceed_rate.get_name_leafdata());
    if (exceed_class_violate_packets.is_set || is_set(exceed_class_violate_packets.yfilter)) leaf_name_data.push_back(exceed_class_violate_packets.get_name_leafdata());
    if (exceed_class_violate_bytes.is_set || is_set(exceed_class_violate_bytes.yfilter)) leaf_name_data.push_back(exceed_class_violate_bytes.get_name_leafdata());
    if (exceed_class_violate_rate.is_set || is_set(exceed_class_violate_rate.yfilter)) leaf_name_data.push_back(exceed_class_violate_rate.get_name_leafdata());
    if (violate_class_violate_packets.is_set || is_set(violate_class_violate_packets.yfilter)) leaf_name_data.push_back(violate_class_violate_packets.get_name_leafdata());
    if (violate_class_violate_bytes.is_set || is_set(violate_class_violate_bytes.yfilter)) leaf_name_data.push_back(violate_class_violate_bytes.get_name_leafdata());
    if (violate_class_violate_rate.is_set || is_set(violate_class_violate_rate.yfilter)) leaf_name_data.push_back(violate_class_violate_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets = value;
        conform_class_conform_packets.value_namespace = name_space;
        conform_class_conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes = value;
        conform_class_conform_bytes.value_namespace = name_space;
        conform_class_conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate = value;
        conform_class_conform_rate.value_namespace = name_space;
        conform_class_conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets = value;
        conform_class_exceed_packets.value_namespace = name_space;
        conform_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes = value;
        conform_class_exceed_bytes.value_namespace = name_space;
        conform_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate = value;
        conform_class_exceed_rate.value_namespace = name_space;
        conform_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets = value;
        conform_class_violate_packets.value_namespace = name_space;
        conform_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes = value;
        conform_class_violate_bytes.value_namespace = name_space;
        conform_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate = value;
        conform_class_violate_rate.value_namespace = name_space;
        conform_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets = value;
        exceed_class_exceed_packets.value_namespace = name_space;
        exceed_class_exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes = value;
        exceed_class_exceed_bytes.value_namespace = name_space;
        exceed_class_exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate = value;
        exceed_class_exceed_rate.value_namespace = name_space;
        exceed_class_exceed_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets = value;
        exceed_class_violate_packets.value_namespace = name_space;
        exceed_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes = value;
        exceed_class_violate_bytes.value_namespace = name_space;
        exceed_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate = value;
        exceed_class_violate_rate.value_namespace = name_space;
        exceed_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets = value;
        violate_class_violate_packets.value_namespace = name_space;
        violate_class_violate_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes = value;
        violate_class_violate_bytes.value_namespace = name_space;
        violate_class_violate_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate = value;
        violate_class_violate_rate.value_namespace = name_space;
        violate_class_violate_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "conform-class-conform-packets")
    {
        conform_class_conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-bytes")
    {
        conform_class_conform_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-conform-rate")
    {
        conform_class_conform_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-packets")
    {
        conform_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-bytes")
    {
        conform_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-exceed-rate")
    {
        conform_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-packets")
    {
        conform_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-bytes")
    {
        conform_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-class-violate-rate")
    {
        conform_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-packets")
    {
        exceed_class_exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-bytes")
    {
        exceed_class_exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-exceed-rate")
    {
        exceed_class_exceed_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-packets")
    {
        exceed_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-bytes")
    {
        exceed_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-class-violate-rate")
    {
        exceed_class_violate_rate.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-packets")
    {
        violate_class_violate_packets.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-bytes")
    {
        violate_class_violate_bytes.yfilter = yfilter;
    }
    if(value_path == "violate-class-violate-rate")
    {
        violate_class_violate_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::PoliceStatsArray::ColorClassStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "conform-class-conform-packets" || name == "conform-class-conform-bytes" || name == "conform-class-conform-rate" || name == "conform-class-exceed-packets" || name == "conform-class-exceed-bytes" || name == "conform-class-exceed-rate" || name == "conform-class-violate-packets" || name == "conform-class-violate-bytes" || name == "conform-class-violate-rate" || name == "exceed-class-exceed-packets" || name == "exceed-class-exceed-bytes" || name == "exceed-class-exceed-rate" || name == "exceed-class-violate-packets" || name == "exceed-class-violate-bytes" || name == "exceed-class-violate-rate" || name == "violate-class-violate-packets" || name == "violate-class-violate-bytes" || name == "violate-class-violate-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::WredStatsArray()
    :
    profile_title{YType::str, "profile-title"},
    red_transmit_packets{YType::uint64, "red-transmit-packets"},
    red_transmit_bytes{YType::uint64, "red-transmit-bytes"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    red_ecn_marked_packets{YType::uint64, "red-ecn-marked-packets"},
    red_ecn_marked_bytes{YType::uint64, "red-ecn-marked-bytes"}
{

    yang_name = "wred-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::~WredStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_data() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_data())
            return true;
    }
    return profile_title.is_set
	|| red_transmit_packets.is_set
	|| red_transmit_bytes.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| red_ecn_marked_packets.is_set
	|| red_ecn_marked_bytes.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_operation() const
{
    for (std::size_t index=0; index<red_label.size(); index++)
    {
        if(red_label[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(profile_title.yfilter)
	|| ydk::is_set(red_transmit_packets.yfilter)
	|| ydk::is_set(red_transmit_bytes.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(red_ecn_marked_packets.yfilter)
	|| ydk::is_set(red_ecn_marked_bytes.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "wred-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (profile_title.is_set || is_set(profile_title.yfilter)) leaf_name_data.push_back(profile_title.get_name_leafdata());
    if (red_transmit_packets.is_set || is_set(red_transmit_packets.yfilter)) leaf_name_data.push_back(red_transmit_packets.get_name_leafdata());
    if (red_transmit_bytes.is_set || is_set(red_transmit_bytes.yfilter)) leaf_name_data.push_back(red_transmit_bytes.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (red_ecn_marked_packets.is_set || is_set(red_ecn_marked_packets.yfilter)) leaf_name_data.push_back(red_ecn_marked_packets.get_name_leafdata());
    if (red_ecn_marked_bytes.is_set || is_set(red_ecn_marked_bytes.yfilter)) leaf_name_data.push_back(red_ecn_marked_bytes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "red-label")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel>();
        c->parent = this;
        red_label.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : red_label)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "profile-title")
    {
        profile_title = value;
        profile_title.value_namespace = name_space;
        profile_title.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets = value;
        red_transmit_packets.value_namespace = name_space;
        red_transmit_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes = value;
        red_transmit_bytes.value_namespace = name_space;
        red_transmit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets = value;
        red_ecn_marked_packets.value_namespace = name_space;
        red_ecn_marked_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes = value;
        red_ecn_marked_bytes.value_namespace = name_space;
        red_ecn_marked_bytes.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "profile-title")
    {
        profile_title.yfilter = yfilter;
    }
    if(value_path == "red-transmit-packets")
    {
        red_transmit_packets.yfilter = yfilter;
    }
    if(value_path == "red-transmit-bytes")
    {
        red_transmit_bytes.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-packets")
    {
        red_ecn_marked_packets.yfilter = yfilter;
    }
    if(value_path == "red-ecn-marked-bytes")
    {
        red_ecn_marked_bytes.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "red-label" || name == "profile-title" || name == "red-transmit-packets" || name == "red-transmit-bytes" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "red-ecn-marked-packets" || name == "red-ecn-marked-bytes")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::RedLabel()
    :
    wred_type{YType::enumeration, "wred-type"},
    value_{YType::uint8, "value"}
{

    yang_name = "red-label"; yang_parent_name = "wred-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::~RedLabel()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_data() const
{
    return wred_type.is_set
	|| value_.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(wred_type.yfilter)
	|| ydk::is_set(value_.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "red-label";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (wred_type.is_set || is_set(wred_type.yfilter)) leaf_name_data.push_back(wred_type.get_name_leafdata());
    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "wred-type")
    {
        wred_type = value;
        wred_type.value_namespace = name_space;
        wred_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "wred-type")
    {
        wred_type.yfilter = yfilter;
    }
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::ChildPolicy::ClassStats_::WredStatsArray::RedLabel::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "wred-type" || name == "value")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::CacStats()
    :
    drop_packets{YType::uint64, "drop-packets"},
    drop_bytes{YType::uint64, "drop-bytes"},
    drop_rates{YType::uint32, "drop-rates"},
    admitpackets{YType::uint64, "admitpackets"},
    admit_bytes{YType::uint64, "admit-bytes"},
    admit_rates{YType::uint32, "admit-rates"}
{

    yang_name = "cac-stats"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::~CacStats()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_data() const
{
    return drop_packets.is_set
	|| drop_bytes.is_set
	|| drop_rates.is_set
	|| admitpackets.is_set
	|| admit_bytes.is_set
	|| admit_rates.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(drop_packets.yfilter)
	|| ydk::is_set(drop_bytes.yfilter)
	|| ydk::is_set(drop_rates.yfilter)
	|| ydk::is_set(admitpackets.yfilter)
	|| ydk::is_set(admit_bytes.yfilter)
	|| ydk::is_set(admit_rates.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cac-stats";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (drop_packets.is_set || is_set(drop_packets.yfilter)) leaf_name_data.push_back(drop_packets.get_name_leafdata());
    if (drop_bytes.is_set || is_set(drop_bytes.yfilter)) leaf_name_data.push_back(drop_bytes.get_name_leafdata());
    if (drop_rates.is_set || is_set(drop_rates.yfilter)) leaf_name_data.push_back(drop_rates.get_name_leafdata());
    if (admitpackets.is_set || is_set(admitpackets.yfilter)) leaf_name_data.push_back(admitpackets.get_name_leafdata());
    if (admit_bytes.is_set || is_set(admit_bytes.yfilter)) leaf_name_data.push_back(admit_bytes.get_name_leafdata());
    if (admit_rates.is_set || is_set(admit_rates.yfilter)) leaf_name_data.push_back(admit_rates.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "drop-packets")
    {
        drop_packets = value;
        drop_packets.value_namespace = name_space;
        drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes = value;
        drop_bytes.value_namespace = name_space;
        drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "drop-rates")
    {
        drop_rates = value;
        drop_rates.value_namespace = name_space;
        drop_rates.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admitpackets")
    {
        admitpackets = value;
        admitpackets.value_namespace = name_space;
        admitpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes = value;
        admit_bytes.value_namespace = name_space;
        admit_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "admit-rates")
    {
        admit_rates = value;
        admit_rates.value_namespace = name_space;
        admit_rates.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "drop-packets")
    {
        drop_packets.yfilter = yfilter;
    }
    if(value_path == "drop-bytes")
    {
        drop_bytes.yfilter = yfilter;
    }
    if(value_path == "drop-rates")
    {
        drop_rates.yfilter = yfilter;
    }
    if(value_path == "admitpackets")
    {
        admitpackets.yfilter = yfilter;
    }
    if(value_path == "admit-bytes")
    {
        admit_bytes.yfilter = yfilter;
    }
    if(value_path == "admit-rates")
    {
        admit_rates.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::CacStats::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drop-packets" || name == "drop-bytes" || name == "drop-rates" || name == "admitpackets" || name == "admit-bytes" || name == "admit-rates")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueStatsArray()
    :
    queue_id{YType::uint32, "queue-id"},
    tail_drop_packets{YType::uint64, "tail-drop-packets"},
    tail_drop_bytes{YType::uint64, "tail-drop-bytes"},
    atm_clp0_drop_packets{YType::uint64, "atm-clp0-drop-packets"},
    atm_clp0_drop_bytes{YType::uint64, "atm-clp0-drop-bytes"},
    atm_clp1_drop_packets{YType::uint64, "atm-clp1-drop-packets"},
    atm_clp1_drop_bytes{YType::uint64, "atm-clp1-drop-bytes"},
    queue_drop_threshold{YType::uint32, "queue-drop-threshold"},
    forced_wred_stats_display{YType::boolean, "forced-wred-stats-display"},
    random_drop_packets{YType::uint64, "random-drop-packets"},
    random_drop_bytes{YType::uint64, "random-drop-bytes"},
    max_threshold_packets{YType::uint64, "max-threshold-packets"},
    max_threshold_bytes{YType::uint64, "max-threshold-bytes"},
    conform_packets{YType::uint64, "conform-packets"},
    conform_bytes{YType::uint64, "conform-bytes"},
    exceed_packets{YType::uint64, "exceed-packets"},
    exceed_bytes{YType::uint64, "exceed-bytes"},
    conform_rate{YType::uint32, "conform-rate"},
    exceed_rate{YType::uint32, "exceed-rate"}
{

    yang_name = "queue-stats-array"; yang_parent_name = "class-stats"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::~QueueStatsArray()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_data() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_data())
            return true;
    }
    return queue_id.is_set
	|| tail_drop_packets.is_set
	|| tail_drop_bytes.is_set
	|| atm_clp0_drop_packets.is_set
	|| atm_clp0_drop_bytes.is_set
	|| atm_clp1_drop_packets.is_set
	|| atm_clp1_drop_bytes.is_set
	|| queue_drop_threshold.is_set
	|| forced_wred_stats_display.is_set
	|| random_drop_packets.is_set
	|| random_drop_bytes.is_set
	|| max_threshold_packets.is_set
	|| max_threshold_bytes.is_set
	|| conform_packets.is_set
	|| conform_bytes.is_set
	|| exceed_packets.is_set
	|| exceed_bytes.is_set
	|| conform_rate.is_set
	|| exceed_rate.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_operation() const
{
    for (std::size_t index=0; index<queue_instance_length.size(); index++)
    {
        if(queue_instance_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_average_length.size(); index++)
    {
        if(queue_average_length[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<queue_max_length.size(); index++)
    {
        if(queue_max_length[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(queue_id.yfilter)
	|| ydk::is_set(tail_drop_packets.yfilter)
	|| ydk::is_set(tail_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp0_drop_packets.yfilter)
	|| ydk::is_set(atm_clp0_drop_bytes.yfilter)
	|| ydk::is_set(atm_clp1_drop_packets.yfilter)
	|| ydk::is_set(atm_clp1_drop_bytes.yfilter)
	|| ydk::is_set(queue_drop_threshold.yfilter)
	|| ydk::is_set(forced_wred_stats_display.yfilter)
	|| ydk::is_set(random_drop_packets.yfilter)
	|| ydk::is_set(random_drop_bytes.yfilter)
	|| ydk::is_set(max_threshold_packets.yfilter)
	|| ydk::is_set(max_threshold_bytes.yfilter)
	|| ydk::is_set(conform_packets.yfilter)
	|| ydk::is_set(conform_bytes.yfilter)
	|| ydk::is_set(exceed_packets.yfilter)
	|| ydk::is_set(exceed_bytes.yfilter)
	|| ydk::is_set(conform_rate.yfilter)
	|| ydk::is_set(exceed_rate.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-stats-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (queue_id.is_set || is_set(queue_id.yfilter)) leaf_name_data.push_back(queue_id.get_name_leafdata());
    if (tail_drop_packets.is_set || is_set(tail_drop_packets.yfilter)) leaf_name_data.push_back(tail_drop_packets.get_name_leafdata());
    if (tail_drop_bytes.is_set || is_set(tail_drop_bytes.yfilter)) leaf_name_data.push_back(tail_drop_bytes.get_name_leafdata());
    if (atm_clp0_drop_packets.is_set || is_set(atm_clp0_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp0_drop_packets.get_name_leafdata());
    if (atm_clp0_drop_bytes.is_set || is_set(atm_clp0_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp0_drop_bytes.get_name_leafdata());
    if (atm_clp1_drop_packets.is_set || is_set(atm_clp1_drop_packets.yfilter)) leaf_name_data.push_back(atm_clp1_drop_packets.get_name_leafdata());
    if (atm_clp1_drop_bytes.is_set || is_set(atm_clp1_drop_bytes.yfilter)) leaf_name_data.push_back(atm_clp1_drop_bytes.get_name_leafdata());
    if (queue_drop_threshold.is_set || is_set(queue_drop_threshold.yfilter)) leaf_name_data.push_back(queue_drop_threshold.get_name_leafdata());
    if (forced_wred_stats_display.is_set || is_set(forced_wred_stats_display.yfilter)) leaf_name_data.push_back(forced_wred_stats_display.get_name_leafdata());
    if (random_drop_packets.is_set || is_set(random_drop_packets.yfilter)) leaf_name_data.push_back(random_drop_packets.get_name_leafdata());
    if (random_drop_bytes.is_set || is_set(random_drop_bytes.yfilter)) leaf_name_data.push_back(random_drop_bytes.get_name_leafdata());
    if (max_threshold_packets.is_set || is_set(max_threshold_packets.yfilter)) leaf_name_data.push_back(max_threshold_packets.get_name_leafdata());
    if (max_threshold_bytes.is_set || is_set(max_threshold_bytes.yfilter)) leaf_name_data.push_back(max_threshold_bytes.get_name_leafdata());
    if (conform_packets.is_set || is_set(conform_packets.yfilter)) leaf_name_data.push_back(conform_packets.get_name_leafdata());
    if (conform_bytes.is_set || is_set(conform_bytes.yfilter)) leaf_name_data.push_back(conform_bytes.get_name_leafdata());
    if (exceed_packets.is_set || is_set(exceed_packets.yfilter)) leaf_name_data.push_back(exceed_packets.get_name_leafdata());
    if (exceed_bytes.is_set || is_set(exceed_bytes.yfilter)) leaf_name_data.push_back(exceed_bytes.get_name_leafdata());
    if (conform_rate.is_set || is_set(conform_rate.yfilter)) leaf_name_data.push_back(conform_rate.get_name_leafdata());
    if (exceed_rate.is_set || is_set(exceed_rate.yfilter)) leaf_name_data.push_back(exceed_rate.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "queue-instance-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength>();
        c->parent = this;
        queue_instance_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-average-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength>();
        c->parent = this;
        queue_average_length.push_back(c);
        return c;
    }

    if(child_yang_name == "queue-max-length")
    {
        auto c = std::make_shared<Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength>();
        c->parent = this;
        queue_max_length.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    count = 0;
    for (auto const & c : queue_instance_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_average_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    count = 0;
    for (auto const & c : queue_max_length)
    {
        if(children.find(c->get_segment_path()) == children.end())
            children[c->get_segment_path()] = c;
        else
            children[c->get_segment_path()+count++] = c;
    }

    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "queue-id")
    {
        queue_id = value;
        queue_id.value_namespace = name_space;
        queue_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets = value;
        tail_drop_packets.value_namespace = name_space;
        tail_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes = value;
        tail_drop_bytes.value_namespace = name_space;
        tail_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets = value;
        atm_clp0_drop_packets.value_namespace = name_space;
        atm_clp0_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes = value;
        atm_clp0_drop_bytes.value_namespace = name_space;
        atm_clp0_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets = value;
        atm_clp1_drop_packets.value_namespace = name_space;
        atm_clp1_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes = value;
        atm_clp1_drop_bytes.value_namespace = name_space;
        atm_clp1_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold = value;
        queue_drop_threshold.value_namespace = name_space;
        queue_drop_threshold.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display = value;
        forced_wred_stats_display.value_namespace = name_space;
        forced_wred_stats_display.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets = value;
        random_drop_packets.value_namespace = name_space;
        random_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes = value;
        random_drop_bytes.value_namespace = name_space;
        random_drop_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets = value;
        max_threshold_packets.value_namespace = name_space;
        max_threshold_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes = value;
        max_threshold_bytes.value_namespace = name_space;
        max_threshold_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-packets")
    {
        conform_packets = value;
        conform_packets.value_namespace = name_space;
        conform_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes = value;
        conform_bytes.value_namespace = name_space;
        conform_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets = value;
        exceed_packets.value_namespace = name_space;
        exceed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes = value;
        exceed_bytes.value_namespace = name_space;
        exceed_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "conform-rate")
    {
        conform_rate = value;
        conform_rate.value_namespace = name_space;
        conform_rate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate = value;
        exceed_rate.value_namespace = name_space;
        exceed_rate.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "queue-id")
    {
        queue_id.yfilter = yfilter;
    }
    if(value_path == "tail-drop-packets")
    {
        tail_drop_packets.yfilter = yfilter;
    }
    if(value_path == "tail-drop-bytes")
    {
        tail_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-packets")
    {
        atm_clp0_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp0-drop-bytes")
    {
        atm_clp0_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-packets")
    {
        atm_clp1_drop_packets.yfilter = yfilter;
    }
    if(value_path == "atm-clp1-drop-bytes")
    {
        atm_clp1_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "queue-drop-threshold")
    {
        queue_drop_threshold.yfilter = yfilter;
    }
    if(value_path == "forced-wred-stats-display")
    {
        forced_wred_stats_display.yfilter = yfilter;
    }
    if(value_path == "random-drop-packets")
    {
        random_drop_packets.yfilter = yfilter;
    }
    if(value_path == "random-drop-bytes")
    {
        random_drop_bytes.yfilter = yfilter;
    }
    if(value_path == "max-threshold-packets")
    {
        max_threshold_packets.yfilter = yfilter;
    }
    if(value_path == "max-threshold-bytes")
    {
        max_threshold_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-packets")
    {
        conform_packets.yfilter = yfilter;
    }
    if(value_path == "conform-bytes")
    {
        conform_bytes.yfilter = yfilter;
    }
    if(value_path == "exceed-packets")
    {
        exceed_packets.yfilter = yfilter;
    }
    if(value_path == "exceed-bytes")
    {
        exceed_bytes.yfilter = yfilter;
    }
    if(value_path == "conform-rate")
    {
        conform_rate.yfilter = yfilter;
    }
    if(value_path == "exceed-rate")
    {
        exceed_rate.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "queue-instance-length" || name == "queue-average-length" || name == "queue-max-length" || name == "queue-id" || name == "tail-drop-packets" || name == "tail-drop-bytes" || name == "atm-clp0-drop-packets" || name == "atm-clp0-drop-bytes" || name == "atm-clp1-drop-packets" || name == "atm-clp1-drop-bytes" || name == "queue-drop-threshold" || name == "forced-wred-stats-display" || name == "random-drop-packets" || name == "random-drop-bytes" || name == "max-threshold-packets" || name == "max-threshold-bytes" || name == "conform-packets" || name == "conform-bytes" || name == "exceed-packets" || name == "exceed-bytes" || name == "conform-rate" || name == "exceed-rate")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::QueueInstanceLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-instance-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::~QueueInstanceLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-instance-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueInstanceLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::QueueAverageLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-average-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::~QueueAverageLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-average-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueAverageLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::QueueMaxLength()
    :
    value_{YType::uint32, "value"},
    unit{YType::enumeration, "unit"}
{

    yang_name = "queue-max-length"; yang_parent_name = "queue-stats-array"; is_top_level_class = false; has_list_ancestor = true;
}

Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::~QueueMaxLength()
{
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_data() const
{
    return value_.is_set
	|| unit.is_set;
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(value_.yfilter)
	|| ydk::is_set(unit.yfilter);
}

std::string Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "queue-max-length";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (value_.is_set || is_set(value_.yfilter)) leaf_name_data.push_back(value_.get_name_leafdata());
    if (unit.is_set || is_set(unit.yfilter)) leaf_name_data.push_back(unit.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    char count=0;
    return children;
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "value")
    {
        value_ = value;
        value_.value_namespace = name_space;
        value_.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unit")
    {
        unit = value;
        unit.value_namespace = name_space;
        unit.value_namespace_prefix = name_space_prefix;
    }
}

void Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "value")
    {
        value_.yfilter = yfilter;
    }
    if(value_path == "unit")
    {
        unit.yfilter = yfilter;
    }
}

bool Qos::NvInterfaceTable::Interface::MemberInterfaces::MemberInterface::Input::ServicePolicyNames::ServicePolicyInstance::Statistics::ClassStats::QueueStatsArray::QueueMaxLength::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "value" || name == "unit")
        return true;
    return false;
}

const Enum::YLeaf Wred::wred_cos_cmd {0, "wred-cos-cmd"};
const Enum::YLeaf Wred::wred_dscp_cmd {1, "wred-dscp-cmd"};
const Enum::YLeaf Wred::wred_precedence_cmd {2, "wred-precedence-cmd"};
const Enum::YLeaf Wred::wred_discard_class_cmd {3, "wred-discard-class-cmd"};
const Enum::YLeaf Wred::wred_mpls_exp_cmd {4, "wred-mpls-exp-cmd"};
const Enum::YLeaf Wred::red_with_user_min_max {5, "red-with-user-min-max"};
const Enum::YLeaf Wred::red_with_default_min_max {6, "red-with-default-min-max"};
const Enum::YLeaf Wred::wred_dei_cmd {7, "wred-dei-cmd"};
const Enum::YLeaf Wred::wred_ecn_cmd {8, "wred-ecn-cmd"};
const Enum::YLeaf Wred::wred_invalid_cmd {9, "wred-invalid-cmd"};

const Enum::YLeaf PolicyParamUnit::policy_param_unit_invalid {0, "policy-param-unit-invalid"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_bytes {1, "policy-param-unit-bytes"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_kbytes {2, "policy-param-unit-kbytes"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_mbytes {3, "policy-param-unit-mbytes"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_gbytes {4, "policy-param-unit-gbytes"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_bitsps {5, "policy-param-unit-bitsps"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_kbitsps {6, "policy-param-unit-kbitsps"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_mbitsps {7, "policy-param-unit-mbitsps"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_gbitsps {8, "policy-param-unit-gbitsps"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_cells_ps {9, "policy-param-unit-cells-ps"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_packets_ps {10, "policy-param-unit-packets-ps"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_us {11, "policy-param-unit-us"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_ms {12, "policy-param-unit-ms"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_seconds {13, "policy-param-unit-seconds"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_packets {14, "policy-param-unit-packets"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_cells {15, "policy-param-unit-cells"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_percent {16, "policy-param-unit-percent"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_per_thousand {17, "policy-param-unit-per-thousand"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_per_million {18, "policy-param-unit-per-million"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_hz {19, "policy-param-unit-hz"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_khz {20, "policy-param-unit-khz"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_mhz {21, "policy-param-unit-mhz"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_ratio {22, "policy-param-unit-ratio"};
const Enum::YLeaf PolicyParamUnit::policy_param_unit_max {23, "policy-param-unit-max"};

const Enum::YLeaf CacState::unknown {0, "unknown"};
const Enum::YLeaf CacState::admit {1, "admit"};
const Enum::YLeaf CacState::redirect {2, "redirect"};
const Enum::YLeaf CacState::ubrl {3, "ubrl"};

const Enum::YLeaf PolicyState::active {0, "active"};
const Enum::YLeaf PolicyState::suspended {1, "suspended"};

const Enum::YLeaf QosCapsOperationEnum::add {0, "add"};
const Enum::YLeaf QosCapsOperationEnum::remove {1, "remove"};
const Enum::YLeaf QosCapsOperationEnum::replace {2, "replace"};
const Enum::YLeaf QosCapsOperationEnum::modify {3, "modify"};
const Enum::YLeaf QosCapsOperationEnum::unknown {4, "unknown"};

const Enum::YLeaf QosMaSatCapsTypeEnum::input {0, "input"};
const Enum::YLeaf QosMaSatCapsTypeEnum::output {1, "output"};
const Enum::YLeaf QosMaSatCapsTypeEnum::unknown {2, "unknown"};


}
}

