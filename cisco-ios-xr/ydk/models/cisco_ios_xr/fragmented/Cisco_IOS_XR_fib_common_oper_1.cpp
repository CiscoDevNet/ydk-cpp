
#include <sstream>
#include <iostream>
#include <ydk/entity_util.hpp>
#include "bundle_info.hpp"
#include "generated_entity_lookup.hpp"
#include "Cisco_IOS_XR_fib_common_oper_1.hpp"
#include "Cisco_IOS_XR_fib_common_oper_2.hpp"

using namespace ydk;

namespace cisco_ios_xr {
namespace Cisco_IOS_XR_fib_common_oper {

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::TunnelIsForwardClass()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "tunnel-is-forward-class"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::~TunnelIsForwardClass()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tunnel-is-forward-class";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::WeightsOfPath()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "weights-of-path"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::~WeightsOfPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "weights-of-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::ExtensionObject()
    :
    type{YType::enumeration, "type"}
    	,
    sfecd_le(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe>())
{
    sfecd_le->parent = this;

    yang_name = "extension-object"; yang_parent_name = "ip-prefix-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::~ExtensionObject()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::has_data() const
{
    return type.is_set
	|| (sfecd_le !=  nullptr && sfecd_le->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (sfecd_le !=  nullptr && sfecd_le->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "extension-object";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sfecd-le")
    {
        if(sfecd_le == nullptr)
        {
            sfecd_le = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe>();
        }
        return sfecd_le;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(sfecd_le != nullptr)
    {
        children["sfecd-le"] = sfecd_le;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sfecd-le" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe::SfecdLe()
    :
    context_label{YType::uint32, "context-label"},
    context_label_flag{YType::boolean, "context-label-flag"}
{

    yang_name = "sfecd-le"; yang_parent_name = "extension-object"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe::~SfecdLe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe::has_data() const
{
    return context_label.is_set
	|| context_label_flag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(context_label.yfilter)
	|| ydk::is_set(context_label_flag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sfecd-le";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (context_label.is_set || is_set(context_label.yfilter)) leaf_name_data.push_back(context_label.get_name_leafdata());
    if (context_label_flag.is_set || is_set(context_label_flag.yfilter)) leaf_name_data.push_back(context_label_flag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "context-label")
    {
        context_label = value;
        context_label.value_namespace = name_space;
        context_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "context-label-flag")
    {
        context_label_flag = value;
        context_label_flag.value_namespace = name_space;
        context_label_flag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "context-label")
    {
        context_label.yfilter = yfilter;
    }
    if(value_path == "context-label-flag")
    {
        context_label_flag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::ExtensionObject::SfecdLe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "context-label" || name == "context-label-flag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibEntryPath()
{

    yang_name = "fib-entry-path"; yang_parent_name = "ip-prefix-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::~FibEntryPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::has_data() const
{
    for (std::size_t index=0; index<fib_sh_tbl_path.size(); index++)
    {
        if(fib_sh_tbl_path[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::has_operation() const
{
    for (std::size_t index=0; index<fib_sh_tbl_path.size(); index++)
    {
        if(fib_sh_tbl_path[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-entry-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fib-sh-tbl-path")
    {
        for(auto const & c : fib_sh_tbl_path)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath>();
        c->parent = this;
        fib_sh_tbl_path.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : fib_sh_tbl_path)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fib-sh-tbl-path")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::FibShTblPath()
    :
    attached_path{YType::boolean, "attached-path"},
    backup_index{YType::uint8, "backup-index"},
    backup_path{YType::boolean, "backup-path"},
    best_external_path{YType::boolean, "best-external-path"},
    brief_interface_handle{YType::str, "brief-interface-handle"},
    brief_lfa_protection_type{YType::enumeration, "brief-lfa-protection-type"},
    brief_next_hop_prefix{YType::str, "brief-next-hop-prefix"},
    brief_pnode_address{YType::str, "brief-pnode-address"},
    brief_qnode_address{YType::str, "brief-qnode-address"},
    hardware_information{YType::str, "hardware-information"},
    next_hop_index{YType::uint32, "next-hop-index"},
    packets_received_path{YType::boolean, "packets-received-path"},
    parent_interface_handle{YType::str, "parent-interface-handle"},
    path_dlb{YType::boolean, "path-dlb"},
    path_flags{YType::uint32, "path-flags"},
    path_index{YType::uint8, "path-index"},
    path_info_flags{YType::uint16, "path-info-flags"},
    protect_ignore{YType::boolean, "protect-ignore"},
    recursionvia_len{YType::uint8, "recursionvia-len"},
    recursive_path{YType::boolean, "recursive-path"},
    resolved_path{YType::boolean, "resolved-path"},
    via_label_to_recurse{YType::uint32, "via-label-to-recurse"}
    	,
    more_detail_about_path(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath>())
	,mpls_information_for_path(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath>())
{
    more_detail_about_path->parent = this;
    mpls_information_for_path->parent = this;

    yang_name = "fib-sh-tbl-path"; yang_parent_name = "fib-entry-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::~FibShTblPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::has_data() const
{
    return attached_path.is_set
	|| backup_index.is_set
	|| backup_path.is_set
	|| best_external_path.is_set
	|| brief_interface_handle.is_set
	|| brief_lfa_protection_type.is_set
	|| brief_next_hop_prefix.is_set
	|| brief_pnode_address.is_set
	|| brief_qnode_address.is_set
	|| hardware_information.is_set
	|| next_hop_index.is_set
	|| packets_received_path.is_set
	|| parent_interface_handle.is_set
	|| path_dlb.is_set
	|| path_flags.is_set
	|| path_index.is_set
	|| path_info_flags.is_set
	|| protect_ignore.is_set
	|| recursionvia_len.is_set
	|| recursive_path.is_set
	|| resolved_path.is_set
	|| via_label_to_recurse.is_set
	|| (more_detail_about_path !=  nullptr && more_detail_about_path->has_data())
	|| (mpls_information_for_path !=  nullptr && mpls_information_for_path->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(attached_path.yfilter)
	|| ydk::is_set(backup_index.yfilter)
	|| ydk::is_set(backup_path.yfilter)
	|| ydk::is_set(best_external_path.yfilter)
	|| ydk::is_set(brief_interface_handle.yfilter)
	|| ydk::is_set(brief_lfa_protection_type.yfilter)
	|| ydk::is_set(brief_next_hop_prefix.yfilter)
	|| ydk::is_set(brief_pnode_address.yfilter)
	|| ydk::is_set(brief_qnode_address.yfilter)
	|| ydk::is_set(hardware_information.yfilter)
	|| ydk::is_set(next_hop_index.yfilter)
	|| ydk::is_set(packets_received_path.yfilter)
	|| ydk::is_set(parent_interface_handle.yfilter)
	|| ydk::is_set(path_dlb.yfilter)
	|| ydk::is_set(path_flags.yfilter)
	|| ydk::is_set(path_index.yfilter)
	|| ydk::is_set(path_info_flags.yfilter)
	|| ydk::is_set(protect_ignore.yfilter)
	|| ydk::is_set(recursionvia_len.yfilter)
	|| ydk::is_set(recursive_path.yfilter)
	|| ydk::is_set(resolved_path.yfilter)
	|| ydk::is_set(via_label_to_recurse.yfilter)
	|| (more_detail_about_path !=  nullptr && more_detail_about_path->has_operation())
	|| (mpls_information_for_path !=  nullptr && mpls_information_for_path->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-sh-tbl-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (attached_path.is_set || is_set(attached_path.yfilter)) leaf_name_data.push_back(attached_path.get_name_leafdata());
    if (backup_index.is_set || is_set(backup_index.yfilter)) leaf_name_data.push_back(backup_index.get_name_leafdata());
    if (backup_path.is_set || is_set(backup_path.yfilter)) leaf_name_data.push_back(backup_path.get_name_leafdata());
    if (best_external_path.is_set || is_set(best_external_path.yfilter)) leaf_name_data.push_back(best_external_path.get_name_leafdata());
    if (brief_interface_handle.is_set || is_set(brief_interface_handle.yfilter)) leaf_name_data.push_back(brief_interface_handle.get_name_leafdata());
    if (brief_lfa_protection_type.is_set || is_set(brief_lfa_protection_type.yfilter)) leaf_name_data.push_back(brief_lfa_protection_type.get_name_leafdata());
    if (brief_next_hop_prefix.is_set || is_set(brief_next_hop_prefix.yfilter)) leaf_name_data.push_back(brief_next_hop_prefix.get_name_leafdata());
    if (brief_pnode_address.is_set || is_set(brief_pnode_address.yfilter)) leaf_name_data.push_back(brief_pnode_address.get_name_leafdata());
    if (brief_qnode_address.is_set || is_set(brief_qnode_address.yfilter)) leaf_name_data.push_back(brief_qnode_address.get_name_leafdata());
    if (hardware_information.is_set || is_set(hardware_information.yfilter)) leaf_name_data.push_back(hardware_information.get_name_leafdata());
    if (next_hop_index.is_set || is_set(next_hop_index.yfilter)) leaf_name_data.push_back(next_hop_index.get_name_leafdata());
    if (packets_received_path.is_set || is_set(packets_received_path.yfilter)) leaf_name_data.push_back(packets_received_path.get_name_leafdata());
    if (parent_interface_handle.is_set || is_set(parent_interface_handle.yfilter)) leaf_name_data.push_back(parent_interface_handle.get_name_leafdata());
    if (path_dlb.is_set || is_set(path_dlb.yfilter)) leaf_name_data.push_back(path_dlb.get_name_leafdata());
    if (path_flags.is_set || is_set(path_flags.yfilter)) leaf_name_data.push_back(path_flags.get_name_leafdata());
    if (path_index.is_set || is_set(path_index.yfilter)) leaf_name_data.push_back(path_index.get_name_leafdata());
    if (path_info_flags.is_set || is_set(path_info_flags.yfilter)) leaf_name_data.push_back(path_info_flags.get_name_leafdata());
    if (protect_ignore.is_set || is_set(protect_ignore.yfilter)) leaf_name_data.push_back(protect_ignore.get_name_leafdata());
    if (recursionvia_len.is_set || is_set(recursionvia_len.yfilter)) leaf_name_data.push_back(recursionvia_len.get_name_leafdata());
    if (recursive_path.is_set || is_set(recursive_path.yfilter)) leaf_name_data.push_back(recursive_path.get_name_leafdata());
    if (resolved_path.is_set || is_set(resolved_path.yfilter)) leaf_name_data.push_back(resolved_path.get_name_leafdata());
    if (via_label_to_recurse.is_set || is_set(via_label_to_recurse.yfilter)) leaf_name_data.push_back(via_label_to_recurse.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "more-detail-about-path")
    {
        if(more_detail_about_path == nullptr)
        {
            more_detail_about_path = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath>();
        }
        return more_detail_about_path;
    }

    if(child_yang_name == "mpls-information-for-path")
    {
        if(mpls_information_for_path == nullptr)
        {
            mpls_information_for_path = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath>();
        }
        return mpls_information_for_path;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(more_detail_about_path != nullptr)
    {
        children["more-detail-about-path"] = more_detail_about_path;
    }

    if(mpls_information_for_path != nullptr)
    {
        children["mpls-information-for-path"] = mpls_information_for_path;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "attached-path")
    {
        attached_path = value;
        attached_path.value_namespace = name_space;
        attached_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "backup-index")
    {
        backup_index = value;
        backup_index.value_namespace = name_space;
        backup_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "backup-path")
    {
        backup_path = value;
        backup_path.value_namespace = name_space;
        backup_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "best-external-path")
    {
        best_external_path = value;
        best_external_path.value_namespace = name_space;
        best_external_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-interface-handle")
    {
        brief_interface_handle = value;
        brief_interface_handle.value_namespace = name_space;
        brief_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-lfa-protection-type")
    {
        brief_lfa_protection_type = value;
        brief_lfa_protection_type.value_namespace = name_space;
        brief_lfa_protection_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-next-hop-prefix")
    {
        brief_next_hop_prefix = value;
        brief_next_hop_prefix.value_namespace = name_space;
        brief_next_hop_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-pnode-address")
    {
        brief_pnode_address = value;
        brief_pnode_address.value_namespace = name_space;
        brief_pnode_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-qnode-address")
    {
        brief_qnode_address = value;
        brief_qnode_address.value_namespace = name_space;
        brief_qnode_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "hardware-information")
    {
        hardware_information = value;
        hardware_information.value_namespace = name_space;
        hardware_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-index")
    {
        next_hop_index = value;
        next_hop_index.value_namespace = name_space;
        next_hop_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "packets-received-path")
    {
        packets_received_path = value;
        packets_received_path.value_namespace = name_space;
        packets_received_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-interface-handle")
    {
        parent_interface_handle = value;
        parent_interface_handle.value_namespace = name_space;
        parent_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-dlb")
    {
        path_dlb = value;
        path_dlb.value_namespace = name_space;
        path_dlb.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-flags")
    {
        path_flags = value;
        path_flags.value_namespace = name_space;
        path_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-index")
    {
        path_index = value;
        path_index.value_namespace = name_space;
        path_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-info-flags")
    {
        path_info_flags = value;
        path_info_flags.value_namespace = name_space;
        path_info_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protect-ignore")
    {
        protect_ignore = value;
        protect_ignore.value_namespace = name_space;
        protect_ignore.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursionvia-len")
    {
        recursionvia_len = value;
        recursionvia_len.value_namespace = name_space;
        recursionvia_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path")
    {
        recursive_path = value;
        recursive_path.value_namespace = name_space;
        recursive_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "resolved-path")
    {
        resolved_path = value;
        resolved_path.value_namespace = name_space;
        resolved_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "via-label-to-recurse")
    {
        via_label_to_recurse = value;
        via_label_to_recurse.value_namespace = name_space;
        via_label_to_recurse.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "attached-path")
    {
        attached_path.yfilter = yfilter;
    }
    if(value_path == "backup-index")
    {
        backup_index.yfilter = yfilter;
    }
    if(value_path == "backup-path")
    {
        backup_path.yfilter = yfilter;
    }
    if(value_path == "best-external-path")
    {
        best_external_path.yfilter = yfilter;
    }
    if(value_path == "brief-interface-handle")
    {
        brief_interface_handle.yfilter = yfilter;
    }
    if(value_path == "brief-lfa-protection-type")
    {
        brief_lfa_protection_type.yfilter = yfilter;
    }
    if(value_path == "brief-next-hop-prefix")
    {
        brief_next_hop_prefix.yfilter = yfilter;
    }
    if(value_path == "brief-pnode-address")
    {
        brief_pnode_address.yfilter = yfilter;
    }
    if(value_path == "brief-qnode-address")
    {
        brief_qnode_address.yfilter = yfilter;
    }
    if(value_path == "hardware-information")
    {
        hardware_information.yfilter = yfilter;
    }
    if(value_path == "next-hop-index")
    {
        next_hop_index.yfilter = yfilter;
    }
    if(value_path == "packets-received-path")
    {
        packets_received_path.yfilter = yfilter;
    }
    if(value_path == "parent-interface-handle")
    {
        parent_interface_handle.yfilter = yfilter;
    }
    if(value_path == "path-dlb")
    {
        path_dlb.yfilter = yfilter;
    }
    if(value_path == "path-flags")
    {
        path_flags.yfilter = yfilter;
    }
    if(value_path == "path-index")
    {
        path_index.yfilter = yfilter;
    }
    if(value_path == "path-info-flags")
    {
        path_info_flags.yfilter = yfilter;
    }
    if(value_path == "protect-ignore")
    {
        protect_ignore.yfilter = yfilter;
    }
    if(value_path == "recursionvia-len")
    {
        recursionvia_len.yfilter = yfilter;
    }
    if(value_path == "recursive-path")
    {
        recursive_path.yfilter = yfilter;
    }
    if(value_path == "resolved-path")
    {
        resolved_path.yfilter = yfilter;
    }
    if(value_path == "via-label-to-recurse")
    {
        via_label_to_recurse.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "more-detail-about-path" || name == "mpls-information-for-path" || name == "attached-path" || name == "backup-index" || name == "backup-path" || name == "best-external-path" || name == "brief-interface-handle" || name == "brief-lfa-protection-type" || name == "brief-next-hop-prefix" || name == "brief-pnode-address" || name == "brief-qnode-address" || name == "hardware-information" || name == "next-hop-index" || name == "packets-received-path" || name == "parent-interface-handle" || name == "path-dlb" || name == "path-flags" || name == "path-index" || name == "path-info-flags" || name == "protect-ignore" || name == "recursionvia-len" || name == "recursive-path" || name == "resolved-path" || name == "via-label-to-recurse")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::MoreDetailAboutPath()
    :
    current_path_flag{YType::boolean, "current-path-flag"},
    detail_fib_adjacency_type{YType::enumeration, "detail-fib-adjacency-type"},
    detail_next_hop_prefix{YType::str, "detail-next-hop-prefix"},
    external_adjacency{YType::boolean, "external-adjacency"},
    fib_path_nh_information_type{YType::enumeration, "fib-path-nh-information-type"},
    fib_path_nh_information_type_special{YType::enumeration, "fib-path-nh-information-type-special"},
    interface_associated_path{YType::str, "interface-associated-path"},
    ip_address_to_recurse{YType::str, "ip-address-to-recurse"},
    label_to_recurse{YType::uint32, "label-to-recurse"},
    lisprlocid{YType::uint32, "lisprlocid"},
    next_hop_interface{YType::str, "next-hop-interface"},
    next_hop_mask_length{YType::uint8, "next-hop-mask-length"},
    next_hop_vrf{YType::str, "next-hop-vrf"},
    next_prefix_length{YType::uint8, "next-prefix-length"},
    next_prefix_length2{YType::uint8, "next-prefix-length2"},
    next_prefix_recursion{YType::str, "next-prefix-recursion"},
    next_prefix_recursion2{YType::str, "next-prefix-recursion2"},
    number_of_dependencies_this_path{YType::uint32, "number-of-dependencies-this-path"},
    recurse_prefix_object{YType::boolean, "recurse-prefix-object"},
    recurse_prefix_object2{YType::boolean, "recurse-prefix-object2"},
    recursive_path_information{YType::boolean, "recursive-path-information"},
    robin_reset_value{YType::uint8, "robin-reset-value"},
    tunnel_class{YType::uint8, "tunnel-class"},
    tunnel_is_forward_class{YType::boolean, "tunnel-is-forward-class"},
    tunnle_endpoint_id{YType::uint32, "tunnle-endpoint-id"},
    weight_of_path{YType::uint32, "weight-of-path"}
{

    yang_name = "more-detail-about-path"; yang_parent_name = "fib-sh-tbl-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::~MoreDetailAboutPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_data() const
{
    for (std::size_t index=0; index<spd_ipencap.size(); index++)
    {
        if(spd_ipencap[index]->has_data())
            return true;
    }
    return current_path_flag.is_set
	|| detail_fib_adjacency_type.is_set
	|| detail_next_hop_prefix.is_set
	|| external_adjacency.is_set
	|| fib_path_nh_information_type.is_set
	|| fib_path_nh_information_type_special.is_set
	|| interface_associated_path.is_set
	|| ip_address_to_recurse.is_set
	|| label_to_recurse.is_set
	|| lisprlocid.is_set
	|| next_hop_interface.is_set
	|| next_hop_mask_length.is_set
	|| next_hop_vrf.is_set
	|| next_prefix_length.is_set
	|| next_prefix_length2.is_set
	|| next_prefix_recursion.is_set
	|| next_prefix_recursion2.is_set
	|| number_of_dependencies_this_path.is_set
	|| recurse_prefix_object.is_set
	|| recurse_prefix_object2.is_set
	|| recursive_path_information.is_set
	|| robin_reset_value.is_set
	|| tunnel_class.is_set
	|| tunnel_is_forward_class.is_set
	|| tunnle_endpoint_id.is_set
	|| weight_of_path.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_operation() const
{
    for (std::size_t index=0; index<spd_ipencap.size(); index++)
    {
        if(spd_ipencap[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(current_path_flag.yfilter)
	|| ydk::is_set(detail_fib_adjacency_type.yfilter)
	|| ydk::is_set(detail_next_hop_prefix.yfilter)
	|| ydk::is_set(external_adjacency.yfilter)
	|| ydk::is_set(fib_path_nh_information_type.yfilter)
	|| ydk::is_set(fib_path_nh_information_type_special.yfilter)
	|| ydk::is_set(interface_associated_path.yfilter)
	|| ydk::is_set(ip_address_to_recurse.yfilter)
	|| ydk::is_set(label_to_recurse.yfilter)
	|| ydk::is_set(lisprlocid.yfilter)
	|| ydk::is_set(next_hop_interface.yfilter)
	|| ydk::is_set(next_hop_mask_length.yfilter)
	|| ydk::is_set(next_hop_vrf.yfilter)
	|| ydk::is_set(next_prefix_length.yfilter)
	|| ydk::is_set(next_prefix_length2.yfilter)
	|| ydk::is_set(next_prefix_recursion.yfilter)
	|| ydk::is_set(next_prefix_recursion2.yfilter)
	|| ydk::is_set(number_of_dependencies_this_path.yfilter)
	|| ydk::is_set(recurse_prefix_object.yfilter)
	|| ydk::is_set(recurse_prefix_object2.yfilter)
	|| ydk::is_set(recursive_path_information.yfilter)
	|| ydk::is_set(robin_reset_value.yfilter)
	|| ydk::is_set(tunnel_class.yfilter)
	|| ydk::is_set(tunnel_is_forward_class.yfilter)
	|| ydk::is_set(tunnle_endpoint_id.yfilter)
	|| ydk::is_set(weight_of_path.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "more-detail-about-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (current_path_flag.is_set || is_set(current_path_flag.yfilter)) leaf_name_data.push_back(current_path_flag.get_name_leafdata());
    if (detail_fib_adjacency_type.is_set || is_set(detail_fib_adjacency_type.yfilter)) leaf_name_data.push_back(detail_fib_adjacency_type.get_name_leafdata());
    if (detail_next_hop_prefix.is_set || is_set(detail_next_hop_prefix.yfilter)) leaf_name_data.push_back(detail_next_hop_prefix.get_name_leafdata());
    if (external_adjacency.is_set || is_set(external_adjacency.yfilter)) leaf_name_data.push_back(external_adjacency.get_name_leafdata());
    if (fib_path_nh_information_type.is_set || is_set(fib_path_nh_information_type.yfilter)) leaf_name_data.push_back(fib_path_nh_information_type.get_name_leafdata());
    if (fib_path_nh_information_type_special.is_set || is_set(fib_path_nh_information_type_special.yfilter)) leaf_name_data.push_back(fib_path_nh_information_type_special.get_name_leafdata());
    if (interface_associated_path.is_set || is_set(interface_associated_path.yfilter)) leaf_name_data.push_back(interface_associated_path.get_name_leafdata());
    if (ip_address_to_recurse.is_set || is_set(ip_address_to_recurse.yfilter)) leaf_name_data.push_back(ip_address_to_recurse.get_name_leafdata());
    if (label_to_recurse.is_set || is_set(label_to_recurse.yfilter)) leaf_name_data.push_back(label_to_recurse.get_name_leafdata());
    if (lisprlocid.is_set || is_set(lisprlocid.yfilter)) leaf_name_data.push_back(lisprlocid.get_name_leafdata());
    if (next_hop_interface.is_set || is_set(next_hop_interface.yfilter)) leaf_name_data.push_back(next_hop_interface.get_name_leafdata());
    if (next_hop_mask_length.is_set || is_set(next_hop_mask_length.yfilter)) leaf_name_data.push_back(next_hop_mask_length.get_name_leafdata());
    if (next_hop_vrf.is_set || is_set(next_hop_vrf.yfilter)) leaf_name_data.push_back(next_hop_vrf.get_name_leafdata());
    if (next_prefix_length.is_set || is_set(next_prefix_length.yfilter)) leaf_name_data.push_back(next_prefix_length.get_name_leafdata());
    if (next_prefix_length2.is_set || is_set(next_prefix_length2.yfilter)) leaf_name_data.push_back(next_prefix_length2.get_name_leafdata());
    if (next_prefix_recursion.is_set || is_set(next_prefix_recursion.yfilter)) leaf_name_data.push_back(next_prefix_recursion.get_name_leafdata());
    if (next_prefix_recursion2.is_set || is_set(next_prefix_recursion2.yfilter)) leaf_name_data.push_back(next_prefix_recursion2.get_name_leafdata());
    if (number_of_dependencies_this_path.is_set || is_set(number_of_dependencies_this_path.yfilter)) leaf_name_data.push_back(number_of_dependencies_this_path.get_name_leafdata());
    if (recurse_prefix_object.is_set || is_set(recurse_prefix_object.yfilter)) leaf_name_data.push_back(recurse_prefix_object.get_name_leafdata());
    if (recurse_prefix_object2.is_set || is_set(recurse_prefix_object2.yfilter)) leaf_name_data.push_back(recurse_prefix_object2.get_name_leafdata());
    if (recursive_path_information.is_set || is_set(recursive_path_information.yfilter)) leaf_name_data.push_back(recursive_path_information.get_name_leafdata());
    if (robin_reset_value.is_set || is_set(robin_reset_value.yfilter)) leaf_name_data.push_back(robin_reset_value.get_name_leafdata());
    if (tunnel_class.is_set || is_set(tunnel_class.yfilter)) leaf_name_data.push_back(tunnel_class.get_name_leafdata());
    if (tunnel_is_forward_class.is_set || is_set(tunnel_is_forward_class.yfilter)) leaf_name_data.push_back(tunnel_is_forward_class.get_name_leafdata());
    if (tunnle_endpoint_id.is_set || is_set(tunnle_endpoint_id.yfilter)) leaf_name_data.push_back(tunnle_endpoint_id.get_name_leafdata());
    if (weight_of_path.is_set || is_set(weight_of_path.yfilter)) leaf_name_data.push_back(weight_of_path.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "spd-ipencap")
    {
        for(auto const & c : spd_ipencap)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap>();
        c->parent = this;
        spd_ipencap.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : spd_ipencap)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "current-path-flag")
    {
        current_path_flag = value;
        current_path_flag.value_namespace = name_space;
        current_path_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "detail-fib-adjacency-type")
    {
        detail_fib_adjacency_type = value;
        detail_fib_adjacency_type.value_namespace = name_space;
        detail_fib_adjacency_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "detail-next-hop-prefix")
    {
        detail_next_hop_prefix = value;
        detail_next_hop_prefix.value_namespace = name_space;
        detail_next_hop_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "external-adjacency")
    {
        external_adjacency = value;
        external_adjacency.value_namespace = name_space;
        external_adjacency.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-path-nh-information-type")
    {
        fib_path_nh_information_type = value;
        fib_path_nh_information_type.value_namespace = name_space;
        fib_path_nh_information_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-path-nh-information-type-special")
    {
        fib_path_nh_information_type_special = value;
        fib_path_nh_information_type_special.value_namespace = name_space;
        fib_path_nh_information_type_special.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "interface-associated-path")
    {
        interface_associated_path = value;
        interface_associated_path.value_namespace = name_space;
        interface_associated_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-address-to-recurse")
    {
        ip_address_to_recurse = value;
        ip_address_to_recurse.value_namespace = name_space;
        ip_address_to_recurse.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-to-recurse")
    {
        label_to_recurse = value;
        label_to_recurse.value_namespace = name_space;
        label_to_recurse.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisprlocid")
    {
        lisprlocid = value;
        lisprlocid.value_namespace = name_space;
        lisprlocid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-interface")
    {
        next_hop_interface = value;
        next_hop_interface.value_namespace = name_space;
        next_hop_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-mask-length")
    {
        next_hop_mask_length = value;
        next_hop_mask_length.value_namespace = name_space;
        next_hop_mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-vrf")
    {
        next_hop_vrf = value;
        next_hop_vrf.value_namespace = name_space;
        next_hop_vrf.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-length")
    {
        next_prefix_length = value;
        next_prefix_length.value_namespace = name_space;
        next_prefix_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-length2")
    {
        next_prefix_length2 = value;
        next_prefix_length2.value_namespace = name_space;
        next_prefix_length2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-recursion")
    {
        next_prefix_recursion = value;
        next_prefix_recursion.value_namespace = name_space;
        next_prefix_recursion.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-recursion2")
    {
        next_prefix_recursion2 = value;
        next_prefix_recursion2.value_namespace = name_space;
        next_prefix_recursion2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-dependencies-this-path")
    {
        number_of_dependencies_this_path = value;
        number_of_dependencies_this_path.value_namespace = name_space;
        number_of_dependencies_this_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recurse-prefix-object")
    {
        recurse_prefix_object = value;
        recurse_prefix_object.value_namespace = name_space;
        recurse_prefix_object.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recurse-prefix-object2")
    {
        recurse_prefix_object2 = value;
        recurse_prefix_object2.value_namespace = name_space;
        recurse_prefix_object2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-information")
    {
        recursive_path_information = value;
        recursive_path_information.value_namespace = name_space;
        recursive_path_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "robin-reset-value")
    {
        robin_reset_value = value;
        robin_reset_value.value_namespace = name_space;
        robin_reset_value.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-class")
    {
        tunnel_class = value;
        tunnel_class.value_namespace = name_space;
        tunnel_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-is-forward-class")
    {
        tunnel_is_forward_class = value;
        tunnel_is_forward_class.value_namespace = name_space;
        tunnel_is_forward_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnle-endpoint-id")
    {
        tunnle_endpoint_id = value;
        tunnle_endpoint_id.value_namespace = name_space;
        tunnle_endpoint_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight-of-path")
    {
        weight_of_path = value;
        weight_of_path.value_namespace = name_space;
        weight_of_path.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "current-path-flag")
    {
        current_path_flag.yfilter = yfilter;
    }
    if(value_path == "detail-fib-adjacency-type")
    {
        detail_fib_adjacency_type.yfilter = yfilter;
    }
    if(value_path == "detail-next-hop-prefix")
    {
        detail_next_hop_prefix.yfilter = yfilter;
    }
    if(value_path == "external-adjacency")
    {
        external_adjacency.yfilter = yfilter;
    }
    if(value_path == "fib-path-nh-information-type")
    {
        fib_path_nh_information_type.yfilter = yfilter;
    }
    if(value_path == "fib-path-nh-information-type-special")
    {
        fib_path_nh_information_type_special.yfilter = yfilter;
    }
    if(value_path == "interface-associated-path")
    {
        interface_associated_path.yfilter = yfilter;
    }
    if(value_path == "ip-address-to-recurse")
    {
        ip_address_to_recurse.yfilter = yfilter;
    }
    if(value_path == "label-to-recurse")
    {
        label_to_recurse.yfilter = yfilter;
    }
    if(value_path == "lisprlocid")
    {
        lisprlocid.yfilter = yfilter;
    }
    if(value_path == "next-hop-interface")
    {
        next_hop_interface.yfilter = yfilter;
    }
    if(value_path == "next-hop-mask-length")
    {
        next_hop_mask_length.yfilter = yfilter;
    }
    if(value_path == "next-hop-vrf")
    {
        next_hop_vrf.yfilter = yfilter;
    }
    if(value_path == "next-prefix-length")
    {
        next_prefix_length.yfilter = yfilter;
    }
    if(value_path == "next-prefix-length2")
    {
        next_prefix_length2.yfilter = yfilter;
    }
    if(value_path == "next-prefix-recursion")
    {
        next_prefix_recursion.yfilter = yfilter;
    }
    if(value_path == "next-prefix-recursion2")
    {
        next_prefix_recursion2.yfilter = yfilter;
    }
    if(value_path == "number-of-dependencies-this-path")
    {
        number_of_dependencies_this_path.yfilter = yfilter;
    }
    if(value_path == "recurse-prefix-object")
    {
        recurse_prefix_object.yfilter = yfilter;
    }
    if(value_path == "recurse-prefix-object2")
    {
        recurse_prefix_object2.yfilter = yfilter;
    }
    if(value_path == "recursive-path-information")
    {
        recursive_path_information.yfilter = yfilter;
    }
    if(value_path == "robin-reset-value")
    {
        robin_reset_value.yfilter = yfilter;
    }
    if(value_path == "tunnel-class")
    {
        tunnel_class.yfilter = yfilter;
    }
    if(value_path == "tunnel-is-forward-class")
    {
        tunnel_is_forward_class.yfilter = yfilter;
    }
    if(value_path == "tunnle-endpoint-id")
    {
        tunnle_endpoint_id.yfilter = yfilter;
    }
    if(value_path == "weight-of-path")
    {
        weight_of_path.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "spd-ipencap" || name == "current-path-flag" || name == "detail-fib-adjacency-type" || name == "detail-next-hop-prefix" || name == "external-adjacency" || name == "fib-path-nh-information-type" || name == "fib-path-nh-information-type-special" || name == "interface-associated-path" || name == "ip-address-to-recurse" || name == "label-to-recurse" || name == "lisprlocid" || name == "next-hop-interface" || name == "next-hop-mask-length" || name == "next-hop-vrf" || name == "next-prefix-length" || name == "next-prefix-length2" || name == "next-prefix-recursion" || name == "next-prefix-recursion2" || name == "number-of-dependencies-this-path" || name == "recurse-prefix-object" || name == "recurse-prefix-object2" || name == "recursive-path-information" || name == "robin-reset-value" || name == "tunnel-class" || name == "tunnel-is-forward-class" || name == "tunnle-endpoint-id" || name == "weight-of-path")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::SpdIpencap()
    :
    ip_encap_hdr_count{YType::uint8, "ip-encap-hdr-count"},
    ip_encap_locks{YType::uint32, "ip-encap-locks"},
    ip_encap_parent{YType::uint32, "ip-encap-parent"},
    ip_encap_parent_type{YType::uint32, "ip-encap-parent-type"},
    ip_encap_payload_af{YType::uint32, "ip-encap-payload-af"},
    ip_encap_payload_mtu{YType::uint16, "ip-encap-payload-mtu"},
    ip_encap_transport_af{YType::uint32, "ip-encap-transport-af"},
    ip_encap_transport_tbl{YType::uint32, "ip-encap-transport-tbl"},
    ipe_transport_vrf_name{YType::str, "ipe-transport-vrf-name"}
{

    yang_name = "spd-ipencap"; yang_parent_name = "more-detail-about-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::~SpdIpencap()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_data() const
{
    for (std::size_t index=0; index<ip_encap_hdr.size(); index++)
    {
        if(ip_encap_hdr[index]->has_data())
            return true;
    }
    return ip_encap_hdr_count.is_set
	|| ip_encap_locks.is_set
	|| ip_encap_parent.is_set
	|| ip_encap_parent_type.is_set
	|| ip_encap_payload_af.is_set
	|| ip_encap_payload_mtu.is_set
	|| ip_encap_transport_af.is_set
	|| ip_encap_transport_tbl.is_set
	|| ipe_transport_vrf_name.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_operation() const
{
    for (std::size_t index=0; index<ip_encap_hdr.size(); index++)
    {
        if(ip_encap_hdr[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(ip_encap_hdr_count.yfilter)
	|| ydk::is_set(ip_encap_locks.yfilter)
	|| ydk::is_set(ip_encap_parent.yfilter)
	|| ydk::is_set(ip_encap_parent_type.yfilter)
	|| ydk::is_set(ip_encap_payload_af.yfilter)
	|| ydk::is_set(ip_encap_payload_mtu.yfilter)
	|| ydk::is_set(ip_encap_transport_af.yfilter)
	|| ydk::is_set(ip_encap_transport_tbl.yfilter)
	|| ydk::is_set(ipe_transport_vrf_name.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "spd-ipencap";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_encap_hdr_count.is_set || is_set(ip_encap_hdr_count.yfilter)) leaf_name_data.push_back(ip_encap_hdr_count.get_name_leafdata());
    if (ip_encap_locks.is_set || is_set(ip_encap_locks.yfilter)) leaf_name_data.push_back(ip_encap_locks.get_name_leafdata());
    if (ip_encap_parent.is_set || is_set(ip_encap_parent.yfilter)) leaf_name_data.push_back(ip_encap_parent.get_name_leafdata());
    if (ip_encap_parent_type.is_set || is_set(ip_encap_parent_type.yfilter)) leaf_name_data.push_back(ip_encap_parent_type.get_name_leafdata());
    if (ip_encap_payload_af.is_set || is_set(ip_encap_payload_af.yfilter)) leaf_name_data.push_back(ip_encap_payload_af.get_name_leafdata());
    if (ip_encap_payload_mtu.is_set || is_set(ip_encap_payload_mtu.yfilter)) leaf_name_data.push_back(ip_encap_payload_mtu.get_name_leafdata());
    if (ip_encap_transport_af.is_set || is_set(ip_encap_transport_af.yfilter)) leaf_name_data.push_back(ip_encap_transport_af.get_name_leafdata());
    if (ip_encap_transport_tbl.is_set || is_set(ip_encap_transport_tbl.yfilter)) leaf_name_data.push_back(ip_encap_transport_tbl.get_name_leafdata());
    if (ipe_transport_vrf_name.is_set || is_set(ipe_transport_vrf_name.yfilter)) leaf_name_data.push_back(ipe_transport_vrf_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ip-encap-hdr")
    {
        for(auto const & c : ip_encap_hdr)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr>();
        c->parent = this;
        ip_encap_hdr.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : ip_encap_hdr)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "ip-encap-hdr-count")
    {
        ip_encap_hdr_count = value;
        ip_encap_hdr_count.value_namespace = name_space;
        ip_encap_hdr_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-locks")
    {
        ip_encap_locks = value;
        ip_encap_locks.value_namespace = name_space;
        ip_encap_locks.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-parent")
    {
        ip_encap_parent = value;
        ip_encap_parent.value_namespace = name_space;
        ip_encap_parent.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-parent-type")
    {
        ip_encap_parent_type = value;
        ip_encap_parent_type.value_namespace = name_space;
        ip_encap_parent_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-payload-af")
    {
        ip_encap_payload_af = value;
        ip_encap_payload_af.value_namespace = name_space;
        ip_encap_payload_af.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-payload-mtu")
    {
        ip_encap_payload_mtu = value;
        ip_encap_payload_mtu.value_namespace = name_space;
        ip_encap_payload_mtu.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-transport-af")
    {
        ip_encap_transport_af = value;
        ip_encap_transport_af.value_namespace = name_space;
        ip_encap_transport_af.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-transport-tbl")
    {
        ip_encap_transport_tbl = value;
        ip_encap_transport_tbl.value_namespace = name_space;
        ip_encap_transport_tbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ipe-transport-vrf-name")
    {
        ipe_transport_vrf_name = value;
        ipe_transport_vrf_name.value_namespace = name_space;
        ipe_transport_vrf_name.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "ip-encap-hdr-count")
    {
        ip_encap_hdr_count.yfilter = yfilter;
    }
    if(value_path == "ip-encap-locks")
    {
        ip_encap_locks.yfilter = yfilter;
    }
    if(value_path == "ip-encap-parent")
    {
        ip_encap_parent.yfilter = yfilter;
    }
    if(value_path == "ip-encap-parent-type")
    {
        ip_encap_parent_type.yfilter = yfilter;
    }
    if(value_path == "ip-encap-payload-af")
    {
        ip_encap_payload_af.yfilter = yfilter;
    }
    if(value_path == "ip-encap-payload-mtu")
    {
        ip_encap_payload_mtu.yfilter = yfilter;
    }
    if(value_path == "ip-encap-transport-af")
    {
        ip_encap_transport_af.yfilter = yfilter;
    }
    if(value_path == "ip-encap-transport-tbl")
    {
        ip_encap_transport_tbl.yfilter = yfilter;
    }
    if(value_path == "ipe-transport-vrf-name")
    {
        ipe_transport_vrf_name.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ip-encap-hdr" || name == "ip-encap-hdr-count" || name == "ip-encap-locks" || name == "ip-encap-parent" || name == "ip-encap-parent-type" || name == "ip-encap-payload-af" || name == "ip-encap-payload-mtu" || name == "ip-encap-transport-af" || name == "ip-encap-transport-tbl" || name == "ipe-transport-vrf-name")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::IpEncapHdr()
    :
    ip_encap_hdr_dyn{YType::uint32, "ip-encap-hdr-dyn"},
    ip_encap_hdr_type{YType::enumeration, "ip-encap-hdr-type"},
    ip_encap_hdrp{YType::str, "ip-encap-hdrp"}
{

    yang_name = "ip-encap-hdr"; yang_parent_name = "spd-ipencap"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::~IpEncapHdr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_data() const
{
    return ip_encap_hdr_dyn.is_set
	|| ip_encap_hdr_type.is_set
	|| ip_encap_hdrp.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(ip_encap_hdr_dyn.yfilter)
	|| ydk::is_set(ip_encap_hdr_type.yfilter)
	|| ydk::is_set(ip_encap_hdrp.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ip-encap-hdr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_encap_hdr_dyn.is_set || is_set(ip_encap_hdr_dyn.yfilter)) leaf_name_data.push_back(ip_encap_hdr_dyn.get_name_leafdata());
    if (ip_encap_hdr_type.is_set || is_set(ip_encap_hdr_type.yfilter)) leaf_name_data.push_back(ip_encap_hdr_type.get_name_leafdata());
    if (ip_encap_hdrp.is_set || is_set(ip_encap_hdrp.yfilter)) leaf_name_data.push_back(ip_encap_hdrp.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "ip-encap-hdr-dyn")
    {
        ip_encap_hdr_dyn = value;
        ip_encap_hdr_dyn.value_namespace = name_space;
        ip_encap_hdr_dyn.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-hdr-type")
    {
        ip_encap_hdr_type = value;
        ip_encap_hdr_type.value_namespace = name_space;
        ip_encap_hdr_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-hdrp")
    {
        ip_encap_hdrp = value;
        ip_encap_hdrp.value_namespace = name_space;
        ip_encap_hdrp.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "ip-encap-hdr-dyn")
    {
        ip_encap_hdr_dyn.yfilter = yfilter;
    }
    if(value_path == "ip-encap-hdr-type")
    {
        ip_encap_hdr_type.yfilter = yfilter;
    }
    if(value_path == "ip-encap-hdrp")
    {
        ip_encap_hdrp.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ip-encap-hdr-dyn" || name == "ip-encap-hdr-type" || name == "ip-encap-hdrp")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::MplsInformationForPath()
    :
    local_lable{YType::uint32, "local-lable"},
    number_of_igp_paths{YType::uint32, "number-of-igp-paths"},
    recursive_fwd_chain{YType::boolean, "recursive-fwd-chain"},
    remote_backup{YType::boolean, "remote-backup"}
{

    yang_name = "mpls-information-for-path"; yang_parent_name = "fib-sh-tbl-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::~MplsInformationForPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::has_data() const
{
    for (std::size_t index=0; index<igp_label_stack_array.size(); index++)
    {
        if(igp_label_stack_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<recursive_lbl_stack.size(); index++)
    {
        if(recursive_lbl_stack[index]->has_data())
            return true;
    }
    return local_lable.is_set
	|| number_of_igp_paths.is_set
	|| recursive_fwd_chain.is_set
	|| remote_backup.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::has_operation() const
{
    for (std::size_t index=0; index<igp_label_stack_array.size(); index++)
    {
        if(igp_label_stack_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<recursive_lbl_stack.size(); index++)
    {
        if(recursive_lbl_stack[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(local_lable.yfilter)
	|| ydk::is_set(number_of_igp_paths.yfilter)
	|| ydk::is_set(recursive_fwd_chain.yfilter)
	|| ydk::is_set(remote_backup.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mpls-information-for-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (local_lable.is_set || is_set(local_lable.yfilter)) leaf_name_data.push_back(local_lable.get_name_leafdata());
    if (number_of_igp_paths.is_set || is_set(number_of_igp_paths.yfilter)) leaf_name_data.push_back(number_of_igp_paths.get_name_leafdata());
    if (recursive_fwd_chain.is_set || is_set(recursive_fwd_chain.yfilter)) leaf_name_data.push_back(recursive_fwd_chain.get_name_leafdata());
    if (remote_backup.is_set || is_set(remote_backup.yfilter)) leaf_name_data.push_back(remote_backup.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "igp-label-stack-array")
    {
        for(auto const & c : igp_label_stack_array)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray>();
        c->parent = this;
        igp_label_stack_array.push_back(c);
        return c;
    }

    if(child_yang_name == "recursive-lbl-stack")
    {
        for(auto const & c : recursive_lbl_stack)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack>();
        c->parent = this;
        recursive_lbl_stack.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : igp_label_stack_array)
    {
        children[c->get_segment_path()] = c;
    }

    for (auto const & c : recursive_lbl_stack)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "local-lable")
    {
        local_lable = value;
        local_lable.value_namespace = name_space;
        local_lable.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-igp-paths")
    {
        number_of_igp_paths = value;
        number_of_igp_paths.value_namespace = name_space;
        number_of_igp_paths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-fwd-chain")
    {
        recursive_fwd_chain = value;
        recursive_fwd_chain.value_namespace = name_space;
        recursive_fwd_chain.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "remote-backup")
    {
        remote_backup = value;
        remote_backup.value_namespace = name_space;
        remote_backup.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "local-lable")
    {
        local_lable.yfilter = yfilter;
    }
    if(value_path == "number-of-igp-paths")
    {
        number_of_igp_paths.yfilter = yfilter;
    }
    if(value_path == "recursive-fwd-chain")
    {
        recursive_fwd_chain.yfilter = yfilter;
    }
    if(value_path == "remote-backup")
    {
        remote_backup.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "igp-label-stack-array" || name == "recursive-lbl-stack" || name == "local-lable" || name == "number-of-igp-paths" || name == "recursive-fwd-chain" || name == "remote-backup")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::IgpLabelStackArray()
    :
    nh_address{YType::str, "nh-address"},
    number_of_labels{YType::uint32, "number-of-labels"},
    out_interface{YType::str, "out-interface"}
{

    yang_name = "igp-label-stack-array"; yang_parent_name = "mpls-information-for-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::~IgpLabelStackArray()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::has_data() const
{
    for (std::size_t index=0; index<lstack.size(); index++)
    {
        if(lstack[index]->has_data())
            return true;
    }
    return nh_address.is_set
	|| number_of_labels.is_set
	|| out_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::has_operation() const
{
    for (std::size_t index=0; index<lstack.size(); index++)
    {
        if(lstack[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(number_of_labels.yfilter)
	|| ydk::is_set(out_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "igp-label-stack-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (number_of_labels.is_set || is_set(number_of_labels.yfilter)) leaf_name_data.push_back(number_of_labels.get_name_leafdata());
    if (out_interface.is_set || is_set(out_interface.yfilter)) leaf_name_data.push_back(out_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "lstack")
    {
        for(auto const & c : lstack)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack>();
        c->parent = this;
        lstack.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : lstack)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-labels")
    {
        number_of_labels = value;
        number_of_labels.value_namespace = name_space;
        number_of_labels.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "out-interface")
    {
        out_interface = value;
        out_interface.value_namespace = name_space;
        out_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "number-of-labels")
    {
        number_of_labels.yfilter = yfilter;
    }
    if(value_path == "out-interface")
    {
        out_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "lstack" || name == "nh-address" || name == "number-of-labels" || name == "out-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::Lstack()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "lstack"; yang_parent_name = "igp-label-stack-array"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::~Lstack()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lstack";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::RecursiveLblStack()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "recursive-lbl-stack"; yang_parent_name = "mpls-information-for-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::~RecursiveLblStack()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recursive-lbl-stack";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Information()
    :
    route_is_sripv6_flag{YType::boolean, "route-is-sripv6-flag"},
    sripv6_stats_valid_flag{YType::boolean, "sripv6-stats-valid-flag"},
    srv6_pfx_resolved_via_policy_label{YType::boolean, "srv6-pfx-resolved-via-policy-label"}
    	,
    srv6_statistics(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics>())
{
    srv6_statistics->parent = this;

    yang_name = "srv6-information"; yang_parent_name = "ip-prefix-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::~Srv6Information()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::has_data() const
{
    return route_is_sripv6_flag.is_set
	|| sripv6_stats_valid_flag.is_set
	|| srv6_pfx_resolved_via_policy_label.is_set
	|| (srv6_statistics !=  nullptr && srv6_statistics->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(route_is_sripv6_flag.yfilter)
	|| ydk::is_set(sripv6_stats_valid_flag.yfilter)
	|| ydk::is_set(srv6_pfx_resolved_via_policy_label.yfilter)
	|| (srv6_statistics !=  nullptr && srv6_statistics->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "srv6-information";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (route_is_sripv6_flag.is_set || is_set(route_is_sripv6_flag.yfilter)) leaf_name_data.push_back(route_is_sripv6_flag.get_name_leafdata());
    if (sripv6_stats_valid_flag.is_set || is_set(sripv6_stats_valid_flag.yfilter)) leaf_name_data.push_back(sripv6_stats_valid_flag.get_name_leafdata());
    if (srv6_pfx_resolved_via_policy_label.is_set || is_set(srv6_pfx_resolved_via_policy_label.yfilter)) leaf_name_data.push_back(srv6_pfx_resolved_via_policy_label.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "srv6-statistics")
    {
        if(srv6_statistics == nullptr)
        {
            srv6_statistics = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics>();
        }
        return srv6_statistics;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(srv6_statistics != nullptr)
    {
        children["srv6-statistics"] = srv6_statistics;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "route-is-sripv6-flag")
    {
        route_is_sripv6_flag = value;
        route_is_sripv6_flag.value_namespace = name_space;
        route_is_sripv6_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sripv6-stats-valid-flag")
    {
        sripv6_stats_valid_flag = value;
        sripv6_stats_valid_flag.value_namespace = name_space;
        sripv6_stats_valid_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srv6-pfx-resolved-via-policy-label")
    {
        srv6_pfx_resolved_via_policy_label = value;
        srv6_pfx_resolved_via_policy_label.value_namespace = name_space;
        srv6_pfx_resolved_via_policy_label.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "route-is-sripv6-flag")
    {
        route_is_sripv6_flag.yfilter = yfilter;
    }
    if(value_path == "sripv6-stats-valid-flag")
    {
        sripv6_stats_valid_flag.yfilter = yfilter;
    }
    if(value_path == "srv6-pfx-resolved-via-policy-label")
    {
        srv6_pfx_resolved_via_policy_label.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "srv6-statistics" || name == "route-is-sripv6-flag" || name == "sripv6-stats-valid-flag" || name == "srv6-pfx-resolved-via-policy-label")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics::Srv6Statistics()
    :
    srv6_packets_dropped{YType::uint64, "srv6-packets-dropped"},
    srv6_packets_forwarded{YType::uint64, "srv6-packets-forwarded"}
{

    yang_name = "srv6-statistics"; yang_parent_name = "srv6-information"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics::~Srv6Statistics()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics::has_data() const
{
    return srv6_packets_dropped.is_set
	|| srv6_packets_forwarded.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(srv6_packets_dropped.yfilter)
	|| ydk::is_set(srv6_packets_forwarded.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "srv6-statistics";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (srv6_packets_dropped.is_set || is_set(srv6_packets_dropped.yfilter)) leaf_name_data.push_back(srv6_packets_dropped.get_name_leafdata());
    if (srv6_packets_forwarded.is_set || is_set(srv6_packets_forwarded.yfilter)) leaf_name_data.push_back(srv6_packets_forwarded.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "srv6-packets-dropped")
    {
        srv6_packets_dropped = value;
        srv6_packets_dropped.value_namespace = name_space;
        srv6_packets_dropped.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srv6-packets-forwarded")
    {
        srv6_packets_forwarded = value;
        srv6_packets_forwarded.value_namespace = name_space;
        srv6_packets_forwarded.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "srv6-packets-dropped")
    {
        srv6_packets_dropped.yfilter = yfilter;
    }
    if(value_path == "srv6-packets-forwarded")
    {
        srv6_packets_forwarded.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs::IpPrefixBrief::Srv6Information::Srv6Statistics::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "srv6-packets-dropped" || name == "srv6-packets-forwarded")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetails()
{

    yang_name = "ip-prefix-details"; yang_parent_name = "vrf"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::~IpPrefixDetails()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::has_data() const
{
    for (std::size_t index=0; index<ip_prefix_detail.size(); index++)
    {
        if(ip_prefix_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::has_operation() const
{
    for (std::size_t index=0; index<ip_prefix_detail.size(); index++)
    {
        if(ip_prefix_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ip-prefix-details";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ip-prefix-detail")
    {
        for(auto const & c : ip_prefix_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail>();
        c->parent = this;
        ip_prefix_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : ip_prefix_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ip-prefix-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::IpPrefixDetail()
    :
    broadcast_forward_flag{YType::boolean, "broadcast-forward-flag"},
    broadcast_recive_flag{YType::boolean, "broadcast-recive-flag"},
    dummy_real_zero_route{YType::boolean, "dummy-real-zero-route"},
    exact_path_gre_interface_handle{YType::uint32, "exact-path-gre-interface-handle"},
    exact_path_interface_handle{YType::uint32, "exact-path-interface-handle"},
    exact_route_gre_phys_ifh_avail{YType::boolean, "exact-route-gre-phys-ifh-avail"},
    exact_route_result{YType::boolean, "exact-route-result"},
    external_switch_triggered{YType::boolean, "external-switch-triggered"},
    fib_route_download_priority{YType::uint32, "fib-route-download-priority"},
    flags_external_ldi{YType::uint32, "flags-external-ldi"},
    l2_subscriber_ip_protocol{YType::uint32, "l2-subscriber-ip-protocol"},
    l2_subscriber_route{YType::boolean, "l2-subscriber-route"},
    l2_subscriber_xconnect_id{YType::uint32, "l2-subscriber-xconnect-id"},
    l2tpv3_cookie_length_bits{YType::uint32, "l2tpv3-cookie-length-bits"},
    ldi_flags{YType::uint32, "ldi-flags"},
    ldi_lw_flag{YType::uint32, "ldi-lw-flag"},
    lspa_flags{YType::uint32, "lspa-flags"},
    number_of_referances_to_ldi{YType::uint32, "number-of-referances-to-ldi"},
    number_of_referances_to_path_list{YType::uint32, "number-of-referances-to-path-list"},
    packet_should_recieve{YType::boolean, "packet-should-recieve"},
    path_list_flags{YType::uint32, "path-list-flags"},
    path_list_source{YType::uint32, "path-list-source"},
    platform_hardware{YType::str, "platform-hardware"},
    pointer_external_ldi{YType::uint32, "pointer-external-ldi"},
    prefix{YType::str, "prefix"},
    prefix_connected{YType::boolean, "prefix-connected"},
    prefix_for_adjancency{YType::boolean, "prefix-for-adjancency"},
    prefix_for_pic_next_hop{YType::boolean, "prefix-for-pic-next-hop"},
    prefix_is_static_or_connected{YType::boolean, "prefix-is-static-or-connected"},
    prefix_length{YType::uint8, "prefix-length"},
    protocol_type_fib_entry{YType::uint32, "protocol-type-fib-entry"},
    purgable_after_purge_interval{YType::boolean, "purgable-after-purge-interval"},
    ref_counter_of_ldi_lw_ldi{YType::uint32, "ref-counter-of-ldi-lw-ldi"},
    route_attribute_flag{YType::boolean, "route-attribute-flag"},
    route_for_external_reach_linecard_flag{YType::boolean, "route-for-external-reach-linecard-flag"},
    route_is_sr_flag{YType::boolean, "route-is-sr-flag"},
    time_of_last_update_in_msec{YType::uint64, "time-of-last-update-in-msec"},
    type_of_ldi_lw_ldi{YType::uint32, "type-of-ldi-lw-ldi"},
    version_of_route{YType::uint64, "version-of-route"},
    zero_by_zero_route_as_default{YType::boolean, "zero-by-zero-route-as-default"}
    	,
    detail_fib_entry_information(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation>())
	,fib_entry_path(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath>())
	,srv6_information(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information>())
{
    detail_fib_entry_information->parent = this;
    fib_entry_path->parent = this;
    srv6_information->parent = this;

    yang_name = "ip-prefix-detail"; yang_parent_name = "ip-prefix-details"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::~IpPrefixDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::has_data() const
{
    for (std::size_t index=0; index<extension_object.size(); index++)
    {
        if(extension_object[index]->has_data())
            return true;
    }
    return broadcast_forward_flag.is_set
	|| broadcast_recive_flag.is_set
	|| dummy_real_zero_route.is_set
	|| exact_path_gre_interface_handle.is_set
	|| exact_path_interface_handle.is_set
	|| exact_route_gre_phys_ifh_avail.is_set
	|| exact_route_result.is_set
	|| external_switch_triggered.is_set
	|| fib_route_download_priority.is_set
	|| flags_external_ldi.is_set
	|| l2_subscriber_ip_protocol.is_set
	|| l2_subscriber_route.is_set
	|| l2_subscriber_xconnect_id.is_set
	|| l2tpv3_cookie_length_bits.is_set
	|| ldi_flags.is_set
	|| ldi_lw_flag.is_set
	|| lspa_flags.is_set
	|| number_of_referances_to_ldi.is_set
	|| number_of_referances_to_path_list.is_set
	|| packet_should_recieve.is_set
	|| path_list_flags.is_set
	|| path_list_source.is_set
	|| platform_hardware.is_set
	|| pointer_external_ldi.is_set
	|| prefix.is_set
	|| prefix_connected.is_set
	|| prefix_for_adjancency.is_set
	|| prefix_for_pic_next_hop.is_set
	|| prefix_is_static_or_connected.is_set
	|| prefix_length.is_set
	|| protocol_type_fib_entry.is_set
	|| purgable_after_purge_interval.is_set
	|| ref_counter_of_ldi_lw_ldi.is_set
	|| route_attribute_flag.is_set
	|| route_for_external_reach_linecard_flag.is_set
	|| route_is_sr_flag.is_set
	|| time_of_last_update_in_msec.is_set
	|| type_of_ldi_lw_ldi.is_set
	|| version_of_route.is_set
	|| zero_by_zero_route_as_default.is_set
	|| (detail_fib_entry_information !=  nullptr && detail_fib_entry_information->has_data())
	|| (fib_entry_path !=  nullptr && fib_entry_path->has_data())
	|| (srv6_information !=  nullptr && srv6_information->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::has_operation() const
{
    for (std::size_t index=0; index<extension_object.size(); index++)
    {
        if(extension_object[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(broadcast_forward_flag.yfilter)
	|| ydk::is_set(broadcast_recive_flag.yfilter)
	|| ydk::is_set(dummy_real_zero_route.yfilter)
	|| ydk::is_set(exact_path_gre_interface_handle.yfilter)
	|| ydk::is_set(exact_path_interface_handle.yfilter)
	|| ydk::is_set(exact_route_gre_phys_ifh_avail.yfilter)
	|| ydk::is_set(exact_route_result.yfilter)
	|| ydk::is_set(external_switch_triggered.yfilter)
	|| ydk::is_set(fib_route_download_priority.yfilter)
	|| ydk::is_set(flags_external_ldi.yfilter)
	|| ydk::is_set(l2_subscriber_ip_protocol.yfilter)
	|| ydk::is_set(l2_subscriber_route.yfilter)
	|| ydk::is_set(l2_subscriber_xconnect_id.yfilter)
	|| ydk::is_set(l2tpv3_cookie_length_bits.yfilter)
	|| ydk::is_set(ldi_flags.yfilter)
	|| ydk::is_set(ldi_lw_flag.yfilter)
	|| ydk::is_set(lspa_flags.yfilter)
	|| ydk::is_set(number_of_referances_to_ldi.yfilter)
	|| ydk::is_set(number_of_referances_to_path_list.yfilter)
	|| ydk::is_set(packet_should_recieve.yfilter)
	|| ydk::is_set(path_list_flags.yfilter)
	|| ydk::is_set(path_list_source.yfilter)
	|| ydk::is_set(platform_hardware.yfilter)
	|| ydk::is_set(pointer_external_ldi.yfilter)
	|| ydk::is_set(prefix.yfilter)
	|| ydk::is_set(prefix_connected.yfilter)
	|| ydk::is_set(prefix_for_adjancency.yfilter)
	|| ydk::is_set(prefix_for_pic_next_hop.yfilter)
	|| ydk::is_set(prefix_is_static_or_connected.yfilter)
	|| ydk::is_set(prefix_length.yfilter)
	|| ydk::is_set(protocol_type_fib_entry.yfilter)
	|| ydk::is_set(purgable_after_purge_interval.yfilter)
	|| ydk::is_set(ref_counter_of_ldi_lw_ldi.yfilter)
	|| ydk::is_set(route_attribute_flag.yfilter)
	|| ydk::is_set(route_for_external_reach_linecard_flag.yfilter)
	|| ydk::is_set(route_is_sr_flag.yfilter)
	|| ydk::is_set(time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(type_of_ldi_lw_ldi.yfilter)
	|| ydk::is_set(version_of_route.yfilter)
	|| ydk::is_set(zero_by_zero_route_as_default.yfilter)
	|| (detail_fib_entry_information !=  nullptr && detail_fib_entry_information->has_operation())
	|| (fib_entry_path !=  nullptr && fib_entry_path->has_operation())
	|| (srv6_information !=  nullptr && srv6_information->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ip-prefix-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (broadcast_forward_flag.is_set || is_set(broadcast_forward_flag.yfilter)) leaf_name_data.push_back(broadcast_forward_flag.get_name_leafdata());
    if (broadcast_recive_flag.is_set || is_set(broadcast_recive_flag.yfilter)) leaf_name_data.push_back(broadcast_recive_flag.get_name_leafdata());
    if (dummy_real_zero_route.is_set || is_set(dummy_real_zero_route.yfilter)) leaf_name_data.push_back(dummy_real_zero_route.get_name_leafdata());
    if (exact_path_gre_interface_handle.is_set || is_set(exact_path_gre_interface_handle.yfilter)) leaf_name_data.push_back(exact_path_gre_interface_handle.get_name_leafdata());
    if (exact_path_interface_handle.is_set || is_set(exact_path_interface_handle.yfilter)) leaf_name_data.push_back(exact_path_interface_handle.get_name_leafdata());
    if (exact_route_gre_phys_ifh_avail.is_set || is_set(exact_route_gre_phys_ifh_avail.yfilter)) leaf_name_data.push_back(exact_route_gre_phys_ifh_avail.get_name_leafdata());
    if (exact_route_result.is_set || is_set(exact_route_result.yfilter)) leaf_name_data.push_back(exact_route_result.get_name_leafdata());
    if (external_switch_triggered.is_set || is_set(external_switch_triggered.yfilter)) leaf_name_data.push_back(external_switch_triggered.get_name_leafdata());
    if (fib_route_download_priority.is_set || is_set(fib_route_download_priority.yfilter)) leaf_name_data.push_back(fib_route_download_priority.get_name_leafdata());
    if (flags_external_ldi.is_set || is_set(flags_external_ldi.yfilter)) leaf_name_data.push_back(flags_external_ldi.get_name_leafdata());
    if (l2_subscriber_ip_protocol.is_set || is_set(l2_subscriber_ip_protocol.yfilter)) leaf_name_data.push_back(l2_subscriber_ip_protocol.get_name_leafdata());
    if (l2_subscriber_route.is_set || is_set(l2_subscriber_route.yfilter)) leaf_name_data.push_back(l2_subscriber_route.get_name_leafdata());
    if (l2_subscriber_xconnect_id.is_set || is_set(l2_subscriber_xconnect_id.yfilter)) leaf_name_data.push_back(l2_subscriber_xconnect_id.get_name_leafdata());
    if (l2tpv3_cookie_length_bits.is_set || is_set(l2tpv3_cookie_length_bits.yfilter)) leaf_name_data.push_back(l2tpv3_cookie_length_bits.get_name_leafdata());
    if (ldi_flags.is_set || is_set(ldi_flags.yfilter)) leaf_name_data.push_back(ldi_flags.get_name_leafdata());
    if (ldi_lw_flag.is_set || is_set(ldi_lw_flag.yfilter)) leaf_name_data.push_back(ldi_lw_flag.get_name_leafdata());
    if (lspa_flags.is_set || is_set(lspa_flags.yfilter)) leaf_name_data.push_back(lspa_flags.get_name_leafdata());
    if (number_of_referances_to_ldi.is_set || is_set(number_of_referances_to_ldi.yfilter)) leaf_name_data.push_back(number_of_referances_to_ldi.get_name_leafdata());
    if (number_of_referances_to_path_list.is_set || is_set(number_of_referances_to_path_list.yfilter)) leaf_name_data.push_back(number_of_referances_to_path_list.get_name_leafdata());
    if (packet_should_recieve.is_set || is_set(packet_should_recieve.yfilter)) leaf_name_data.push_back(packet_should_recieve.get_name_leafdata());
    if (path_list_flags.is_set || is_set(path_list_flags.yfilter)) leaf_name_data.push_back(path_list_flags.get_name_leafdata());
    if (path_list_source.is_set || is_set(path_list_source.yfilter)) leaf_name_data.push_back(path_list_source.get_name_leafdata());
    if (platform_hardware.is_set || is_set(platform_hardware.yfilter)) leaf_name_data.push_back(platform_hardware.get_name_leafdata());
    if (pointer_external_ldi.is_set || is_set(pointer_external_ldi.yfilter)) leaf_name_data.push_back(pointer_external_ldi.get_name_leafdata());
    if (prefix.is_set || is_set(prefix.yfilter)) leaf_name_data.push_back(prefix.get_name_leafdata());
    if (prefix_connected.is_set || is_set(prefix_connected.yfilter)) leaf_name_data.push_back(prefix_connected.get_name_leafdata());
    if (prefix_for_adjancency.is_set || is_set(prefix_for_adjancency.yfilter)) leaf_name_data.push_back(prefix_for_adjancency.get_name_leafdata());
    if (prefix_for_pic_next_hop.is_set || is_set(prefix_for_pic_next_hop.yfilter)) leaf_name_data.push_back(prefix_for_pic_next_hop.get_name_leafdata());
    if (prefix_is_static_or_connected.is_set || is_set(prefix_is_static_or_connected.yfilter)) leaf_name_data.push_back(prefix_is_static_or_connected.get_name_leafdata());
    if (prefix_length.is_set || is_set(prefix_length.yfilter)) leaf_name_data.push_back(prefix_length.get_name_leafdata());
    if (protocol_type_fib_entry.is_set || is_set(protocol_type_fib_entry.yfilter)) leaf_name_data.push_back(protocol_type_fib_entry.get_name_leafdata());
    if (purgable_after_purge_interval.is_set || is_set(purgable_after_purge_interval.yfilter)) leaf_name_data.push_back(purgable_after_purge_interval.get_name_leafdata());
    if (ref_counter_of_ldi_lw_ldi.is_set || is_set(ref_counter_of_ldi_lw_ldi.yfilter)) leaf_name_data.push_back(ref_counter_of_ldi_lw_ldi.get_name_leafdata());
    if (route_attribute_flag.is_set || is_set(route_attribute_flag.yfilter)) leaf_name_data.push_back(route_attribute_flag.get_name_leafdata());
    if (route_for_external_reach_linecard_flag.is_set || is_set(route_for_external_reach_linecard_flag.yfilter)) leaf_name_data.push_back(route_for_external_reach_linecard_flag.get_name_leafdata());
    if (route_is_sr_flag.is_set || is_set(route_is_sr_flag.yfilter)) leaf_name_data.push_back(route_is_sr_flag.get_name_leafdata());
    if (time_of_last_update_in_msec.is_set || is_set(time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(time_of_last_update_in_msec.get_name_leafdata());
    if (type_of_ldi_lw_ldi.is_set || is_set(type_of_ldi_lw_ldi.yfilter)) leaf_name_data.push_back(type_of_ldi_lw_ldi.get_name_leafdata());
    if (version_of_route.is_set || is_set(version_of_route.yfilter)) leaf_name_data.push_back(version_of_route.get_name_leafdata());
    if (zero_by_zero_route_as_default.is_set || is_set(zero_by_zero_route_as_default.yfilter)) leaf_name_data.push_back(zero_by_zero_route_as_default.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "detail-fib-entry-information")
    {
        if(detail_fib_entry_information == nullptr)
        {
            detail_fib_entry_information = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation>();
        }
        return detail_fib_entry_information;
    }

    if(child_yang_name == "extension-object")
    {
        for(auto const & c : extension_object)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject>();
        c->parent = this;
        extension_object.push_back(c);
        return c;
    }

    if(child_yang_name == "fib-entry-path")
    {
        if(fib_entry_path == nullptr)
        {
            fib_entry_path = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath>();
        }
        return fib_entry_path;
    }

    if(child_yang_name == "srv6-information")
    {
        if(srv6_information == nullptr)
        {
            srv6_information = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information>();
        }
        return srv6_information;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(detail_fib_entry_information != nullptr)
    {
        children["detail-fib-entry-information"] = detail_fib_entry_information;
    }

    for (auto const & c : extension_object)
    {
        children[c->get_segment_path()] = c;
    }

    if(fib_entry_path != nullptr)
    {
        children["fib-entry-path"] = fib_entry_path;
    }

    if(srv6_information != nullptr)
    {
        children["srv6-information"] = srv6_information;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "broadcast-forward-flag")
    {
        broadcast_forward_flag = value;
        broadcast_forward_flag.value_namespace = name_space;
        broadcast_forward_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "broadcast-recive-flag")
    {
        broadcast_recive_flag = value;
        broadcast_recive_flag.value_namespace = name_space;
        broadcast_recive_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dummy-real-zero-route")
    {
        dummy_real_zero_route = value;
        dummy_real_zero_route.value_namespace = name_space;
        dummy_real_zero_route.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-path-gre-interface-handle")
    {
        exact_path_gre_interface_handle = value;
        exact_path_gre_interface_handle.value_namespace = name_space;
        exact_path_gre_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-path-interface-handle")
    {
        exact_path_interface_handle = value;
        exact_path_interface_handle.value_namespace = name_space;
        exact_path_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-route-gre-phys-ifh-avail")
    {
        exact_route_gre_phys_ifh_avail = value;
        exact_route_gre_phys_ifh_avail.value_namespace = name_space;
        exact_route_gre_phys_ifh_avail.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-route-result")
    {
        exact_route_result = value;
        exact_route_result.value_namespace = name_space;
        exact_route_result.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "external-switch-triggered")
    {
        external_switch_triggered = value;
        external_switch_triggered.value_namespace = name_space;
        external_switch_triggered.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-route-download-priority")
    {
        fib_route_download_priority = value;
        fib_route_download_priority.value_namespace = name_space;
        fib_route_download_priority.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flags-external-ldi")
    {
        flags_external_ldi = value;
        flags_external_ldi.value_namespace = name_space;
        flags_external_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-subscriber-ip-protocol")
    {
        l2_subscriber_ip_protocol = value;
        l2_subscriber_ip_protocol.value_namespace = name_space;
        l2_subscriber_ip_protocol.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-subscriber-route")
    {
        l2_subscriber_route = value;
        l2_subscriber_route.value_namespace = name_space;
        l2_subscriber_route.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-subscriber-xconnect-id")
    {
        l2_subscriber_xconnect_id = value;
        l2_subscriber_xconnect_id.value_namespace = name_space;
        l2_subscriber_xconnect_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2tpv3-cookie-length-bits")
    {
        l2tpv3_cookie_length_bits = value;
        l2tpv3_cookie_length_bits.value_namespace = name_space;
        l2tpv3_cookie_length_bits.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-flags")
    {
        ldi_flags = value;
        ldi_flags.value_namespace = name_space;
        ldi_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-lw-flag")
    {
        ldi_lw_flag = value;
        ldi_lw_flag.value_namespace = name_space;
        ldi_lw_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lspa-flags")
    {
        lspa_flags = value;
        lspa_flags.value_namespace = name_space;
        lspa_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-referances-to-ldi")
    {
        number_of_referances_to_ldi = value;
        number_of_referances_to_ldi.value_namespace = name_space;
        number_of_referances_to_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-referances-to-path-list")
    {
        number_of_referances_to_path_list = value;
        number_of_referances_to_path_list.value_namespace = name_space;
        number_of_referances_to_path_list.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "packet-should-recieve")
    {
        packet_should_recieve = value;
        packet_should_recieve.value_namespace = name_space;
        packet_should_recieve.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-list-flags")
    {
        path_list_flags = value;
        path_list_flags.value_namespace = name_space;
        path_list_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-list-source")
    {
        path_list_source = value;
        path_list_source.value_namespace = name_space;
        path_list_source.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-hardware")
    {
        platform_hardware = value;
        platform_hardware.value_namespace = name_space;
        platform_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pointer-external-ldi")
    {
        pointer_external_ldi = value;
        pointer_external_ldi.value_namespace = name_space;
        pointer_external_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix")
    {
        prefix = value;
        prefix.value_namespace = name_space;
        prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-connected")
    {
        prefix_connected = value;
        prefix_connected.value_namespace = name_space;
        prefix_connected.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-for-adjancency")
    {
        prefix_for_adjancency = value;
        prefix_for_adjancency.value_namespace = name_space;
        prefix_for_adjancency.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-for-pic-next-hop")
    {
        prefix_for_pic_next_hop = value;
        prefix_for_pic_next_hop.value_namespace = name_space;
        prefix_for_pic_next_hop.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-is-static-or-connected")
    {
        prefix_is_static_or_connected = value;
        prefix_is_static_or_connected.value_namespace = name_space;
        prefix_is_static_or_connected.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-length")
    {
        prefix_length = value;
        prefix_length.value_namespace = name_space;
        prefix_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protocol-type-fib-entry")
    {
        protocol_type_fib_entry = value;
        protocol_type_fib_entry.value_namespace = name_space;
        protocol_type_fib_entry.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "purgable-after-purge-interval")
    {
        purgable_after_purge_interval = value;
        purgable_after_purge_interval.value_namespace = name_space;
        purgable_after_purge_interval.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ref-counter-of-ldi-lw-ldi")
    {
        ref_counter_of_ldi_lw_ldi = value;
        ref_counter_of_ldi_lw_ldi.value_namespace = name_space;
        ref_counter_of_ldi_lw_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "route-attribute-flag")
    {
        route_attribute_flag = value;
        route_attribute_flag.value_namespace = name_space;
        route_attribute_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "route-for-external-reach-linecard-flag")
    {
        route_for_external_reach_linecard_flag = value;
        route_for_external_reach_linecard_flag.value_namespace = name_space;
        route_for_external_reach_linecard_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "route-is-sr-flag")
    {
        route_is_sr_flag = value;
        route_is_sr_flag.value_namespace = name_space;
        route_is_sr_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "time-of-last-update-in-msec")
    {
        time_of_last_update_in_msec = value;
        time_of_last_update_in_msec.value_namespace = name_space;
        time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type-of-ldi-lw-ldi")
    {
        type_of_ldi_lw_ldi = value;
        type_of_ldi_lw_ldi.value_namespace = name_space;
        type_of_ldi_lw_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "version-of-route")
    {
        version_of_route = value;
        version_of_route.value_namespace = name_space;
        version_of_route.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "zero-by-zero-route-as-default")
    {
        zero_by_zero_route_as_default = value;
        zero_by_zero_route_as_default.value_namespace = name_space;
        zero_by_zero_route_as_default.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "broadcast-forward-flag")
    {
        broadcast_forward_flag.yfilter = yfilter;
    }
    if(value_path == "broadcast-recive-flag")
    {
        broadcast_recive_flag.yfilter = yfilter;
    }
    if(value_path == "dummy-real-zero-route")
    {
        dummy_real_zero_route.yfilter = yfilter;
    }
    if(value_path == "exact-path-gre-interface-handle")
    {
        exact_path_gre_interface_handle.yfilter = yfilter;
    }
    if(value_path == "exact-path-interface-handle")
    {
        exact_path_interface_handle.yfilter = yfilter;
    }
    if(value_path == "exact-route-gre-phys-ifh-avail")
    {
        exact_route_gre_phys_ifh_avail.yfilter = yfilter;
    }
    if(value_path == "exact-route-result")
    {
        exact_route_result.yfilter = yfilter;
    }
    if(value_path == "external-switch-triggered")
    {
        external_switch_triggered.yfilter = yfilter;
    }
    if(value_path == "fib-route-download-priority")
    {
        fib_route_download_priority.yfilter = yfilter;
    }
    if(value_path == "flags-external-ldi")
    {
        flags_external_ldi.yfilter = yfilter;
    }
    if(value_path == "l2-subscriber-ip-protocol")
    {
        l2_subscriber_ip_protocol.yfilter = yfilter;
    }
    if(value_path == "l2-subscriber-route")
    {
        l2_subscriber_route.yfilter = yfilter;
    }
    if(value_path == "l2-subscriber-xconnect-id")
    {
        l2_subscriber_xconnect_id.yfilter = yfilter;
    }
    if(value_path == "l2tpv3-cookie-length-bits")
    {
        l2tpv3_cookie_length_bits.yfilter = yfilter;
    }
    if(value_path == "ldi-flags")
    {
        ldi_flags.yfilter = yfilter;
    }
    if(value_path == "ldi-lw-flag")
    {
        ldi_lw_flag.yfilter = yfilter;
    }
    if(value_path == "lspa-flags")
    {
        lspa_flags.yfilter = yfilter;
    }
    if(value_path == "number-of-referances-to-ldi")
    {
        number_of_referances_to_ldi.yfilter = yfilter;
    }
    if(value_path == "number-of-referances-to-path-list")
    {
        number_of_referances_to_path_list.yfilter = yfilter;
    }
    if(value_path == "packet-should-recieve")
    {
        packet_should_recieve.yfilter = yfilter;
    }
    if(value_path == "path-list-flags")
    {
        path_list_flags.yfilter = yfilter;
    }
    if(value_path == "path-list-source")
    {
        path_list_source.yfilter = yfilter;
    }
    if(value_path == "platform-hardware")
    {
        platform_hardware.yfilter = yfilter;
    }
    if(value_path == "pointer-external-ldi")
    {
        pointer_external_ldi.yfilter = yfilter;
    }
    if(value_path == "prefix")
    {
        prefix.yfilter = yfilter;
    }
    if(value_path == "prefix-connected")
    {
        prefix_connected.yfilter = yfilter;
    }
    if(value_path == "prefix-for-adjancency")
    {
        prefix_for_adjancency.yfilter = yfilter;
    }
    if(value_path == "prefix-for-pic-next-hop")
    {
        prefix_for_pic_next_hop.yfilter = yfilter;
    }
    if(value_path == "prefix-is-static-or-connected")
    {
        prefix_is_static_or_connected.yfilter = yfilter;
    }
    if(value_path == "prefix-length")
    {
        prefix_length.yfilter = yfilter;
    }
    if(value_path == "protocol-type-fib-entry")
    {
        protocol_type_fib_entry.yfilter = yfilter;
    }
    if(value_path == "purgable-after-purge-interval")
    {
        purgable_after_purge_interval.yfilter = yfilter;
    }
    if(value_path == "ref-counter-of-ldi-lw-ldi")
    {
        ref_counter_of_ldi_lw_ldi.yfilter = yfilter;
    }
    if(value_path == "route-attribute-flag")
    {
        route_attribute_flag.yfilter = yfilter;
    }
    if(value_path == "route-for-external-reach-linecard-flag")
    {
        route_for_external_reach_linecard_flag.yfilter = yfilter;
    }
    if(value_path == "route-is-sr-flag")
    {
        route_is_sr_flag.yfilter = yfilter;
    }
    if(value_path == "time-of-last-update-in-msec")
    {
        time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "type-of-ldi-lw-ldi")
    {
        type_of_ldi_lw_ldi.yfilter = yfilter;
    }
    if(value_path == "version-of-route")
    {
        version_of_route.yfilter = yfilter;
    }
    if(value_path == "zero-by-zero-route-as-default")
    {
        zero_by_zero_route_as_default.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "detail-fib-entry-information" || name == "extension-object" || name == "fib-entry-path" || name == "srv6-information" || name == "broadcast-forward-flag" || name == "broadcast-recive-flag" || name == "dummy-real-zero-route" || name == "exact-path-gre-interface-handle" || name == "exact-path-interface-handle" || name == "exact-route-gre-phys-ifh-avail" || name == "exact-route-result" || name == "external-switch-triggered" || name == "fib-route-download-priority" || name == "flags-external-ldi" || name == "l2-subscriber-ip-protocol" || name == "l2-subscriber-route" || name == "l2-subscriber-xconnect-id" || name == "l2tpv3-cookie-length-bits" || name == "ldi-flags" || name == "ldi-lw-flag" || name == "lspa-flags" || name == "number-of-referances-to-ldi" || name == "number-of-referances-to-path-list" || name == "packet-should-recieve" || name == "path-list-flags" || name == "path-list-source" || name == "platform-hardware" || name == "pointer-external-ldi" || name == "prefix" || name == "prefix-connected" || name == "prefix-for-adjancency" || name == "prefix-for-pic-next-hop" || name == "prefix-is-static-or-connected" || name == "prefix-length" || name == "protocol-type-fib-entry" || name == "purgable-after-purge-interval" || name == "ref-counter-of-ldi-lw-ldi" || name == "route-attribute-flag" || name == "route-for-external-reach-linecard-flag" || name == "route-is-sr-flag" || name == "time-of-last-update-in-msec" || name == "type-of-ldi-lw-ldi" || name == "version-of-route" || name == "zero-by-zero-route-as-default")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::DetailFibEntryInformation()
    :
    adjacency_address_length{YType::uint32, "adjacency-address-length"},
    adjacency_interface{YType::uint32, "adjacency-interface"},
    afi_fib_protocol_type{YType::uint32, "afi-fib-protocol-type"},
    aib_l3_address{YType::str, "aib-l3-address"},
    bgp_attribute_id{YType::uint32, "bgp-attribute-id"},
    bgp_attribute_next_hop_as{YType::uint32, "bgp-attribute-next-hop-as"},
    bgp_attribute_origin_as{YType::uint32, "bgp-attribute-origin-as"},
    bgp_local_attribute_id{YType::uint32, "bgp-local-attribute-id"},
    bytes_through_fib_entry{YType::uint64, "bytes-through-fib-entry"},
    com_string{YType::str, "com-string"},
    detailed_prefix_length{YType::uint32, "detailed-prefix-length"},
    extcom_string{YType::str, "extcom-string"},
    extended_community{YType::uint32, "extended-community"},
    fast_adjacency_flag{YType::boolean, "fast-adjacency-flag"},
    fib_entry_adjacency_address{YType::str, "fib-entry-adjacency-address"},
    fib_entry_adjacency_interface{YType::uint32, "fib-entry-adjacency-interface"},
    fib_entry_adjacency_type{YType::enumeration, "fib-entry-adjacency-type"},
    fib_entry_version{YType::uint32, "fib-entry-version"},
    fib_protocol_type{YType::uint32, "fib-protocol-type"},
    fib_special_nh_information_type{YType::uint32, "fib-special-nh-information-type"},
    flow_tag{YType::uint8, "flow-tag"},
    forward_class{YType::uint8, "forward-class"},
    illegal_fast_adjacency_flag{YType::boolean, "illegal-fast-adjacency-flag"},
    ldi_time_of_last_update_in_msec{YType::uint64, "ldi-time-of-last-update-in-msec"},
    load_sharing_type{YType::enumeration, "load-sharing-type"},
    lwldi_time_of_last_update_in_msec{YType::uint64, "lwldi-time-of-last-update-in-msec"},
    mpls_fec{YType::uint32, "mpls-fec"},
    packets_through_fib_entry{YType::uint64, "packets-through-fib-entry"},
    path_string{YType::str, "path-string"},
    per_prefix_accounting{YType::uint8, "per-prefix-accounting"},
    pl_time_of_last_update_in_msec{YType::uint64, "pl-time-of-last-update-in-msec"},
    pl_time_stamp_type{YType::uint32, "pl-time-stamp-type"},
    precedence_forpackets{YType::uint8, "precedence-forpackets"},
    prefix_protocol{YType::uint32, "prefix-protocol"},
    qos_group{YType::uint32, "qos-group"},
    qppb_qos_group_and_ip_precedence{YType::uint32, "qppb-qos-group-and-ip-precedence"},
    remote_adjacency_flag{YType::boolean, "remote-adjacency-flag"},
    switch_compontent_id{YType::uint32, "switch-compontent-id"},
    traffic_index_for_packets{YType::uint8, "traffic-index-for-packets"}
    	,
    loadshare_information(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation>())
{
    loadshare_information->parent = this;

    yang_name = "detail-fib-entry-information"; yang_parent_name = "ip-prefix-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::~DetailFibEntryInformation()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::has_data() const
{
    return adjacency_address_length.is_set
	|| adjacency_interface.is_set
	|| afi_fib_protocol_type.is_set
	|| aib_l3_address.is_set
	|| bgp_attribute_id.is_set
	|| bgp_attribute_next_hop_as.is_set
	|| bgp_attribute_origin_as.is_set
	|| bgp_local_attribute_id.is_set
	|| bytes_through_fib_entry.is_set
	|| com_string.is_set
	|| detailed_prefix_length.is_set
	|| extcom_string.is_set
	|| extended_community.is_set
	|| fast_adjacency_flag.is_set
	|| fib_entry_adjacency_address.is_set
	|| fib_entry_adjacency_interface.is_set
	|| fib_entry_adjacency_type.is_set
	|| fib_entry_version.is_set
	|| fib_protocol_type.is_set
	|| fib_special_nh_information_type.is_set
	|| flow_tag.is_set
	|| forward_class.is_set
	|| illegal_fast_adjacency_flag.is_set
	|| ldi_time_of_last_update_in_msec.is_set
	|| load_sharing_type.is_set
	|| lwldi_time_of_last_update_in_msec.is_set
	|| mpls_fec.is_set
	|| packets_through_fib_entry.is_set
	|| path_string.is_set
	|| per_prefix_accounting.is_set
	|| pl_time_of_last_update_in_msec.is_set
	|| pl_time_stamp_type.is_set
	|| precedence_forpackets.is_set
	|| prefix_protocol.is_set
	|| qos_group.is_set
	|| qppb_qos_group_and_ip_precedence.is_set
	|| remote_adjacency_flag.is_set
	|| switch_compontent_id.is_set
	|| traffic_index_for_packets.is_set
	|| (loadshare_information !=  nullptr && loadshare_information->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(adjacency_address_length.yfilter)
	|| ydk::is_set(adjacency_interface.yfilter)
	|| ydk::is_set(afi_fib_protocol_type.yfilter)
	|| ydk::is_set(aib_l3_address.yfilter)
	|| ydk::is_set(bgp_attribute_id.yfilter)
	|| ydk::is_set(bgp_attribute_next_hop_as.yfilter)
	|| ydk::is_set(bgp_attribute_origin_as.yfilter)
	|| ydk::is_set(bgp_local_attribute_id.yfilter)
	|| ydk::is_set(bytes_through_fib_entry.yfilter)
	|| ydk::is_set(com_string.yfilter)
	|| ydk::is_set(detailed_prefix_length.yfilter)
	|| ydk::is_set(extcom_string.yfilter)
	|| ydk::is_set(extended_community.yfilter)
	|| ydk::is_set(fast_adjacency_flag.yfilter)
	|| ydk::is_set(fib_entry_adjacency_address.yfilter)
	|| ydk::is_set(fib_entry_adjacency_interface.yfilter)
	|| ydk::is_set(fib_entry_adjacency_type.yfilter)
	|| ydk::is_set(fib_entry_version.yfilter)
	|| ydk::is_set(fib_protocol_type.yfilter)
	|| ydk::is_set(fib_special_nh_information_type.yfilter)
	|| ydk::is_set(flow_tag.yfilter)
	|| ydk::is_set(forward_class.yfilter)
	|| ydk::is_set(illegal_fast_adjacency_flag.yfilter)
	|| ydk::is_set(ldi_time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(load_sharing_type.yfilter)
	|| ydk::is_set(lwldi_time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(mpls_fec.yfilter)
	|| ydk::is_set(packets_through_fib_entry.yfilter)
	|| ydk::is_set(path_string.yfilter)
	|| ydk::is_set(per_prefix_accounting.yfilter)
	|| ydk::is_set(pl_time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(pl_time_stamp_type.yfilter)
	|| ydk::is_set(precedence_forpackets.yfilter)
	|| ydk::is_set(prefix_protocol.yfilter)
	|| ydk::is_set(qos_group.yfilter)
	|| ydk::is_set(qppb_qos_group_and_ip_precedence.yfilter)
	|| ydk::is_set(remote_adjacency_flag.yfilter)
	|| ydk::is_set(switch_compontent_id.yfilter)
	|| ydk::is_set(traffic_index_for_packets.yfilter)
	|| (loadshare_information !=  nullptr && loadshare_information->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "detail-fib-entry-information";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (adjacency_address_length.is_set || is_set(adjacency_address_length.yfilter)) leaf_name_data.push_back(adjacency_address_length.get_name_leafdata());
    if (adjacency_interface.is_set || is_set(adjacency_interface.yfilter)) leaf_name_data.push_back(adjacency_interface.get_name_leafdata());
    if (afi_fib_protocol_type.is_set || is_set(afi_fib_protocol_type.yfilter)) leaf_name_data.push_back(afi_fib_protocol_type.get_name_leafdata());
    if (aib_l3_address.is_set || is_set(aib_l3_address.yfilter)) leaf_name_data.push_back(aib_l3_address.get_name_leafdata());
    if (bgp_attribute_id.is_set || is_set(bgp_attribute_id.yfilter)) leaf_name_data.push_back(bgp_attribute_id.get_name_leafdata());
    if (bgp_attribute_next_hop_as.is_set || is_set(bgp_attribute_next_hop_as.yfilter)) leaf_name_data.push_back(bgp_attribute_next_hop_as.get_name_leafdata());
    if (bgp_attribute_origin_as.is_set || is_set(bgp_attribute_origin_as.yfilter)) leaf_name_data.push_back(bgp_attribute_origin_as.get_name_leafdata());
    if (bgp_local_attribute_id.is_set || is_set(bgp_local_attribute_id.yfilter)) leaf_name_data.push_back(bgp_local_attribute_id.get_name_leafdata());
    if (bytes_through_fib_entry.is_set || is_set(bytes_through_fib_entry.yfilter)) leaf_name_data.push_back(bytes_through_fib_entry.get_name_leafdata());
    if (com_string.is_set || is_set(com_string.yfilter)) leaf_name_data.push_back(com_string.get_name_leafdata());
    if (detailed_prefix_length.is_set || is_set(detailed_prefix_length.yfilter)) leaf_name_data.push_back(detailed_prefix_length.get_name_leafdata());
    if (extcom_string.is_set || is_set(extcom_string.yfilter)) leaf_name_data.push_back(extcom_string.get_name_leafdata());
    if (extended_community.is_set || is_set(extended_community.yfilter)) leaf_name_data.push_back(extended_community.get_name_leafdata());
    if (fast_adjacency_flag.is_set || is_set(fast_adjacency_flag.yfilter)) leaf_name_data.push_back(fast_adjacency_flag.get_name_leafdata());
    if (fib_entry_adjacency_address.is_set || is_set(fib_entry_adjacency_address.yfilter)) leaf_name_data.push_back(fib_entry_adjacency_address.get_name_leafdata());
    if (fib_entry_adjacency_interface.is_set || is_set(fib_entry_adjacency_interface.yfilter)) leaf_name_data.push_back(fib_entry_adjacency_interface.get_name_leafdata());
    if (fib_entry_adjacency_type.is_set || is_set(fib_entry_adjacency_type.yfilter)) leaf_name_data.push_back(fib_entry_adjacency_type.get_name_leafdata());
    if (fib_entry_version.is_set || is_set(fib_entry_version.yfilter)) leaf_name_data.push_back(fib_entry_version.get_name_leafdata());
    if (fib_protocol_type.is_set || is_set(fib_protocol_type.yfilter)) leaf_name_data.push_back(fib_protocol_type.get_name_leafdata());
    if (fib_special_nh_information_type.is_set || is_set(fib_special_nh_information_type.yfilter)) leaf_name_data.push_back(fib_special_nh_information_type.get_name_leafdata());
    if (flow_tag.is_set || is_set(flow_tag.yfilter)) leaf_name_data.push_back(flow_tag.get_name_leafdata());
    if (forward_class.is_set || is_set(forward_class.yfilter)) leaf_name_data.push_back(forward_class.get_name_leafdata());
    if (illegal_fast_adjacency_flag.is_set || is_set(illegal_fast_adjacency_flag.yfilter)) leaf_name_data.push_back(illegal_fast_adjacency_flag.get_name_leafdata());
    if (ldi_time_of_last_update_in_msec.is_set || is_set(ldi_time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(ldi_time_of_last_update_in_msec.get_name_leafdata());
    if (load_sharing_type.is_set || is_set(load_sharing_type.yfilter)) leaf_name_data.push_back(load_sharing_type.get_name_leafdata());
    if (lwldi_time_of_last_update_in_msec.is_set || is_set(lwldi_time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(lwldi_time_of_last_update_in_msec.get_name_leafdata());
    if (mpls_fec.is_set || is_set(mpls_fec.yfilter)) leaf_name_data.push_back(mpls_fec.get_name_leafdata());
    if (packets_through_fib_entry.is_set || is_set(packets_through_fib_entry.yfilter)) leaf_name_data.push_back(packets_through_fib_entry.get_name_leafdata());
    if (path_string.is_set || is_set(path_string.yfilter)) leaf_name_data.push_back(path_string.get_name_leafdata());
    if (per_prefix_accounting.is_set || is_set(per_prefix_accounting.yfilter)) leaf_name_data.push_back(per_prefix_accounting.get_name_leafdata());
    if (pl_time_of_last_update_in_msec.is_set || is_set(pl_time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(pl_time_of_last_update_in_msec.get_name_leafdata());
    if (pl_time_stamp_type.is_set || is_set(pl_time_stamp_type.yfilter)) leaf_name_data.push_back(pl_time_stamp_type.get_name_leafdata());
    if (precedence_forpackets.is_set || is_set(precedence_forpackets.yfilter)) leaf_name_data.push_back(precedence_forpackets.get_name_leafdata());
    if (prefix_protocol.is_set || is_set(prefix_protocol.yfilter)) leaf_name_data.push_back(prefix_protocol.get_name_leafdata());
    if (qos_group.is_set || is_set(qos_group.yfilter)) leaf_name_data.push_back(qos_group.get_name_leafdata());
    if (qppb_qos_group_and_ip_precedence.is_set || is_set(qppb_qos_group_and_ip_precedence.yfilter)) leaf_name_data.push_back(qppb_qos_group_and_ip_precedence.get_name_leafdata());
    if (remote_adjacency_flag.is_set || is_set(remote_adjacency_flag.yfilter)) leaf_name_data.push_back(remote_adjacency_flag.get_name_leafdata());
    if (switch_compontent_id.is_set || is_set(switch_compontent_id.yfilter)) leaf_name_data.push_back(switch_compontent_id.get_name_leafdata());
    if (traffic_index_for_packets.is_set || is_set(traffic_index_for_packets.yfilter)) leaf_name_data.push_back(traffic_index_for_packets.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "loadshare-information")
    {
        if(loadshare_information == nullptr)
        {
            loadshare_information = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation>();
        }
        return loadshare_information;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(loadshare_information != nullptr)
    {
        children["loadshare-information"] = loadshare_information;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "adjacency-address-length")
    {
        adjacency_address_length = value;
        adjacency_address_length.value_namespace = name_space;
        adjacency_address_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "adjacency-interface")
    {
        adjacency_interface = value;
        adjacency_interface.value_namespace = name_space;
        adjacency_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "afi-fib-protocol-type")
    {
        afi_fib_protocol_type = value;
        afi_fib_protocol_type.value_namespace = name_space;
        afi_fib_protocol_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aib-l3-address")
    {
        aib_l3_address = value;
        aib_l3_address.value_namespace = name_space;
        aib_l3_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-attribute-id")
    {
        bgp_attribute_id = value;
        bgp_attribute_id.value_namespace = name_space;
        bgp_attribute_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-attribute-next-hop-as")
    {
        bgp_attribute_next_hop_as = value;
        bgp_attribute_next_hop_as.value_namespace = name_space;
        bgp_attribute_next_hop_as.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-attribute-origin-as")
    {
        bgp_attribute_origin_as = value;
        bgp_attribute_origin_as.value_namespace = name_space;
        bgp_attribute_origin_as.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-local-attribute-id")
    {
        bgp_local_attribute_id = value;
        bgp_local_attribute_id.value_namespace = name_space;
        bgp_local_attribute_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bytes-through-fib-entry")
    {
        bytes_through_fib_entry = value;
        bytes_through_fib_entry.value_namespace = name_space;
        bytes_through_fib_entry.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "com-string")
    {
        com_string = value;
        com_string.value_namespace = name_space;
        com_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "detailed-prefix-length")
    {
        detailed_prefix_length = value;
        detailed_prefix_length.value_namespace = name_space;
        detailed_prefix_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extcom-string")
    {
        extcom_string = value;
        extcom_string.value_namespace = name_space;
        extcom_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extended-community")
    {
        extended_community = value;
        extended_community.value_namespace = name_space;
        extended_community.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fast-adjacency-flag")
    {
        fast_adjacency_flag = value;
        fast_adjacency_flag.value_namespace = name_space;
        fast_adjacency_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-entry-adjacency-address")
    {
        fib_entry_adjacency_address = value;
        fib_entry_adjacency_address.value_namespace = name_space;
        fib_entry_adjacency_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-entry-adjacency-interface")
    {
        fib_entry_adjacency_interface = value;
        fib_entry_adjacency_interface.value_namespace = name_space;
        fib_entry_adjacency_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-entry-adjacency-type")
    {
        fib_entry_adjacency_type = value;
        fib_entry_adjacency_type.value_namespace = name_space;
        fib_entry_adjacency_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-entry-version")
    {
        fib_entry_version = value;
        fib_entry_version.value_namespace = name_space;
        fib_entry_version.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-protocol-type")
    {
        fib_protocol_type = value;
        fib_protocol_type.value_namespace = name_space;
        fib_protocol_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-special-nh-information-type")
    {
        fib_special_nh_information_type = value;
        fib_special_nh_information_type.value_namespace = name_space;
        fib_special_nh_information_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flow-tag")
    {
        flow_tag = value;
        flow_tag.value_namespace = name_space;
        flow_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forward-class")
    {
        forward_class = value;
        forward_class.value_namespace = name_space;
        forward_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "illegal-fast-adjacency-flag")
    {
        illegal_fast_adjacency_flag = value;
        illegal_fast_adjacency_flag.value_namespace = name_space;
        illegal_fast_adjacency_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-time-of-last-update-in-msec")
    {
        ldi_time_of_last_update_in_msec = value;
        ldi_time_of_last_update_in_msec.value_namespace = name_space;
        ldi_time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-sharing-type")
    {
        load_sharing_type = value;
        load_sharing_type.value_namespace = name_space;
        load_sharing_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lwldi-time-of-last-update-in-msec")
    {
        lwldi_time_of_last_update_in_msec = value;
        lwldi_time_of_last_update_in_msec.value_namespace = name_space;
        lwldi_time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mpls-fec")
    {
        mpls_fec = value;
        mpls_fec.value_namespace = name_space;
        mpls_fec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "packets-through-fib-entry")
    {
        packets_through_fib_entry = value;
        packets_through_fib_entry.value_namespace = name_space;
        packets_through_fib_entry.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-string")
    {
        path_string = value;
        path_string.value_namespace = name_space;
        path_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "per-prefix-accounting")
    {
        per_prefix_accounting = value;
        per_prefix_accounting.value_namespace = name_space;
        per_prefix_accounting.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pl-time-of-last-update-in-msec")
    {
        pl_time_of_last_update_in_msec = value;
        pl_time_of_last_update_in_msec.value_namespace = name_space;
        pl_time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pl-time-stamp-type")
    {
        pl_time_stamp_type = value;
        pl_time_stamp_type.value_namespace = name_space;
        pl_time_stamp_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "precedence-forpackets")
    {
        precedence_forpackets = value;
        precedence_forpackets.value_namespace = name_space;
        precedence_forpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-protocol")
    {
        prefix_protocol = value;
        prefix_protocol.value_namespace = name_space;
        prefix_protocol.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "qos-group")
    {
        qos_group = value;
        qos_group.value_namespace = name_space;
        qos_group.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "qppb-qos-group-and-ip-precedence")
    {
        qppb_qos_group_and_ip_precedence = value;
        qppb_qos_group_and_ip_precedence.value_namespace = name_space;
        qppb_qos_group_and_ip_precedence.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "remote-adjacency-flag")
    {
        remote_adjacency_flag = value;
        remote_adjacency_flag.value_namespace = name_space;
        remote_adjacency_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "switch-compontent-id")
    {
        switch_compontent_id = value;
        switch_compontent_id.value_namespace = name_space;
        switch_compontent_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "traffic-index-for-packets")
    {
        traffic_index_for_packets = value;
        traffic_index_for_packets.value_namespace = name_space;
        traffic_index_for_packets.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "adjacency-address-length")
    {
        adjacency_address_length.yfilter = yfilter;
    }
    if(value_path == "adjacency-interface")
    {
        adjacency_interface.yfilter = yfilter;
    }
    if(value_path == "afi-fib-protocol-type")
    {
        afi_fib_protocol_type.yfilter = yfilter;
    }
    if(value_path == "aib-l3-address")
    {
        aib_l3_address.yfilter = yfilter;
    }
    if(value_path == "bgp-attribute-id")
    {
        bgp_attribute_id.yfilter = yfilter;
    }
    if(value_path == "bgp-attribute-next-hop-as")
    {
        bgp_attribute_next_hop_as.yfilter = yfilter;
    }
    if(value_path == "bgp-attribute-origin-as")
    {
        bgp_attribute_origin_as.yfilter = yfilter;
    }
    if(value_path == "bgp-local-attribute-id")
    {
        bgp_local_attribute_id.yfilter = yfilter;
    }
    if(value_path == "bytes-through-fib-entry")
    {
        bytes_through_fib_entry.yfilter = yfilter;
    }
    if(value_path == "com-string")
    {
        com_string.yfilter = yfilter;
    }
    if(value_path == "detailed-prefix-length")
    {
        detailed_prefix_length.yfilter = yfilter;
    }
    if(value_path == "extcom-string")
    {
        extcom_string.yfilter = yfilter;
    }
    if(value_path == "extended-community")
    {
        extended_community.yfilter = yfilter;
    }
    if(value_path == "fast-adjacency-flag")
    {
        fast_adjacency_flag.yfilter = yfilter;
    }
    if(value_path == "fib-entry-adjacency-address")
    {
        fib_entry_adjacency_address.yfilter = yfilter;
    }
    if(value_path == "fib-entry-adjacency-interface")
    {
        fib_entry_adjacency_interface.yfilter = yfilter;
    }
    if(value_path == "fib-entry-adjacency-type")
    {
        fib_entry_adjacency_type.yfilter = yfilter;
    }
    if(value_path == "fib-entry-version")
    {
        fib_entry_version.yfilter = yfilter;
    }
    if(value_path == "fib-protocol-type")
    {
        fib_protocol_type.yfilter = yfilter;
    }
    if(value_path == "fib-special-nh-information-type")
    {
        fib_special_nh_information_type.yfilter = yfilter;
    }
    if(value_path == "flow-tag")
    {
        flow_tag.yfilter = yfilter;
    }
    if(value_path == "forward-class")
    {
        forward_class.yfilter = yfilter;
    }
    if(value_path == "illegal-fast-adjacency-flag")
    {
        illegal_fast_adjacency_flag.yfilter = yfilter;
    }
    if(value_path == "ldi-time-of-last-update-in-msec")
    {
        ldi_time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "load-sharing-type")
    {
        load_sharing_type.yfilter = yfilter;
    }
    if(value_path == "lwldi-time-of-last-update-in-msec")
    {
        lwldi_time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "mpls-fec")
    {
        mpls_fec.yfilter = yfilter;
    }
    if(value_path == "packets-through-fib-entry")
    {
        packets_through_fib_entry.yfilter = yfilter;
    }
    if(value_path == "path-string")
    {
        path_string.yfilter = yfilter;
    }
    if(value_path == "per-prefix-accounting")
    {
        per_prefix_accounting.yfilter = yfilter;
    }
    if(value_path == "pl-time-of-last-update-in-msec")
    {
        pl_time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "pl-time-stamp-type")
    {
        pl_time_stamp_type.yfilter = yfilter;
    }
    if(value_path == "precedence-forpackets")
    {
        precedence_forpackets.yfilter = yfilter;
    }
    if(value_path == "prefix-protocol")
    {
        prefix_protocol.yfilter = yfilter;
    }
    if(value_path == "qos-group")
    {
        qos_group.yfilter = yfilter;
    }
    if(value_path == "qppb-qos-group-and-ip-precedence")
    {
        qppb_qos_group_and_ip_precedence.yfilter = yfilter;
    }
    if(value_path == "remote-adjacency-flag")
    {
        remote_adjacency_flag.yfilter = yfilter;
    }
    if(value_path == "switch-compontent-id")
    {
        switch_compontent_id.yfilter = yfilter;
    }
    if(value_path == "traffic-index-for-packets")
    {
        traffic_index_for_packets.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "loadshare-information" || name == "adjacency-address-length" || name == "adjacency-interface" || name == "afi-fib-protocol-type" || name == "aib-l3-address" || name == "bgp-attribute-id" || name == "bgp-attribute-next-hop-as" || name == "bgp-attribute-origin-as" || name == "bgp-local-attribute-id" || name == "bytes-through-fib-entry" || name == "com-string" || name == "detailed-prefix-length" || name == "extcom-string" || name == "extended-community" || name == "fast-adjacency-flag" || name == "fib-entry-adjacency-address" || name == "fib-entry-adjacency-interface" || name == "fib-entry-adjacency-type" || name == "fib-entry-version" || name == "fib-protocol-type" || name == "fib-special-nh-information-type" || name == "flow-tag" || name == "forward-class" || name == "illegal-fast-adjacency-flag" || name == "ldi-time-of-last-update-in-msec" || name == "load-sharing-type" || name == "lwldi-time-of-last-update-in-msec" || name == "mpls-fec" || name == "packets-through-fib-entry" || name == "path-string" || name == "per-prefix-accounting" || name == "pl-time-of-last-update-in-msec" || name == "pl-time-stamp-type" || name == "precedence-forpackets" || name == "prefix-protocol" || name == "qos-group" || name == "qppb-qos-group-and-ip-precedence" || name == "remote-adjacency-flag" || name == "switch-compontent-id" || name == "traffic-index-for-packets")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadshareInformation()
    :
    bytes_through_load_information{YType::uint64, "bytes-through-load-information"},
    is_owner{YType::boolean, "is-owner"},
    load_information_owner_deleted_flag{YType::boolean, "load-information-owner-deleted-flag"},
    load_information_reference_count{YType::uint16, "load-information-reference-count"},
    loadinfo_sanity_flag{YType::boolean, "loadinfo-sanity-flag"},
    mask_length_of_owner{YType::uint32, "mask-length-of-owner"},
    packets_through_load_information{YType::uint64, "packets-through-load-information"},
    per_dest_load_sharing_flag{YType::boolean, "per-dest-load-sharing-flag"},
    prefix_of_owner{YType::uint32, "prefix-of-owner"},
    total_bytes_through_load_information{YType::uint64, "total-bytes-through-load-information"},
    total_packets_through_load_information{YType::uint64, "total-packets-through-load-information"}
    	,
    load_informtion_internal_data(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData>())
{
    load_informtion_internal_data->parent = this;

    yang_name = "loadshare-information"; yang_parent_name = "detail-fib-entry-information"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::~LoadshareInformation()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::has_data() const
{
    return bytes_through_load_information.is_set
	|| is_owner.is_set
	|| load_information_owner_deleted_flag.is_set
	|| load_information_reference_count.is_set
	|| loadinfo_sanity_flag.is_set
	|| mask_length_of_owner.is_set
	|| packets_through_load_information.is_set
	|| per_dest_load_sharing_flag.is_set
	|| prefix_of_owner.is_set
	|| total_bytes_through_load_information.is_set
	|| total_packets_through_load_information.is_set
	|| (load_informtion_internal_data !=  nullptr && load_informtion_internal_data->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(bytes_through_load_information.yfilter)
	|| ydk::is_set(is_owner.yfilter)
	|| ydk::is_set(load_information_owner_deleted_flag.yfilter)
	|| ydk::is_set(load_information_reference_count.yfilter)
	|| ydk::is_set(loadinfo_sanity_flag.yfilter)
	|| ydk::is_set(mask_length_of_owner.yfilter)
	|| ydk::is_set(packets_through_load_information.yfilter)
	|| ydk::is_set(per_dest_load_sharing_flag.yfilter)
	|| ydk::is_set(prefix_of_owner.yfilter)
	|| ydk::is_set(total_bytes_through_load_information.yfilter)
	|| ydk::is_set(total_packets_through_load_information.yfilter)
	|| (load_informtion_internal_data !=  nullptr && load_informtion_internal_data->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "loadshare-information";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (bytes_through_load_information.is_set || is_set(bytes_through_load_information.yfilter)) leaf_name_data.push_back(bytes_through_load_information.get_name_leafdata());
    if (is_owner.is_set || is_set(is_owner.yfilter)) leaf_name_data.push_back(is_owner.get_name_leafdata());
    if (load_information_owner_deleted_flag.is_set || is_set(load_information_owner_deleted_flag.yfilter)) leaf_name_data.push_back(load_information_owner_deleted_flag.get_name_leafdata());
    if (load_information_reference_count.is_set || is_set(load_information_reference_count.yfilter)) leaf_name_data.push_back(load_information_reference_count.get_name_leafdata());
    if (loadinfo_sanity_flag.is_set || is_set(loadinfo_sanity_flag.yfilter)) leaf_name_data.push_back(loadinfo_sanity_flag.get_name_leafdata());
    if (mask_length_of_owner.is_set || is_set(mask_length_of_owner.yfilter)) leaf_name_data.push_back(mask_length_of_owner.get_name_leafdata());
    if (packets_through_load_information.is_set || is_set(packets_through_load_information.yfilter)) leaf_name_data.push_back(packets_through_load_information.get_name_leafdata());
    if (per_dest_load_sharing_flag.is_set || is_set(per_dest_load_sharing_flag.yfilter)) leaf_name_data.push_back(per_dest_load_sharing_flag.get_name_leafdata());
    if (prefix_of_owner.is_set || is_set(prefix_of_owner.yfilter)) leaf_name_data.push_back(prefix_of_owner.get_name_leafdata());
    if (total_bytes_through_load_information.is_set || is_set(total_bytes_through_load_information.yfilter)) leaf_name_data.push_back(total_bytes_through_load_information.get_name_leafdata());
    if (total_packets_through_load_information.is_set || is_set(total_packets_through_load_information.yfilter)) leaf_name_data.push_back(total_packets_through_load_information.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "load-informtion-internal-data")
    {
        if(load_informtion_internal_data == nullptr)
        {
            load_informtion_internal_data = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData>();
        }
        return load_informtion_internal_data;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(load_informtion_internal_data != nullptr)
    {
        children["load-informtion-internal-data"] = load_informtion_internal_data;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "bytes-through-load-information")
    {
        bytes_through_load_information = value;
        bytes_through_load_information.value_namespace = name_space;
        bytes_through_load_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "is-owner")
    {
        is_owner = value;
        is_owner.value_namespace = name_space;
        is_owner.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-information-owner-deleted-flag")
    {
        load_information_owner_deleted_flag = value;
        load_information_owner_deleted_flag.value_namespace = name_space;
        load_information_owner_deleted_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-information-reference-count")
    {
        load_information_reference_count = value;
        load_information_reference_count.value_namespace = name_space;
        load_information_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "loadinfo-sanity-flag")
    {
        loadinfo_sanity_flag = value;
        loadinfo_sanity_flag.value_namespace = name_space;
        loadinfo_sanity_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mask-length-of-owner")
    {
        mask_length_of_owner = value;
        mask_length_of_owner.value_namespace = name_space;
        mask_length_of_owner.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "packets-through-load-information")
    {
        packets_through_load_information = value;
        packets_through_load_information.value_namespace = name_space;
        packets_through_load_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "per-dest-load-sharing-flag")
    {
        per_dest_load_sharing_flag = value;
        per_dest_load_sharing_flag.value_namespace = name_space;
        per_dest_load_sharing_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-of-owner")
    {
        prefix_of_owner = value;
        prefix_of_owner.value_namespace = name_space;
        prefix_of_owner.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-bytes-through-load-information")
    {
        total_bytes_through_load_information = value;
        total_bytes_through_load_information.value_namespace = name_space;
        total_bytes_through_load_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-packets-through-load-information")
    {
        total_packets_through_load_information = value;
        total_packets_through_load_information.value_namespace = name_space;
        total_packets_through_load_information.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "bytes-through-load-information")
    {
        bytes_through_load_information.yfilter = yfilter;
    }
    if(value_path == "is-owner")
    {
        is_owner.yfilter = yfilter;
    }
    if(value_path == "load-information-owner-deleted-flag")
    {
        load_information_owner_deleted_flag.yfilter = yfilter;
    }
    if(value_path == "load-information-reference-count")
    {
        load_information_reference_count.yfilter = yfilter;
    }
    if(value_path == "loadinfo-sanity-flag")
    {
        loadinfo_sanity_flag.yfilter = yfilter;
    }
    if(value_path == "mask-length-of-owner")
    {
        mask_length_of_owner.yfilter = yfilter;
    }
    if(value_path == "packets-through-load-information")
    {
        packets_through_load_information.yfilter = yfilter;
    }
    if(value_path == "per-dest-load-sharing-flag")
    {
        per_dest_load_sharing_flag.yfilter = yfilter;
    }
    if(value_path == "prefix-of-owner")
    {
        prefix_of_owner.yfilter = yfilter;
    }
    if(value_path == "total-bytes-through-load-information")
    {
        total_bytes_through_load_information.yfilter = yfilter;
    }
    if(value_path == "total-packets-through-load-information")
    {
        total_packets_through_load_information.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "load-informtion-internal-data" || name == "bytes-through-load-information" || name == "is-owner" || name == "load-information-owner-deleted-flag" || name == "load-information-reference-count" || name == "loadinfo-sanity-flag" || name == "mask-length-of-owner" || name == "packets-through-load-information" || name == "per-dest-load-sharing-flag" || name == "prefix-of-owner" || name == "total-bytes-through-load-information" || name == "total-packets-through-load-information")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::LoadInformtionInternalData()
    :
    is_pbts_info_valid{YType::boolean, "is-pbts-info-valid"},
    ldi_next_hop_buckets{YType::uint8, "ldi-next-hop-buckets"},
    level_ofldis{YType::uint8, "level-ofldis"},
    maximum_index_arrays{YType::uint32, "maximum-index-arrays"},
    maximum_slots{YType::uint32, "maximum-slots"},
    normalized_weights{YType::str, "normalized-weights"},
    number_of_ldis{YType::uint8, "number-of-ldis"},
    path_indices{YType::str, "path-indices"},
    path_ldi_numbers{YType::str, "path-ldi-numbers"},
    pbts_class_num_paths{YType::str, "pbts-class-num-paths"},
    pbts_class_offset{YType::str, "pbts-class-offset"},
    pbts_fallback_mapped_class{YType::str, "pbts-fallback-mapped-class"},
    platform_hardware_information{YType::str, "platform-hardware-information"},
    round_robin_disable{YType::boolean, "round-robin-disable"},
    tunnel_class_value{YType::str, "tunnel-class-value"}
{

    yang_name = "load-informtion-internal-data"; yang_parent_name = "loadshare-information"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::~LoadInformtionInternalData()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::has_data() const
{
    for (std::size_t index=0; index<adjacency_address.size(); index++)
    {
        if(adjacency_address[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<interface_handle.size(); index++)
    {
        if(interface_handle[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<pbts_class_is_fallback_mapped.size(); index++)
    {
        if(pbts_class_is_fallback_mapped[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<pbts_fallback_to_drop.size(); index++)
    {
        if(pbts_fallback_to_drop[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<sanity_flag.size(); index++)
    {
        if(sanity_flag[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<tunnel_is_forward_class.size(); index++)
    {
        if(tunnel_is_forward_class[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<weights_of_path.size(); index++)
    {
        if(weights_of_path[index]->has_data())
            return true;
    }
    return is_pbts_info_valid.is_set
	|| ldi_next_hop_buckets.is_set
	|| level_ofldis.is_set
	|| maximum_index_arrays.is_set
	|| maximum_slots.is_set
	|| normalized_weights.is_set
	|| number_of_ldis.is_set
	|| path_indices.is_set
	|| path_ldi_numbers.is_set
	|| pbts_class_num_paths.is_set
	|| pbts_class_offset.is_set
	|| pbts_fallback_mapped_class.is_set
	|| platform_hardware_information.is_set
	|| round_robin_disable.is_set
	|| tunnel_class_value.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::has_operation() const
{
    for (std::size_t index=0; index<adjacency_address.size(); index++)
    {
        if(adjacency_address[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<interface_handle.size(); index++)
    {
        if(interface_handle[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<pbts_class_is_fallback_mapped.size(); index++)
    {
        if(pbts_class_is_fallback_mapped[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<pbts_fallback_to_drop.size(); index++)
    {
        if(pbts_fallback_to_drop[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<sanity_flag.size(); index++)
    {
        if(sanity_flag[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<tunnel_is_forward_class.size(); index++)
    {
        if(tunnel_is_forward_class[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<weights_of_path.size(); index++)
    {
        if(weights_of_path[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(is_pbts_info_valid.yfilter)
	|| ydk::is_set(ldi_next_hop_buckets.yfilter)
	|| ydk::is_set(level_ofldis.yfilter)
	|| ydk::is_set(maximum_index_arrays.yfilter)
	|| ydk::is_set(maximum_slots.yfilter)
	|| ydk::is_set(normalized_weights.yfilter)
	|| ydk::is_set(number_of_ldis.yfilter)
	|| ydk::is_set(path_indices.yfilter)
	|| ydk::is_set(path_ldi_numbers.yfilter)
	|| ydk::is_set(pbts_class_num_paths.yfilter)
	|| ydk::is_set(pbts_class_offset.yfilter)
	|| ydk::is_set(pbts_fallback_mapped_class.yfilter)
	|| ydk::is_set(platform_hardware_information.yfilter)
	|| ydk::is_set(round_robin_disable.yfilter)
	|| ydk::is_set(tunnel_class_value.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "load-informtion-internal-data";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_pbts_info_valid.is_set || is_set(is_pbts_info_valid.yfilter)) leaf_name_data.push_back(is_pbts_info_valid.get_name_leafdata());
    if (ldi_next_hop_buckets.is_set || is_set(ldi_next_hop_buckets.yfilter)) leaf_name_data.push_back(ldi_next_hop_buckets.get_name_leafdata());
    if (level_ofldis.is_set || is_set(level_ofldis.yfilter)) leaf_name_data.push_back(level_ofldis.get_name_leafdata());
    if (maximum_index_arrays.is_set || is_set(maximum_index_arrays.yfilter)) leaf_name_data.push_back(maximum_index_arrays.get_name_leafdata());
    if (maximum_slots.is_set || is_set(maximum_slots.yfilter)) leaf_name_data.push_back(maximum_slots.get_name_leafdata());
    if (normalized_weights.is_set || is_set(normalized_weights.yfilter)) leaf_name_data.push_back(normalized_weights.get_name_leafdata());
    if (number_of_ldis.is_set || is_set(number_of_ldis.yfilter)) leaf_name_data.push_back(number_of_ldis.get_name_leafdata());
    if (path_indices.is_set || is_set(path_indices.yfilter)) leaf_name_data.push_back(path_indices.get_name_leafdata());
    if (path_ldi_numbers.is_set || is_set(path_ldi_numbers.yfilter)) leaf_name_data.push_back(path_ldi_numbers.get_name_leafdata());
    if (pbts_class_num_paths.is_set || is_set(pbts_class_num_paths.yfilter)) leaf_name_data.push_back(pbts_class_num_paths.get_name_leafdata());
    if (pbts_class_offset.is_set || is_set(pbts_class_offset.yfilter)) leaf_name_data.push_back(pbts_class_offset.get_name_leafdata());
    if (pbts_fallback_mapped_class.is_set || is_set(pbts_fallback_mapped_class.yfilter)) leaf_name_data.push_back(pbts_fallback_mapped_class.get_name_leafdata());
    if (platform_hardware_information.is_set || is_set(platform_hardware_information.yfilter)) leaf_name_data.push_back(platform_hardware_information.get_name_leafdata());
    if (round_robin_disable.is_set || is_set(round_robin_disable.yfilter)) leaf_name_data.push_back(round_robin_disable.get_name_leafdata());
    if (tunnel_class_value.is_set || is_set(tunnel_class_value.yfilter)) leaf_name_data.push_back(tunnel_class_value.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "adjacency-address")
    {
        for(auto const & c : adjacency_address)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress>();
        c->parent = this;
        adjacency_address.push_back(c);
        return c;
    }

    if(child_yang_name == "interface-handle")
    {
        for(auto const & c : interface_handle)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle>();
        c->parent = this;
        interface_handle.push_back(c);
        return c;
    }

    if(child_yang_name == "pbts-class-is-fallback-mapped")
    {
        for(auto const & c : pbts_class_is_fallback_mapped)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped>();
        c->parent = this;
        pbts_class_is_fallback_mapped.push_back(c);
        return c;
    }

    if(child_yang_name == "pbts-fallback-to-drop")
    {
        for(auto const & c : pbts_fallback_to_drop)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop>();
        c->parent = this;
        pbts_fallback_to_drop.push_back(c);
        return c;
    }

    if(child_yang_name == "sanity-flag")
    {
        for(auto const & c : sanity_flag)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag>();
        c->parent = this;
        sanity_flag.push_back(c);
        return c;
    }

    if(child_yang_name == "tunnel-is-forward-class")
    {
        for(auto const & c : tunnel_is_forward_class)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass>();
        c->parent = this;
        tunnel_is_forward_class.push_back(c);
        return c;
    }

    if(child_yang_name == "weights-of-path")
    {
        for(auto const & c : weights_of_path)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath>();
        c->parent = this;
        weights_of_path.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : adjacency_address)
    {
        children[c->get_segment_path()] = c;
    }

    for (auto const & c : interface_handle)
    {
        children[c->get_segment_path()] = c;
    }

    for (auto const & c : pbts_class_is_fallback_mapped)
    {
        children[c->get_segment_path()] = c;
    }

    for (auto const & c : pbts_fallback_to_drop)
    {
        children[c->get_segment_path()] = c;
    }

    for (auto const & c : sanity_flag)
    {
        children[c->get_segment_path()] = c;
    }

    for (auto const & c : tunnel_is_forward_class)
    {
        children[c->get_segment_path()] = c;
    }

    for (auto const & c : weights_of_path)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "is-pbts-info-valid")
    {
        is_pbts_info_valid = value;
        is_pbts_info_valid.value_namespace = name_space;
        is_pbts_info_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-next-hop-buckets")
    {
        ldi_next_hop_buckets = value;
        ldi_next_hop_buckets.value_namespace = name_space;
        ldi_next_hop_buckets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "level-ofldis")
    {
        level_ofldis = value;
        level_ofldis.value_namespace = name_space;
        level_ofldis.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maximum-index-arrays")
    {
        maximum_index_arrays = value;
        maximum_index_arrays.value_namespace = name_space;
        maximum_index_arrays.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maximum-slots")
    {
        maximum_slots = value;
        maximum_slots.value_namespace = name_space;
        maximum_slots.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "normalized-weights")
    {
        normalized_weights = value;
        normalized_weights.value_namespace = name_space;
        normalized_weights.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-ldis")
    {
        number_of_ldis = value;
        number_of_ldis.value_namespace = name_space;
        number_of_ldis.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-indices")
    {
        path_indices = value;
        path_indices.value_namespace = name_space;
        path_indices.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-ldi-numbers")
    {
        path_ldi_numbers = value;
        path_ldi_numbers.value_namespace = name_space;
        path_ldi_numbers.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pbts-class-num-paths")
    {
        pbts_class_num_paths = value;
        pbts_class_num_paths.value_namespace = name_space;
        pbts_class_num_paths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pbts-class-offset")
    {
        pbts_class_offset = value;
        pbts_class_offset.value_namespace = name_space;
        pbts_class_offset.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pbts-fallback-mapped-class")
    {
        pbts_fallback_mapped_class = value;
        pbts_fallback_mapped_class.value_namespace = name_space;
        pbts_fallback_mapped_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-hardware-information")
    {
        platform_hardware_information = value;
        platform_hardware_information.value_namespace = name_space;
        platform_hardware_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "round-robin-disable")
    {
        round_robin_disable = value;
        round_robin_disable.value_namespace = name_space;
        round_robin_disable.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-class-value")
    {
        tunnel_class_value = value;
        tunnel_class_value.value_namespace = name_space;
        tunnel_class_value.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "is-pbts-info-valid")
    {
        is_pbts_info_valid.yfilter = yfilter;
    }
    if(value_path == "ldi-next-hop-buckets")
    {
        ldi_next_hop_buckets.yfilter = yfilter;
    }
    if(value_path == "level-ofldis")
    {
        level_ofldis.yfilter = yfilter;
    }
    if(value_path == "maximum-index-arrays")
    {
        maximum_index_arrays.yfilter = yfilter;
    }
    if(value_path == "maximum-slots")
    {
        maximum_slots.yfilter = yfilter;
    }
    if(value_path == "normalized-weights")
    {
        normalized_weights.yfilter = yfilter;
    }
    if(value_path == "number-of-ldis")
    {
        number_of_ldis.yfilter = yfilter;
    }
    if(value_path == "path-indices")
    {
        path_indices.yfilter = yfilter;
    }
    if(value_path == "path-ldi-numbers")
    {
        path_ldi_numbers.yfilter = yfilter;
    }
    if(value_path == "pbts-class-num-paths")
    {
        pbts_class_num_paths.yfilter = yfilter;
    }
    if(value_path == "pbts-class-offset")
    {
        pbts_class_offset.yfilter = yfilter;
    }
    if(value_path == "pbts-fallback-mapped-class")
    {
        pbts_fallback_mapped_class.yfilter = yfilter;
    }
    if(value_path == "platform-hardware-information")
    {
        platform_hardware_information.yfilter = yfilter;
    }
    if(value_path == "round-robin-disable")
    {
        round_robin_disable.yfilter = yfilter;
    }
    if(value_path == "tunnel-class-value")
    {
        tunnel_class_value.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "adjacency-address" || name == "interface-handle" || name == "pbts-class-is-fallback-mapped" || name == "pbts-fallback-to-drop" || name == "sanity-flag" || name == "tunnel-is-forward-class" || name == "weights-of-path" || name == "is-pbts-info-valid" || name == "ldi-next-hop-buckets" || name == "level-ofldis" || name == "maximum-index-arrays" || name == "maximum-slots" || name == "normalized-weights" || name == "number-of-ldis" || name == "path-indices" || name == "path-ldi-numbers" || name == "pbts-class-num-paths" || name == "pbts-class-offset" || name == "pbts-fallback-mapped-class" || name == "platform-hardware-information" || name == "round-robin-disable" || name == "tunnel-class-value")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::AdjacencyAddress()
    :
    address{YType::str, "address"}
{

    yang_name = "adjacency-address"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::~AdjacencyAddress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::has_data() const
{
    return address.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(address.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "adjacency-address";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (address.is_set || is_set(address.yfilter)) leaf_name_data.push_back(address.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "address")
    {
        address = value;
        address.value_namespace = name_space;
        address.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "address")
    {
        address.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "address")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::InterfaceHandle()
    :
    entry{YType::str, "entry"}
{

    yang_name = "interface-handle"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::~InterfaceHandle()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-handle";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::PbtsClassIsFallbackMapped()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "pbts-class-is-fallback-mapped"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::~PbtsClassIsFallbackMapped()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pbts-class-is-fallback-mapped";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::PbtsFallbackToDrop()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "pbts-fallback-to-drop"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::~PbtsFallbackToDrop()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pbts-fallback-to-drop";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::SanityFlag()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "sanity-flag"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::~SanityFlag()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sanity-flag";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::TunnelIsForwardClass()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "tunnel-is-forward-class"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::~TunnelIsForwardClass()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tunnel-is-forward-class";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::WeightsOfPath()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "weights-of-path"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::~WeightsOfPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "weights-of-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::ExtensionObject()
    :
    type{YType::enumeration, "type"}
    	,
    sfecd_le(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe>())
{
    sfecd_le->parent = this;

    yang_name = "extension-object"; yang_parent_name = "ip-prefix-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::~ExtensionObject()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::has_data() const
{
    return type.is_set
	|| (sfecd_le !=  nullptr && sfecd_le->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (sfecd_le !=  nullptr && sfecd_le->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "extension-object";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sfecd-le")
    {
        if(sfecd_le == nullptr)
        {
            sfecd_le = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe>();
        }
        return sfecd_le;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(sfecd_le != nullptr)
    {
        children["sfecd-le"] = sfecd_le;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sfecd-le" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe::SfecdLe()
    :
    context_label{YType::uint32, "context-label"},
    context_label_flag{YType::boolean, "context-label-flag"}
{

    yang_name = "sfecd-le"; yang_parent_name = "extension-object"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe::~SfecdLe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe::has_data() const
{
    return context_label.is_set
	|| context_label_flag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(context_label.yfilter)
	|| ydk::is_set(context_label_flag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sfecd-le";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (context_label.is_set || is_set(context_label.yfilter)) leaf_name_data.push_back(context_label.get_name_leafdata());
    if (context_label_flag.is_set || is_set(context_label_flag.yfilter)) leaf_name_data.push_back(context_label_flag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "context-label")
    {
        context_label = value;
        context_label.value_namespace = name_space;
        context_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "context-label-flag")
    {
        context_label_flag = value;
        context_label_flag.value_namespace = name_space;
        context_label_flag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "context-label")
    {
        context_label.yfilter = yfilter;
    }
    if(value_path == "context-label-flag")
    {
        context_label_flag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject::SfecdLe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "context-label" || name == "context-label-flag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibEntryPath()
{

    yang_name = "fib-entry-path"; yang_parent_name = "ip-prefix-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::~FibEntryPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::has_data() const
{
    for (std::size_t index=0; index<fib_sh_tbl_path.size(); index++)
    {
        if(fib_sh_tbl_path[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::has_operation() const
{
    for (std::size_t index=0; index<fib_sh_tbl_path.size(); index++)
    {
        if(fib_sh_tbl_path[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-entry-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fib-sh-tbl-path")
    {
        for(auto const & c : fib_sh_tbl_path)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath>();
        c->parent = this;
        fib_sh_tbl_path.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : fib_sh_tbl_path)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fib-sh-tbl-path")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::FibShTblPath()
    :
    attached_path{YType::boolean, "attached-path"},
    backup_index{YType::uint8, "backup-index"},
    backup_path{YType::boolean, "backup-path"},
    best_external_path{YType::boolean, "best-external-path"},
    brief_interface_handle{YType::str, "brief-interface-handle"},
    brief_lfa_protection_type{YType::enumeration, "brief-lfa-protection-type"},
    brief_next_hop_prefix{YType::str, "brief-next-hop-prefix"},
    brief_pnode_address{YType::str, "brief-pnode-address"},
    brief_qnode_address{YType::str, "brief-qnode-address"},
    hardware_information{YType::str, "hardware-information"},
    next_hop_index{YType::uint32, "next-hop-index"},
    packets_received_path{YType::boolean, "packets-received-path"},
    parent_interface_handle{YType::str, "parent-interface-handle"},
    path_dlb{YType::boolean, "path-dlb"},
    path_flags{YType::uint32, "path-flags"},
    path_index{YType::uint8, "path-index"},
    path_info_flags{YType::uint16, "path-info-flags"},
    protect_ignore{YType::boolean, "protect-ignore"},
    recursionvia_len{YType::uint8, "recursionvia-len"},
    recursive_path{YType::boolean, "recursive-path"},
    resolved_path{YType::boolean, "resolved-path"},
    via_label_to_recurse{YType::uint32, "via-label-to-recurse"}
    	,
    more_detail_about_path(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath>())
	,mpls_information_for_path(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath>())
{
    more_detail_about_path->parent = this;
    mpls_information_for_path->parent = this;

    yang_name = "fib-sh-tbl-path"; yang_parent_name = "fib-entry-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::~FibShTblPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::has_data() const
{
    return attached_path.is_set
	|| backup_index.is_set
	|| backup_path.is_set
	|| best_external_path.is_set
	|| brief_interface_handle.is_set
	|| brief_lfa_protection_type.is_set
	|| brief_next_hop_prefix.is_set
	|| brief_pnode_address.is_set
	|| brief_qnode_address.is_set
	|| hardware_information.is_set
	|| next_hop_index.is_set
	|| packets_received_path.is_set
	|| parent_interface_handle.is_set
	|| path_dlb.is_set
	|| path_flags.is_set
	|| path_index.is_set
	|| path_info_flags.is_set
	|| protect_ignore.is_set
	|| recursionvia_len.is_set
	|| recursive_path.is_set
	|| resolved_path.is_set
	|| via_label_to_recurse.is_set
	|| (more_detail_about_path !=  nullptr && more_detail_about_path->has_data())
	|| (mpls_information_for_path !=  nullptr && mpls_information_for_path->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(attached_path.yfilter)
	|| ydk::is_set(backup_index.yfilter)
	|| ydk::is_set(backup_path.yfilter)
	|| ydk::is_set(best_external_path.yfilter)
	|| ydk::is_set(brief_interface_handle.yfilter)
	|| ydk::is_set(brief_lfa_protection_type.yfilter)
	|| ydk::is_set(brief_next_hop_prefix.yfilter)
	|| ydk::is_set(brief_pnode_address.yfilter)
	|| ydk::is_set(brief_qnode_address.yfilter)
	|| ydk::is_set(hardware_information.yfilter)
	|| ydk::is_set(next_hop_index.yfilter)
	|| ydk::is_set(packets_received_path.yfilter)
	|| ydk::is_set(parent_interface_handle.yfilter)
	|| ydk::is_set(path_dlb.yfilter)
	|| ydk::is_set(path_flags.yfilter)
	|| ydk::is_set(path_index.yfilter)
	|| ydk::is_set(path_info_flags.yfilter)
	|| ydk::is_set(protect_ignore.yfilter)
	|| ydk::is_set(recursionvia_len.yfilter)
	|| ydk::is_set(recursive_path.yfilter)
	|| ydk::is_set(resolved_path.yfilter)
	|| ydk::is_set(via_label_to_recurse.yfilter)
	|| (more_detail_about_path !=  nullptr && more_detail_about_path->has_operation())
	|| (mpls_information_for_path !=  nullptr && mpls_information_for_path->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-sh-tbl-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (attached_path.is_set || is_set(attached_path.yfilter)) leaf_name_data.push_back(attached_path.get_name_leafdata());
    if (backup_index.is_set || is_set(backup_index.yfilter)) leaf_name_data.push_back(backup_index.get_name_leafdata());
    if (backup_path.is_set || is_set(backup_path.yfilter)) leaf_name_data.push_back(backup_path.get_name_leafdata());
    if (best_external_path.is_set || is_set(best_external_path.yfilter)) leaf_name_data.push_back(best_external_path.get_name_leafdata());
    if (brief_interface_handle.is_set || is_set(brief_interface_handle.yfilter)) leaf_name_data.push_back(brief_interface_handle.get_name_leafdata());
    if (brief_lfa_protection_type.is_set || is_set(brief_lfa_protection_type.yfilter)) leaf_name_data.push_back(brief_lfa_protection_type.get_name_leafdata());
    if (brief_next_hop_prefix.is_set || is_set(brief_next_hop_prefix.yfilter)) leaf_name_data.push_back(brief_next_hop_prefix.get_name_leafdata());
    if (brief_pnode_address.is_set || is_set(brief_pnode_address.yfilter)) leaf_name_data.push_back(brief_pnode_address.get_name_leafdata());
    if (brief_qnode_address.is_set || is_set(brief_qnode_address.yfilter)) leaf_name_data.push_back(brief_qnode_address.get_name_leafdata());
    if (hardware_information.is_set || is_set(hardware_information.yfilter)) leaf_name_data.push_back(hardware_information.get_name_leafdata());
    if (next_hop_index.is_set || is_set(next_hop_index.yfilter)) leaf_name_data.push_back(next_hop_index.get_name_leafdata());
    if (packets_received_path.is_set || is_set(packets_received_path.yfilter)) leaf_name_data.push_back(packets_received_path.get_name_leafdata());
    if (parent_interface_handle.is_set || is_set(parent_interface_handle.yfilter)) leaf_name_data.push_back(parent_interface_handle.get_name_leafdata());
    if (path_dlb.is_set || is_set(path_dlb.yfilter)) leaf_name_data.push_back(path_dlb.get_name_leafdata());
    if (path_flags.is_set || is_set(path_flags.yfilter)) leaf_name_data.push_back(path_flags.get_name_leafdata());
    if (path_index.is_set || is_set(path_index.yfilter)) leaf_name_data.push_back(path_index.get_name_leafdata());
    if (path_info_flags.is_set || is_set(path_info_flags.yfilter)) leaf_name_data.push_back(path_info_flags.get_name_leafdata());
    if (protect_ignore.is_set || is_set(protect_ignore.yfilter)) leaf_name_data.push_back(protect_ignore.get_name_leafdata());
    if (recursionvia_len.is_set || is_set(recursionvia_len.yfilter)) leaf_name_data.push_back(recursionvia_len.get_name_leafdata());
    if (recursive_path.is_set || is_set(recursive_path.yfilter)) leaf_name_data.push_back(recursive_path.get_name_leafdata());
    if (resolved_path.is_set || is_set(resolved_path.yfilter)) leaf_name_data.push_back(resolved_path.get_name_leafdata());
    if (via_label_to_recurse.is_set || is_set(via_label_to_recurse.yfilter)) leaf_name_data.push_back(via_label_to_recurse.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "more-detail-about-path")
    {
        if(more_detail_about_path == nullptr)
        {
            more_detail_about_path = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath>();
        }
        return more_detail_about_path;
    }

    if(child_yang_name == "mpls-information-for-path")
    {
        if(mpls_information_for_path == nullptr)
        {
            mpls_information_for_path = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath>();
        }
        return mpls_information_for_path;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(more_detail_about_path != nullptr)
    {
        children["more-detail-about-path"] = more_detail_about_path;
    }

    if(mpls_information_for_path != nullptr)
    {
        children["mpls-information-for-path"] = mpls_information_for_path;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "attached-path")
    {
        attached_path = value;
        attached_path.value_namespace = name_space;
        attached_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "backup-index")
    {
        backup_index = value;
        backup_index.value_namespace = name_space;
        backup_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "backup-path")
    {
        backup_path = value;
        backup_path.value_namespace = name_space;
        backup_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "best-external-path")
    {
        best_external_path = value;
        best_external_path.value_namespace = name_space;
        best_external_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-interface-handle")
    {
        brief_interface_handle = value;
        brief_interface_handle.value_namespace = name_space;
        brief_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-lfa-protection-type")
    {
        brief_lfa_protection_type = value;
        brief_lfa_protection_type.value_namespace = name_space;
        brief_lfa_protection_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-next-hop-prefix")
    {
        brief_next_hop_prefix = value;
        brief_next_hop_prefix.value_namespace = name_space;
        brief_next_hop_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-pnode-address")
    {
        brief_pnode_address = value;
        brief_pnode_address.value_namespace = name_space;
        brief_pnode_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-qnode-address")
    {
        brief_qnode_address = value;
        brief_qnode_address.value_namespace = name_space;
        brief_qnode_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "hardware-information")
    {
        hardware_information = value;
        hardware_information.value_namespace = name_space;
        hardware_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-index")
    {
        next_hop_index = value;
        next_hop_index.value_namespace = name_space;
        next_hop_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "packets-received-path")
    {
        packets_received_path = value;
        packets_received_path.value_namespace = name_space;
        packets_received_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-interface-handle")
    {
        parent_interface_handle = value;
        parent_interface_handle.value_namespace = name_space;
        parent_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-dlb")
    {
        path_dlb = value;
        path_dlb.value_namespace = name_space;
        path_dlb.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-flags")
    {
        path_flags = value;
        path_flags.value_namespace = name_space;
        path_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-index")
    {
        path_index = value;
        path_index.value_namespace = name_space;
        path_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-info-flags")
    {
        path_info_flags = value;
        path_info_flags.value_namespace = name_space;
        path_info_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protect-ignore")
    {
        protect_ignore = value;
        protect_ignore.value_namespace = name_space;
        protect_ignore.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursionvia-len")
    {
        recursionvia_len = value;
        recursionvia_len.value_namespace = name_space;
        recursionvia_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path")
    {
        recursive_path = value;
        recursive_path.value_namespace = name_space;
        recursive_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "resolved-path")
    {
        resolved_path = value;
        resolved_path.value_namespace = name_space;
        resolved_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "via-label-to-recurse")
    {
        via_label_to_recurse = value;
        via_label_to_recurse.value_namespace = name_space;
        via_label_to_recurse.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "attached-path")
    {
        attached_path.yfilter = yfilter;
    }
    if(value_path == "backup-index")
    {
        backup_index.yfilter = yfilter;
    }
    if(value_path == "backup-path")
    {
        backup_path.yfilter = yfilter;
    }
    if(value_path == "best-external-path")
    {
        best_external_path.yfilter = yfilter;
    }
    if(value_path == "brief-interface-handle")
    {
        brief_interface_handle.yfilter = yfilter;
    }
    if(value_path == "brief-lfa-protection-type")
    {
        brief_lfa_protection_type.yfilter = yfilter;
    }
    if(value_path == "brief-next-hop-prefix")
    {
        brief_next_hop_prefix.yfilter = yfilter;
    }
    if(value_path == "brief-pnode-address")
    {
        brief_pnode_address.yfilter = yfilter;
    }
    if(value_path == "brief-qnode-address")
    {
        brief_qnode_address.yfilter = yfilter;
    }
    if(value_path == "hardware-information")
    {
        hardware_information.yfilter = yfilter;
    }
    if(value_path == "next-hop-index")
    {
        next_hop_index.yfilter = yfilter;
    }
    if(value_path == "packets-received-path")
    {
        packets_received_path.yfilter = yfilter;
    }
    if(value_path == "parent-interface-handle")
    {
        parent_interface_handle.yfilter = yfilter;
    }
    if(value_path == "path-dlb")
    {
        path_dlb.yfilter = yfilter;
    }
    if(value_path == "path-flags")
    {
        path_flags.yfilter = yfilter;
    }
    if(value_path == "path-index")
    {
        path_index.yfilter = yfilter;
    }
    if(value_path == "path-info-flags")
    {
        path_info_flags.yfilter = yfilter;
    }
    if(value_path == "protect-ignore")
    {
        protect_ignore.yfilter = yfilter;
    }
    if(value_path == "recursionvia-len")
    {
        recursionvia_len.yfilter = yfilter;
    }
    if(value_path == "recursive-path")
    {
        recursive_path.yfilter = yfilter;
    }
    if(value_path == "resolved-path")
    {
        resolved_path.yfilter = yfilter;
    }
    if(value_path == "via-label-to-recurse")
    {
        via_label_to_recurse.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "more-detail-about-path" || name == "mpls-information-for-path" || name == "attached-path" || name == "backup-index" || name == "backup-path" || name == "best-external-path" || name == "brief-interface-handle" || name == "brief-lfa-protection-type" || name == "brief-next-hop-prefix" || name == "brief-pnode-address" || name == "brief-qnode-address" || name == "hardware-information" || name == "next-hop-index" || name == "packets-received-path" || name == "parent-interface-handle" || name == "path-dlb" || name == "path-flags" || name == "path-index" || name == "path-info-flags" || name == "protect-ignore" || name == "recursionvia-len" || name == "recursive-path" || name == "resolved-path" || name == "via-label-to-recurse")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::MoreDetailAboutPath()
    :
    current_path_flag{YType::boolean, "current-path-flag"},
    detail_fib_adjacency_type{YType::enumeration, "detail-fib-adjacency-type"},
    detail_next_hop_prefix{YType::str, "detail-next-hop-prefix"},
    external_adjacency{YType::boolean, "external-adjacency"},
    fib_path_nh_information_type{YType::enumeration, "fib-path-nh-information-type"},
    fib_path_nh_information_type_special{YType::enumeration, "fib-path-nh-information-type-special"},
    interface_associated_path{YType::str, "interface-associated-path"},
    ip_address_to_recurse{YType::str, "ip-address-to-recurse"},
    label_to_recurse{YType::uint32, "label-to-recurse"},
    lisprlocid{YType::uint32, "lisprlocid"},
    next_hop_interface{YType::str, "next-hop-interface"},
    next_hop_mask_length{YType::uint8, "next-hop-mask-length"},
    next_hop_vrf{YType::str, "next-hop-vrf"},
    next_prefix_length{YType::uint8, "next-prefix-length"},
    next_prefix_length2{YType::uint8, "next-prefix-length2"},
    next_prefix_recursion{YType::str, "next-prefix-recursion"},
    next_prefix_recursion2{YType::str, "next-prefix-recursion2"},
    number_of_dependencies_this_path{YType::uint32, "number-of-dependencies-this-path"},
    recurse_prefix_object{YType::boolean, "recurse-prefix-object"},
    recurse_prefix_object2{YType::boolean, "recurse-prefix-object2"},
    recursive_path_information{YType::boolean, "recursive-path-information"},
    robin_reset_value{YType::uint8, "robin-reset-value"},
    tunnel_class{YType::uint8, "tunnel-class"},
    tunnel_is_forward_class{YType::boolean, "tunnel-is-forward-class"},
    tunnle_endpoint_id{YType::uint32, "tunnle-endpoint-id"},
    weight_of_path{YType::uint32, "weight-of-path"}
{

    yang_name = "more-detail-about-path"; yang_parent_name = "fib-sh-tbl-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::~MoreDetailAboutPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_data() const
{
    for (std::size_t index=0; index<spd_ipencap.size(); index++)
    {
        if(spd_ipencap[index]->has_data())
            return true;
    }
    return current_path_flag.is_set
	|| detail_fib_adjacency_type.is_set
	|| detail_next_hop_prefix.is_set
	|| external_adjacency.is_set
	|| fib_path_nh_information_type.is_set
	|| fib_path_nh_information_type_special.is_set
	|| interface_associated_path.is_set
	|| ip_address_to_recurse.is_set
	|| label_to_recurse.is_set
	|| lisprlocid.is_set
	|| next_hop_interface.is_set
	|| next_hop_mask_length.is_set
	|| next_hop_vrf.is_set
	|| next_prefix_length.is_set
	|| next_prefix_length2.is_set
	|| next_prefix_recursion.is_set
	|| next_prefix_recursion2.is_set
	|| number_of_dependencies_this_path.is_set
	|| recurse_prefix_object.is_set
	|| recurse_prefix_object2.is_set
	|| recursive_path_information.is_set
	|| robin_reset_value.is_set
	|| tunnel_class.is_set
	|| tunnel_is_forward_class.is_set
	|| tunnle_endpoint_id.is_set
	|| weight_of_path.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_operation() const
{
    for (std::size_t index=0; index<spd_ipencap.size(); index++)
    {
        if(spd_ipencap[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(current_path_flag.yfilter)
	|| ydk::is_set(detail_fib_adjacency_type.yfilter)
	|| ydk::is_set(detail_next_hop_prefix.yfilter)
	|| ydk::is_set(external_adjacency.yfilter)
	|| ydk::is_set(fib_path_nh_information_type.yfilter)
	|| ydk::is_set(fib_path_nh_information_type_special.yfilter)
	|| ydk::is_set(interface_associated_path.yfilter)
	|| ydk::is_set(ip_address_to_recurse.yfilter)
	|| ydk::is_set(label_to_recurse.yfilter)
	|| ydk::is_set(lisprlocid.yfilter)
	|| ydk::is_set(next_hop_interface.yfilter)
	|| ydk::is_set(next_hop_mask_length.yfilter)
	|| ydk::is_set(next_hop_vrf.yfilter)
	|| ydk::is_set(next_prefix_length.yfilter)
	|| ydk::is_set(next_prefix_length2.yfilter)
	|| ydk::is_set(next_prefix_recursion.yfilter)
	|| ydk::is_set(next_prefix_recursion2.yfilter)
	|| ydk::is_set(number_of_dependencies_this_path.yfilter)
	|| ydk::is_set(recurse_prefix_object.yfilter)
	|| ydk::is_set(recurse_prefix_object2.yfilter)
	|| ydk::is_set(recursive_path_information.yfilter)
	|| ydk::is_set(robin_reset_value.yfilter)
	|| ydk::is_set(tunnel_class.yfilter)
	|| ydk::is_set(tunnel_is_forward_class.yfilter)
	|| ydk::is_set(tunnle_endpoint_id.yfilter)
	|| ydk::is_set(weight_of_path.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "more-detail-about-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (current_path_flag.is_set || is_set(current_path_flag.yfilter)) leaf_name_data.push_back(current_path_flag.get_name_leafdata());
    if (detail_fib_adjacency_type.is_set || is_set(detail_fib_adjacency_type.yfilter)) leaf_name_data.push_back(detail_fib_adjacency_type.get_name_leafdata());
    if (detail_next_hop_prefix.is_set || is_set(detail_next_hop_prefix.yfilter)) leaf_name_data.push_back(detail_next_hop_prefix.get_name_leafdata());
    if (external_adjacency.is_set || is_set(external_adjacency.yfilter)) leaf_name_data.push_back(external_adjacency.get_name_leafdata());
    if (fib_path_nh_information_type.is_set || is_set(fib_path_nh_information_type.yfilter)) leaf_name_data.push_back(fib_path_nh_information_type.get_name_leafdata());
    if (fib_path_nh_information_type_special.is_set || is_set(fib_path_nh_information_type_special.yfilter)) leaf_name_data.push_back(fib_path_nh_information_type_special.get_name_leafdata());
    if (interface_associated_path.is_set || is_set(interface_associated_path.yfilter)) leaf_name_data.push_back(interface_associated_path.get_name_leafdata());
    if (ip_address_to_recurse.is_set || is_set(ip_address_to_recurse.yfilter)) leaf_name_data.push_back(ip_address_to_recurse.get_name_leafdata());
    if (label_to_recurse.is_set || is_set(label_to_recurse.yfilter)) leaf_name_data.push_back(label_to_recurse.get_name_leafdata());
    if (lisprlocid.is_set || is_set(lisprlocid.yfilter)) leaf_name_data.push_back(lisprlocid.get_name_leafdata());
    if (next_hop_interface.is_set || is_set(next_hop_interface.yfilter)) leaf_name_data.push_back(next_hop_interface.get_name_leafdata());
    if (next_hop_mask_length.is_set || is_set(next_hop_mask_length.yfilter)) leaf_name_data.push_back(next_hop_mask_length.get_name_leafdata());
    if (next_hop_vrf.is_set || is_set(next_hop_vrf.yfilter)) leaf_name_data.push_back(next_hop_vrf.get_name_leafdata());
    if (next_prefix_length.is_set || is_set(next_prefix_length.yfilter)) leaf_name_data.push_back(next_prefix_length.get_name_leafdata());
    if (next_prefix_length2.is_set || is_set(next_prefix_length2.yfilter)) leaf_name_data.push_back(next_prefix_length2.get_name_leafdata());
    if (next_prefix_recursion.is_set || is_set(next_prefix_recursion.yfilter)) leaf_name_data.push_back(next_prefix_recursion.get_name_leafdata());
    if (next_prefix_recursion2.is_set || is_set(next_prefix_recursion2.yfilter)) leaf_name_data.push_back(next_prefix_recursion2.get_name_leafdata());
    if (number_of_dependencies_this_path.is_set || is_set(number_of_dependencies_this_path.yfilter)) leaf_name_data.push_back(number_of_dependencies_this_path.get_name_leafdata());
    if (recurse_prefix_object.is_set || is_set(recurse_prefix_object.yfilter)) leaf_name_data.push_back(recurse_prefix_object.get_name_leafdata());
    if (recurse_prefix_object2.is_set || is_set(recurse_prefix_object2.yfilter)) leaf_name_data.push_back(recurse_prefix_object2.get_name_leafdata());
    if (recursive_path_information.is_set || is_set(recursive_path_information.yfilter)) leaf_name_data.push_back(recursive_path_information.get_name_leafdata());
    if (robin_reset_value.is_set || is_set(robin_reset_value.yfilter)) leaf_name_data.push_back(robin_reset_value.get_name_leafdata());
    if (tunnel_class.is_set || is_set(tunnel_class.yfilter)) leaf_name_data.push_back(tunnel_class.get_name_leafdata());
    if (tunnel_is_forward_class.is_set || is_set(tunnel_is_forward_class.yfilter)) leaf_name_data.push_back(tunnel_is_forward_class.get_name_leafdata());
    if (tunnle_endpoint_id.is_set || is_set(tunnle_endpoint_id.yfilter)) leaf_name_data.push_back(tunnle_endpoint_id.get_name_leafdata());
    if (weight_of_path.is_set || is_set(weight_of_path.yfilter)) leaf_name_data.push_back(weight_of_path.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "spd-ipencap")
    {
        for(auto const & c : spd_ipencap)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap>();
        c->parent = this;
        spd_ipencap.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : spd_ipencap)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "current-path-flag")
    {
        current_path_flag = value;
        current_path_flag.value_namespace = name_space;
        current_path_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "detail-fib-adjacency-type")
    {
        detail_fib_adjacency_type = value;
        detail_fib_adjacency_type.value_namespace = name_space;
        detail_fib_adjacency_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "detail-next-hop-prefix")
    {
        detail_next_hop_prefix = value;
        detail_next_hop_prefix.value_namespace = name_space;
        detail_next_hop_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "external-adjacency")
    {
        external_adjacency = value;
        external_adjacency.value_namespace = name_space;
        external_adjacency.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-path-nh-information-type")
    {
        fib_path_nh_information_type = value;
        fib_path_nh_information_type.value_namespace = name_space;
        fib_path_nh_information_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-path-nh-information-type-special")
    {
        fib_path_nh_information_type_special = value;
        fib_path_nh_information_type_special.value_namespace = name_space;
        fib_path_nh_information_type_special.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "interface-associated-path")
    {
        interface_associated_path = value;
        interface_associated_path.value_namespace = name_space;
        interface_associated_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-address-to-recurse")
    {
        ip_address_to_recurse = value;
        ip_address_to_recurse.value_namespace = name_space;
        ip_address_to_recurse.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-to-recurse")
    {
        label_to_recurse = value;
        label_to_recurse.value_namespace = name_space;
        label_to_recurse.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisprlocid")
    {
        lisprlocid = value;
        lisprlocid.value_namespace = name_space;
        lisprlocid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-interface")
    {
        next_hop_interface = value;
        next_hop_interface.value_namespace = name_space;
        next_hop_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-mask-length")
    {
        next_hop_mask_length = value;
        next_hop_mask_length.value_namespace = name_space;
        next_hop_mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-vrf")
    {
        next_hop_vrf = value;
        next_hop_vrf.value_namespace = name_space;
        next_hop_vrf.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-length")
    {
        next_prefix_length = value;
        next_prefix_length.value_namespace = name_space;
        next_prefix_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-length2")
    {
        next_prefix_length2 = value;
        next_prefix_length2.value_namespace = name_space;
        next_prefix_length2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-recursion")
    {
        next_prefix_recursion = value;
        next_prefix_recursion.value_namespace = name_space;
        next_prefix_recursion.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-recursion2")
    {
        next_prefix_recursion2 = value;
        next_prefix_recursion2.value_namespace = name_space;
        next_prefix_recursion2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-dependencies-this-path")
    {
        number_of_dependencies_this_path = value;
        number_of_dependencies_this_path.value_namespace = name_space;
        number_of_dependencies_this_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recurse-prefix-object")
    {
        recurse_prefix_object = value;
        recurse_prefix_object.value_namespace = name_space;
        recurse_prefix_object.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recurse-prefix-object2")
    {
        recurse_prefix_object2 = value;
        recurse_prefix_object2.value_namespace = name_space;
        recurse_prefix_object2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-information")
    {
        recursive_path_information = value;
        recursive_path_information.value_namespace = name_space;
        recursive_path_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "robin-reset-value")
    {
        robin_reset_value = value;
        robin_reset_value.value_namespace = name_space;
        robin_reset_value.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-class")
    {
        tunnel_class = value;
        tunnel_class.value_namespace = name_space;
        tunnel_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-is-forward-class")
    {
        tunnel_is_forward_class = value;
        tunnel_is_forward_class.value_namespace = name_space;
        tunnel_is_forward_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnle-endpoint-id")
    {
        tunnle_endpoint_id = value;
        tunnle_endpoint_id.value_namespace = name_space;
        tunnle_endpoint_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight-of-path")
    {
        weight_of_path = value;
        weight_of_path.value_namespace = name_space;
        weight_of_path.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "current-path-flag")
    {
        current_path_flag.yfilter = yfilter;
    }
    if(value_path == "detail-fib-adjacency-type")
    {
        detail_fib_adjacency_type.yfilter = yfilter;
    }
    if(value_path == "detail-next-hop-prefix")
    {
        detail_next_hop_prefix.yfilter = yfilter;
    }
    if(value_path == "external-adjacency")
    {
        external_adjacency.yfilter = yfilter;
    }
    if(value_path == "fib-path-nh-information-type")
    {
        fib_path_nh_information_type.yfilter = yfilter;
    }
    if(value_path == "fib-path-nh-information-type-special")
    {
        fib_path_nh_information_type_special.yfilter = yfilter;
    }
    if(value_path == "interface-associated-path")
    {
        interface_associated_path.yfilter = yfilter;
    }
    if(value_path == "ip-address-to-recurse")
    {
        ip_address_to_recurse.yfilter = yfilter;
    }
    if(value_path == "label-to-recurse")
    {
        label_to_recurse.yfilter = yfilter;
    }
    if(value_path == "lisprlocid")
    {
        lisprlocid.yfilter = yfilter;
    }
    if(value_path == "next-hop-interface")
    {
        next_hop_interface.yfilter = yfilter;
    }
    if(value_path == "next-hop-mask-length")
    {
        next_hop_mask_length.yfilter = yfilter;
    }
    if(value_path == "next-hop-vrf")
    {
        next_hop_vrf.yfilter = yfilter;
    }
    if(value_path == "next-prefix-length")
    {
        next_prefix_length.yfilter = yfilter;
    }
    if(value_path == "next-prefix-length2")
    {
        next_prefix_length2.yfilter = yfilter;
    }
    if(value_path == "next-prefix-recursion")
    {
        next_prefix_recursion.yfilter = yfilter;
    }
    if(value_path == "next-prefix-recursion2")
    {
        next_prefix_recursion2.yfilter = yfilter;
    }
    if(value_path == "number-of-dependencies-this-path")
    {
        number_of_dependencies_this_path.yfilter = yfilter;
    }
    if(value_path == "recurse-prefix-object")
    {
        recurse_prefix_object.yfilter = yfilter;
    }
    if(value_path == "recurse-prefix-object2")
    {
        recurse_prefix_object2.yfilter = yfilter;
    }
    if(value_path == "recursive-path-information")
    {
        recursive_path_information.yfilter = yfilter;
    }
    if(value_path == "robin-reset-value")
    {
        robin_reset_value.yfilter = yfilter;
    }
    if(value_path == "tunnel-class")
    {
        tunnel_class.yfilter = yfilter;
    }
    if(value_path == "tunnel-is-forward-class")
    {
        tunnel_is_forward_class.yfilter = yfilter;
    }
    if(value_path == "tunnle-endpoint-id")
    {
        tunnle_endpoint_id.yfilter = yfilter;
    }
    if(value_path == "weight-of-path")
    {
        weight_of_path.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "spd-ipencap" || name == "current-path-flag" || name == "detail-fib-adjacency-type" || name == "detail-next-hop-prefix" || name == "external-adjacency" || name == "fib-path-nh-information-type" || name == "fib-path-nh-information-type-special" || name == "interface-associated-path" || name == "ip-address-to-recurse" || name == "label-to-recurse" || name == "lisprlocid" || name == "next-hop-interface" || name == "next-hop-mask-length" || name == "next-hop-vrf" || name == "next-prefix-length" || name == "next-prefix-length2" || name == "next-prefix-recursion" || name == "next-prefix-recursion2" || name == "number-of-dependencies-this-path" || name == "recurse-prefix-object" || name == "recurse-prefix-object2" || name == "recursive-path-information" || name == "robin-reset-value" || name == "tunnel-class" || name == "tunnel-is-forward-class" || name == "tunnle-endpoint-id" || name == "weight-of-path")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::SpdIpencap()
    :
    ip_encap_hdr_count{YType::uint8, "ip-encap-hdr-count"},
    ip_encap_locks{YType::uint32, "ip-encap-locks"},
    ip_encap_parent{YType::uint32, "ip-encap-parent"},
    ip_encap_parent_type{YType::uint32, "ip-encap-parent-type"},
    ip_encap_payload_af{YType::uint32, "ip-encap-payload-af"},
    ip_encap_payload_mtu{YType::uint16, "ip-encap-payload-mtu"},
    ip_encap_transport_af{YType::uint32, "ip-encap-transport-af"},
    ip_encap_transport_tbl{YType::uint32, "ip-encap-transport-tbl"},
    ipe_transport_vrf_name{YType::str, "ipe-transport-vrf-name"}
{

    yang_name = "spd-ipencap"; yang_parent_name = "more-detail-about-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::~SpdIpencap()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_data() const
{
    for (std::size_t index=0; index<ip_encap_hdr.size(); index++)
    {
        if(ip_encap_hdr[index]->has_data())
            return true;
    }
    return ip_encap_hdr_count.is_set
	|| ip_encap_locks.is_set
	|| ip_encap_parent.is_set
	|| ip_encap_parent_type.is_set
	|| ip_encap_payload_af.is_set
	|| ip_encap_payload_mtu.is_set
	|| ip_encap_transport_af.is_set
	|| ip_encap_transport_tbl.is_set
	|| ipe_transport_vrf_name.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_operation() const
{
    for (std::size_t index=0; index<ip_encap_hdr.size(); index++)
    {
        if(ip_encap_hdr[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(ip_encap_hdr_count.yfilter)
	|| ydk::is_set(ip_encap_locks.yfilter)
	|| ydk::is_set(ip_encap_parent.yfilter)
	|| ydk::is_set(ip_encap_parent_type.yfilter)
	|| ydk::is_set(ip_encap_payload_af.yfilter)
	|| ydk::is_set(ip_encap_payload_mtu.yfilter)
	|| ydk::is_set(ip_encap_transport_af.yfilter)
	|| ydk::is_set(ip_encap_transport_tbl.yfilter)
	|| ydk::is_set(ipe_transport_vrf_name.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "spd-ipencap";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_encap_hdr_count.is_set || is_set(ip_encap_hdr_count.yfilter)) leaf_name_data.push_back(ip_encap_hdr_count.get_name_leafdata());
    if (ip_encap_locks.is_set || is_set(ip_encap_locks.yfilter)) leaf_name_data.push_back(ip_encap_locks.get_name_leafdata());
    if (ip_encap_parent.is_set || is_set(ip_encap_parent.yfilter)) leaf_name_data.push_back(ip_encap_parent.get_name_leafdata());
    if (ip_encap_parent_type.is_set || is_set(ip_encap_parent_type.yfilter)) leaf_name_data.push_back(ip_encap_parent_type.get_name_leafdata());
    if (ip_encap_payload_af.is_set || is_set(ip_encap_payload_af.yfilter)) leaf_name_data.push_back(ip_encap_payload_af.get_name_leafdata());
    if (ip_encap_payload_mtu.is_set || is_set(ip_encap_payload_mtu.yfilter)) leaf_name_data.push_back(ip_encap_payload_mtu.get_name_leafdata());
    if (ip_encap_transport_af.is_set || is_set(ip_encap_transport_af.yfilter)) leaf_name_data.push_back(ip_encap_transport_af.get_name_leafdata());
    if (ip_encap_transport_tbl.is_set || is_set(ip_encap_transport_tbl.yfilter)) leaf_name_data.push_back(ip_encap_transport_tbl.get_name_leafdata());
    if (ipe_transport_vrf_name.is_set || is_set(ipe_transport_vrf_name.yfilter)) leaf_name_data.push_back(ipe_transport_vrf_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ip-encap-hdr")
    {
        for(auto const & c : ip_encap_hdr)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr>();
        c->parent = this;
        ip_encap_hdr.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : ip_encap_hdr)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "ip-encap-hdr-count")
    {
        ip_encap_hdr_count = value;
        ip_encap_hdr_count.value_namespace = name_space;
        ip_encap_hdr_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-locks")
    {
        ip_encap_locks = value;
        ip_encap_locks.value_namespace = name_space;
        ip_encap_locks.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-parent")
    {
        ip_encap_parent = value;
        ip_encap_parent.value_namespace = name_space;
        ip_encap_parent.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-parent-type")
    {
        ip_encap_parent_type = value;
        ip_encap_parent_type.value_namespace = name_space;
        ip_encap_parent_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-payload-af")
    {
        ip_encap_payload_af = value;
        ip_encap_payload_af.value_namespace = name_space;
        ip_encap_payload_af.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-payload-mtu")
    {
        ip_encap_payload_mtu = value;
        ip_encap_payload_mtu.value_namespace = name_space;
        ip_encap_payload_mtu.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-transport-af")
    {
        ip_encap_transport_af = value;
        ip_encap_transport_af.value_namespace = name_space;
        ip_encap_transport_af.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-transport-tbl")
    {
        ip_encap_transport_tbl = value;
        ip_encap_transport_tbl.value_namespace = name_space;
        ip_encap_transport_tbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ipe-transport-vrf-name")
    {
        ipe_transport_vrf_name = value;
        ipe_transport_vrf_name.value_namespace = name_space;
        ipe_transport_vrf_name.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "ip-encap-hdr-count")
    {
        ip_encap_hdr_count.yfilter = yfilter;
    }
    if(value_path == "ip-encap-locks")
    {
        ip_encap_locks.yfilter = yfilter;
    }
    if(value_path == "ip-encap-parent")
    {
        ip_encap_parent.yfilter = yfilter;
    }
    if(value_path == "ip-encap-parent-type")
    {
        ip_encap_parent_type.yfilter = yfilter;
    }
    if(value_path == "ip-encap-payload-af")
    {
        ip_encap_payload_af.yfilter = yfilter;
    }
    if(value_path == "ip-encap-payload-mtu")
    {
        ip_encap_payload_mtu.yfilter = yfilter;
    }
    if(value_path == "ip-encap-transport-af")
    {
        ip_encap_transport_af.yfilter = yfilter;
    }
    if(value_path == "ip-encap-transport-tbl")
    {
        ip_encap_transport_tbl.yfilter = yfilter;
    }
    if(value_path == "ipe-transport-vrf-name")
    {
        ipe_transport_vrf_name.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ip-encap-hdr" || name == "ip-encap-hdr-count" || name == "ip-encap-locks" || name == "ip-encap-parent" || name == "ip-encap-parent-type" || name == "ip-encap-payload-af" || name == "ip-encap-payload-mtu" || name == "ip-encap-transport-af" || name == "ip-encap-transport-tbl" || name == "ipe-transport-vrf-name")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::IpEncapHdr()
    :
    ip_encap_hdr_dyn{YType::uint32, "ip-encap-hdr-dyn"},
    ip_encap_hdr_type{YType::enumeration, "ip-encap-hdr-type"},
    ip_encap_hdrp{YType::str, "ip-encap-hdrp"}
{

    yang_name = "ip-encap-hdr"; yang_parent_name = "spd-ipencap"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::~IpEncapHdr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_data() const
{
    return ip_encap_hdr_dyn.is_set
	|| ip_encap_hdr_type.is_set
	|| ip_encap_hdrp.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(ip_encap_hdr_dyn.yfilter)
	|| ydk::is_set(ip_encap_hdr_type.yfilter)
	|| ydk::is_set(ip_encap_hdrp.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ip-encap-hdr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_encap_hdr_dyn.is_set || is_set(ip_encap_hdr_dyn.yfilter)) leaf_name_data.push_back(ip_encap_hdr_dyn.get_name_leafdata());
    if (ip_encap_hdr_type.is_set || is_set(ip_encap_hdr_type.yfilter)) leaf_name_data.push_back(ip_encap_hdr_type.get_name_leafdata());
    if (ip_encap_hdrp.is_set || is_set(ip_encap_hdrp.yfilter)) leaf_name_data.push_back(ip_encap_hdrp.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "ip-encap-hdr-dyn")
    {
        ip_encap_hdr_dyn = value;
        ip_encap_hdr_dyn.value_namespace = name_space;
        ip_encap_hdr_dyn.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-hdr-type")
    {
        ip_encap_hdr_type = value;
        ip_encap_hdr_type.value_namespace = name_space;
        ip_encap_hdr_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-hdrp")
    {
        ip_encap_hdrp = value;
        ip_encap_hdrp.value_namespace = name_space;
        ip_encap_hdrp.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "ip-encap-hdr-dyn")
    {
        ip_encap_hdr_dyn.yfilter = yfilter;
    }
    if(value_path == "ip-encap-hdr-type")
    {
        ip_encap_hdr_type.yfilter = yfilter;
    }
    if(value_path == "ip-encap-hdrp")
    {
        ip_encap_hdrp.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ip-encap-hdr-dyn" || name == "ip-encap-hdr-type" || name == "ip-encap-hdrp")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::MplsInformationForPath()
    :
    local_lable{YType::uint32, "local-lable"},
    number_of_igp_paths{YType::uint32, "number-of-igp-paths"},
    recursive_fwd_chain{YType::boolean, "recursive-fwd-chain"},
    remote_backup{YType::boolean, "remote-backup"}
{

    yang_name = "mpls-information-for-path"; yang_parent_name = "fib-sh-tbl-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::~MplsInformationForPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::has_data() const
{
    for (std::size_t index=0; index<igp_label_stack_array.size(); index++)
    {
        if(igp_label_stack_array[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<recursive_lbl_stack.size(); index++)
    {
        if(recursive_lbl_stack[index]->has_data())
            return true;
    }
    return local_lable.is_set
	|| number_of_igp_paths.is_set
	|| recursive_fwd_chain.is_set
	|| remote_backup.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::has_operation() const
{
    for (std::size_t index=0; index<igp_label_stack_array.size(); index++)
    {
        if(igp_label_stack_array[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<recursive_lbl_stack.size(); index++)
    {
        if(recursive_lbl_stack[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(local_lable.yfilter)
	|| ydk::is_set(number_of_igp_paths.yfilter)
	|| ydk::is_set(recursive_fwd_chain.yfilter)
	|| ydk::is_set(remote_backup.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mpls-information-for-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (local_lable.is_set || is_set(local_lable.yfilter)) leaf_name_data.push_back(local_lable.get_name_leafdata());
    if (number_of_igp_paths.is_set || is_set(number_of_igp_paths.yfilter)) leaf_name_data.push_back(number_of_igp_paths.get_name_leafdata());
    if (recursive_fwd_chain.is_set || is_set(recursive_fwd_chain.yfilter)) leaf_name_data.push_back(recursive_fwd_chain.get_name_leafdata());
    if (remote_backup.is_set || is_set(remote_backup.yfilter)) leaf_name_data.push_back(remote_backup.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "igp-label-stack-array")
    {
        for(auto const & c : igp_label_stack_array)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray>();
        c->parent = this;
        igp_label_stack_array.push_back(c);
        return c;
    }

    if(child_yang_name == "recursive-lbl-stack")
    {
        for(auto const & c : recursive_lbl_stack)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack>();
        c->parent = this;
        recursive_lbl_stack.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : igp_label_stack_array)
    {
        children[c->get_segment_path()] = c;
    }

    for (auto const & c : recursive_lbl_stack)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "local-lable")
    {
        local_lable = value;
        local_lable.value_namespace = name_space;
        local_lable.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-igp-paths")
    {
        number_of_igp_paths = value;
        number_of_igp_paths.value_namespace = name_space;
        number_of_igp_paths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-fwd-chain")
    {
        recursive_fwd_chain = value;
        recursive_fwd_chain.value_namespace = name_space;
        recursive_fwd_chain.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "remote-backup")
    {
        remote_backup = value;
        remote_backup.value_namespace = name_space;
        remote_backup.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "local-lable")
    {
        local_lable.yfilter = yfilter;
    }
    if(value_path == "number-of-igp-paths")
    {
        number_of_igp_paths.yfilter = yfilter;
    }
    if(value_path == "recursive-fwd-chain")
    {
        recursive_fwd_chain.yfilter = yfilter;
    }
    if(value_path == "remote-backup")
    {
        remote_backup.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "igp-label-stack-array" || name == "recursive-lbl-stack" || name == "local-lable" || name == "number-of-igp-paths" || name == "recursive-fwd-chain" || name == "remote-backup")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::IgpLabelStackArray()
    :
    nh_address{YType::str, "nh-address"},
    number_of_labels{YType::uint32, "number-of-labels"},
    out_interface{YType::str, "out-interface"}
{

    yang_name = "igp-label-stack-array"; yang_parent_name = "mpls-information-for-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::~IgpLabelStackArray()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::has_data() const
{
    for (std::size_t index=0; index<lstack.size(); index++)
    {
        if(lstack[index]->has_data())
            return true;
    }
    return nh_address.is_set
	|| number_of_labels.is_set
	|| out_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::has_operation() const
{
    for (std::size_t index=0; index<lstack.size(); index++)
    {
        if(lstack[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(number_of_labels.yfilter)
	|| ydk::is_set(out_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "igp-label-stack-array";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (number_of_labels.is_set || is_set(number_of_labels.yfilter)) leaf_name_data.push_back(number_of_labels.get_name_leafdata());
    if (out_interface.is_set || is_set(out_interface.yfilter)) leaf_name_data.push_back(out_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "lstack")
    {
        for(auto const & c : lstack)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack>();
        c->parent = this;
        lstack.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : lstack)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-labels")
    {
        number_of_labels = value;
        number_of_labels.value_namespace = name_space;
        number_of_labels.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "out-interface")
    {
        out_interface = value;
        out_interface.value_namespace = name_space;
        out_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "number-of-labels")
    {
        number_of_labels.yfilter = yfilter;
    }
    if(value_path == "out-interface")
    {
        out_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "lstack" || name == "nh-address" || name == "number-of-labels" || name == "out-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::Lstack()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "lstack"; yang_parent_name = "igp-label-stack-array"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::~Lstack()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lstack";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray::Lstack::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::RecursiveLblStack()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "recursive-lbl-stack"; yang_parent_name = "mpls-information-for-path"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::~RecursiveLblStack()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_data() const
{
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recursive-lbl-stack";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Information()
    :
    route_is_sripv6_flag{YType::boolean, "route-is-sripv6-flag"},
    sripv6_stats_valid_flag{YType::boolean, "sripv6-stats-valid-flag"},
    srv6_pfx_resolved_via_policy_label{YType::boolean, "srv6-pfx-resolved-via-policy-label"}
    	,
    srv6_statistics(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics>())
{
    srv6_statistics->parent = this;

    yang_name = "srv6-information"; yang_parent_name = "ip-prefix-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::~Srv6Information()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::has_data() const
{
    return route_is_sripv6_flag.is_set
	|| sripv6_stats_valid_flag.is_set
	|| srv6_pfx_resolved_via_policy_label.is_set
	|| (srv6_statistics !=  nullptr && srv6_statistics->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(route_is_sripv6_flag.yfilter)
	|| ydk::is_set(sripv6_stats_valid_flag.yfilter)
	|| ydk::is_set(srv6_pfx_resolved_via_policy_label.yfilter)
	|| (srv6_statistics !=  nullptr && srv6_statistics->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "srv6-information";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (route_is_sripv6_flag.is_set || is_set(route_is_sripv6_flag.yfilter)) leaf_name_data.push_back(route_is_sripv6_flag.get_name_leafdata());
    if (sripv6_stats_valid_flag.is_set || is_set(sripv6_stats_valid_flag.yfilter)) leaf_name_data.push_back(sripv6_stats_valid_flag.get_name_leafdata());
    if (srv6_pfx_resolved_via_policy_label.is_set || is_set(srv6_pfx_resolved_via_policy_label.yfilter)) leaf_name_data.push_back(srv6_pfx_resolved_via_policy_label.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "srv6-statistics")
    {
        if(srv6_statistics == nullptr)
        {
            srv6_statistics = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics>();
        }
        return srv6_statistics;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(srv6_statistics != nullptr)
    {
        children["srv6-statistics"] = srv6_statistics;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "route-is-sripv6-flag")
    {
        route_is_sripv6_flag = value;
        route_is_sripv6_flag.value_namespace = name_space;
        route_is_sripv6_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sripv6-stats-valid-flag")
    {
        sripv6_stats_valid_flag = value;
        sripv6_stats_valid_flag.value_namespace = name_space;
        sripv6_stats_valid_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srv6-pfx-resolved-via-policy-label")
    {
        srv6_pfx_resolved_via_policy_label = value;
        srv6_pfx_resolved_via_policy_label.value_namespace = name_space;
        srv6_pfx_resolved_via_policy_label.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "route-is-sripv6-flag")
    {
        route_is_sripv6_flag.yfilter = yfilter;
    }
    if(value_path == "sripv6-stats-valid-flag")
    {
        sripv6_stats_valid_flag.yfilter = yfilter;
    }
    if(value_path == "srv6-pfx-resolved-via-policy-label")
    {
        srv6_pfx_resolved_via_policy_label.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "srv6-statistics" || name == "route-is-sripv6-flag" || name == "sripv6-stats-valid-flag" || name == "srv6-pfx-resolved-via-policy-label")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics::Srv6Statistics()
    :
    srv6_packets_dropped{YType::uint64, "srv6-packets-dropped"},
    srv6_packets_forwarded{YType::uint64, "srv6-packets-forwarded"}
{

    yang_name = "srv6-statistics"; yang_parent_name = "srv6-information"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics::~Srv6Statistics()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics::has_data() const
{
    return srv6_packets_dropped.is_set
	|| srv6_packets_forwarded.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(srv6_packets_dropped.yfilter)
	|| ydk::is_set(srv6_packets_forwarded.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "srv6-statistics";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (srv6_packets_dropped.is_set || is_set(srv6_packets_dropped.yfilter)) leaf_name_data.push_back(srv6_packets_dropped.get_name_leafdata());
    if (srv6_packets_forwarded.is_set || is_set(srv6_packets_forwarded.yfilter)) leaf_name_data.push_back(srv6_packets_forwarded.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "srv6-packets-dropped")
    {
        srv6_packets_dropped = value;
        srv6_packets_dropped.value_namespace = name_space;
        srv6_packets_dropped.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srv6-packets-forwarded")
    {
        srv6_packets_forwarded = value;
        srv6_packets_forwarded.value_namespace = name_space;
        srv6_packets_forwarded.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "srv6-packets-dropped")
    {
        srv6_packets_dropped.yfilter = yfilter;
    }
    if(value_path == "srv6-packets-forwarded")
    {
        srv6_packets_forwarded.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::Srv6Information::Srv6Statistics::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "srv6-packets-dropped" || name == "srv6-packets-forwarded")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoBrief()
    :
    nh_info_local_briefs(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs>())
	,nh_info_remote_briefs(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs>())
	,nh_info_special_brief(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief>())
{
    nh_info_local_briefs->parent = this;
    nh_info_remote_briefs->parent = this;
    nh_info_special_brief->parent = this;

    yang_name = "nh-info-brief"; yang_parent_name = "vrf"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::~NhInfoBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::has_data() const
{
    return (nh_info_local_briefs !=  nullptr && nh_info_local_briefs->has_data())
	|| (nh_info_remote_briefs !=  nullptr && nh_info_remote_briefs->has_data())
	|| (nh_info_special_brief !=  nullptr && nh_info_special_brief->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_local_briefs !=  nullptr && nh_info_local_briefs->has_operation())
	|| (nh_info_remote_briefs !=  nullptr && nh_info_remote_briefs->has_operation())
	|| (nh_info_special_brief !=  nullptr && nh_info_special_brief->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-local-briefs")
    {
        if(nh_info_local_briefs == nullptr)
        {
            nh_info_local_briefs = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs>();
        }
        return nh_info_local_briefs;
    }

    if(child_yang_name == "nh-info-remote-briefs")
    {
        if(nh_info_remote_briefs == nullptr)
        {
            nh_info_remote_briefs = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs>();
        }
        return nh_info_remote_briefs;
    }

    if(child_yang_name == "nh-info-special-brief")
    {
        if(nh_info_special_brief == nullptr)
        {
            nh_info_special_brief = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief>();
        }
        return nh_info_special_brief;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_local_briefs != nullptr)
    {
        children["nh-info-local-briefs"] = nh_info_local_briefs;
    }

    if(nh_info_remote_briefs != nullptr)
    {
        children["nh-info-remote-briefs"] = nh_info_remote_briefs;
    }

    if(nh_info_special_brief != nullptr)
    {
        children["nh-info-special-brief"] = nh_info_special_brief;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-local-briefs" || name == "nh-info-remote-briefs" || name == "nh-info-special-brief")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBriefs()
{

    yang_name = "nh-info-local-briefs"; yang_parent_name = "nh-info-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::~NhInfoLocalBriefs()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::has_data() const
{
    for (std::size_t index=0; index<nh_info_local_brief.size(); index++)
    {
        if(nh_info_local_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::has_operation() const
{
    for (std::size_t index=0; index<nh_info_local_brief.size(); index++)
    {
        if(nh_info_local_brief[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-briefs";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-local-brief")
    {
        for(auto const & c : nh_info_local_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief>();
        c->parent = this;
        nh_info_local_brief.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_local_brief)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-local-brief")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoLocalBrief()
    :
    nh_address{YType::str, "nh-address"},
    nh_interface_name{YType::str, "nh-interface-name"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-local-brief"; yang_parent_name = "nh-info-local-briefs"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::~NhInfoLocalBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::has_data() const
{
    return nh_address.is_set
	|| nh_interface_name.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "nh-address" || name == "nh-interface-name" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-local-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-local-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoLocalBriefs::NhInfoLocalBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBriefs()
{

    yang_name = "nh-info-remote-briefs"; yang_parent_name = "nh-info-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::~NhInfoRemoteBriefs()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::has_data() const
{
    for (std::size_t index=0; index<nh_info_remote_brief.size(); index++)
    {
        if(nh_info_remote_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::has_operation() const
{
    for (std::size_t index=0; index<nh_info_remote_brief.size(); index++)
    {
        if(nh_info_remote_brief[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-briefs";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-remote-brief")
    {
        for(auto const & c : nh_info_remote_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief>();
        c->parent = this;
        nh_info_remote_brief.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_remote_brief)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-remote-brief")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoRemoteBrief()
    :
    nh_address{YType::str, "nh-address"},
    nh_interface_name{YType::str, "nh-interface-name"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-remote-brief"; yang_parent_name = "nh-info-remote-briefs"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::~NhInfoRemoteBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::has_data() const
{
    return nh_address.is_set
	|| nh_interface_name.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "nh-address" || name == "nh-interface-name" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-remote-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-remote-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoRemoteBriefs::NhInfoRemoteBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialBrief()
    :
    nh_info_special_discard_brief(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief>())
	,nh_info_special_drop_brief(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief>())
	,nh_info_special_null_brief(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief>())
	,nh_info_special_punt_brief(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief>())
{
    nh_info_special_discard_brief->parent = this;
    nh_info_special_drop_brief->parent = this;
    nh_info_special_null_brief->parent = this;
    nh_info_special_punt_brief->parent = this;

    yang_name = "nh-info-special-brief"; yang_parent_name = "nh-info-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::~NhInfoSpecialBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::has_data() const
{
    return (nh_info_special_discard_brief !=  nullptr && nh_info_special_discard_brief->has_data())
	|| (nh_info_special_drop_brief !=  nullptr && nh_info_special_drop_brief->has_data())
	|| (nh_info_special_null_brief !=  nullptr && nh_info_special_null_brief->has_data())
	|| (nh_info_special_punt_brief !=  nullptr && nh_info_special_punt_brief->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_special_discard_brief !=  nullptr && nh_info_special_discard_brief->has_operation())
	|| (nh_info_special_drop_brief !=  nullptr && nh_info_special_drop_brief->has_operation())
	|| (nh_info_special_null_brief !=  nullptr && nh_info_special_null_brief->has_operation())
	|| (nh_info_special_punt_brief !=  nullptr && nh_info_special_punt_brief->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-special-discard-brief")
    {
        if(nh_info_special_discard_brief == nullptr)
        {
            nh_info_special_discard_brief = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief>();
        }
        return nh_info_special_discard_brief;
    }

    if(child_yang_name == "nh-info-special-drop-brief")
    {
        if(nh_info_special_drop_brief == nullptr)
        {
            nh_info_special_drop_brief = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief>();
        }
        return nh_info_special_drop_brief;
    }

    if(child_yang_name == "nh-info-special-null-brief")
    {
        if(nh_info_special_null_brief == nullptr)
        {
            nh_info_special_null_brief = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief>();
        }
        return nh_info_special_null_brief;
    }

    if(child_yang_name == "nh-info-special-punt-brief")
    {
        if(nh_info_special_punt_brief == nullptr)
        {
            nh_info_special_punt_brief = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief>();
        }
        return nh_info_special_punt_brief;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_special_discard_brief != nullptr)
    {
        children["nh-info-special-discard-brief"] = nh_info_special_discard_brief;
    }

    if(nh_info_special_drop_brief != nullptr)
    {
        children["nh-info-special-drop-brief"] = nh_info_special_drop_brief;
    }

    if(nh_info_special_null_brief != nullptr)
    {
        children["nh-info-special-null-brief"] = nh_info_special_null_brief;
    }

    if(nh_info_special_punt_brief != nullptr)
    {
        children["nh-info-special-punt-brief"] = nh_info_special_punt_brief;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-special-discard-brief" || name == "nh-info-special-drop-brief" || name == "nh-info-special-null-brief" || name == "nh-info-special-punt-brief")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoSpecialDiscardBrief()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-discard-brief"; yang_parent_name = "nh-info-special-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::~NhInfoSpecialDiscardBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-discard-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-discard-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-discard-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDiscardBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoSpecialDropBrief()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-drop-brief"; yang_parent_name = "nh-info-special-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::~NhInfoSpecialDropBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-drop-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-drop-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-drop-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialDropBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoSpecialNullBrief()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-null-brief"; yang_parent_name = "nh-info-special-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::~NhInfoSpecialNullBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-null-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-null-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-null-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialNullBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoSpecialPuntBrief()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-punt-brief"; yang_parent_name = "nh-info-special-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::~NhInfoSpecialPuntBrief()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-punt-brief";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-punt-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-punt-brief"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief::NhInfoSpecialBrief::NhInfoSpecialPuntBrief::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoDetail()
    :
    nh_info_local_details(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails>())
	,nh_info_remote_details(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails>())
	,nh_info_special_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail>())
{
    nh_info_local_details->parent = this;
    nh_info_remote_details->parent = this;
    nh_info_special_detail->parent = this;

    yang_name = "nh-info-detail"; yang_parent_name = "vrf"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::~NhInfoDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::has_data() const
{
    return (nh_info_local_details !=  nullptr && nh_info_local_details->has_data())
	|| (nh_info_remote_details !=  nullptr && nh_info_remote_details->has_data())
	|| (nh_info_special_detail !=  nullptr && nh_info_special_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_local_details !=  nullptr && nh_info_local_details->has_operation())
	|| (nh_info_remote_details !=  nullptr && nh_info_remote_details->has_operation())
	|| (nh_info_special_detail !=  nullptr && nh_info_special_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-local-details")
    {
        if(nh_info_local_details == nullptr)
        {
            nh_info_local_details = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails>();
        }
        return nh_info_local_details;
    }

    if(child_yang_name == "nh-info-remote-details")
    {
        if(nh_info_remote_details == nullptr)
        {
            nh_info_remote_details = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails>();
        }
        return nh_info_remote_details;
    }

    if(child_yang_name == "nh-info-special-detail")
    {
        if(nh_info_special_detail == nullptr)
        {
            nh_info_special_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail>();
        }
        return nh_info_special_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_local_details != nullptr)
    {
        children["nh-info-local-details"] = nh_info_local_details;
    }

    if(nh_info_remote_details != nullptr)
    {
        children["nh-info-remote-details"] = nh_info_remote_details;
    }

    if(nh_info_special_detail != nullptr)
    {
        children["nh-info-special-detail"] = nh_info_special_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-local-details" || name == "nh-info-remote-details" || name == "nh-info-special-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetails()
{

    yang_name = "nh-info-local-details"; yang_parent_name = "nh-info-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::~NhInfoLocalDetails()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::has_data() const
{
    for (std::size_t index=0; index<nh_info_local_detail.size(); index++)
    {
        if(nh_info_local_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::has_operation() const
{
    for (std::size_t index=0; index<nh_info_local_detail.size(); index++)
    {
        if(nh_info_local_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-details";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-local-detail")
    {
        for(auto const & c : nh_info_local_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail>();
        c->parent = this;
        nh_info_local_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_local_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-local-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoLocalDetail()
    :
    nh_address{YType::str, "nh-address"},
    nh_interface_name{YType::str, "nh-interface-name"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-local-detail"; yang_parent_name = "nh-info-local-details"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::~NhInfoLocalDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::has_data() const
{
    return nh_address.is_set
	|| nh_interface_name.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "nh-address" || name == "nh-interface-name" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-local-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-local-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoLocalDetails::NhInfoLocalDetail::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetails()
{

    yang_name = "nh-info-remote-details"; yang_parent_name = "nh-info-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::~NhInfoRemoteDetails()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::has_data() const
{
    for (std::size_t index=0; index<nh_info_remote_detail.size(); index++)
    {
        if(nh_info_remote_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::has_operation() const
{
    for (std::size_t index=0; index<nh_info_remote_detail.size(); index++)
    {
        if(nh_info_remote_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-details";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-remote-detail")
    {
        for(auto const & c : nh_info_remote_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail>();
        c->parent = this;
        nh_info_remote_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_remote_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-remote-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoRemoteDetail()
    :
    nh_address{YType::str, "nh-address"},
    nh_interface_name{YType::str, "nh-interface-name"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-remote-detail"; yang_parent_name = "nh-info-remote-details"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::~NhInfoRemoteDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::has_data() const
{
    return nh_address.is_set
	|| nh_interface_name.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "nh-address" || name == "nh-interface-name" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-remote-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-remote-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoRemoteDetails::NhInfoRemoteDetail::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDetail()
    :
    nh_info_special_discard_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail>())
	,nh_info_special_drop_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail>())
	,nh_info_special_null_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail>())
	,nh_info_special_punt_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail>())
{
    nh_info_special_discard_detail->parent = this;
    nh_info_special_drop_detail->parent = this;
    nh_info_special_null_detail->parent = this;
    nh_info_special_punt_detail->parent = this;

    yang_name = "nh-info-special-detail"; yang_parent_name = "nh-info-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::~NhInfoSpecialDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::has_data() const
{
    return (nh_info_special_discard_detail !=  nullptr && nh_info_special_discard_detail->has_data())
	|| (nh_info_special_drop_detail !=  nullptr && nh_info_special_drop_detail->has_data())
	|| (nh_info_special_null_detail !=  nullptr && nh_info_special_null_detail->has_data())
	|| (nh_info_special_punt_detail !=  nullptr && nh_info_special_punt_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_special_discard_detail !=  nullptr && nh_info_special_discard_detail->has_operation())
	|| (nh_info_special_drop_detail !=  nullptr && nh_info_special_drop_detail->has_operation())
	|| (nh_info_special_null_detail !=  nullptr && nh_info_special_null_detail->has_operation())
	|| (nh_info_special_punt_detail !=  nullptr && nh_info_special_punt_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-special-discard-detail")
    {
        if(nh_info_special_discard_detail == nullptr)
        {
            nh_info_special_discard_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail>();
        }
        return nh_info_special_discard_detail;
    }

    if(child_yang_name == "nh-info-special-drop-detail")
    {
        if(nh_info_special_drop_detail == nullptr)
        {
            nh_info_special_drop_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail>();
        }
        return nh_info_special_drop_detail;
    }

    if(child_yang_name == "nh-info-special-null-detail")
    {
        if(nh_info_special_null_detail == nullptr)
        {
            nh_info_special_null_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail>();
        }
        return nh_info_special_null_detail;
    }

    if(child_yang_name == "nh-info-special-punt-detail")
    {
        if(nh_info_special_punt_detail == nullptr)
        {
            nh_info_special_punt_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail>();
        }
        return nh_info_special_punt_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_special_discard_detail != nullptr)
    {
        children["nh-info-special-discard-detail"] = nh_info_special_discard_detail;
    }

    if(nh_info_special_drop_detail != nullptr)
    {
        children["nh-info-special-drop-detail"] = nh_info_special_drop_detail;
    }

    if(nh_info_special_null_detail != nullptr)
    {
        children["nh-info-special-null-detail"] = nh_info_special_null_detail;
    }

    if(nh_info_special_punt_detail != nullptr)
    {
        children["nh-info-special-punt-detail"] = nh_info_special_punt_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-special-discard-detail" || name == "nh-info-special-drop-detail" || name == "nh-info-special-null-detail" || name == "nh-info-special-punt-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoSpecialDiscardDetail()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-discard-detail"; yang_parent_name = "nh-info-special-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::~NhInfoSpecialDiscardDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-discard-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-discard-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-discard-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDiscardDetail::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoSpecialDropDetail()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-drop-detail"; yang_parent_name = "nh-info-special-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::~NhInfoSpecialDropDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-drop-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-drop-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-drop-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialDropDetail::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoSpecialNullDetail()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-null-detail"; yang_parent_name = "nh-info-special-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::~NhInfoSpecialNullDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-null-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-null-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-null-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialNullDetail::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoSpecialPuntDetail()
    :
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-special-punt-detail"; yang_parent_name = "nh-info-special-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::~NhInfoSpecialPuntDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::has_data() const
{
    return si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-punt-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-punt-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_flags{YType::uint32, "object-flags"},
    object_pointer{YType::uint64, "object-pointer"},
    object_reference_count{YType::uint32, "object-reference-count"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_type{YType::uint8, "object-type"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    return object_flags.is_set
	|| object_pointer.is_set
	|| object_reference_count.is_set
	|| object_time_stamp.is_set
	|| object_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_pointer.yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());
    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-flags" || name == "object-pointer" || name == "object-reference-count" || name == "object-time-stamp" || name == "object-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
    	,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(snecd_nhr != nullptr)
    {
        children["snecd-nhr"] = snecd_nhr;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    return nh_info_replicated_interface.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-interface" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe::SiPwhe()
    :
    cw_enabled{YType::boolean, "cw-enabled"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    vctype{YType::uint32, "vctype"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-punt-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe::has_data() const
{
    return cw_enabled.is_set
	|| dot1q_vlan_tag.is_set
	|| l2_overhead_bytes.is_set
	|| pwhe_adjacency_client_data.is_set
	|| vc_internal_label.is_set
	|| vctype.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(vctype.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail::NhInfoSpecialDetail::NhInfoSpecialPuntDetail::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "cw-enabled" || name == "dot1q-vlan-tag" || name == "l2-overhead-bytes" || name == "pwhe-adjacency-client-data" || name == "vc-internal-label" || name == "vctype")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoDetailHardwareEgress()
    :
    nh_info_local_detail_hardware_egresses(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses>())
	,nh_info_remote_detail_hardware_egresses(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses>())
	,nh_info_special_detail_hardware_egress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress>())
{
    nh_info_local_detail_hardware_egresses->parent = this;
    nh_info_remote_detail_hardware_egresses->parent = this;
    nh_info_special_detail_hardware_egress->parent = this;

    yang_name = "nh-info-detail-hardware-egress"; yang_parent_name = "vrf"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::~NhInfoDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::has_data() const
{
    return (nh_info_local_detail_hardware_egresses !=  nullptr && nh_info_local_detail_hardware_egresses->has_data())
	|| (nh_info_remote_detail_hardware_egresses !=  nullptr && nh_info_remote_detail_hardware_egresses->has_data())
	|| (nh_info_special_detail_hardware_egress !=  nullptr && nh_info_special_detail_hardware_egress->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_local_detail_hardware_egresses !=  nullptr && nh_info_local_detail_hardware_egresses->has_operation())
	|| (nh_info_remote_detail_hardware_egresses !=  nullptr && nh_info_remote_detail_hardware_egresses->has_operation())
	|| (nh_info_special_detail_hardware_egress !=  nullptr && nh_info_special_detail_hardware_egress->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-local-detail-hardware-egresses")
    {
        if(nh_info_local_detail_hardware_egresses == nullptr)
        {
            nh_info_local_detail_hardware_egresses = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses>();
        }
        return nh_info_local_detail_hardware_egresses;
    }

    if(child_yang_name == "nh-info-remote-detail-hardware-egresses")
    {
        if(nh_info_remote_detail_hardware_egresses == nullptr)
        {
            nh_info_remote_detail_hardware_egresses = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses>();
        }
        return nh_info_remote_detail_hardware_egresses;
    }

    if(child_yang_name == "nh-info-special-detail-hardware-egress")
    {
        if(nh_info_special_detail_hardware_egress == nullptr)
        {
            nh_info_special_detail_hardware_egress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress>();
        }
        return nh_info_special_detail_hardware_egress;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_local_detail_hardware_egresses != nullptr)
    {
        children["nh-info-local-detail-hardware-egresses"] = nh_info_local_detail_hardware_egresses;
    }

    if(nh_info_remote_detail_hardware_egresses != nullptr)
    {
        children["nh-info-remote-detail-hardware-egresses"] = nh_info_remote_detail_hardware_egresses;
    }

    if(nh_info_special_detail_hardware_egress != nullptr)
    {
        children["nh-info-special-detail-hardware-egress"] = nh_info_special_detail_hardware_egress;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-local-detail-hardware-egresses" || name == "nh-info-remote-detail-hardware-egresses" || name == "nh-info-special-detail-hardware-egress")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgresses()
{

    yang_name = "nh-info-local-detail-hardware-egresses"; yang_parent_name = "nh-info-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::~NhInfoLocalDetailHardwareEgresses()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::has_data() const
{
    for (std::size_t index=0; index<nh_info_local_detail_hardware_egress.size(); index++)
    {
        if(nh_info_local_detail_hardware_egress[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::has_operation() const
{
    for (std::size_t index=0; index<nh_info_local_detail_hardware_egress.size(); index++)
    {
        if(nh_info_local_detail_hardware_egress[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-detail-hardware-egresses";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-local-detail-hardware-egress")
    {
        for(auto const & c : nh_info_local_detail_hardware_egress)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress>();
        c->parent = this;
        nh_info_local_detail_hardware_egress.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_local_detail_hardware_egress)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-local-detail-hardware-egress")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoLocalDetailHardwareEgress()
    :
    nh_address{YType::str, "nh-address"},
    nh_interface_name{YType::str, "nh-interface-name"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_flags{YType::uint32, "si-flags"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_ifh{YType::uint32, "si-ifh"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhid{YType::uint32, "si-nhid"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_refcount{YType::uint32, "si-refcount"},
    si_special_type{YType::uint32, "si-special-type"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
    	,
    nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension>())
	,si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe>())
{
    nh_info_extension->parent = this;
    si_pwhe->parent = this;

    yang_name = "nh-info-local-detail-hardware-egress"; yang_parent_name = "nh-info-local-detail-hardware-egresses"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::~NhInfoLocalDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::has_data() const
{
    return nh_address.is_set
	|| nh_interface_name.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_if.is_set
	|| si_adj_present.is_set
	|| si_adj_ptr.is_set
	|| si_adj_rw.is_set
	|| si_adj_rw_len.is_set
	|| si_anc_ifh.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addr_proto.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_frr.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_nhinfo.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_flags.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_frr_active.is_set
	|| si_gre_dest_addr.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_ifh.is_set
	|| si_link_proto.is_set
	|| si_nhid.is_set
	|| si_nhinfo.is_set
	|| si_nhinfo_ptr.is_set
	|| si_nhtype.is_set
	|| si_pfi_interface_type.is_set
	|| si_protect_frr.is_set
	|| si_refcount.is_set
	|| si_special_type.is_set
	|| si_upd_ts.is_set
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data())
	|| (si_pwhe !=  nullptr && si_pwhe->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation())
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension != nullptr)
    {
        children["nh-info-extension"] = nh_info_extension;
    }

    if(si_pwhe != nullptr)
    {
        children["si-pwhe"] = si_pwhe;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension" || name == "si-pwhe" || name == "nh-address" || name == "nh-interface-name" || name == "si-adj-addr-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-if" || name == "si-adj-present" || name == "si-adj-ptr" || name == "si-adj-rw" || name == "si-adj-rw-len" || name == "si-anc-ifh" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-gre-tunnel" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-bkup-addr" || name == "si-bkup-addr-proto" || name == "si-bkup-addrlen" || name == "si-bkup-frr" || name == "si-bkup-ifh" || name == "si-bkup-nhinfo" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-dep-nhinfo-type" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-flags" || name == "si-fnb-idb-ptr" || name == "si-frr-active" || name == "si-gre-dest-addr" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-ifh" || name == "si-link-proto" || name == "si-nhid" || name == "si-nhinfo" || name == "si-nhinfo-ptr" || name == "si-nhtype" || name == "si-pfi-interface-type" || name == "si-protect-frr" || name == "si-refcount" || name == "si-special-type" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-local-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::has_data() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.size(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        for(auto const & c : nh_info_extension_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                return c;
            }
        }
        auto c = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        c->parent = this;
        nh_info_extension_detail.push_back(c);
        return c;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    for (auto const & c : nh_info_extension_detail)
    {
        children[c->get_segment_path()] = c;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
	,nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(nh_info_extension_base != nullptr)
    {
        children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    back_object_pointer{YType::uint64, "back-object-pointer"},
    parent_object_pointer{YType::uint64, "parent-object-pointer"}
    	,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    return back_object_pointer.is_set
	|| parent_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());
    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<Entity>> children{};
    if(object_base != nullptr)
    {
        children["object-base"] = object_base;
    }

    return children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "back-object-pointer" || name == "parent-object-pointer")
        return true;
    return false;
}


}
}

