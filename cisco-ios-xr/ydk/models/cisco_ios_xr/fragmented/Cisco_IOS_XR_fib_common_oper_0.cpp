
#include <sstream>
#include <iostream>
#include <ydk/entity_util.hpp>
#include "bundle_info.hpp"
#include "generated_entity_lookup.hpp"
#include "Cisco_IOS_XR_fib_common_oper_0.hpp"
#include "Cisco_IOS_XR_fib_common_oper_1.hpp"
#include "Cisco_IOS_XR_fib_common_oper_2.hpp"

using namespace ydk;

namespace cisco_ios_xr {
namespace Cisco_IOS_XR_fib_common_oper {

FibStatistics::FibStatistics()
    :
    nodes(std::make_shared<FibStatistics::Nodes>())
{
    nodes->parent = this;

    yang_name = "fib-statistics"; yang_parent_name = "Cisco-IOS-XR-fib-common-oper"; is_top_level_class = true; has_list_ancestor = false; 
}

FibStatistics::~FibStatistics()
{
}

bool FibStatistics::has_data() const
{
    if (is_presence_container) return true;
    return (nodes !=  nullptr && nodes->has_data());
}

bool FibStatistics::has_operation() const
{
    return is_set(yfilter)
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string FibStatistics::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:fib-statistics";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > FibStatistics::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> FibStatistics::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nodes")
    {
        if(nodes == nullptr)
        {
            nodes = std::make_shared<FibStatistics::Nodes>();
        }
        return nodes;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> FibStatistics::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(nodes != nullptr)
    {
        _children["nodes"] = nodes;
    }

    return _children;
}

void FibStatistics::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void FibStatistics::set_filter(const std::string & value_path, YFilter yfilter)
{
}

std::shared_ptr<ydk::Entity> FibStatistics::clone_ptr() const
{
    return std::make_shared<FibStatistics>();
}

std::string FibStatistics::get_bundle_yang_models_location() const
{
    return ydk_cisco_ios_xr_models_path;
}

std::string FibStatistics::get_bundle_name() const
{
    return "cisco_ios_xr";
}

augment_capabilities_function FibStatistics::get_augment_capabilities_function() const
{
    return cisco_ios_xr_augment_lookup_tables;
}

std::map<std::pair<std::string, std::string>, std::string> FibStatistics::get_namespace_identity_lookup() const
{
    return cisco_ios_xr_namespace_identity_lookup;
}

bool FibStatistics::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nodes")
        return true;
    return false;
}

FibStatistics::Nodes::Nodes()
    :
    node(this, {"node_name"})
{

    yang_name = "nodes"; yang_parent_name = "fib-statistics"; is_top_level_class = false; has_list_ancestor = false; 
}

FibStatistics::Nodes::~Nodes()
{
}

bool FibStatistics::Nodes::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<node.len(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool FibStatistics::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.len(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string FibStatistics::Nodes::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:fib-statistics/" << get_segment_path();
    return path_buffer.str();
}

std::string FibStatistics::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > FibStatistics::Nodes::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> FibStatistics::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "node")
    {
        auto ent_ = std::make_shared<FibStatistics::Nodes::Node>();
        ent_->parent = this;
        node.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> FibStatistics::Nodes::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : node.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void FibStatistics::Nodes::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void FibStatistics::Nodes::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool FibStatistics::Nodes::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "node")
        return true;
    return false;
}

FibStatistics::Nodes::Node::Node()
    :
    node_name{YType::str, "node-name"}
        ,
    drops(std::make_shared<FibStatistics::Nodes::Node::Drops>())
{
    drops->parent = this;

    yang_name = "node"; yang_parent_name = "nodes"; is_top_level_class = false; has_list_ancestor = false; 
}

FibStatistics::Nodes::Node::~Node()
{
}

bool FibStatistics::Nodes::Node::has_data() const
{
    if (is_presence_container) return true;
    return node_name.is_set
	|| (drops !=  nullptr && drops->has_data());
}

bool FibStatistics::Nodes::Node::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(node_name.yfilter)
	|| (drops !=  nullptr && drops->has_operation());
}

std::string FibStatistics::Nodes::Node::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:fib-statistics/nodes/" << get_segment_path();
    return path_buffer.str();
}

std::string FibStatistics::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node";
    ADD_KEY_TOKEN(node_name, "node-name");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > FibStatistics::Nodes::Node::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_name.is_set || is_set(node_name.yfilter)) leaf_name_data.push_back(node_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> FibStatistics::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "drops")
    {
        if(drops == nullptr)
        {
            drops = std::make_shared<FibStatistics::Nodes::Node::Drops>();
        }
        return drops;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> FibStatistics::Nodes::Node::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(drops != nullptr)
    {
        _children["drops"] = drops;
    }

    return _children;
}

void FibStatistics::Nodes::Node::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "node-name")
    {
        node_name = value;
        node_name.value_namespace = name_space;
        node_name.value_namespace_prefix = name_space_prefix;
    }
}

void FibStatistics::Nodes::Node::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "node-name")
    {
        node_name.yfilter = yfilter;
    }
}

bool FibStatistics::Nodes::Node::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "drops" || name == "node-name")
        return true;
    return false;
}

FibStatistics::Nodes::Node::Drops::Drops()
    :
    no_route_packets{YType::uint64, "no-route-packets"},
    punt_unreachable_packets{YType::uint64, "punt-unreachable-packets"},
    df_unreachable_packets{YType::uint64, "df-unreachable-packets"},
    encapsulation_failure_packets{YType::uint64, "encapsulation-failure-packets"},
    incomplete_adjacency_packets{YType::uint64, "incomplete-adjacency-packets"},
    unresolved_prefix_packets{YType::uint64, "unresolved-prefix-packets"},
    unsupported_feature_packets{YType::uint64, "unsupported-feature-packets"},
    discard_packets{YType::uint64, "discard-packets"},
    checksum_error_packets{YType::uint64, "checksum-error-packets"},
    fragmenation_consumed_packets{YType::uint64, "fragmenation-consumed-packets"},
    fragmenation_failure_packets{YType::uint64, "fragmenation-failure-packets"},
    null_packets{YType::uint64, "null-packets"},
    rpf_check_failure_packets{YType::uint64, "rpf-check-failure-packets"},
    acl_in_rpf_packets{YType::uint64, "acl-in-rpf-packets"},
    rp_destination_drop_packets{YType::uint64, "rp-destination-drop-packets"},
    total_number_of_drop_packets{YType::uint64, "total-number-of-drop-packets"},
    mpls_disabled_interface{YType::uint64, "mpls-disabled-interface"},
    gre_lookup_failed_drop{YType::uint64, "gre-lookup-failed-drop"},
    gre_error_drop{YType::uint64, "gre-error-drop"},
    lisp_punt_drops{YType::uint64, "lisp-punt-drops"},
    lisp_encap_error_drops{YType::uint64, "lisp-encap-error-drops"},
    lisp_decap_error_drops{YType::uint64, "lisp-decap-error-drops"},
    multi_label_drops{YType::uint64, "multi-label-drops"},
    unreachable_sr_label_drops{YType::uint64, "unreachable-sr-label-drops"},
    ttl_expired_sr_label_drops{YType::uint64, "ttl-expired-sr-label-drops"}
{

    yang_name = "drops"; yang_parent_name = "node"; is_top_level_class = false; has_list_ancestor = true; 
}

FibStatistics::Nodes::Node::Drops::~Drops()
{
}

bool FibStatistics::Nodes::Node::Drops::has_data() const
{
    if (is_presence_container) return true;
    return no_route_packets.is_set
	|| punt_unreachable_packets.is_set
	|| df_unreachable_packets.is_set
	|| encapsulation_failure_packets.is_set
	|| incomplete_adjacency_packets.is_set
	|| unresolved_prefix_packets.is_set
	|| unsupported_feature_packets.is_set
	|| discard_packets.is_set
	|| checksum_error_packets.is_set
	|| fragmenation_consumed_packets.is_set
	|| fragmenation_failure_packets.is_set
	|| null_packets.is_set
	|| rpf_check_failure_packets.is_set
	|| acl_in_rpf_packets.is_set
	|| rp_destination_drop_packets.is_set
	|| total_number_of_drop_packets.is_set
	|| mpls_disabled_interface.is_set
	|| gre_lookup_failed_drop.is_set
	|| gre_error_drop.is_set
	|| lisp_punt_drops.is_set
	|| lisp_encap_error_drops.is_set
	|| lisp_decap_error_drops.is_set
	|| multi_label_drops.is_set
	|| unreachable_sr_label_drops.is_set
	|| ttl_expired_sr_label_drops.is_set;
}

bool FibStatistics::Nodes::Node::Drops::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(no_route_packets.yfilter)
	|| ydk::is_set(punt_unreachable_packets.yfilter)
	|| ydk::is_set(df_unreachable_packets.yfilter)
	|| ydk::is_set(encapsulation_failure_packets.yfilter)
	|| ydk::is_set(incomplete_adjacency_packets.yfilter)
	|| ydk::is_set(unresolved_prefix_packets.yfilter)
	|| ydk::is_set(unsupported_feature_packets.yfilter)
	|| ydk::is_set(discard_packets.yfilter)
	|| ydk::is_set(checksum_error_packets.yfilter)
	|| ydk::is_set(fragmenation_consumed_packets.yfilter)
	|| ydk::is_set(fragmenation_failure_packets.yfilter)
	|| ydk::is_set(null_packets.yfilter)
	|| ydk::is_set(rpf_check_failure_packets.yfilter)
	|| ydk::is_set(acl_in_rpf_packets.yfilter)
	|| ydk::is_set(rp_destination_drop_packets.yfilter)
	|| ydk::is_set(total_number_of_drop_packets.yfilter)
	|| ydk::is_set(mpls_disabled_interface.yfilter)
	|| ydk::is_set(gre_lookup_failed_drop.yfilter)
	|| ydk::is_set(gre_error_drop.yfilter)
	|| ydk::is_set(lisp_punt_drops.yfilter)
	|| ydk::is_set(lisp_encap_error_drops.yfilter)
	|| ydk::is_set(lisp_decap_error_drops.yfilter)
	|| ydk::is_set(multi_label_drops.yfilter)
	|| ydk::is_set(unreachable_sr_label_drops.yfilter)
	|| ydk::is_set(ttl_expired_sr_label_drops.yfilter);
}

std::string FibStatistics::Nodes::Node::Drops::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "drops";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > FibStatistics::Nodes::Node::Drops::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (no_route_packets.is_set || is_set(no_route_packets.yfilter)) leaf_name_data.push_back(no_route_packets.get_name_leafdata());
    if (punt_unreachable_packets.is_set || is_set(punt_unreachable_packets.yfilter)) leaf_name_data.push_back(punt_unreachable_packets.get_name_leafdata());
    if (df_unreachable_packets.is_set || is_set(df_unreachable_packets.yfilter)) leaf_name_data.push_back(df_unreachable_packets.get_name_leafdata());
    if (encapsulation_failure_packets.is_set || is_set(encapsulation_failure_packets.yfilter)) leaf_name_data.push_back(encapsulation_failure_packets.get_name_leafdata());
    if (incomplete_adjacency_packets.is_set || is_set(incomplete_adjacency_packets.yfilter)) leaf_name_data.push_back(incomplete_adjacency_packets.get_name_leafdata());
    if (unresolved_prefix_packets.is_set || is_set(unresolved_prefix_packets.yfilter)) leaf_name_data.push_back(unresolved_prefix_packets.get_name_leafdata());
    if (unsupported_feature_packets.is_set || is_set(unsupported_feature_packets.yfilter)) leaf_name_data.push_back(unsupported_feature_packets.get_name_leafdata());
    if (discard_packets.is_set || is_set(discard_packets.yfilter)) leaf_name_data.push_back(discard_packets.get_name_leafdata());
    if (checksum_error_packets.is_set || is_set(checksum_error_packets.yfilter)) leaf_name_data.push_back(checksum_error_packets.get_name_leafdata());
    if (fragmenation_consumed_packets.is_set || is_set(fragmenation_consumed_packets.yfilter)) leaf_name_data.push_back(fragmenation_consumed_packets.get_name_leafdata());
    if (fragmenation_failure_packets.is_set || is_set(fragmenation_failure_packets.yfilter)) leaf_name_data.push_back(fragmenation_failure_packets.get_name_leafdata());
    if (null_packets.is_set || is_set(null_packets.yfilter)) leaf_name_data.push_back(null_packets.get_name_leafdata());
    if (rpf_check_failure_packets.is_set || is_set(rpf_check_failure_packets.yfilter)) leaf_name_data.push_back(rpf_check_failure_packets.get_name_leafdata());
    if (acl_in_rpf_packets.is_set || is_set(acl_in_rpf_packets.yfilter)) leaf_name_data.push_back(acl_in_rpf_packets.get_name_leafdata());
    if (rp_destination_drop_packets.is_set || is_set(rp_destination_drop_packets.yfilter)) leaf_name_data.push_back(rp_destination_drop_packets.get_name_leafdata());
    if (total_number_of_drop_packets.is_set || is_set(total_number_of_drop_packets.yfilter)) leaf_name_data.push_back(total_number_of_drop_packets.get_name_leafdata());
    if (mpls_disabled_interface.is_set || is_set(mpls_disabled_interface.yfilter)) leaf_name_data.push_back(mpls_disabled_interface.get_name_leafdata());
    if (gre_lookup_failed_drop.is_set || is_set(gre_lookup_failed_drop.yfilter)) leaf_name_data.push_back(gre_lookup_failed_drop.get_name_leafdata());
    if (gre_error_drop.is_set || is_set(gre_error_drop.yfilter)) leaf_name_data.push_back(gre_error_drop.get_name_leafdata());
    if (lisp_punt_drops.is_set || is_set(lisp_punt_drops.yfilter)) leaf_name_data.push_back(lisp_punt_drops.get_name_leafdata());
    if (lisp_encap_error_drops.is_set || is_set(lisp_encap_error_drops.yfilter)) leaf_name_data.push_back(lisp_encap_error_drops.get_name_leafdata());
    if (lisp_decap_error_drops.is_set || is_set(lisp_decap_error_drops.yfilter)) leaf_name_data.push_back(lisp_decap_error_drops.get_name_leafdata());
    if (multi_label_drops.is_set || is_set(multi_label_drops.yfilter)) leaf_name_data.push_back(multi_label_drops.get_name_leafdata());
    if (unreachable_sr_label_drops.is_set || is_set(unreachable_sr_label_drops.yfilter)) leaf_name_data.push_back(unreachable_sr_label_drops.get_name_leafdata());
    if (ttl_expired_sr_label_drops.is_set || is_set(ttl_expired_sr_label_drops.yfilter)) leaf_name_data.push_back(ttl_expired_sr_label_drops.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> FibStatistics::Nodes::Node::Drops::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> FibStatistics::Nodes::Node::Drops::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void FibStatistics::Nodes::Node::Drops::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "no-route-packets")
    {
        no_route_packets = value;
        no_route_packets.value_namespace = name_space;
        no_route_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "punt-unreachable-packets")
    {
        punt_unreachable_packets = value;
        punt_unreachable_packets.value_namespace = name_space;
        punt_unreachable_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "df-unreachable-packets")
    {
        df_unreachable_packets = value;
        df_unreachable_packets.value_namespace = name_space;
        df_unreachable_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "encapsulation-failure-packets")
    {
        encapsulation_failure_packets = value;
        encapsulation_failure_packets.value_namespace = name_space;
        encapsulation_failure_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "incomplete-adjacency-packets")
    {
        incomplete_adjacency_packets = value;
        incomplete_adjacency_packets.value_namespace = name_space;
        incomplete_adjacency_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unresolved-prefix-packets")
    {
        unresolved_prefix_packets = value;
        unresolved_prefix_packets.value_namespace = name_space;
        unresolved_prefix_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unsupported-feature-packets")
    {
        unsupported_feature_packets = value;
        unsupported_feature_packets.value_namespace = name_space;
        unsupported_feature_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "discard-packets")
    {
        discard_packets = value;
        discard_packets.value_namespace = name_space;
        discard_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "checksum-error-packets")
    {
        checksum_error_packets = value;
        checksum_error_packets.value_namespace = name_space;
        checksum_error_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fragmenation-consumed-packets")
    {
        fragmenation_consumed_packets = value;
        fragmenation_consumed_packets.value_namespace = name_space;
        fragmenation_consumed_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fragmenation-failure-packets")
    {
        fragmenation_failure_packets = value;
        fragmenation_failure_packets.value_namespace = name_space;
        fragmenation_failure_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "null-packets")
    {
        null_packets = value;
        null_packets.value_namespace = name_space;
        null_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rpf-check-failure-packets")
    {
        rpf_check_failure_packets = value;
        rpf_check_failure_packets.value_namespace = name_space;
        rpf_check_failure_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "acl-in-rpf-packets")
    {
        acl_in_rpf_packets = value;
        acl_in_rpf_packets.value_namespace = name_space;
        acl_in_rpf_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rp-destination-drop-packets")
    {
        rp_destination_drop_packets = value;
        rp_destination_drop_packets.value_namespace = name_space;
        rp_destination_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-number-of-drop-packets")
    {
        total_number_of_drop_packets = value;
        total_number_of_drop_packets.value_namespace = name_space;
        total_number_of_drop_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mpls-disabled-interface")
    {
        mpls_disabled_interface = value;
        mpls_disabled_interface.value_namespace = name_space;
        mpls_disabled_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "gre-lookup-failed-drop")
    {
        gre_lookup_failed_drop = value;
        gre_lookup_failed_drop.value_namespace = name_space;
        gre_lookup_failed_drop.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "gre-error-drop")
    {
        gre_error_drop = value;
        gre_error_drop.value_namespace = name_space;
        gre_error_drop.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-punt-drops")
    {
        lisp_punt_drops = value;
        lisp_punt_drops.value_namespace = name_space;
        lisp_punt_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-encap-error-drops")
    {
        lisp_encap_error_drops = value;
        lisp_encap_error_drops.value_namespace = name_space;
        lisp_encap_error_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-decap-error-drops")
    {
        lisp_decap_error_drops = value;
        lisp_decap_error_drops.value_namespace = name_space;
        lisp_decap_error_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "multi-label-drops")
    {
        multi_label_drops = value;
        multi_label_drops.value_namespace = name_space;
        multi_label_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unreachable-sr-label-drops")
    {
        unreachable_sr_label_drops = value;
        unreachable_sr_label_drops.value_namespace = name_space;
        unreachable_sr_label_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ttl-expired-sr-label-drops")
    {
        ttl_expired_sr_label_drops = value;
        ttl_expired_sr_label_drops.value_namespace = name_space;
        ttl_expired_sr_label_drops.value_namespace_prefix = name_space_prefix;
    }
}

void FibStatistics::Nodes::Node::Drops::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "no-route-packets")
    {
        no_route_packets.yfilter = yfilter;
    }
    if(value_path == "punt-unreachable-packets")
    {
        punt_unreachable_packets.yfilter = yfilter;
    }
    if(value_path == "df-unreachable-packets")
    {
        df_unreachable_packets.yfilter = yfilter;
    }
    if(value_path == "encapsulation-failure-packets")
    {
        encapsulation_failure_packets.yfilter = yfilter;
    }
    if(value_path == "incomplete-adjacency-packets")
    {
        incomplete_adjacency_packets.yfilter = yfilter;
    }
    if(value_path == "unresolved-prefix-packets")
    {
        unresolved_prefix_packets.yfilter = yfilter;
    }
    if(value_path == "unsupported-feature-packets")
    {
        unsupported_feature_packets.yfilter = yfilter;
    }
    if(value_path == "discard-packets")
    {
        discard_packets.yfilter = yfilter;
    }
    if(value_path == "checksum-error-packets")
    {
        checksum_error_packets.yfilter = yfilter;
    }
    if(value_path == "fragmenation-consumed-packets")
    {
        fragmenation_consumed_packets.yfilter = yfilter;
    }
    if(value_path == "fragmenation-failure-packets")
    {
        fragmenation_failure_packets.yfilter = yfilter;
    }
    if(value_path == "null-packets")
    {
        null_packets.yfilter = yfilter;
    }
    if(value_path == "rpf-check-failure-packets")
    {
        rpf_check_failure_packets.yfilter = yfilter;
    }
    if(value_path == "acl-in-rpf-packets")
    {
        acl_in_rpf_packets.yfilter = yfilter;
    }
    if(value_path == "rp-destination-drop-packets")
    {
        rp_destination_drop_packets.yfilter = yfilter;
    }
    if(value_path == "total-number-of-drop-packets")
    {
        total_number_of_drop_packets.yfilter = yfilter;
    }
    if(value_path == "mpls-disabled-interface")
    {
        mpls_disabled_interface.yfilter = yfilter;
    }
    if(value_path == "gre-lookup-failed-drop")
    {
        gre_lookup_failed_drop.yfilter = yfilter;
    }
    if(value_path == "gre-error-drop")
    {
        gre_error_drop.yfilter = yfilter;
    }
    if(value_path == "lisp-punt-drops")
    {
        lisp_punt_drops.yfilter = yfilter;
    }
    if(value_path == "lisp-encap-error-drops")
    {
        lisp_encap_error_drops.yfilter = yfilter;
    }
    if(value_path == "lisp-decap-error-drops")
    {
        lisp_decap_error_drops.yfilter = yfilter;
    }
    if(value_path == "multi-label-drops")
    {
        multi_label_drops.yfilter = yfilter;
    }
    if(value_path == "unreachable-sr-label-drops")
    {
        unreachable_sr_label_drops.yfilter = yfilter;
    }
    if(value_path == "ttl-expired-sr-label-drops")
    {
        ttl_expired_sr_label_drops.yfilter = yfilter;
    }
}

bool FibStatistics::Nodes::Node::Drops::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "no-route-packets" || name == "punt-unreachable-packets" || name == "df-unreachable-packets" || name == "encapsulation-failure-packets" || name == "incomplete-adjacency-packets" || name == "unresolved-prefix-packets" || name == "unsupported-feature-packets" || name == "discard-packets" || name == "checksum-error-packets" || name == "fragmenation-consumed-packets" || name == "fragmenation-failure-packets" || name == "null-packets" || name == "rpf-check-failure-packets" || name == "acl-in-rpf-packets" || name == "rp-destination-drop-packets" || name == "total-number-of-drop-packets" || name == "mpls-disabled-interface" || name == "gre-lookup-failed-drop" || name == "gre-error-drop" || name == "lisp-punt-drops" || name == "lisp-encap-error-drops" || name == "lisp-decap-error-drops" || name == "multi-label-drops" || name == "unreachable-sr-label-drops" || name == "ttl-expired-sr-label-drops")
        return true;
    return false;
}

Fib::Fib()
    :
    nodes(std::make_shared<Fib::Nodes>())
{
    nodes->parent = this;

    yang_name = "fib"; yang_parent_name = "Cisco-IOS-XR-fib-common-oper"; is_top_level_class = true; has_list_ancestor = false; 
}

Fib::~Fib()
{
}

bool Fib::has_data() const
{
    if (is_presence_container) return true;
    return (nodes !=  nullptr && nodes->has_data());
}

bool Fib::has_operation() const
{
    return is_set(yfilter)
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string Fib::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:fib";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nodes")
    {
        if(nodes == nullptr)
        {
            nodes = std::make_shared<Fib::Nodes>();
        }
        return nodes;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(nodes != nullptr)
    {
        _children["nodes"] = nodes;
    }

    return _children;
}

void Fib::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::set_filter(const std::string & value_path, YFilter yfilter)
{
}

std::shared_ptr<ydk::Entity> Fib::clone_ptr() const
{
    return std::make_shared<Fib>();
}

std::string Fib::get_bundle_yang_models_location() const
{
    return ydk_cisco_ios_xr_models_path;
}

std::string Fib::get_bundle_name() const
{
    return "cisco_ios_xr";
}

augment_capabilities_function Fib::get_augment_capabilities_function() const
{
    return cisco_ios_xr_augment_lookup_tables;
}

std::map<std::pair<std::string, std::string>, std::string> Fib::get_namespace_identity_lookup() const
{
    return cisco_ios_xr_namespace_identity_lookup;
}

bool Fib::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nodes")
        return true;
    return false;
}

Fib::Nodes::Nodes()
    :
    node(this, {"node_name"})
{

    yang_name = "nodes"; yang_parent_name = "fib"; is_top_level_class = false; has_list_ancestor = false; 
}

Fib::Nodes::~Nodes()
{
}

bool Fib::Nodes::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<node.len(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.len(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:fib/" << get_segment_path();
    return path_buffer.str();
}

std::string Fib::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "node")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node>();
        ent_->parent = this;
        node.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : node.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "node")
        return true;
    return false;
}

Fib::Nodes::Node::Node()
    :
    node_name{YType::str, "node-name"}
        ,
    global(std::make_shared<Fib::Nodes::Node::Global>())
    , protocols(std::make_shared<Fib::Nodes::Node::Protocols>())
{
    global->parent = this;
    protocols->parent = this;

    yang_name = "node"; yang_parent_name = "nodes"; is_top_level_class = false; has_list_ancestor = false; 
}

Fib::Nodes::Node::~Node()
{
}

bool Fib::Nodes::Node::has_data() const
{
    if (is_presence_container) return true;
    return node_name.is_set
	|| (global !=  nullptr && global->has_data())
	|| (protocols !=  nullptr && protocols->has_data());
}

bool Fib::Nodes::Node::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(node_name.yfilter)
	|| (global !=  nullptr && global->has_operation())
	|| (protocols !=  nullptr && protocols->has_operation());
}

std::string Fib::Nodes::Node::get_absolute_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-fib-common-oper:fib/nodes/" << get_segment_path();
    return path_buffer.str();
}

std::string Fib::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node";
    ADD_KEY_TOKEN(node_name, "node-name");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_name.is_set || is_set(node_name.yfilter)) leaf_name_data.push_back(node_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "global")
    {
        if(global == nullptr)
        {
            global = std::make_shared<Fib::Nodes::Node::Global>();
        }
        return global;
    }

    if(child_yang_name == "protocols")
    {
        if(protocols == nullptr)
        {
            protocols = std::make_shared<Fib::Nodes::Node::Protocols>();
        }
        return protocols;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(global != nullptr)
    {
        _children["global"] = global;
    }

    if(protocols != nullptr)
    {
        _children["protocols"] = protocols;
    }

    return _children;
}

void Fib::Nodes::Node::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "node-name")
    {
        node_name = value;
        node_name.value_namespace = name_space;
        node_name.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "node-name")
    {
        node_name.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "global" || name == "protocols" || name == "node-name")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Global()
    :
    fib_cofo(std::make_shared<Fib::Nodes::Node::Global::FibCofo>())
    , summary(std::make_shared<Fib::Nodes::Node::Global::Summary>())
    , object_history(std::make_shared<Fib::Nodes::Node::Global::ObjectHistory>())
{
    fib_cofo->parent = this;
    summary->parent = this;
    object_history->parent = this;

    yang_name = "global"; yang_parent_name = "node"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::~Global()
{
}

bool Fib::Nodes::Node::Global::has_data() const
{
    if (is_presence_container) return true;
    return (fib_cofo !=  nullptr && fib_cofo->has_data())
	|| (summary !=  nullptr && summary->has_data())
	|| (object_history !=  nullptr && object_history->has_data());
}

bool Fib::Nodes::Node::Global::has_operation() const
{
    return is_set(yfilter)
	|| (fib_cofo !=  nullptr && fib_cofo->has_operation())
	|| (summary !=  nullptr && summary->has_operation())
	|| (object_history !=  nullptr && object_history->has_operation());
}

std::string Fib::Nodes::Node::Global::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fib-cofo")
    {
        if(fib_cofo == nullptr)
        {
            fib_cofo = std::make_shared<Fib::Nodes::Node::Global::FibCofo>();
        }
        return fib_cofo;
    }

    if(child_yang_name == "summary")
    {
        if(summary == nullptr)
        {
            summary = std::make_shared<Fib::Nodes::Node::Global::Summary>();
        }
        return summary;
    }

    if(child_yang_name == "object-history")
    {
        if(object_history == nullptr)
        {
            object_history = std::make_shared<Fib::Nodes::Node::Global::ObjectHistory>();
        }
        return object_history;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(fib_cofo != nullptr)
    {
        _children["fib-cofo"] = fib_cofo;
    }

    if(summary != nullptr)
    {
        _children["summary"] = summary;
    }

    if(object_history != nullptr)
    {
        _children["object-history"] = object_history;
    }

    return _children;
}

void Fib::Nodes::Node::Global::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fib-cofo" || name == "summary" || name == "object-history")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofo()
    :
    fib_cofo_idb(std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoIdb>())
    , fib_cofo_table_id(std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoTableId>())
{
    fib_cofo_idb->parent = this;
    fib_cofo_table_id->parent = this;

    yang_name = "fib-cofo"; yang_parent_name = "global"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::~FibCofo()
{
}

bool Fib::Nodes::Node::Global::FibCofo::has_data() const
{
    if (is_presence_container) return true;
    return (fib_cofo_idb !=  nullptr && fib_cofo_idb->has_data())
	|| (fib_cofo_table_id !=  nullptr && fib_cofo_table_id->has_data());
}

bool Fib::Nodes::Node::Global::FibCofo::has_operation() const
{
    return is_set(yfilter)
	|| (fib_cofo_idb !=  nullptr && fib_cofo_idb->has_operation())
	|| (fib_cofo_table_id !=  nullptr && fib_cofo_table_id->has_operation());
}

std::string Fib::Nodes::Node::Global::FibCofo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-cofo";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fib-cofo-idb")
    {
        if(fib_cofo_idb == nullptr)
        {
            fib_cofo_idb = std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoIdb>();
        }
        return fib_cofo_idb;
    }

    if(child_yang_name == "fib-cofo-table-id")
    {
        if(fib_cofo_table_id == nullptr)
        {
            fib_cofo_table_id = std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoTableId>();
        }
        return fib_cofo_table_id;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(fib_cofo_idb != nullptr)
    {
        _children["fib-cofo-idb"] = fib_cofo_idb;
    }

    if(fib_cofo_table_id != nullptr)
    {
        _children["fib-cofo-table-id"] = fib_cofo_table_id;
    }

    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::FibCofo::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::FibCofo::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fib-cofo-idb" || name == "fib-cofo-table-id")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdb()
    :
    fib_cofo_idb_table_entries(std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries>())
{
    fib_cofo_idb_table_entries->parent = this;

    yang_name = "fib-cofo-idb"; yang_parent_name = "fib-cofo"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::~FibCofoIdb()
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::has_data() const
{
    if (is_presence_container) return true;
    return (fib_cofo_idb_table_entries !=  nullptr && fib_cofo_idb_table_entries->has_data());
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::has_operation() const
{
    return is_set(yfilter)
	|| (fib_cofo_idb_table_entries !=  nullptr && fib_cofo_idb_table_entries->has_operation());
}

std::string Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-cofo-idb";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fib-cofo-idb-table-entries")
    {
        if(fib_cofo_idb_table_entries == nullptr)
        {
            fib_cofo_idb_table_entries = std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries>();
        }
        return fib_cofo_idb_table_entries;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(fib_cofo_idb_table_entries != nullptr)
    {
        _children["fib-cofo-idb-table-entries"] = fib_cofo_idb_table_entries;
    }

    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fib-cofo-idb-table-entries")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntries()
    :
    fib_cofo_idb_table_entry(this, {})
{

    yang_name = "fib-cofo-idb-table-entries"; yang_parent_name = "fib-cofo-idb"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::~FibCofoIdbTableEntries()
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fib_cofo_idb_table_entry.len(); index++)
    {
        if(fib_cofo_idb_table_entry[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::has_operation() const
{
    for (std::size_t index=0; index<fib_cofo_idb_table_entry.len(); index++)
    {
        if(fib_cofo_idb_table_entry[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-cofo-idb-table-entries";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fib-cofo-idb-table-entry")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry>();
        ent_->parent = this;
        fib_cofo_idb_table_entry.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : fib_cofo_idb_table_entry.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fib-cofo-idb-table-entry")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::FibCofoIdbTableEntry()
    :
    sdr_id{YType::uint32, "sdr-id"},
    if_index{YType::uint32, "if-index"},
    sdrid{YType::uint32, "sdrid"},
    intf_type{YType::uint32, "intf-type"},
    intf_index{YType::uint32, "intf-index"},
    intf_state{YType::uint32, "intf-state"},
    parent_intf_index{YType::uint32, "parent-intf-index"},
    parent_intf_type{YType::uint32, "parent-intf-type"},
    bundle_member_total_weight{YType::uint16, "bundle-member-total-weight"},
    main_pointer{YType::uint64, "main-pointer"},
    table_pointer{YType::uint64, "table-pointer"},
    hardware_handle{YType::uint64, "hardware-handle"},
    intf_name{YType::str, "intf-name"},
    pic{YType::uint64, "pic"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase>())
    , bundle_member_info(this, {})
{
    object_base->parent = this;

    yang_name = "fib-cofo-idb-table-entry"; yang_parent_name = "fib-cofo-idb-table-entries"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::~FibCofoIdbTableEntry()
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<bundle_member_info.len(); index++)
    {
        if(bundle_member_info[index]->has_data())
            return true;
    }
    for (auto const & leaf : pic.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return sdr_id.is_set
	|| if_index.is_set
	|| sdrid.is_set
	|| intf_type.is_set
	|| intf_index.is_set
	|| intf_state.is_set
	|| parent_intf_index.is_set
	|| parent_intf_type.is_set
	|| bundle_member_total_weight.is_set
	|| main_pointer.is_set
	|| table_pointer.is_set
	|| hardware_handle.is_set
	|| intf_name.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::has_operation() const
{
    for (std::size_t index=0; index<bundle_member_info.len(); index++)
    {
        if(bundle_member_info[index]->has_operation())
            return true;
    }
    for (auto const & leaf : pic.getYLeafs())
    {
        if(is_set(leaf.yfilter))
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(sdr_id.yfilter)
	|| ydk::is_set(if_index.yfilter)
	|| ydk::is_set(sdrid.yfilter)
	|| ydk::is_set(intf_type.yfilter)
	|| ydk::is_set(intf_index.yfilter)
	|| ydk::is_set(intf_state.yfilter)
	|| ydk::is_set(parent_intf_index.yfilter)
	|| ydk::is_set(parent_intf_type.yfilter)
	|| ydk::is_set(bundle_member_total_weight.yfilter)
	|| ydk::is_set(main_pointer.yfilter)
	|| ydk::is_set(table_pointer.yfilter)
	|| ydk::is_set(hardware_handle.yfilter)
	|| ydk::is_set(intf_name.yfilter)
	|| ydk::is_set(pic.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-cofo-idb-table-entry";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sdr_id.is_set || is_set(sdr_id.yfilter)) leaf_name_data.push_back(sdr_id.get_name_leafdata());
    if (if_index.is_set || is_set(if_index.yfilter)) leaf_name_data.push_back(if_index.get_name_leafdata());
    if (sdrid.is_set || is_set(sdrid.yfilter)) leaf_name_data.push_back(sdrid.get_name_leafdata());
    if (intf_type.is_set || is_set(intf_type.yfilter)) leaf_name_data.push_back(intf_type.get_name_leafdata());
    if (intf_index.is_set || is_set(intf_index.yfilter)) leaf_name_data.push_back(intf_index.get_name_leafdata());
    if (intf_state.is_set || is_set(intf_state.yfilter)) leaf_name_data.push_back(intf_state.get_name_leafdata());
    if (parent_intf_index.is_set || is_set(parent_intf_index.yfilter)) leaf_name_data.push_back(parent_intf_index.get_name_leafdata());
    if (parent_intf_type.is_set || is_set(parent_intf_type.yfilter)) leaf_name_data.push_back(parent_intf_type.get_name_leafdata());
    if (bundle_member_total_weight.is_set || is_set(bundle_member_total_weight.yfilter)) leaf_name_data.push_back(bundle_member_total_weight.get_name_leafdata());
    if (main_pointer.is_set || is_set(main_pointer.yfilter)) leaf_name_data.push_back(main_pointer.get_name_leafdata());
    if (table_pointer.is_set || is_set(table_pointer.yfilter)) leaf_name_data.push_back(table_pointer.get_name_leafdata());
    if (hardware_handle.is_set || is_set(hardware_handle.yfilter)) leaf_name_data.push_back(hardware_handle.get_name_leafdata());
    if (intf_name.is_set || is_set(intf_name.yfilter)) leaf_name_data.push_back(intf_name.get_name_leafdata());

    auto pic_name_datas = pic.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), pic_name_datas.begin(), pic_name_datas.end());
    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase>();
        }
        return object_base;
    }

    if(child_yang_name == "bundle-member-info")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo>();
        ent_->parent = this;
        bundle_member_info.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(object_base != nullptr)
    {
        _children["object-base"] = object_base;
    }

    count_ = 0;
    for (auto ent_ : bundle_member_info.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "sdr-id")
    {
        sdr_id = value;
        sdr_id.value_namespace = name_space;
        sdr_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "if-index")
    {
        if_index = value;
        if_index.value_namespace = name_space;
        if_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sdrid")
    {
        sdrid = value;
        sdrid.value_namespace = name_space;
        sdrid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "intf-type")
    {
        intf_type = value;
        intf_type.value_namespace = name_space;
        intf_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "intf-index")
    {
        intf_index = value;
        intf_index.value_namespace = name_space;
        intf_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "intf-state")
    {
        intf_state = value;
        intf_state.value_namespace = name_space;
        intf_state.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-intf-index")
    {
        parent_intf_index = value;
        parent_intf_index.value_namespace = name_space;
        parent_intf_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-intf-type")
    {
        parent_intf_type = value;
        parent_intf_type.value_namespace = name_space;
        parent_intf_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bundle-member-total-weight")
    {
        bundle_member_total_weight = value;
        bundle_member_total_weight.value_namespace = name_space;
        bundle_member_total_weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "main-pointer")
    {
        main_pointer = value;
        main_pointer.value_namespace = name_space;
        main_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "table-pointer")
    {
        table_pointer = value;
        table_pointer.value_namespace = name_space;
        table_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "hardware-handle")
    {
        hardware_handle = value;
        hardware_handle.value_namespace = name_space;
        hardware_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "intf-name")
    {
        intf_name = value;
        intf_name.value_namespace = name_space;
        intf_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pic")
    {
        pic.append(value);
    }
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "sdr-id")
    {
        sdr_id.yfilter = yfilter;
    }
    if(value_path == "if-index")
    {
        if_index.yfilter = yfilter;
    }
    if(value_path == "sdrid")
    {
        sdrid.yfilter = yfilter;
    }
    if(value_path == "intf-type")
    {
        intf_type.yfilter = yfilter;
    }
    if(value_path == "intf-index")
    {
        intf_index.yfilter = yfilter;
    }
    if(value_path == "intf-state")
    {
        intf_state.yfilter = yfilter;
    }
    if(value_path == "parent-intf-index")
    {
        parent_intf_index.yfilter = yfilter;
    }
    if(value_path == "parent-intf-type")
    {
        parent_intf_type.yfilter = yfilter;
    }
    if(value_path == "bundle-member-total-weight")
    {
        bundle_member_total_weight.yfilter = yfilter;
    }
    if(value_path == "main-pointer")
    {
        main_pointer.yfilter = yfilter;
    }
    if(value_path == "table-pointer")
    {
        table_pointer.yfilter = yfilter;
    }
    if(value_path == "hardware-handle")
    {
        hardware_handle.yfilter = yfilter;
    }
    if(value_path == "intf-name")
    {
        intf_name.yfilter = yfilter;
    }
    if(value_path == "pic")
    {
        pic.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "bundle-member-info" || name == "sdr-id" || name == "if-index" || name == "sdrid" || name == "intf-type" || name == "intf-index" || name == "intf-state" || name == "parent-intf-index" || name == "parent-intf-type" || name == "bundle-member-total-weight" || name == "main-pointer" || name == "table-pointer" || name == "hardware-handle" || name == "intf-name" || name == "pic")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "fib-cofo-idb-table-entry"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo::BundleMemberInfo()
    :
    intf_index{YType::uint32, "intf-index"},
    unique_id{YType::uint8, "unique-id"},
    order_num{YType::uint8, "order-num"},
    weight{YType::uint8, "weight"},
    pic{YType::uint64, "pic"}
{

    yang_name = "bundle-member-info"; yang_parent_name = "fib-cofo-idb-table-entry"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo::~BundleMemberInfo()
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo::has_data() const
{
    if (is_presence_container) return true;
    return intf_index.is_set
	|| unique_id.is_set
	|| order_num.is_set
	|| weight.is_set
	|| pic.is_set;
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(intf_index.yfilter)
	|| ydk::is_set(unique_id.yfilter)
	|| ydk::is_set(order_num.yfilter)
	|| ydk::is_set(weight.yfilter)
	|| ydk::is_set(pic.yfilter);
}

std::string Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bundle-member-info";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (intf_index.is_set || is_set(intf_index.yfilter)) leaf_name_data.push_back(intf_index.get_name_leafdata());
    if (unique_id.is_set || is_set(unique_id.yfilter)) leaf_name_data.push_back(unique_id.get_name_leafdata());
    if (order_num.is_set || is_set(order_num.yfilter)) leaf_name_data.push_back(order_num.get_name_leafdata());
    if (weight.is_set || is_set(weight.yfilter)) leaf_name_data.push_back(weight.get_name_leafdata());
    if (pic.is_set || is_set(pic.yfilter)) leaf_name_data.push_back(pic.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "intf-index")
    {
        intf_index = value;
        intf_index.value_namespace = name_space;
        intf_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unique-id")
    {
        unique_id = value;
        unique_id.value_namespace = name_space;
        unique_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "order-num")
    {
        order_num = value;
        order_num.value_namespace = name_space;
        order_num.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight")
    {
        weight = value;
        weight.value_namespace = name_space;
        weight.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pic")
    {
        pic = value;
        pic.value_namespace = name_space;
        pic.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "intf-index")
    {
        intf_index.yfilter = yfilter;
    }
    if(value_path == "unique-id")
    {
        unique_id.yfilter = yfilter;
    }
    if(value_path == "order-num")
    {
        order_num.yfilter = yfilter;
    }
    if(value_path == "weight")
    {
        weight.yfilter = yfilter;
    }
    if(value_path == "pic")
    {
        pic.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoIdb::FibCofoIdbTableEntries::FibCofoIdbTableEntry::BundleMemberInfo::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "intf-index" || name == "unique-id" || name == "order-num" || name == "weight" || name == "pic")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableId()
    :
    fib_cofo_table_id_entries(std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries>())
    , fib_cofo_table_id_summary(std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary>())
{
    fib_cofo_table_id_entries->parent = this;
    fib_cofo_table_id_summary->parent = this;

    yang_name = "fib-cofo-table-id"; yang_parent_name = "fib-cofo"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::~FibCofoTableId()
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::has_data() const
{
    if (is_presence_container) return true;
    return (fib_cofo_table_id_entries !=  nullptr && fib_cofo_table_id_entries->has_data())
	|| (fib_cofo_table_id_summary !=  nullptr && fib_cofo_table_id_summary->has_data());
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::has_operation() const
{
    return is_set(yfilter)
	|| (fib_cofo_table_id_entries !=  nullptr && fib_cofo_table_id_entries->has_operation())
	|| (fib_cofo_table_id_summary !=  nullptr && fib_cofo_table_id_summary->has_operation());
}

std::string Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-cofo-table-id";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fib-cofo-table-id-entries")
    {
        if(fib_cofo_table_id_entries == nullptr)
        {
            fib_cofo_table_id_entries = std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries>();
        }
        return fib_cofo_table_id_entries;
    }

    if(child_yang_name == "fib-cofo-table-id-summary")
    {
        if(fib_cofo_table_id_summary == nullptr)
        {
            fib_cofo_table_id_summary = std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary>();
        }
        return fib_cofo_table_id_summary;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(fib_cofo_table_id_entries != nullptr)
    {
        _children["fib-cofo-table-id-entries"] = fib_cofo_table_id_entries;
    }

    if(fib_cofo_table_id_summary != nullptr)
    {
        _children["fib-cofo-table-id-summary"] = fib_cofo_table_id_summary;
    }

    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fib-cofo-table-id-entries" || name == "fib-cofo-table-id-summary")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntries()
    :
    fib_cofo_table_id_entry(this, {})
{

    yang_name = "fib-cofo-table-id-entries"; yang_parent_name = "fib-cofo-table-id"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::~FibCofoTableIdEntries()
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fib_cofo_table_id_entry.len(); index++)
    {
        if(fib_cofo_table_id_entry[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::has_operation() const
{
    for (std::size_t index=0; index<fib_cofo_table_id_entry.len(); index++)
    {
        if(fib_cofo_table_id_entry[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-cofo-table-id-entries";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fib-cofo-table-id-entry")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry>();
        ent_->parent = this;
        fib_cofo_table_id_entry.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : fib_cofo_table_id_entry.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fib-cofo-table-id-entry")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::FibCofoTableIdEntry()
    :
    sdr_id{YType::uint32, "sdr-id"},
    protocol{YType::enumeration, "protocol"},
    rd{YType::str, "rd"},
    table_id{YType::uint32, "table-id"},
    sdrid{YType::uint32, "sdrid"},
    protocol_type{YType::uint32, "protocol-type"},
    route_distinguisher{YType::str, "route-distinguisher"},
    table_id_xr{YType::uint32, "table-id-xr"},
    vrf_name{YType::str, "vrf-name"},
    table_pointer{YType::uint64, "table-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "fib-cofo-table-id-entry"; yang_parent_name = "fib-cofo-table-id-entries"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::~FibCofoTableIdEntry()
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::has_data() const
{
    if (is_presence_container) return true;
    return sdr_id.is_set
	|| protocol.is_set
	|| rd.is_set
	|| table_id.is_set
	|| sdrid.is_set
	|| protocol_type.is_set
	|| route_distinguisher.is_set
	|| table_id_xr.is_set
	|| vrf_name.is_set
	|| table_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(sdr_id.yfilter)
	|| ydk::is_set(protocol.yfilter)
	|| ydk::is_set(rd.yfilter)
	|| ydk::is_set(table_id.yfilter)
	|| ydk::is_set(sdrid.yfilter)
	|| ydk::is_set(protocol_type.yfilter)
	|| ydk::is_set(route_distinguisher.yfilter)
	|| ydk::is_set(table_id_xr.yfilter)
	|| ydk::is_set(vrf_name.yfilter)
	|| ydk::is_set(table_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-cofo-table-id-entry";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sdr_id.is_set || is_set(sdr_id.yfilter)) leaf_name_data.push_back(sdr_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.yfilter)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (rd.is_set || is_set(rd.yfilter)) leaf_name_data.push_back(rd.get_name_leafdata());
    if (table_id.is_set || is_set(table_id.yfilter)) leaf_name_data.push_back(table_id.get_name_leafdata());
    if (sdrid.is_set || is_set(sdrid.yfilter)) leaf_name_data.push_back(sdrid.get_name_leafdata());
    if (protocol_type.is_set || is_set(protocol_type.yfilter)) leaf_name_data.push_back(protocol_type.get_name_leafdata());
    if (route_distinguisher.is_set || is_set(route_distinguisher.yfilter)) leaf_name_data.push_back(route_distinguisher.get_name_leafdata());
    if (table_id_xr.is_set || is_set(table_id_xr.yfilter)) leaf_name_data.push_back(table_id_xr.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.yfilter)) leaf_name_data.push_back(vrf_name.get_name_leafdata());
    if (table_pointer.is_set || is_set(table_pointer.yfilter)) leaf_name_data.push_back(table_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(object_base != nullptr)
    {
        _children["object-base"] = object_base;
    }

    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "sdr-id")
    {
        sdr_id = value;
        sdr_id.value_namespace = name_space;
        sdr_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protocol")
    {
        protocol = value;
        protocol.value_namespace = name_space;
        protocol.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rd")
    {
        rd = value;
        rd.value_namespace = name_space;
        rd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "table-id")
    {
        table_id = value;
        table_id.value_namespace = name_space;
        table_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sdrid")
    {
        sdrid = value;
        sdrid.value_namespace = name_space;
        sdrid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protocol-type")
    {
        protocol_type = value;
        protocol_type.value_namespace = name_space;
        protocol_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "route-distinguisher")
    {
        route_distinguisher = value;
        route_distinguisher.value_namespace = name_space;
        route_distinguisher.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "table-id-xr")
    {
        table_id_xr = value;
        table_id_xr.value_namespace = name_space;
        table_id_xr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
        vrf_name.value_namespace = name_space;
        vrf_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "table-pointer")
    {
        table_pointer = value;
        table_pointer.value_namespace = name_space;
        table_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "sdr-id")
    {
        sdr_id.yfilter = yfilter;
    }
    if(value_path == "protocol")
    {
        protocol.yfilter = yfilter;
    }
    if(value_path == "rd")
    {
        rd.yfilter = yfilter;
    }
    if(value_path == "table-id")
    {
        table_id.yfilter = yfilter;
    }
    if(value_path == "sdrid")
    {
        sdrid.yfilter = yfilter;
    }
    if(value_path == "protocol-type")
    {
        protocol_type.yfilter = yfilter;
    }
    if(value_path == "route-distinguisher")
    {
        route_distinguisher.yfilter = yfilter;
    }
    if(value_path == "table-id-xr")
    {
        table_id_xr.yfilter = yfilter;
    }
    if(value_path == "vrf-name")
    {
        vrf_name.yfilter = yfilter;
    }
    if(value_path == "table-pointer")
    {
        table_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "sdr-id" || name == "protocol" || name == "rd" || name == "table-id" || name == "sdrid" || name == "protocol-type" || name == "route-distinguisher" || name == "table-id-xr" || name == "vrf-name" || name == "table-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "fib-cofo-table-id-entry"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdEntries::FibCofoTableIdEntry::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::FibCofoTableIdSummary()
    :
    number_of_tbl_id_allocated{YType::uint32, "number-of-tbl-id-allocated"},
    tbl_id_minimum{YType::uint32, "tbl-id-minimum"},
    tbl_id_maximum{YType::uint32, "tbl-id-maximum"},
    tbl_id_last_allocated{YType::uint32, "tbl-id-last-allocated"},
    tbl_id_default_v4{YType::uint32, "tbl-id-default-v4"},
    tbl_id_default_v6{YType::uint32, "tbl-id-default-v6"},
    number_of_tbl_id_in_gc{YType::uint32, "number-of-tbl-id-in-gc"}
        ,
    per_sdr_stat(this, {})
{

    yang_name = "fib-cofo-table-id-summary"; yang_parent_name = "fib-cofo-table-id"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::~FibCofoTableIdSummary()
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<per_sdr_stat.len(); index++)
    {
        if(per_sdr_stat[index]->has_data())
            return true;
    }
    return number_of_tbl_id_allocated.is_set
	|| tbl_id_minimum.is_set
	|| tbl_id_maximum.is_set
	|| tbl_id_last_allocated.is_set
	|| tbl_id_default_v4.is_set
	|| tbl_id_default_v6.is_set
	|| number_of_tbl_id_in_gc.is_set;
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::has_operation() const
{
    for (std::size_t index=0; index<per_sdr_stat.len(); index++)
    {
        if(per_sdr_stat[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(number_of_tbl_id_allocated.yfilter)
	|| ydk::is_set(tbl_id_minimum.yfilter)
	|| ydk::is_set(tbl_id_maximum.yfilter)
	|| ydk::is_set(tbl_id_last_allocated.yfilter)
	|| ydk::is_set(tbl_id_default_v4.yfilter)
	|| ydk::is_set(tbl_id_default_v6.yfilter)
	|| ydk::is_set(number_of_tbl_id_in_gc.yfilter);
}

std::string Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-cofo-table-id-summary";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (number_of_tbl_id_allocated.is_set || is_set(number_of_tbl_id_allocated.yfilter)) leaf_name_data.push_back(number_of_tbl_id_allocated.get_name_leafdata());
    if (tbl_id_minimum.is_set || is_set(tbl_id_minimum.yfilter)) leaf_name_data.push_back(tbl_id_minimum.get_name_leafdata());
    if (tbl_id_maximum.is_set || is_set(tbl_id_maximum.yfilter)) leaf_name_data.push_back(tbl_id_maximum.get_name_leafdata());
    if (tbl_id_last_allocated.is_set || is_set(tbl_id_last_allocated.yfilter)) leaf_name_data.push_back(tbl_id_last_allocated.get_name_leafdata());
    if (tbl_id_default_v4.is_set || is_set(tbl_id_default_v4.yfilter)) leaf_name_data.push_back(tbl_id_default_v4.get_name_leafdata());
    if (tbl_id_default_v6.is_set || is_set(tbl_id_default_v6.yfilter)) leaf_name_data.push_back(tbl_id_default_v6.get_name_leafdata());
    if (number_of_tbl_id_in_gc.is_set || is_set(number_of_tbl_id_in_gc.yfilter)) leaf_name_data.push_back(number_of_tbl_id_in_gc.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "per-sdr-stat")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat>();
        ent_->parent = this;
        per_sdr_stat.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : per_sdr_stat.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "number-of-tbl-id-allocated")
    {
        number_of_tbl_id_allocated = value;
        number_of_tbl_id_allocated.value_namespace = name_space;
        number_of_tbl_id_allocated.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tbl-id-minimum")
    {
        tbl_id_minimum = value;
        tbl_id_minimum.value_namespace = name_space;
        tbl_id_minimum.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tbl-id-maximum")
    {
        tbl_id_maximum = value;
        tbl_id_maximum.value_namespace = name_space;
        tbl_id_maximum.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tbl-id-last-allocated")
    {
        tbl_id_last_allocated = value;
        tbl_id_last_allocated.value_namespace = name_space;
        tbl_id_last_allocated.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tbl-id-default-v4")
    {
        tbl_id_default_v4 = value;
        tbl_id_default_v4.value_namespace = name_space;
        tbl_id_default_v4.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tbl-id-default-v6")
    {
        tbl_id_default_v6 = value;
        tbl_id_default_v6.value_namespace = name_space;
        tbl_id_default_v6.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-tbl-id-in-gc")
    {
        number_of_tbl_id_in_gc = value;
        number_of_tbl_id_in_gc.value_namespace = name_space;
        number_of_tbl_id_in_gc.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "number-of-tbl-id-allocated")
    {
        number_of_tbl_id_allocated.yfilter = yfilter;
    }
    if(value_path == "tbl-id-minimum")
    {
        tbl_id_minimum.yfilter = yfilter;
    }
    if(value_path == "tbl-id-maximum")
    {
        tbl_id_maximum.yfilter = yfilter;
    }
    if(value_path == "tbl-id-last-allocated")
    {
        tbl_id_last_allocated.yfilter = yfilter;
    }
    if(value_path == "tbl-id-default-v4")
    {
        tbl_id_default_v4.yfilter = yfilter;
    }
    if(value_path == "tbl-id-default-v6")
    {
        tbl_id_default_v6.yfilter = yfilter;
    }
    if(value_path == "number-of-tbl-id-in-gc")
    {
        number_of_tbl_id_in_gc.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "per-sdr-stat" || name == "number-of-tbl-id-allocated" || name == "tbl-id-minimum" || name == "tbl-id-maximum" || name == "tbl-id-last-allocated" || name == "tbl-id-default-v4" || name == "tbl-id-default-v6" || name == "number-of-tbl-id-in-gc")
        return true;
    return false;
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat::PerSdrStat()
    :
    sdrid{YType::uint32, "sdrid"},
    num_ofipv4_tables{YType::uint16, "num-ofipv4-tables"},
    num_ofipv6_tables{YType::uint16, "num-ofipv6-tables"},
    num_ofmpls_tables{YType::uint16, "num-ofmpls-tables"}
{

    yang_name = "per-sdr-stat"; yang_parent_name = "fib-cofo-table-id-summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat::~PerSdrStat()
{
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat::has_data() const
{
    if (is_presence_container) return true;
    return sdrid.is_set
	|| num_ofipv4_tables.is_set
	|| num_ofipv6_tables.is_set
	|| num_ofmpls_tables.is_set;
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(sdrid.yfilter)
	|| ydk::is_set(num_ofipv4_tables.yfilter)
	|| ydk::is_set(num_ofipv6_tables.yfilter)
	|| ydk::is_set(num_ofmpls_tables.yfilter);
}

std::string Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "per-sdr-stat";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sdrid.is_set || is_set(sdrid.yfilter)) leaf_name_data.push_back(sdrid.get_name_leafdata());
    if (num_ofipv4_tables.is_set || is_set(num_ofipv4_tables.yfilter)) leaf_name_data.push_back(num_ofipv4_tables.get_name_leafdata());
    if (num_ofipv6_tables.is_set || is_set(num_ofipv6_tables.yfilter)) leaf_name_data.push_back(num_ofipv6_tables.get_name_leafdata());
    if (num_ofmpls_tables.is_set || is_set(num_ofmpls_tables.yfilter)) leaf_name_data.push_back(num_ofmpls_tables.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "sdrid")
    {
        sdrid = value;
        sdrid.value_namespace = name_space;
        sdrid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "num-ofipv4-tables")
    {
        num_ofipv4_tables = value;
        num_ofipv4_tables.value_namespace = name_space;
        num_ofipv4_tables.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "num-ofipv6-tables")
    {
        num_ofipv6_tables = value;
        num_ofipv6_tables.value_namespace = name_space;
        num_ofipv6_tables.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "num-ofmpls-tables")
    {
        num_ofmpls_tables = value;
        num_ofmpls_tables.value_namespace = name_space;
        num_ofmpls_tables.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "sdrid")
    {
        sdrid.yfilter = yfilter;
    }
    if(value_path == "num-ofipv4-tables")
    {
        num_ofipv4_tables.yfilter = yfilter;
    }
    if(value_path == "num-ofipv6-tables")
    {
        num_ofipv6_tables.yfilter = yfilter;
    }
    if(value_path == "num-ofmpls-tables")
    {
        num_ofmpls_tables.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::FibCofo::FibCofoTableId::FibCofoTableIdSummary::PerSdrStat::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sdrid" || name == "num-ofipv4-tables" || name == "num-ofipv6-tables" || name == "num-ofmpls-tables")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Summary()
    :
    total(std::make_shared<Fib::Nodes::Node::Global::Summary::Total>())
    , protos(std::make_shared<Fib::Nodes::Node::Global::Summary::Protos>())
{
    total->parent = this;
    protos->parent = this;

    yang_name = "summary"; yang_parent_name = "global"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::~Summary()
{
}

bool Fib::Nodes::Node::Global::Summary::has_data() const
{
    if (is_presence_container) return true;
    return (total !=  nullptr && total->has_data())
	|| (protos !=  nullptr && protos->has_data());
}

bool Fib::Nodes::Node::Global::Summary::has_operation() const
{
    return is_set(yfilter)
	|| (total !=  nullptr && total->has_operation())
	|| (protos !=  nullptr && protos->has_operation());
}

std::string Fib::Nodes::Node::Global::Summary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "summary";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "total")
    {
        if(total == nullptr)
        {
            total = std::make_shared<Fib::Nodes::Node::Global::Summary::Total>();
        }
        return total;
    }

    if(child_yang_name == "protos")
    {
        if(protos == nullptr)
        {
            protos = std::make_shared<Fib::Nodes::Node::Global::Summary::Protos>();
        }
        return protos;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(total != nullptr)
    {
        _children["total"] = total;
    }

    if(protos != nullptr)
    {
        _children["protos"] = protos;
    }

    return _children;
}

void Fib::Nodes::Node::Global::Summary::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::Summary::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::Summary::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "total" || name == "protos")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Total::Total()
    :
    common_info(std::make_shared<Fib::Nodes::Node::Global::Summary::Total::CommonInfo>())
    , total_counters(std::make_shared<Fib::Nodes::Node::Global::Summary::Total::TotalCounters>())
{
    common_info->parent = this;
    total_counters->parent = this;

    yang_name = "total"; yang_parent_name = "summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Total::~Total()
{
}

bool Fib::Nodes::Node::Global::Summary::Total::has_data() const
{
    if (is_presence_container) return true;
    return (common_info !=  nullptr && common_info->has_data())
	|| (total_counters !=  nullptr && total_counters->has_data());
}

bool Fib::Nodes::Node::Global::Summary::Total::has_operation() const
{
    return is_set(yfilter)
	|| (common_info !=  nullptr && common_info->has_operation())
	|| (total_counters !=  nullptr && total_counters->has_operation());
}

std::string Fib::Nodes::Node::Global::Summary::Total::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "total";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Total::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Total::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "common-info")
    {
        if(common_info == nullptr)
        {
            common_info = std::make_shared<Fib::Nodes::Node::Global::Summary::Total::CommonInfo>();
        }
        return common_info;
    }

    if(child_yang_name == "total-counters")
    {
        if(total_counters == nullptr)
        {
            total_counters = std::make_shared<Fib::Nodes::Node::Global::Summary::Total::TotalCounters>();
        }
        return total_counters;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Total::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(common_info != nullptr)
    {
        _children["common-info"] = common_info;
    }

    if(total_counters != nullptr)
    {
        _children["total-counters"] = total_counters;
    }

    return _children;
}

void Fib::Nodes::Node::Global::Summary::Total::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::Summary::Total::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::Summary::Total::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "common-info" || name == "total-counters")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Total::CommonInfo::CommonInfo()
    :
    count{YType::uint32, "count"}
{

    yang_name = "common-info"; yang_parent_name = "total"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Total::CommonInfo::~CommonInfo()
{
}

bool Fib::Nodes::Node::Global::Summary::Total::CommonInfo::has_data() const
{
    if (is_presence_container) return true;
    return count.is_set;
}

bool Fib::Nodes::Node::Global::Summary::Total::CommonInfo::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(count.yfilter);
}

std::string Fib::Nodes::Node::Global::Summary::Total::CommonInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "common-info";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Total::CommonInfo::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (count.is_set || is_set(count.yfilter)) leaf_name_data.push_back(count.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Total::CommonInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Total::CommonInfo::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::Summary::Total::CommonInfo::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "count")
    {
        count = value;
        count.value_namespace = name_space;
        count.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::Summary::Total::CommonInfo::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "count")
    {
        count.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::Summary::Total::CommonInfo::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "count")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Total::TotalCounters::TotalCounters()
    :
    num_retry_timeouts{YType::uint64, "num-retry-timeouts"},
    num_retry_ojbects{YType::uint32, "num-retry-ojbects"}
        ,
    array_number_of_retry(this, {})
    , array_number_of_object(this, {})
{

    yang_name = "total-counters"; yang_parent_name = "total"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Total::TotalCounters::~TotalCounters()
{
}

bool Fib::Nodes::Node::Global::Summary::Total::TotalCounters::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<array_number_of_retry.len(); index++)
    {
        if(array_number_of_retry[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<array_number_of_object.len(); index++)
    {
        if(array_number_of_object[index]->has_data())
            return true;
    }
    return num_retry_timeouts.is_set
	|| num_retry_ojbects.is_set;
}

bool Fib::Nodes::Node::Global::Summary::Total::TotalCounters::has_operation() const
{
    for (std::size_t index=0; index<array_number_of_retry.len(); index++)
    {
        if(array_number_of_retry[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<array_number_of_object.len(); index++)
    {
        if(array_number_of_object[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(num_retry_timeouts.yfilter)
	|| ydk::is_set(num_retry_ojbects.yfilter);
}

std::string Fib::Nodes::Node::Global::Summary::Total::TotalCounters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "total-counters";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Total::TotalCounters::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (num_retry_timeouts.is_set || is_set(num_retry_timeouts.yfilter)) leaf_name_data.push_back(num_retry_timeouts.get_name_leafdata());
    if (num_retry_ojbects.is_set || is_set(num_retry_ojbects.yfilter)) leaf_name_data.push_back(num_retry_ojbects.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Total::TotalCounters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "array-number-of-retry")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry>();
        ent_->parent = this;
        array_number_of_retry.append(ent_);
        return ent_;
    }

    if(child_yang_name == "array-number-of-object")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject>();
        ent_->parent = this;
        array_number_of_object.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Total::TotalCounters::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : array_number_of_retry.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : array_number_of_object.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Global::Summary::Total::TotalCounters::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "num-retry-timeouts")
    {
        num_retry_timeouts = value;
        num_retry_timeouts.value_namespace = name_space;
        num_retry_timeouts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "num-retry-ojbects")
    {
        num_retry_ojbects = value;
        num_retry_ojbects.value_namespace = name_space;
        num_retry_ojbects.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::Summary::Total::TotalCounters::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "num-retry-timeouts")
    {
        num_retry_timeouts.yfilter = yfilter;
    }
    if(value_path == "num-retry-ojbects")
    {
        num_retry_ojbects.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::Summary::Total::TotalCounters::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "array-number-of-retry" || name == "array-number-of-object" || name == "num-retry-timeouts" || name == "num-retry-ojbects")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry::ArrayNumberOfRetry()
    :
    retry_object_type{YType::str, "retry-object-type"},
    num_retries{YType::uint64, "num-retries"}
{

    yang_name = "array-number-of-retry"; yang_parent_name = "total-counters"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry::~ArrayNumberOfRetry()
{
}

bool Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry::has_data() const
{
    if (is_presence_container) return true;
    return retry_object_type.is_set
	|| num_retries.is_set;
}

bool Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(retry_object_type.yfilter)
	|| ydk::is_set(num_retries.yfilter);
}

std::string Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "array-number-of-retry";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (retry_object_type.is_set || is_set(retry_object_type.yfilter)) leaf_name_data.push_back(retry_object_type.get_name_leafdata());
    if (num_retries.is_set || is_set(num_retries.yfilter)) leaf_name_data.push_back(num_retries.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "retry-object-type")
    {
        retry_object_type = value;
        retry_object_type.value_namespace = name_space;
        retry_object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "num-retries")
    {
        num_retries = value;
        num_retries.value_namespace = name_space;
        num_retries.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "retry-object-type")
    {
        retry_object_type.yfilter = yfilter;
    }
    if(value_path == "num-retries")
    {
        num_retries.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfRetry::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "retry-object-type" || name == "num-retries")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject::ArrayNumberOfObject()
    :
    object_type{YType::str, "object-type"},
    num_objects{YType::uint32, "num-objects"}
{

    yang_name = "array-number-of-object"; yang_parent_name = "total-counters"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject::~ArrayNumberOfObject()
{
}

bool Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject::has_data() const
{
    if (is_presence_container) return true;
    return object_type.is_set
	|| num_objects.is_set;
}

bool Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(num_objects.yfilter);
}

std::string Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "array-number-of-object";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (num_objects.is_set || is_set(num_objects.yfilter)) leaf_name_data.push_back(num_objects.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "num-objects")
    {
        num_objects = value;
        num_objects.value_namespace = name_space;
        num_objects.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "num-objects")
    {
        num_objects.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::Summary::Total::TotalCounters::ArrayNumberOfObject::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-type" || name == "num-objects")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Protos::Protos()
    :
    proto(this, {"protocol_name"})
{

    yang_name = "protos"; yang_parent_name = "summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Protos::~Protos()
{
}

bool Fib::Nodes::Node::Global::Summary::Protos::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<proto.len(); index++)
    {
        if(proto[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Global::Summary::Protos::has_operation() const
{
    for (std::size_t index=0; index<proto.len(); index++)
    {
        if(proto[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Global::Summary::Protos::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "protos";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Protos::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Protos::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "proto")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto>();
        ent_->parent = this;
        proto.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Protos::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : proto.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Global::Summary::Protos::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::Summary::Protos::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::Summary::Protos::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "proto")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Proto()
    :
    protocol_name{YType::enumeration, "protocol-name"}
        ,
    common_info(std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo>())
    , summary(std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_>())
{
    common_info->parent = this;
    summary->parent = this;

    yang_name = "proto"; yang_parent_name = "protos"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::~Proto()
{
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::has_data() const
{
    if (is_presence_container) return true;
    return protocol_name.is_set
	|| (common_info !=  nullptr && common_info->has_data())
	|| (summary !=  nullptr && summary->has_data());
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(protocol_name.yfilter)
	|| (common_info !=  nullptr && common_info->has_operation())
	|| (summary !=  nullptr && summary->has_operation());
}

std::string Fib::Nodes::Node::Global::Summary::Protos::Proto::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "proto";
    ADD_KEY_TOKEN(protocol_name, "protocol-name");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Protos::Proto::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (protocol_name.is_set || is_set(protocol_name.yfilter)) leaf_name_data.push_back(protocol_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Protos::Proto::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "common-info")
    {
        if(common_info == nullptr)
        {
            common_info = std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo>();
        }
        return common_info;
    }

    if(child_yang_name == "summary")
    {
        if(summary == nullptr)
        {
            summary = std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_>();
        }
        return summary;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Protos::Proto::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(common_info != nullptr)
    {
        _children["common-info"] = common_info;
    }

    if(summary != nullptr)
    {
        _children["summary"] = summary;
    }

    return _children;
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "protocol-name")
    {
        protocol_name = value;
        protocol_name.value_namespace = name_space;
        protocol_name.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "protocol-name")
    {
        protocol_name.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "common-info" || name == "summary" || name == "protocol-name")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo::CommonInfo()
    :
    count{YType::uint32, "count"}
{

    yang_name = "common-info"; yang_parent_name = "proto"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo::~CommonInfo()
{
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo::has_data() const
{
    if (is_presence_container) return true;
    return count.is_set;
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(count.yfilter);
}

std::string Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "common-info";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (count.is_set || is_set(count.yfilter)) leaf_name_data.push_back(count.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "count")
    {
        count = value;
        count.value_namespace = name_space;
        count.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "count")
    {
        count.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::CommonInfo::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "count")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Summary_()
    :
    base_object(std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject>())
    , summary_counts(std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts>())
    , health(std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health>())
{
    base_object->parent = this;
    summary_counts->parent = this;
    health->parent = this;

    yang_name = "summary"; yang_parent_name = "proto"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::~Summary_()
{
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::has_data() const
{
    if (is_presence_container) return true;
    return (base_object !=  nullptr && base_object->has_data())
	|| (summary_counts !=  nullptr && summary_counts->has_data())
	|| (health !=  nullptr && health->has_data());
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::has_operation() const
{
    return is_set(yfilter)
	|| (base_object !=  nullptr && base_object->has_operation())
	|| (summary_counts !=  nullptr && summary_counts->has_operation())
	|| (health !=  nullptr && health->has_operation());
}

std::string Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "summary";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "base-object")
    {
        if(base_object == nullptr)
        {
            base_object = std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject>();
        }
        return base_object;
    }

    if(child_yang_name == "summary-counts")
    {
        if(summary_counts == nullptr)
        {
            summary_counts = std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts>();
        }
        return summary_counts;
    }

    if(child_yang_name == "health")
    {
        if(health == nullptr)
        {
            health = std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health>();
        }
        return health;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(base_object != nullptr)
    {
        _children["base-object"] = base_object;
    }

    if(summary_counts != nullptr)
    {
        _children["summary-counts"] = summary_counts;
    }

    if(health != nullptr)
    {
        _children["health"] = health;
    }

    return _children;
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "base-object" || name == "summary-counts" || name == "health")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject::BaseObject()
    :
    protocol{YType::uint32, "protocol"}
{

    yang_name = "base-object"; yang_parent_name = "summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject::~BaseObject()
{
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject::has_data() const
{
    if (is_presence_container) return true;
    return protocol.is_set;
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(protocol.yfilter);
}

std::string Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "base-object";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (protocol.is_set || is_set(protocol.yfilter)) leaf_name_data.push_back(protocol.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "protocol")
    {
        protocol = value;
        protocol.value_namespace = name_space;
        protocol.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "protocol")
    {
        protocol.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::BaseObject::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "protocol")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::SummaryCounts()
    :
    num_retry_timeouts{YType::uint64, "num-retry-timeouts"},
    num_retry_ojbects{YType::uint32, "num-retry-ojbects"}
        ,
    array_number_of_retry(this, {})
    , array_number_of_object(this, {})
{

    yang_name = "summary-counts"; yang_parent_name = "summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::~SummaryCounts()
{
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<array_number_of_retry.len(); index++)
    {
        if(array_number_of_retry[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<array_number_of_object.len(); index++)
    {
        if(array_number_of_object[index]->has_data())
            return true;
    }
    return num_retry_timeouts.is_set
	|| num_retry_ojbects.is_set;
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::has_operation() const
{
    for (std::size_t index=0; index<array_number_of_retry.len(); index++)
    {
        if(array_number_of_retry[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<array_number_of_object.len(); index++)
    {
        if(array_number_of_object[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(num_retry_timeouts.yfilter)
	|| ydk::is_set(num_retry_ojbects.yfilter);
}

std::string Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "summary-counts";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (num_retry_timeouts.is_set || is_set(num_retry_timeouts.yfilter)) leaf_name_data.push_back(num_retry_timeouts.get_name_leafdata());
    if (num_retry_ojbects.is_set || is_set(num_retry_ojbects.yfilter)) leaf_name_data.push_back(num_retry_ojbects.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "array-number-of-retry")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry>();
        ent_->parent = this;
        array_number_of_retry.append(ent_);
        return ent_;
    }

    if(child_yang_name == "array-number-of-object")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject>();
        ent_->parent = this;
        array_number_of_object.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : array_number_of_retry.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : array_number_of_object.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "num-retry-timeouts")
    {
        num_retry_timeouts = value;
        num_retry_timeouts.value_namespace = name_space;
        num_retry_timeouts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "num-retry-ojbects")
    {
        num_retry_ojbects = value;
        num_retry_ojbects.value_namespace = name_space;
        num_retry_ojbects.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "num-retry-timeouts")
    {
        num_retry_timeouts.yfilter = yfilter;
    }
    if(value_path == "num-retry-ojbects")
    {
        num_retry_ojbects.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "array-number-of-retry" || name == "array-number-of-object" || name == "num-retry-timeouts" || name == "num-retry-ojbects")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry::ArrayNumberOfRetry()
    :
    retry_object_type{YType::str, "retry-object-type"},
    num_retries{YType::uint64, "num-retries"}
{

    yang_name = "array-number-of-retry"; yang_parent_name = "summary-counts"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry::~ArrayNumberOfRetry()
{
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry::has_data() const
{
    if (is_presence_container) return true;
    return retry_object_type.is_set
	|| num_retries.is_set;
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(retry_object_type.yfilter)
	|| ydk::is_set(num_retries.yfilter);
}

std::string Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "array-number-of-retry";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (retry_object_type.is_set || is_set(retry_object_type.yfilter)) leaf_name_data.push_back(retry_object_type.get_name_leafdata());
    if (num_retries.is_set || is_set(num_retries.yfilter)) leaf_name_data.push_back(num_retries.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "retry-object-type")
    {
        retry_object_type = value;
        retry_object_type.value_namespace = name_space;
        retry_object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "num-retries")
    {
        num_retries = value;
        num_retries.value_namespace = name_space;
        num_retries.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "retry-object-type")
    {
        retry_object_type.yfilter = yfilter;
    }
    if(value_path == "num-retries")
    {
        num_retries.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfRetry::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "retry-object-type" || name == "num-retries")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject::ArrayNumberOfObject()
    :
    object_type{YType::str, "object-type"},
    num_objects{YType::uint32, "num-objects"}
{

    yang_name = "array-number-of-object"; yang_parent_name = "summary-counts"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject::~ArrayNumberOfObject()
{
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject::has_data() const
{
    if (is_presence_container) return true;
    return object_type.is_set
	|| num_objects.is_set;
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(num_objects.yfilter);
}

std::string Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "array-number-of-object";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (num_objects.is_set || is_set(num_objects.yfilter)) leaf_name_data.push_back(num_objects.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "num-objects")
    {
        num_objects = value;
        num_objects.value_namespace = name_space;
        num_objects.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "num-objects")
    {
        num_objects.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::SummaryCounts::ArrayNumberOfObject::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-type" || name == "num-objects")
        return true;
    return false;
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health::Health()
    :
    is_retry_db_empty{YType::boolean, "is-retry-db-empty"}
{

    yang_name = "health"; yang_parent_name = "summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health::~Health()
{
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health::has_data() const
{
    if (is_presence_container) return true;
    return is_retry_db_empty.is_set;
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(is_retry_db_empty.yfilter);
}

std::string Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "health";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_retry_db_empty.is_set || is_set(is_retry_db_empty.yfilter)) leaf_name_data.push_back(is_retry_db_empty.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "is-retry-db-empty")
    {
        is_retry_db_empty = value;
        is_retry_db_empty.value_namespace = name_space;
        is_retry_db_empty.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "is-retry-db-empty")
    {
        is_retry_db_empty.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::Summary::Protos::Proto::Summary_::Health::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "is-retry-db-empty")
        return true;
    return false;
}

Fib::Nodes::Node::Global::ObjectHistory::ObjectHistory()
    :
    obj_history_protos(std::make_shared<Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos>())
{
    obj_history_protos->parent = this;

    yang_name = "object-history"; yang_parent_name = "global"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::ObjectHistory::~ObjectHistory()
{
}

bool Fib::Nodes::Node::Global::ObjectHistory::has_data() const
{
    if (is_presence_container) return true;
    return (obj_history_protos !=  nullptr && obj_history_protos->has_data());
}

bool Fib::Nodes::Node::Global::ObjectHistory::has_operation() const
{
    return is_set(yfilter)
	|| (obj_history_protos !=  nullptr && obj_history_protos->has_operation());
}

std::string Fib::Nodes::Node::Global::ObjectHistory::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-history";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::ObjectHistory::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::ObjectHistory::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "obj-history-protos")
    {
        if(obj_history_protos == nullptr)
        {
            obj_history_protos = std::make_shared<Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos>();
        }
        return obj_history_protos;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::ObjectHistory::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(obj_history_protos != nullptr)
    {
        _children["obj-history-protos"] = obj_history_protos;
    }

    return _children;
}

void Fib::Nodes::Node::Global::ObjectHistory::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::ObjectHistory::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::ObjectHistory::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "obj-history-protos")
        return true;
    return false;
}

Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProtos()
    :
    obj_history_proto(this, {"protocol_name"})
{

    yang_name = "obj-history-protos"; yang_parent_name = "object-history"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::~ObjHistoryProtos()
{
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<obj_history_proto.len(); index++)
    {
        if(obj_history_proto[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::has_operation() const
{
    for (std::size_t index=0; index<obj_history_proto.len(); index++)
    {
        if(obj_history_proto[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "obj-history-protos";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "obj-history-proto")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto>();
        ent_->parent = this;
        obj_history_proto.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : obj_history_proto.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "obj-history-proto")
        return true;
    return false;
}

Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjHistoryProto()
    :
    protocol_name{YType::enumeration, "protocol-name"}
        ,
    base_object(std::make_shared<Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject>())
    , object_history(std::make_shared<Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_>())
{
    base_object->parent = this;
    object_history->parent = this;

    yang_name = "obj-history-proto"; yang_parent_name = "obj-history-protos"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::~ObjHistoryProto()
{
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::has_data() const
{
    if (is_presence_container) return true;
    return protocol_name.is_set
	|| (base_object !=  nullptr && base_object->has_data())
	|| (object_history !=  nullptr && object_history->has_data());
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(protocol_name.yfilter)
	|| (base_object !=  nullptr && base_object->has_operation())
	|| (object_history !=  nullptr && object_history->has_operation());
}

std::string Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "obj-history-proto";
    ADD_KEY_TOKEN(protocol_name, "protocol-name");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (protocol_name.is_set || is_set(protocol_name.yfilter)) leaf_name_data.push_back(protocol_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "base-object")
    {
        if(base_object == nullptr)
        {
            base_object = std::make_shared<Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject>();
        }
        return base_object;
    }

    if(child_yang_name == "object-history")
    {
        if(object_history == nullptr)
        {
            object_history = std::make_shared<Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_>();
        }
        return object_history;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(base_object != nullptr)
    {
        _children["base-object"] = base_object;
    }

    if(object_history != nullptr)
    {
        _children["object-history"] = object_history;
    }

    return _children;
}

void Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "protocol-name")
    {
        protocol_name = value;
        protocol_name.value_namespace = name_space;
        protocol_name.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "protocol-name")
    {
        protocol_name.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "base-object" || name == "object-history" || name == "protocol-name")
        return true;
    return false;
}

Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject::BaseObject()
    :
    protocol{YType::uint32, "protocol"}
{

    yang_name = "base-object"; yang_parent_name = "obj-history-proto"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject::~BaseObject()
{
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject::has_data() const
{
    if (is_presence_container) return true;
    return protocol.is_set;
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(protocol.yfilter);
}

std::string Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "base-object";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (protocol.is_set || is_set(protocol.yfilter)) leaf_name_data.push_back(protocol.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "protocol")
    {
        protocol = value;
        protocol.value_namespace = name_space;
        protocol.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "protocol")
    {
        protocol.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::BaseObject::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "protocol")
        return true;
    return false;
}

Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_::ObjectHistory_()
    :
    count{YType::uint32, "count"}
{

    yang_name = "object-history"; yang_parent_name = "obj-history-proto"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_::~ObjectHistory_()
{
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_::has_data() const
{
    if (is_presence_container) return true;
    return count.is_set;
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(count.yfilter);
}

std::string Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-history";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (count.is_set || is_set(count.yfilter)) leaf_name_data.push_back(count.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "count")
    {
        count = value;
        count.value_namespace = name_space;
        count.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "count")
    {
        count.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Global::ObjectHistory::ObjHistoryProtos::ObjHistoryProto::ObjectHistory_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "count")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocols()
    :
    protocol(this, {"protocol_name"})
{

    yang_name = "protocols"; yang_parent_name = "node"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::~Protocols()
{
}

bool Fib::Nodes::Node::Protocols::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<protocol.len(); index++)
    {
        if(protocol[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::has_operation() const
{
    for (std::size_t index=0; index<protocol.len(); index++)
    {
        if(protocol[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "protocols";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "protocol")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol>();
        ent_->parent = this;
        protocol.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : protocol.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "protocol")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Protocol()
    :
    protocol_name{YType::enumeration, "protocol-name"}
        ,
    issu_state(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::IssuState>())
    , resource(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource>())
    , fib_summaries(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries>())
    , external_summary_all(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll>())
    , frr_log(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrLog>())
    , vrfs(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs>())
    , exact_routes(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes>())
    , protocol_global(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal>())
    , nh_ids(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::NhIds>())
    , frr_nhinfo_pendings(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrNhinfoPendings>())
    , external_client_summaries(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries>())
    , misc(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc>())
    , local_label(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::LocalLabel>())
{
    issu_state->parent = this;
    resource->parent = this;
    fib_summaries->parent = this;
    external_summary_all->parent = this;
    frr_log->parent = this;
    vrfs->parent = this;
    exact_routes->parent = this;
    protocol_global->parent = this;
    nh_ids->parent = this;
    frr_nhinfo_pendings->parent = this;
    external_client_summaries->parent = this;
    misc->parent = this;
    local_label->parent = this;

    yang_name = "protocol"; yang_parent_name = "protocols"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::~Protocol()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::has_data() const
{
    if (is_presence_container) return true;
    return protocol_name.is_set
	|| (issu_state !=  nullptr && issu_state->has_data())
	|| (resource !=  nullptr && resource->has_data())
	|| (fib_summaries !=  nullptr && fib_summaries->has_data())
	|| (external_summary_all !=  nullptr && external_summary_all->has_data())
	|| (frr_log !=  nullptr && frr_log->has_data())
	|| (vrfs !=  nullptr && vrfs->has_data())
	|| (exact_routes !=  nullptr && exact_routes->has_data())
	|| (protocol_global !=  nullptr && protocol_global->has_data())
	|| (nh_ids !=  nullptr && nh_ids->has_data())
	|| (frr_nhinfo_pendings !=  nullptr && frr_nhinfo_pendings->has_data())
	|| (external_client_summaries !=  nullptr && external_client_summaries->has_data())
	|| (misc !=  nullptr && misc->has_data())
	|| (local_label !=  nullptr && local_label->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(protocol_name.yfilter)
	|| (issu_state !=  nullptr && issu_state->has_operation())
	|| (resource !=  nullptr && resource->has_operation())
	|| (fib_summaries !=  nullptr && fib_summaries->has_operation())
	|| (external_summary_all !=  nullptr && external_summary_all->has_operation())
	|| (frr_log !=  nullptr && frr_log->has_operation())
	|| (vrfs !=  nullptr && vrfs->has_operation())
	|| (exact_routes !=  nullptr && exact_routes->has_operation())
	|| (protocol_global !=  nullptr && protocol_global->has_operation())
	|| (nh_ids !=  nullptr && nh_ids->has_operation())
	|| (frr_nhinfo_pendings !=  nullptr && frr_nhinfo_pendings->has_operation())
	|| (external_client_summaries !=  nullptr && external_client_summaries->has_operation())
	|| (misc !=  nullptr && misc->has_operation())
	|| (local_label !=  nullptr && local_label->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "protocol";
    ADD_KEY_TOKEN(protocol_name, "protocol-name");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (protocol_name.is_set || is_set(protocol_name.yfilter)) leaf_name_data.push_back(protocol_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "issu-state")
    {
        if(issu_state == nullptr)
        {
            issu_state = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::IssuState>();
        }
        return issu_state;
    }

    if(child_yang_name == "resource")
    {
        if(resource == nullptr)
        {
            resource = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource>();
        }
        return resource;
    }

    if(child_yang_name == "fib-summaries")
    {
        if(fib_summaries == nullptr)
        {
            fib_summaries = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries>();
        }
        return fib_summaries;
    }

    if(child_yang_name == "external-summary-all")
    {
        if(external_summary_all == nullptr)
        {
            external_summary_all = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll>();
        }
        return external_summary_all;
    }

    if(child_yang_name == "frr-log")
    {
        if(frr_log == nullptr)
        {
            frr_log = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrLog>();
        }
        return frr_log;
    }

    if(child_yang_name == "vrfs")
    {
        if(vrfs == nullptr)
        {
            vrfs = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs>();
        }
        return vrfs;
    }

    if(child_yang_name == "exact-routes")
    {
        if(exact_routes == nullptr)
        {
            exact_routes = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExactRoutes>();
        }
        return exact_routes;
    }

    if(child_yang_name == "protocol-global")
    {
        if(protocol_global == nullptr)
        {
            protocol_global = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ProtocolGlobal>();
        }
        return protocol_global;
    }

    if(child_yang_name == "nh-ids")
    {
        if(nh_ids == nullptr)
        {
            nh_ids = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::NhIds>();
        }
        return nh_ids;
    }

    if(child_yang_name == "frr-nhinfo-pendings")
    {
        if(frr_nhinfo_pendings == nullptr)
        {
            frr_nhinfo_pendings = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrNhinfoPendings>();
        }
        return frr_nhinfo_pendings;
    }

    if(child_yang_name == "external-client-summaries")
    {
        if(external_client_summaries == nullptr)
        {
            external_client_summaries = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExternalClientSummaries>();
        }
        return external_client_summaries;
    }

    if(child_yang_name == "misc")
    {
        if(misc == nullptr)
        {
            misc = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Misc>();
        }
        return misc;
    }

    if(child_yang_name == "local-label")
    {
        if(local_label == nullptr)
        {
            local_label = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::LocalLabel>();
        }
        return local_label;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(issu_state != nullptr)
    {
        _children["issu-state"] = issu_state;
    }

    if(resource != nullptr)
    {
        _children["resource"] = resource;
    }

    if(fib_summaries != nullptr)
    {
        _children["fib-summaries"] = fib_summaries;
    }

    if(external_summary_all != nullptr)
    {
        _children["external-summary-all"] = external_summary_all;
    }

    if(frr_log != nullptr)
    {
        _children["frr-log"] = frr_log;
    }

    if(vrfs != nullptr)
    {
        _children["vrfs"] = vrfs;
    }

    if(exact_routes != nullptr)
    {
        _children["exact-routes"] = exact_routes;
    }

    if(protocol_global != nullptr)
    {
        _children["protocol-global"] = protocol_global;
    }

    if(nh_ids != nullptr)
    {
        _children["nh-ids"] = nh_ids;
    }

    if(frr_nhinfo_pendings != nullptr)
    {
        _children["frr-nhinfo-pendings"] = frr_nhinfo_pendings;
    }

    if(external_client_summaries != nullptr)
    {
        _children["external-client-summaries"] = external_client_summaries;
    }

    if(misc != nullptr)
    {
        _children["misc"] = misc;
    }

    if(local_label != nullptr)
    {
        _children["local-label"] = local_label;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "protocol-name")
    {
        protocol_name = value;
        protocol_name.value_namespace = name_space;
        protocol_name.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "protocol-name")
    {
        protocol_name.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "issu-state" || name == "resource" || name == "fib-summaries" || name == "external-summary-all" || name == "frr-log" || name == "vrfs" || name == "exact-routes" || name == "protocol-global" || name == "nh-ids" || name == "frr-nhinfo-pendings" || name == "external-client-summaries" || name == "misc" || name == "local-label" || name == "protocol-name")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::IssuState::IssuState()
    :
    imdr_support{YType::boolean, "imdr-support"},
    slc_support{YType::boolean, "slc-support"},
    fis_issu_restart{YType::boolean, "fis-issu-restart"},
    imdr_eoc_implicit{YType::boolean, "imdr-eoc-implicit"},
    slc_eoc_implicit{YType::boolean, "slc-eoc-implicit"},
    eoc_received_imdr_time_stamp{YType::str, "eoc-received-imdr-time-stamp"},
    eoc_received_slc_time_stamp{YType::str, "eoc-received-slc-time-stamp"},
    eod_received_im_time_stamp{YType::str, "eod-received-im-time-stamp"},
    eod_sent_imdr_time_stamp{YType::str, "eod-sent-imdr-time-stamp"},
    eod_sent_slc_time_stamp{YType::str, "eod-sent-slc-time-stamp"},
    fis_issu_error_ts{YType::uint64, "fis-issu-error-ts"}
        ,
    fis_proto_state(this, {})
{

    yang_name = "issu-state"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::IssuState::~IssuState()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::IssuState::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fis_proto_state.len(); index++)
    {
        if(fis_proto_state[index]->has_data())
            return true;
    }
    return imdr_support.is_set
	|| slc_support.is_set
	|| fis_issu_restart.is_set
	|| imdr_eoc_implicit.is_set
	|| slc_eoc_implicit.is_set
	|| eoc_received_imdr_time_stamp.is_set
	|| eoc_received_slc_time_stamp.is_set
	|| eod_received_im_time_stamp.is_set
	|| eod_sent_imdr_time_stamp.is_set
	|| eod_sent_slc_time_stamp.is_set
	|| fis_issu_error_ts.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::IssuState::has_operation() const
{
    for (std::size_t index=0; index<fis_proto_state.len(); index++)
    {
        if(fis_proto_state[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(imdr_support.yfilter)
	|| ydk::is_set(slc_support.yfilter)
	|| ydk::is_set(fis_issu_restart.yfilter)
	|| ydk::is_set(imdr_eoc_implicit.yfilter)
	|| ydk::is_set(slc_eoc_implicit.yfilter)
	|| ydk::is_set(eoc_received_imdr_time_stamp.yfilter)
	|| ydk::is_set(eoc_received_slc_time_stamp.yfilter)
	|| ydk::is_set(eod_received_im_time_stamp.yfilter)
	|| ydk::is_set(eod_sent_imdr_time_stamp.yfilter)
	|| ydk::is_set(eod_sent_slc_time_stamp.yfilter)
	|| ydk::is_set(fis_issu_error_ts.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::IssuState::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "issu-state";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::IssuState::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (imdr_support.is_set || is_set(imdr_support.yfilter)) leaf_name_data.push_back(imdr_support.get_name_leafdata());
    if (slc_support.is_set || is_set(slc_support.yfilter)) leaf_name_data.push_back(slc_support.get_name_leafdata());
    if (fis_issu_restart.is_set || is_set(fis_issu_restart.yfilter)) leaf_name_data.push_back(fis_issu_restart.get_name_leafdata());
    if (imdr_eoc_implicit.is_set || is_set(imdr_eoc_implicit.yfilter)) leaf_name_data.push_back(imdr_eoc_implicit.get_name_leafdata());
    if (slc_eoc_implicit.is_set || is_set(slc_eoc_implicit.yfilter)) leaf_name_data.push_back(slc_eoc_implicit.get_name_leafdata());
    if (eoc_received_imdr_time_stamp.is_set || is_set(eoc_received_imdr_time_stamp.yfilter)) leaf_name_data.push_back(eoc_received_imdr_time_stamp.get_name_leafdata());
    if (eoc_received_slc_time_stamp.is_set || is_set(eoc_received_slc_time_stamp.yfilter)) leaf_name_data.push_back(eoc_received_slc_time_stamp.get_name_leafdata());
    if (eod_received_im_time_stamp.is_set || is_set(eod_received_im_time_stamp.yfilter)) leaf_name_data.push_back(eod_received_im_time_stamp.get_name_leafdata());
    if (eod_sent_imdr_time_stamp.is_set || is_set(eod_sent_imdr_time_stamp.yfilter)) leaf_name_data.push_back(eod_sent_imdr_time_stamp.get_name_leafdata());
    if (eod_sent_slc_time_stamp.is_set || is_set(eod_sent_slc_time_stamp.yfilter)) leaf_name_data.push_back(eod_sent_slc_time_stamp.get_name_leafdata());
    if (fis_issu_error_ts.is_set || is_set(fis_issu_error_ts.yfilter)) leaf_name_data.push_back(fis_issu_error_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::IssuState::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fis-proto-state")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState>();
        ent_->parent = this;
        fis_proto_state.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::IssuState::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : fis_proto_state.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::IssuState::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "imdr-support")
    {
        imdr_support = value;
        imdr_support.value_namespace = name_space;
        imdr_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "slc-support")
    {
        slc_support = value;
        slc_support.value_namespace = name_space;
        slc_support.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fis-issu-restart")
    {
        fis_issu_restart = value;
        fis_issu_restart.value_namespace = name_space;
        fis_issu_restart.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "imdr-eoc-implicit")
    {
        imdr_eoc_implicit = value;
        imdr_eoc_implicit.value_namespace = name_space;
        imdr_eoc_implicit.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "slc-eoc-implicit")
    {
        slc_eoc_implicit = value;
        slc_eoc_implicit.value_namespace = name_space;
        slc_eoc_implicit.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eoc-received-imdr-time-stamp")
    {
        eoc_received_imdr_time_stamp = value;
        eoc_received_imdr_time_stamp.value_namespace = name_space;
        eoc_received_imdr_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eoc-received-slc-time-stamp")
    {
        eoc_received_slc_time_stamp = value;
        eoc_received_slc_time_stamp.value_namespace = name_space;
        eoc_received_slc_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eod-received-im-time-stamp")
    {
        eod_received_im_time_stamp = value;
        eod_received_im_time_stamp.value_namespace = name_space;
        eod_received_im_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eod-sent-imdr-time-stamp")
    {
        eod_sent_imdr_time_stamp = value;
        eod_sent_imdr_time_stamp.value_namespace = name_space;
        eod_sent_imdr_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "eod-sent-slc-time-stamp")
    {
        eod_sent_slc_time_stamp = value;
        eod_sent_slc_time_stamp.value_namespace = name_space;
        eod_sent_slc_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fis-issu-error-ts")
    {
        fis_issu_error_ts = value;
        fis_issu_error_ts.value_namespace = name_space;
        fis_issu_error_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::IssuState::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "imdr-support")
    {
        imdr_support.yfilter = yfilter;
    }
    if(value_path == "slc-support")
    {
        slc_support.yfilter = yfilter;
    }
    if(value_path == "fis-issu-restart")
    {
        fis_issu_restart.yfilter = yfilter;
    }
    if(value_path == "imdr-eoc-implicit")
    {
        imdr_eoc_implicit.yfilter = yfilter;
    }
    if(value_path == "slc-eoc-implicit")
    {
        slc_eoc_implicit.yfilter = yfilter;
    }
    if(value_path == "eoc-received-imdr-time-stamp")
    {
        eoc_received_imdr_time_stamp.yfilter = yfilter;
    }
    if(value_path == "eoc-received-slc-time-stamp")
    {
        eoc_received_slc_time_stamp.yfilter = yfilter;
    }
    if(value_path == "eod-received-im-time-stamp")
    {
        eod_received_im_time_stamp.yfilter = yfilter;
    }
    if(value_path == "eod-sent-imdr-time-stamp")
    {
        eod_sent_imdr_time_stamp.yfilter = yfilter;
    }
    if(value_path == "eod-sent-slc-time-stamp")
    {
        eod_sent_slc_time_stamp.yfilter = yfilter;
    }
    if(value_path == "fis-issu-error-ts")
    {
        fis_issu_error_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::IssuState::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fis-proto-state" || name == "imdr-support" || name == "slc-support" || name == "fis-issu-restart" || name == "imdr-eoc-implicit" || name == "slc-eoc-implicit" || name == "eoc-received-imdr-time-stamp" || name == "eoc-received-slc-time-stamp" || name == "eod-received-im-time-stamp" || name == "eod-sent-imdr-time-stamp" || name == "eod-sent-slc-time-stamp" || name == "fis-issu-error-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState::FisProtoState()
    :
    protocol_name{YType::str, "protocol-name"},
    aib_eod_time_stamp{YType::str, "aib-eod-time-stamp"},
    rsi_eod_valid{YType::boolean, "rsi-eod-valid"},
    rsi_eod_time_stamp{YType::str, "rsi-eod-time-stamp"},
    lsd_eod_valid{YType::boolean, "lsd-eod-valid"},
    lsd_eod_time_stamp{YType::str, "lsd-eod-time-stamp"},
    lmrib_eod_valid{YType::boolean, "lmrib-eod-valid"},
    lmrib_eod_time_stamp{YType::str, "lmrib-eod-time-stamp"},
    rib_info_valid{YType::boolean, "rib-info-valid"},
    bcdl_tables{YType::uint32, "bcdl-tables"},
    converged_tables{YType::uint32, "converged-tables"},
    rib_tables_converged_time_stamp{YType::str, "rib-tables-converged-time-stamp"},
    protocol_eod_valid{YType::boolean, "protocol-eod-valid"},
    protocol_eod_time_stamp{YType::str, "protocol-eod-time-stamp"}
{

    yang_name = "fis-proto-state"; yang_parent_name = "issu-state"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState::~FisProtoState()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState::has_data() const
{
    if (is_presence_container) return true;
    return protocol_name.is_set
	|| aib_eod_time_stamp.is_set
	|| rsi_eod_valid.is_set
	|| rsi_eod_time_stamp.is_set
	|| lsd_eod_valid.is_set
	|| lsd_eod_time_stamp.is_set
	|| lmrib_eod_valid.is_set
	|| lmrib_eod_time_stamp.is_set
	|| rib_info_valid.is_set
	|| bcdl_tables.is_set
	|| converged_tables.is_set
	|| rib_tables_converged_time_stamp.is_set
	|| protocol_eod_valid.is_set
	|| protocol_eod_time_stamp.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(protocol_name.yfilter)
	|| ydk::is_set(aib_eod_time_stamp.yfilter)
	|| ydk::is_set(rsi_eod_valid.yfilter)
	|| ydk::is_set(rsi_eod_time_stamp.yfilter)
	|| ydk::is_set(lsd_eod_valid.yfilter)
	|| ydk::is_set(lsd_eod_time_stamp.yfilter)
	|| ydk::is_set(lmrib_eod_valid.yfilter)
	|| ydk::is_set(lmrib_eod_time_stamp.yfilter)
	|| ydk::is_set(rib_info_valid.yfilter)
	|| ydk::is_set(bcdl_tables.yfilter)
	|| ydk::is_set(converged_tables.yfilter)
	|| ydk::is_set(rib_tables_converged_time_stamp.yfilter)
	|| ydk::is_set(protocol_eod_valid.yfilter)
	|| ydk::is_set(protocol_eod_time_stamp.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fis-proto-state";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (protocol_name.is_set || is_set(protocol_name.yfilter)) leaf_name_data.push_back(protocol_name.get_name_leafdata());
    if (aib_eod_time_stamp.is_set || is_set(aib_eod_time_stamp.yfilter)) leaf_name_data.push_back(aib_eod_time_stamp.get_name_leafdata());
    if (rsi_eod_valid.is_set || is_set(rsi_eod_valid.yfilter)) leaf_name_data.push_back(rsi_eod_valid.get_name_leafdata());
    if (rsi_eod_time_stamp.is_set || is_set(rsi_eod_time_stamp.yfilter)) leaf_name_data.push_back(rsi_eod_time_stamp.get_name_leafdata());
    if (lsd_eod_valid.is_set || is_set(lsd_eod_valid.yfilter)) leaf_name_data.push_back(lsd_eod_valid.get_name_leafdata());
    if (lsd_eod_time_stamp.is_set || is_set(lsd_eod_time_stamp.yfilter)) leaf_name_data.push_back(lsd_eod_time_stamp.get_name_leafdata());
    if (lmrib_eod_valid.is_set || is_set(lmrib_eod_valid.yfilter)) leaf_name_data.push_back(lmrib_eod_valid.get_name_leafdata());
    if (lmrib_eod_time_stamp.is_set || is_set(lmrib_eod_time_stamp.yfilter)) leaf_name_data.push_back(lmrib_eod_time_stamp.get_name_leafdata());
    if (rib_info_valid.is_set || is_set(rib_info_valid.yfilter)) leaf_name_data.push_back(rib_info_valid.get_name_leafdata());
    if (bcdl_tables.is_set || is_set(bcdl_tables.yfilter)) leaf_name_data.push_back(bcdl_tables.get_name_leafdata());
    if (converged_tables.is_set || is_set(converged_tables.yfilter)) leaf_name_data.push_back(converged_tables.get_name_leafdata());
    if (rib_tables_converged_time_stamp.is_set || is_set(rib_tables_converged_time_stamp.yfilter)) leaf_name_data.push_back(rib_tables_converged_time_stamp.get_name_leafdata());
    if (protocol_eod_valid.is_set || is_set(protocol_eod_valid.yfilter)) leaf_name_data.push_back(protocol_eod_valid.get_name_leafdata());
    if (protocol_eod_time_stamp.is_set || is_set(protocol_eod_time_stamp.yfilter)) leaf_name_data.push_back(protocol_eod_time_stamp.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "protocol-name")
    {
        protocol_name = value;
        protocol_name.value_namespace = name_space;
        protocol_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aib-eod-time-stamp")
    {
        aib_eod_time_stamp = value;
        aib_eod_time_stamp.value_namespace = name_space;
        aib_eod_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rsi-eod-valid")
    {
        rsi_eod_valid = value;
        rsi_eod_valid.value_namespace = name_space;
        rsi_eod_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rsi-eod-time-stamp")
    {
        rsi_eod_time_stamp = value;
        rsi_eod_time_stamp.value_namespace = name_space;
        rsi_eod_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lsd-eod-valid")
    {
        lsd_eod_valid = value;
        lsd_eod_valid.value_namespace = name_space;
        lsd_eod_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lsd-eod-time-stamp")
    {
        lsd_eod_time_stamp = value;
        lsd_eod_time_stamp.value_namespace = name_space;
        lsd_eod_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lmrib-eod-valid")
    {
        lmrib_eod_valid = value;
        lmrib_eod_valid.value_namespace = name_space;
        lmrib_eod_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lmrib-eod-time-stamp")
    {
        lmrib_eod_time_stamp = value;
        lmrib_eod_time_stamp.value_namespace = name_space;
        lmrib_eod_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rib-info-valid")
    {
        rib_info_valid = value;
        rib_info_valid.value_namespace = name_space;
        rib_info_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bcdl-tables")
    {
        bcdl_tables = value;
        bcdl_tables.value_namespace = name_space;
        bcdl_tables.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "converged-tables")
    {
        converged_tables = value;
        converged_tables.value_namespace = name_space;
        converged_tables.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "rib-tables-converged-time-stamp")
    {
        rib_tables_converged_time_stamp = value;
        rib_tables_converged_time_stamp.value_namespace = name_space;
        rib_tables_converged_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protocol-eod-valid")
    {
        protocol_eod_valid = value;
        protocol_eod_valid.value_namespace = name_space;
        protocol_eod_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protocol-eod-time-stamp")
    {
        protocol_eod_time_stamp = value;
        protocol_eod_time_stamp.value_namespace = name_space;
        protocol_eod_time_stamp.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "protocol-name")
    {
        protocol_name.yfilter = yfilter;
    }
    if(value_path == "aib-eod-time-stamp")
    {
        aib_eod_time_stamp.yfilter = yfilter;
    }
    if(value_path == "rsi-eod-valid")
    {
        rsi_eod_valid.yfilter = yfilter;
    }
    if(value_path == "rsi-eod-time-stamp")
    {
        rsi_eod_time_stamp.yfilter = yfilter;
    }
    if(value_path == "lsd-eod-valid")
    {
        lsd_eod_valid.yfilter = yfilter;
    }
    if(value_path == "lsd-eod-time-stamp")
    {
        lsd_eod_time_stamp.yfilter = yfilter;
    }
    if(value_path == "lmrib-eod-valid")
    {
        lmrib_eod_valid.yfilter = yfilter;
    }
    if(value_path == "lmrib-eod-time-stamp")
    {
        lmrib_eod_time_stamp.yfilter = yfilter;
    }
    if(value_path == "rib-info-valid")
    {
        rib_info_valid.yfilter = yfilter;
    }
    if(value_path == "bcdl-tables")
    {
        bcdl_tables.yfilter = yfilter;
    }
    if(value_path == "converged-tables")
    {
        converged_tables.yfilter = yfilter;
    }
    if(value_path == "rib-tables-converged-time-stamp")
    {
        rib_tables_converged_time_stamp.yfilter = yfilter;
    }
    if(value_path == "protocol-eod-valid")
    {
        protocol_eod_valid.yfilter = yfilter;
    }
    if(value_path == "protocol-eod-time-stamp")
    {
        protocol_eod_time_stamp.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::IssuState::FisProtoState::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "protocol-name" || name == "aib-eod-time-stamp" || name == "rsi-eod-valid" || name == "rsi-eod-time-stamp" || name == "lsd-eod-valid" || name == "lsd-eod-time-stamp" || name == "lmrib-eod-valid" || name == "lmrib-eod-time-stamp" || name == "rib-info-valid" || name == "bcdl-tables" || name == "converged-tables" || name == "rib-tables-converged-time-stamp" || name == "protocol-eod-valid" || name == "protocol-eod-time-stamp")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::Resource()
    :
    resource_detail_info(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo>())
    , resource_hardware_ingress_info(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo>())
    , resource_hardware_egress_info(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo>())
    , resource_summary_info(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo>())
{
    resource_detail_info->parent = this;
    resource_hardware_ingress_info->parent = this;
    resource_hardware_egress_info->parent = this;
    resource_summary_info->parent = this;

    yang_name = "resource"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::~Resource()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::has_data() const
{
    if (is_presence_container) return true;
    return (resource_detail_info !=  nullptr && resource_detail_info->has_data())
	|| (resource_hardware_ingress_info !=  nullptr && resource_hardware_ingress_info->has_data())
	|| (resource_hardware_egress_info !=  nullptr && resource_hardware_egress_info->has_data())
	|| (resource_summary_info !=  nullptr && resource_summary_info->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::has_operation() const
{
    return is_set(yfilter)
	|| (resource_detail_info !=  nullptr && resource_detail_info->has_operation())
	|| (resource_hardware_ingress_info !=  nullptr && resource_hardware_ingress_info->has_operation())
	|| (resource_hardware_egress_info !=  nullptr && resource_hardware_egress_info->has_operation())
	|| (resource_summary_info !=  nullptr && resource_summary_info->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "resource";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "resource-detail-info")
    {
        if(resource_detail_info == nullptr)
        {
            resource_detail_info = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo>();
        }
        return resource_detail_info;
    }

    if(child_yang_name == "resource-hardware-ingress-info")
    {
        if(resource_hardware_ingress_info == nullptr)
        {
            resource_hardware_ingress_info = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo>();
        }
        return resource_hardware_ingress_info;
    }

    if(child_yang_name == "resource-hardware-egress-info")
    {
        if(resource_hardware_egress_info == nullptr)
        {
            resource_hardware_egress_info = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo>();
        }
        return resource_hardware_egress_info;
    }

    if(child_yang_name == "resource-summary-info")
    {
        if(resource_summary_info == nullptr)
        {
            resource_summary_info = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo>();
        }
        return resource_summary_info;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(resource_detail_info != nullptr)
    {
        _children["resource-detail-info"] = resource_detail_info;
    }

    if(resource_hardware_ingress_info != nullptr)
    {
        _children["resource-hardware-ingress-info"] = resource_hardware_ingress_info;
    }

    if(resource_hardware_egress_info != nullptr)
    {
        _children["resource-hardware-egress-info"] = resource_hardware_egress_info;
    }

    if(resource_summary_info != nullptr)
    {
        _children["resource-summary-info"] = resource_summary_info;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "resource-detail-info" || name == "resource-hardware-ingress-info" || name == "resource-hardware-egress-info" || name == "resource-summary-info")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::ResourceDetailInfo()
    :
    sr_curr_mode{YType::uint32, "sr-curr-mode"},
    sr_hwrsrc_info{YType::str, "sr-hwrsrc-info"},
    sr_shmwin_oor_count{YType::uint8, "sr-shmwin-oor-count"},
    sr_hw_oor_count{YType::uint8, "sr-hw-oor-count"},
    sr_in_oor_ts{YType::uint64, "sr-in-oor-ts"},
    sr_out_oor_ts{YType::uint64, "sr-out-oor-ts"}
        ,
    sr_hwrsrc_mode(this, {})
    , sr_shm_state(this, {})
{

    yang_name = "resource-detail-info"; yang_parent_name = "resource"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::~ResourceDetailInfo()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<sr_hwrsrc_mode.len(); index++)
    {
        if(sr_hwrsrc_mode[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<sr_shm_state.len(); index++)
    {
        if(sr_shm_state[index]->has_data())
            return true;
    }
    return sr_curr_mode.is_set
	|| sr_hwrsrc_info.is_set
	|| sr_shmwin_oor_count.is_set
	|| sr_hw_oor_count.is_set
	|| sr_in_oor_ts.is_set
	|| sr_out_oor_ts.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::has_operation() const
{
    for (std::size_t index=0; index<sr_hwrsrc_mode.len(); index++)
    {
        if(sr_hwrsrc_mode[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<sr_shm_state.len(); index++)
    {
        if(sr_shm_state[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(sr_curr_mode.yfilter)
	|| ydk::is_set(sr_hwrsrc_info.yfilter)
	|| ydk::is_set(sr_shmwin_oor_count.yfilter)
	|| ydk::is_set(sr_hw_oor_count.yfilter)
	|| ydk::is_set(sr_in_oor_ts.yfilter)
	|| ydk::is_set(sr_out_oor_ts.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "resource-detail-info";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sr_curr_mode.is_set || is_set(sr_curr_mode.yfilter)) leaf_name_data.push_back(sr_curr_mode.get_name_leafdata());
    if (sr_hwrsrc_info.is_set || is_set(sr_hwrsrc_info.yfilter)) leaf_name_data.push_back(sr_hwrsrc_info.get_name_leafdata());
    if (sr_shmwin_oor_count.is_set || is_set(sr_shmwin_oor_count.yfilter)) leaf_name_data.push_back(sr_shmwin_oor_count.get_name_leafdata());
    if (sr_hw_oor_count.is_set || is_set(sr_hw_oor_count.yfilter)) leaf_name_data.push_back(sr_hw_oor_count.get_name_leafdata());
    if (sr_in_oor_ts.is_set || is_set(sr_in_oor_ts.yfilter)) leaf_name_data.push_back(sr_in_oor_ts.get_name_leafdata());
    if (sr_out_oor_ts.is_set || is_set(sr_out_oor_ts.yfilter)) leaf_name_data.push_back(sr_out_oor_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sr-hwrsrc-mode")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode>();
        ent_->parent = this;
        sr_hwrsrc_mode.append(ent_);
        return ent_;
    }

    if(child_yang_name == "sr-shm-state")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState>();
        ent_->parent = this;
        sr_shm_state.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : sr_hwrsrc_mode.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : sr_shm_state.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "sr-curr-mode")
    {
        sr_curr_mode = value;
        sr_curr_mode.value_namespace = name_space;
        sr_curr_mode.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-hwrsrc-info")
    {
        sr_hwrsrc_info = value;
        sr_hwrsrc_info.value_namespace = name_space;
        sr_hwrsrc_info.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-shmwin-oor-count")
    {
        sr_shmwin_oor_count = value;
        sr_shmwin_oor_count.value_namespace = name_space;
        sr_shmwin_oor_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-hw-oor-count")
    {
        sr_hw_oor_count = value;
        sr_hw_oor_count.value_namespace = name_space;
        sr_hw_oor_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-in-oor-ts")
    {
        sr_in_oor_ts = value;
        sr_in_oor_ts.value_namespace = name_space;
        sr_in_oor_ts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-out-oor-ts")
    {
        sr_out_oor_ts = value;
        sr_out_oor_ts.value_namespace = name_space;
        sr_out_oor_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "sr-curr-mode")
    {
        sr_curr_mode.yfilter = yfilter;
    }
    if(value_path == "sr-hwrsrc-info")
    {
        sr_hwrsrc_info.yfilter = yfilter;
    }
    if(value_path == "sr-shmwin-oor-count")
    {
        sr_shmwin_oor_count.yfilter = yfilter;
    }
    if(value_path == "sr-hw-oor-count")
    {
        sr_hw_oor_count.yfilter = yfilter;
    }
    if(value_path == "sr-in-oor-ts")
    {
        sr_in_oor_ts.yfilter = yfilter;
    }
    if(value_path == "sr-out-oor-ts")
    {
        sr_out_oor_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sr-hwrsrc-mode" || name == "sr-shm-state" || name == "sr-curr-mode" || name == "sr-hwrsrc-info" || name == "sr-shmwin-oor-count" || name == "sr-hw-oor-count" || name == "sr-in-oor-ts" || name == "sr-out-oor-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode::SrHwrsrcMode()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "sr-hwrsrc-mode"; yang_parent_name = "resource-detail-info"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode::~SrHwrsrcMode()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sr-hwrsrc-mode";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrHwrsrcMode::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState::SrShmState()
    :
    srs_curr_mode{YType::uint32, "srs-curr-mode"},
    srs_avg_avail{YType::uint64, "srs-avg-avail"},
    srs_max_avail{YType::uint64, "srs-max-avail"}
{

    yang_name = "sr-shm-state"; yang_parent_name = "resource-detail-info"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState::~SrShmState()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState::has_data() const
{
    if (is_presence_container) return true;
    return srs_curr_mode.is_set
	|| srs_avg_avail.is_set
	|| srs_max_avail.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(srs_curr_mode.yfilter)
	|| ydk::is_set(srs_avg_avail.yfilter)
	|| ydk::is_set(srs_max_avail.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sr-shm-state";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (srs_curr_mode.is_set || is_set(srs_curr_mode.yfilter)) leaf_name_data.push_back(srs_curr_mode.get_name_leafdata());
    if (srs_avg_avail.is_set || is_set(srs_avg_avail.yfilter)) leaf_name_data.push_back(srs_avg_avail.get_name_leafdata());
    if (srs_max_avail.is_set || is_set(srs_max_avail.yfilter)) leaf_name_data.push_back(srs_max_avail.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "srs-curr-mode")
    {
        srs_curr_mode = value;
        srs_curr_mode.value_namespace = name_space;
        srs_curr_mode.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srs-avg-avail")
    {
        srs_avg_avail = value;
        srs_avg_avail.value_namespace = name_space;
        srs_avg_avail.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srs-max-avail")
    {
        srs_max_avail = value;
        srs_max_avail.value_namespace = name_space;
        srs_max_avail.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "srs-curr-mode")
    {
        srs_curr_mode.yfilter = yfilter;
    }
    if(value_path == "srs-avg-avail")
    {
        srs_avg_avail.yfilter = yfilter;
    }
    if(value_path == "srs-max-avail")
    {
        srs_max_avail.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceDetailInfo::SrShmState::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "srs-curr-mode" || name == "srs-avg-avail" || name == "srs-max-avail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::ResourceHardwareIngressInfo()
    :
    sr_curr_mode{YType::uint32, "sr-curr-mode"},
    sr_hwrsrc_info{YType::str, "sr-hwrsrc-info"},
    sr_shmwin_oor_count{YType::uint8, "sr-shmwin-oor-count"},
    sr_hw_oor_count{YType::uint8, "sr-hw-oor-count"},
    sr_in_oor_ts{YType::uint64, "sr-in-oor-ts"},
    sr_out_oor_ts{YType::uint64, "sr-out-oor-ts"}
        ,
    sr_hwrsrc_mode(this, {})
    , sr_shm_state(this, {})
{

    yang_name = "resource-hardware-ingress-info"; yang_parent_name = "resource"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::~ResourceHardwareIngressInfo()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<sr_hwrsrc_mode.len(); index++)
    {
        if(sr_hwrsrc_mode[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<sr_shm_state.len(); index++)
    {
        if(sr_shm_state[index]->has_data())
            return true;
    }
    return sr_curr_mode.is_set
	|| sr_hwrsrc_info.is_set
	|| sr_shmwin_oor_count.is_set
	|| sr_hw_oor_count.is_set
	|| sr_in_oor_ts.is_set
	|| sr_out_oor_ts.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::has_operation() const
{
    for (std::size_t index=0; index<sr_hwrsrc_mode.len(); index++)
    {
        if(sr_hwrsrc_mode[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<sr_shm_state.len(); index++)
    {
        if(sr_shm_state[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(sr_curr_mode.yfilter)
	|| ydk::is_set(sr_hwrsrc_info.yfilter)
	|| ydk::is_set(sr_shmwin_oor_count.yfilter)
	|| ydk::is_set(sr_hw_oor_count.yfilter)
	|| ydk::is_set(sr_in_oor_ts.yfilter)
	|| ydk::is_set(sr_out_oor_ts.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "resource-hardware-ingress-info";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sr_curr_mode.is_set || is_set(sr_curr_mode.yfilter)) leaf_name_data.push_back(sr_curr_mode.get_name_leafdata());
    if (sr_hwrsrc_info.is_set || is_set(sr_hwrsrc_info.yfilter)) leaf_name_data.push_back(sr_hwrsrc_info.get_name_leafdata());
    if (sr_shmwin_oor_count.is_set || is_set(sr_shmwin_oor_count.yfilter)) leaf_name_data.push_back(sr_shmwin_oor_count.get_name_leafdata());
    if (sr_hw_oor_count.is_set || is_set(sr_hw_oor_count.yfilter)) leaf_name_data.push_back(sr_hw_oor_count.get_name_leafdata());
    if (sr_in_oor_ts.is_set || is_set(sr_in_oor_ts.yfilter)) leaf_name_data.push_back(sr_in_oor_ts.get_name_leafdata());
    if (sr_out_oor_ts.is_set || is_set(sr_out_oor_ts.yfilter)) leaf_name_data.push_back(sr_out_oor_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sr-hwrsrc-mode")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode>();
        ent_->parent = this;
        sr_hwrsrc_mode.append(ent_);
        return ent_;
    }

    if(child_yang_name == "sr-shm-state")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState>();
        ent_->parent = this;
        sr_shm_state.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : sr_hwrsrc_mode.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : sr_shm_state.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "sr-curr-mode")
    {
        sr_curr_mode = value;
        sr_curr_mode.value_namespace = name_space;
        sr_curr_mode.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-hwrsrc-info")
    {
        sr_hwrsrc_info = value;
        sr_hwrsrc_info.value_namespace = name_space;
        sr_hwrsrc_info.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-shmwin-oor-count")
    {
        sr_shmwin_oor_count = value;
        sr_shmwin_oor_count.value_namespace = name_space;
        sr_shmwin_oor_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-hw-oor-count")
    {
        sr_hw_oor_count = value;
        sr_hw_oor_count.value_namespace = name_space;
        sr_hw_oor_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-in-oor-ts")
    {
        sr_in_oor_ts = value;
        sr_in_oor_ts.value_namespace = name_space;
        sr_in_oor_ts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-out-oor-ts")
    {
        sr_out_oor_ts = value;
        sr_out_oor_ts.value_namespace = name_space;
        sr_out_oor_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "sr-curr-mode")
    {
        sr_curr_mode.yfilter = yfilter;
    }
    if(value_path == "sr-hwrsrc-info")
    {
        sr_hwrsrc_info.yfilter = yfilter;
    }
    if(value_path == "sr-shmwin-oor-count")
    {
        sr_shmwin_oor_count.yfilter = yfilter;
    }
    if(value_path == "sr-hw-oor-count")
    {
        sr_hw_oor_count.yfilter = yfilter;
    }
    if(value_path == "sr-in-oor-ts")
    {
        sr_in_oor_ts.yfilter = yfilter;
    }
    if(value_path == "sr-out-oor-ts")
    {
        sr_out_oor_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sr-hwrsrc-mode" || name == "sr-shm-state" || name == "sr-curr-mode" || name == "sr-hwrsrc-info" || name == "sr-shmwin-oor-count" || name == "sr-hw-oor-count" || name == "sr-in-oor-ts" || name == "sr-out-oor-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode::SrHwrsrcMode()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "sr-hwrsrc-mode"; yang_parent_name = "resource-hardware-ingress-info"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode::~SrHwrsrcMode()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sr-hwrsrc-mode";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrHwrsrcMode::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState::SrShmState()
    :
    srs_curr_mode{YType::uint32, "srs-curr-mode"},
    srs_avg_avail{YType::uint64, "srs-avg-avail"},
    srs_max_avail{YType::uint64, "srs-max-avail"}
{

    yang_name = "sr-shm-state"; yang_parent_name = "resource-hardware-ingress-info"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState::~SrShmState()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState::has_data() const
{
    if (is_presence_container) return true;
    return srs_curr_mode.is_set
	|| srs_avg_avail.is_set
	|| srs_max_avail.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(srs_curr_mode.yfilter)
	|| ydk::is_set(srs_avg_avail.yfilter)
	|| ydk::is_set(srs_max_avail.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sr-shm-state";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (srs_curr_mode.is_set || is_set(srs_curr_mode.yfilter)) leaf_name_data.push_back(srs_curr_mode.get_name_leafdata());
    if (srs_avg_avail.is_set || is_set(srs_avg_avail.yfilter)) leaf_name_data.push_back(srs_avg_avail.get_name_leafdata());
    if (srs_max_avail.is_set || is_set(srs_max_avail.yfilter)) leaf_name_data.push_back(srs_max_avail.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "srs-curr-mode")
    {
        srs_curr_mode = value;
        srs_curr_mode.value_namespace = name_space;
        srs_curr_mode.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srs-avg-avail")
    {
        srs_avg_avail = value;
        srs_avg_avail.value_namespace = name_space;
        srs_avg_avail.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srs-max-avail")
    {
        srs_max_avail = value;
        srs_max_avail.value_namespace = name_space;
        srs_max_avail.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "srs-curr-mode")
    {
        srs_curr_mode.yfilter = yfilter;
    }
    if(value_path == "srs-avg-avail")
    {
        srs_avg_avail.yfilter = yfilter;
    }
    if(value_path == "srs-max-avail")
    {
        srs_max_avail.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareIngressInfo::SrShmState::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "srs-curr-mode" || name == "srs-avg-avail" || name == "srs-max-avail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::ResourceHardwareEgressInfo()
    :
    sr_curr_mode{YType::uint32, "sr-curr-mode"},
    sr_hwrsrc_info{YType::str, "sr-hwrsrc-info"},
    sr_shmwin_oor_count{YType::uint8, "sr-shmwin-oor-count"},
    sr_hw_oor_count{YType::uint8, "sr-hw-oor-count"},
    sr_in_oor_ts{YType::uint64, "sr-in-oor-ts"},
    sr_out_oor_ts{YType::uint64, "sr-out-oor-ts"}
        ,
    sr_hwrsrc_mode(this, {})
    , sr_shm_state(this, {})
{

    yang_name = "resource-hardware-egress-info"; yang_parent_name = "resource"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::~ResourceHardwareEgressInfo()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<sr_hwrsrc_mode.len(); index++)
    {
        if(sr_hwrsrc_mode[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<sr_shm_state.len(); index++)
    {
        if(sr_shm_state[index]->has_data())
            return true;
    }
    return sr_curr_mode.is_set
	|| sr_hwrsrc_info.is_set
	|| sr_shmwin_oor_count.is_set
	|| sr_hw_oor_count.is_set
	|| sr_in_oor_ts.is_set
	|| sr_out_oor_ts.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::has_operation() const
{
    for (std::size_t index=0; index<sr_hwrsrc_mode.len(); index++)
    {
        if(sr_hwrsrc_mode[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<sr_shm_state.len(); index++)
    {
        if(sr_shm_state[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(sr_curr_mode.yfilter)
	|| ydk::is_set(sr_hwrsrc_info.yfilter)
	|| ydk::is_set(sr_shmwin_oor_count.yfilter)
	|| ydk::is_set(sr_hw_oor_count.yfilter)
	|| ydk::is_set(sr_in_oor_ts.yfilter)
	|| ydk::is_set(sr_out_oor_ts.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "resource-hardware-egress-info";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sr_curr_mode.is_set || is_set(sr_curr_mode.yfilter)) leaf_name_data.push_back(sr_curr_mode.get_name_leafdata());
    if (sr_hwrsrc_info.is_set || is_set(sr_hwrsrc_info.yfilter)) leaf_name_data.push_back(sr_hwrsrc_info.get_name_leafdata());
    if (sr_shmwin_oor_count.is_set || is_set(sr_shmwin_oor_count.yfilter)) leaf_name_data.push_back(sr_shmwin_oor_count.get_name_leafdata());
    if (sr_hw_oor_count.is_set || is_set(sr_hw_oor_count.yfilter)) leaf_name_data.push_back(sr_hw_oor_count.get_name_leafdata());
    if (sr_in_oor_ts.is_set || is_set(sr_in_oor_ts.yfilter)) leaf_name_data.push_back(sr_in_oor_ts.get_name_leafdata());
    if (sr_out_oor_ts.is_set || is_set(sr_out_oor_ts.yfilter)) leaf_name_data.push_back(sr_out_oor_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sr-hwrsrc-mode")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode>();
        ent_->parent = this;
        sr_hwrsrc_mode.append(ent_);
        return ent_;
    }

    if(child_yang_name == "sr-shm-state")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState>();
        ent_->parent = this;
        sr_shm_state.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : sr_hwrsrc_mode.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : sr_shm_state.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "sr-curr-mode")
    {
        sr_curr_mode = value;
        sr_curr_mode.value_namespace = name_space;
        sr_curr_mode.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-hwrsrc-info")
    {
        sr_hwrsrc_info = value;
        sr_hwrsrc_info.value_namespace = name_space;
        sr_hwrsrc_info.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-shmwin-oor-count")
    {
        sr_shmwin_oor_count = value;
        sr_shmwin_oor_count.value_namespace = name_space;
        sr_shmwin_oor_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-hw-oor-count")
    {
        sr_hw_oor_count = value;
        sr_hw_oor_count.value_namespace = name_space;
        sr_hw_oor_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-in-oor-ts")
    {
        sr_in_oor_ts = value;
        sr_in_oor_ts.value_namespace = name_space;
        sr_in_oor_ts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-out-oor-ts")
    {
        sr_out_oor_ts = value;
        sr_out_oor_ts.value_namespace = name_space;
        sr_out_oor_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "sr-curr-mode")
    {
        sr_curr_mode.yfilter = yfilter;
    }
    if(value_path == "sr-hwrsrc-info")
    {
        sr_hwrsrc_info.yfilter = yfilter;
    }
    if(value_path == "sr-shmwin-oor-count")
    {
        sr_shmwin_oor_count.yfilter = yfilter;
    }
    if(value_path == "sr-hw-oor-count")
    {
        sr_hw_oor_count.yfilter = yfilter;
    }
    if(value_path == "sr-in-oor-ts")
    {
        sr_in_oor_ts.yfilter = yfilter;
    }
    if(value_path == "sr-out-oor-ts")
    {
        sr_out_oor_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sr-hwrsrc-mode" || name == "sr-shm-state" || name == "sr-curr-mode" || name == "sr-hwrsrc-info" || name == "sr-shmwin-oor-count" || name == "sr-hw-oor-count" || name == "sr-in-oor-ts" || name == "sr-out-oor-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode::SrHwrsrcMode()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "sr-hwrsrc-mode"; yang_parent_name = "resource-hardware-egress-info"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode::~SrHwrsrcMode()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sr-hwrsrc-mode";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrHwrsrcMode::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState::SrShmState()
    :
    srs_curr_mode{YType::uint32, "srs-curr-mode"},
    srs_avg_avail{YType::uint64, "srs-avg-avail"},
    srs_max_avail{YType::uint64, "srs-max-avail"}
{

    yang_name = "sr-shm-state"; yang_parent_name = "resource-hardware-egress-info"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState::~SrShmState()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState::has_data() const
{
    if (is_presence_container) return true;
    return srs_curr_mode.is_set
	|| srs_avg_avail.is_set
	|| srs_max_avail.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(srs_curr_mode.yfilter)
	|| ydk::is_set(srs_avg_avail.yfilter)
	|| ydk::is_set(srs_max_avail.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sr-shm-state";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (srs_curr_mode.is_set || is_set(srs_curr_mode.yfilter)) leaf_name_data.push_back(srs_curr_mode.get_name_leafdata());
    if (srs_avg_avail.is_set || is_set(srs_avg_avail.yfilter)) leaf_name_data.push_back(srs_avg_avail.get_name_leafdata());
    if (srs_max_avail.is_set || is_set(srs_max_avail.yfilter)) leaf_name_data.push_back(srs_max_avail.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "srs-curr-mode")
    {
        srs_curr_mode = value;
        srs_curr_mode.value_namespace = name_space;
        srs_curr_mode.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srs-avg-avail")
    {
        srs_avg_avail = value;
        srs_avg_avail.value_namespace = name_space;
        srs_avg_avail.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srs-max-avail")
    {
        srs_max_avail = value;
        srs_max_avail.value_namespace = name_space;
        srs_max_avail.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "srs-curr-mode")
    {
        srs_curr_mode.yfilter = yfilter;
    }
    if(value_path == "srs-avg-avail")
    {
        srs_avg_avail.yfilter = yfilter;
    }
    if(value_path == "srs-max-avail")
    {
        srs_max_avail.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceHardwareEgressInfo::SrShmState::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "srs-curr-mode" || name == "srs-avg-avail" || name == "srs-max-avail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::ResourceSummaryInfo()
    :
    sr_curr_mode{YType::uint32, "sr-curr-mode"},
    sr_hwrsrc_info{YType::str, "sr-hwrsrc-info"},
    sr_shmwin_oor_count{YType::uint8, "sr-shmwin-oor-count"},
    sr_hw_oor_count{YType::uint8, "sr-hw-oor-count"},
    sr_in_oor_ts{YType::uint64, "sr-in-oor-ts"},
    sr_out_oor_ts{YType::uint64, "sr-out-oor-ts"}
        ,
    sr_hwrsrc_mode(this, {})
    , sr_shm_state(this, {})
{

    yang_name = "resource-summary-info"; yang_parent_name = "resource"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::~ResourceSummaryInfo()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<sr_hwrsrc_mode.len(); index++)
    {
        if(sr_hwrsrc_mode[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<sr_shm_state.len(); index++)
    {
        if(sr_shm_state[index]->has_data())
            return true;
    }
    return sr_curr_mode.is_set
	|| sr_hwrsrc_info.is_set
	|| sr_shmwin_oor_count.is_set
	|| sr_hw_oor_count.is_set
	|| sr_in_oor_ts.is_set
	|| sr_out_oor_ts.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::has_operation() const
{
    for (std::size_t index=0; index<sr_hwrsrc_mode.len(); index++)
    {
        if(sr_hwrsrc_mode[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<sr_shm_state.len(); index++)
    {
        if(sr_shm_state[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(sr_curr_mode.yfilter)
	|| ydk::is_set(sr_hwrsrc_info.yfilter)
	|| ydk::is_set(sr_shmwin_oor_count.yfilter)
	|| ydk::is_set(sr_hw_oor_count.yfilter)
	|| ydk::is_set(sr_in_oor_ts.yfilter)
	|| ydk::is_set(sr_out_oor_ts.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "resource-summary-info";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sr_curr_mode.is_set || is_set(sr_curr_mode.yfilter)) leaf_name_data.push_back(sr_curr_mode.get_name_leafdata());
    if (sr_hwrsrc_info.is_set || is_set(sr_hwrsrc_info.yfilter)) leaf_name_data.push_back(sr_hwrsrc_info.get_name_leafdata());
    if (sr_shmwin_oor_count.is_set || is_set(sr_shmwin_oor_count.yfilter)) leaf_name_data.push_back(sr_shmwin_oor_count.get_name_leafdata());
    if (sr_hw_oor_count.is_set || is_set(sr_hw_oor_count.yfilter)) leaf_name_data.push_back(sr_hw_oor_count.get_name_leafdata());
    if (sr_in_oor_ts.is_set || is_set(sr_in_oor_ts.yfilter)) leaf_name_data.push_back(sr_in_oor_ts.get_name_leafdata());
    if (sr_out_oor_ts.is_set || is_set(sr_out_oor_ts.yfilter)) leaf_name_data.push_back(sr_out_oor_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sr-hwrsrc-mode")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode>();
        ent_->parent = this;
        sr_hwrsrc_mode.append(ent_);
        return ent_;
    }

    if(child_yang_name == "sr-shm-state")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState>();
        ent_->parent = this;
        sr_shm_state.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : sr_hwrsrc_mode.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : sr_shm_state.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "sr-curr-mode")
    {
        sr_curr_mode = value;
        sr_curr_mode.value_namespace = name_space;
        sr_curr_mode.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-hwrsrc-info")
    {
        sr_hwrsrc_info = value;
        sr_hwrsrc_info.value_namespace = name_space;
        sr_hwrsrc_info.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-shmwin-oor-count")
    {
        sr_shmwin_oor_count = value;
        sr_shmwin_oor_count.value_namespace = name_space;
        sr_shmwin_oor_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-hw-oor-count")
    {
        sr_hw_oor_count = value;
        sr_hw_oor_count.value_namespace = name_space;
        sr_hw_oor_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-in-oor-ts")
    {
        sr_in_oor_ts = value;
        sr_in_oor_ts.value_namespace = name_space;
        sr_in_oor_ts.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sr-out-oor-ts")
    {
        sr_out_oor_ts = value;
        sr_out_oor_ts.value_namespace = name_space;
        sr_out_oor_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "sr-curr-mode")
    {
        sr_curr_mode.yfilter = yfilter;
    }
    if(value_path == "sr-hwrsrc-info")
    {
        sr_hwrsrc_info.yfilter = yfilter;
    }
    if(value_path == "sr-shmwin-oor-count")
    {
        sr_shmwin_oor_count.yfilter = yfilter;
    }
    if(value_path == "sr-hw-oor-count")
    {
        sr_hw_oor_count.yfilter = yfilter;
    }
    if(value_path == "sr-in-oor-ts")
    {
        sr_in_oor_ts.yfilter = yfilter;
    }
    if(value_path == "sr-out-oor-ts")
    {
        sr_out_oor_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sr-hwrsrc-mode" || name == "sr-shm-state" || name == "sr-curr-mode" || name == "sr-hwrsrc-info" || name == "sr-shmwin-oor-count" || name == "sr-hw-oor-count" || name == "sr-in-oor-ts" || name == "sr-out-oor-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode::SrHwrsrcMode()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "sr-hwrsrc-mode"; yang_parent_name = "resource-summary-info"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode::~SrHwrsrcMode()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sr-hwrsrc-mode";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrHwrsrcMode::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState::SrShmState()
    :
    srs_curr_mode{YType::uint32, "srs-curr-mode"},
    srs_avg_avail{YType::uint64, "srs-avg-avail"},
    srs_max_avail{YType::uint64, "srs-max-avail"}
{

    yang_name = "sr-shm-state"; yang_parent_name = "resource-summary-info"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState::~SrShmState()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState::has_data() const
{
    if (is_presence_container) return true;
    return srs_curr_mode.is_set
	|| srs_avg_avail.is_set
	|| srs_max_avail.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(srs_curr_mode.yfilter)
	|| ydk::is_set(srs_avg_avail.yfilter)
	|| ydk::is_set(srs_max_avail.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sr-shm-state";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (srs_curr_mode.is_set || is_set(srs_curr_mode.yfilter)) leaf_name_data.push_back(srs_curr_mode.get_name_leafdata());
    if (srs_avg_avail.is_set || is_set(srs_avg_avail.yfilter)) leaf_name_data.push_back(srs_avg_avail.get_name_leafdata());
    if (srs_max_avail.is_set || is_set(srs_max_avail.yfilter)) leaf_name_data.push_back(srs_max_avail.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "srs-curr-mode")
    {
        srs_curr_mode = value;
        srs_curr_mode.value_namespace = name_space;
        srs_curr_mode.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srs-avg-avail")
    {
        srs_avg_avail = value;
        srs_avg_avail.value_namespace = name_space;
        srs_avg_avail.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "srs-max-avail")
    {
        srs_max_avail = value;
        srs_max_avail.value_namespace = name_space;
        srs_max_avail.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "srs-curr-mode")
    {
        srs_curr_mode.yfilter = yfilter;
    }
    if(value_path == "srs-avg-avail")
    {
        srs_avg_avail.yfilter = yfilter;
    }
    if(value_path == "srs-max-avail")
    {
        srs_max_avail.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Resource::ResourceSummaryInfo::SrShmState::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "srs-curr-mode" || name == "srs-avg-avail" || name == "srs-max-avail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummaries()
    :
    fib_summary(this, {})
{

    yang_name = "fib-summaries"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::~FibSummaries()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fib_summary.len(); index++)
    {
        if(fib_summary[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::has_operation() const
{
    for (std::size_t index=0; index<fib_summary.len(); index++)
    {
        if(fib_summary[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FibSummaries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-summaries";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FibSummaries::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fib-summary")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary>();
        ent_->parent = this;
        fib_summary.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : fib_summary.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fib-summary")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::FibSummary()
    :
    vrf_name{YType::str, "vrf-name"},
    table_id{YType::str, "table-id"},
    prefix{YType::str, "prefix"},
    ss_tbl_id{YType::uint32, "ss-tbl-id"},
    ss_tbl_id_ptr{YType::uint32, "ss-tbl-id-ptr"},
    ss_vrf_id{YType::uint32, "ss-vrf-id"},
    ss_vr_id{YType::uint32, "ss-vr-id"},
    load_balancing{YType::enumeration, "load-balancing"},
    forwarding_elements{YType::uint32, "forwarding-elements"},
    routes{YType::uint32, "routes"},
    prefix_in_place_modifications{YType::uint32, "prefix-in-place-modifications"},
    stale_prefix_deletes{YType::uint32, "stale-prefix-deletes"},
    load_sharing_elements{YType::uint32, "load-sharing-elements"},
    load_sharing_references{YType::uint64, "load-sharing-references"},
    total_load_share_element_bytes{YType::uint32, "total-load-share-element-bytes"},
    leaves_used_bytes{YType::uint32, "leaves-used-bytes"},
    reresolve_entries{YType::uint32, "reresolve-entries"},
    old_unresolve_entries{YType::uint32, "old-unresolve-entries"},
    new_unresolve_entries{YType::uint32, "new-unresolve-entries"},
    unresolve_entries{YType::uint32, "unresolve-entries"},
    cef_route_drops{YType::uint32, "cef-route-drops"},
    cef_version_mismatch_route_drops{YType::uint64, "cef-version-mismatch-route-drops"},
    delete_cache_num_entries{YType::uint32, "delete-cache-num-entries"},
    existing_leaves_revisions{YType::uint32, "existing-leaves-revisions"},
    fib_default_prefix{YType::uint32, "fib-default-prefix"},
    fib_default_prefix_mask_length{YType::uint32, "fib-default-prefix-mask-length"},
    next_hops{YType::uint32, "next-hops"},
    incomplete_next_hops{YType::uint32, "incomplete-next-hops"},
    resolution_timer{YType::uint32, "resolution-timer"},
    slow_process_timer{YType::uint32, "slow-process-timer"},
    max_resolution_timer{YType::uint32, "max-resolution-timer"},
    imposition_prefixes{YType::uint32, "imposition-prefixes"},
    extended_prefixes{YType::uint32, "extended-prefixes"},
    cefl_bl_recycled_routes{YType::uint32, "cefl-bl-recycled-routes"},
    ldi_backwalks{YType::uint32, "ldi-backwalks"},
    ss_prot_route_count{YType::uint32, "ss-prot-route-count"},
    lisp_eid_prefixes{YType::uint32, "lisp-eid-prefixes"},
    lisp_eid_valid_prefixes{YType::uint32, "lisp-eid-valid-prefixes"},
    lisp_rloc_objects{YType::uint32, "lisp-rloc-objects"},
    number_of_sr_labels{YType::uint32, "number-of-sr-labels"},
    ss_vxlan_ltep_ifh{YType::str, "ss-vxlan-ltep-ifh"},
    ss_drop_pl_count{YType::uint32, "ss-drop-pl-count"}
        ,
    exclusive_load_sharing_element(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement>())
    , shared_load_sharing_element(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement>())
    , cross_shared_load_sharing_element(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement>())
    , encap_shared_load_sharing_element(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement>())
    , prefix_masklen_distribution(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution>())
{
    exclusive_load_sharing_element->parent = this;
    shared_load_sharing_element->parent = this;
    cross_shared_load_sharing_element->parent = this;
    encap_shared_load_sharing_element->parent = this;
    prefix_masklen_distribution->parent = this;

    yang_name = "fib-summary"; yang_parent_name = "fib-summaries"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::~FibSummary()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::has_data() const
{
    if (is_presence_container) return true;
    return vrf_name.is_set
	|| table_id.is_set
	|| prefix.is_set
	|| ss_tbl_id.is_set
	|| ss_tbl_id_ptr.is_set
	|| ss_vrf_id.is_set
	|| ss_vr_id.is_set
	|| load_balancing.is_set
	|| forwarding_elements.is_set
	|| routes.is_set
	|| prefix_in_place_modifications.is_set
	|| stale_prefix_deletes.is_set
	|| load_sharing_elements.is_set
	|| load_sharing_references.is_set
	|| total_load_share_element_bytes.is_set
	|| leaves_used_bytes.is_set
	|| reresolve_entries.is_set
	|| old_unresolve_entries.is_set
	|| new_unresolve_entries.is_set
	|| unresolve_entries.is_set
	|| cef_route_drops.is_set
	|| cef_version_mismatch_route_drops.is_set
	|| delete_cache_num_entries.is_set
	|| existing_leaves_revisions.is_set
	|| fib_default_prefix.is_set
	|| fib_default_prefix_mask_length.is_set
	|| next_hops.is_set
	|| incomplete_next_hops.is_set
	|| resolution_timer.is_set
	|| slow_process_timer.is_set
	|| max_resolution_timer.is_set
	|| imposition_prefixes.is_set
	|| extended_prefixes.is_set
	|| cefl_bl_recycled_routes.is_set
	|| ldi_backwalks.is_set
	|| ss_prot_route_count.is_set
	|| lisp_eid_prefixes.is_set
	|| lisp_eid_valid_prefixes.is_set
	|| lisp_rloc_objects.is_set
	|| number_of_sr_labels.is_set
	|| ss_vxlan_ltep_ifh.is_set
	|| ss_drop_pl_count.is_set
	|| (exclusive_load_sharing_element !=  nullptr && exclusive_load_sharing_element->has_data())
	|| (shared_load_sharing_element !=  nullptr && shared_load_sharing_element->has_data())
	|| (cross_shared_load_sharing_element !=  nullptr && cross_shared_load_sharing_element->has_data())
	|| (encap_shared_load_sharing_element !=  nullptr && encap_shared_load_sharing_element->has_data())
	|| (prefix_masklen_distribution !=  nullptr && prefix_masklen_distribution->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(vrf_name.yfilter)
	|| ydk::is_set(table_id.yfilter)
	|| ydk::is_set(prefix.yfilter)
	|| ydk::is_set(ss_tbl_id.yfilter)
	|| ydk::is_set(ss_tbl_id_ptr.yfilter)
	|| ydk::is_set(ss_vrf_id.yfilter)
	|| ydk::is_set(ss_vr_id.yfilter)
	|| ydk::is_set(load_balancing.yfilter)
	|| ydk::is_set(forwarding_elements.yfilter)
	|| ydk::is_set(routes.yfilter)
	|| ydk::is_set(prefix_in_place_modifications.yfilter)
	|| ydk::is_set(stale_prefix_deletes.yfilter)
	|| ydk::is_set(load_sharing_elements.yfilter)
	|| ydk::is_set(load_sharing_references.yfilter)
	|| ydk::is_set(total_load_share_element_bytes.yfilter)
	|| ydk::is_set(leaves_used_bytes.yfilter)
	|| ydk::is_set(reresolve_entries.yfilter)
	|| ydk::is_set(old_unresolve_entries.yfilter)
	|| ydk::is_set(new_unresolve_entries.yfilter)
	|| ydk::is_set(unresolve_entries.yfilter)
	|| ydk::is_set(cef_route_drops.yfilter)
	|| ydk::is_set(cef_version_mismatch_route_drops.yfilter)
	|| ydk::is_set(delete_cache_num_entries.yfilter)
	|| ydk::is_set(existing_leaves_revisions.yfilter)
	|| ydk::is_set(fib_default_prefix.yfilter)
	|| ydk::is_set(fib_default_prefix_mask_length.yfilter)
	|| ydk::is_set(next_hops.yfilter)
	|| ydk::is_set(incomplete_next_hops.yfilter)
	|| ydk::is_set(resolution_timer.yfilter)
	|| ydk::is_set(slow_process_timer.yfilter)
	|| ydk::is_set(max_resolution_timer.yfilter)
	|| ydk::is_set(imposition_prefixes.yfilter)
	|| ydk::is_set(extended_prefixes.yfilter)
	|| ydk::is_set(cefl_bl_recycled_routes.yfilter)
	|| ydk::is_set(ldi_backwalks.yfilter)
	|| ydk::is_set(ss_prot_route_count.yfilter)
	|| ydk::is_set(lisp_eid_prefixes.yfilter)
	|| ydk::is_set(lisp_eid_valid_prefixes.yfilter)
	|| ydk::is_set(lisp_rloc_objects.yfilter)
	|| ydk::is_set(number_of_sr_labels.yfilter)
	|| ydk::is_set(ss_vxlan_ltep_ifh.yfilter)
	|| ydk::is_set(ss_drop_pl_count.yfilter)
	|| (exclusive_load_sharing_element !=  nullptr && exclusive_load_sharing_element->has_operation())
	|| (shared_load_sharing_element !=  nullptr && shared_load_sharing_element->has_operation())
	|| (cross_shared_load_sharing_element !=  nullptr && cross_shared_load_sharing_element->has_operation())
	|| (encap_shared_load_sharing_element !=  nullptr && encap_shared_load_sharing_element->has_operation())
	|| (prefix_masklen_distribution !=  nullptr && prefix_masklen_distribution->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-summary";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (vrf_name.is_set || is_set(vrf_name.yfilter)) leaf_name_data.push_back(vrf_name.get_name_leafdata());
    if (table_id.is_set || is_set(table_id.yfilter)) leaf_name_data.push_back(table_id.get_name_leafdata());
    if (prefix.is_set || is_set(prefix.yfilter)) leaf_name_data.push_back(prefix.get_name_leafdata());
    if (ss_tbl_id.is_set || is_set(ss_tbl_id.yfilter)) leaf_name_data.push_back(ss_tbl_id.get_name_leafdata());
    if (ss_tbl_id_ptr.is_set || is_set(ss_tbl_id_ptr.yfilter)) leaf_name_data.push_back(ss_tbl_id_ptr.get_name_leafdata());
    if (ss_vrf_id.is_set || is_set(ss_vrf_id.yfilter)) leaf_name_data.push_back(ss_vrf_id.get_name_leafdata());
    if (ss_vr_id.is_set || is_set(ss_vr_id.yfilter)) leaf_name_data.push_back(ss_vr_id.get_name_leafdata());
    if (load_balancing.is_set || is_set(load_balancing.yfilter)) leaf_name_data.push_back(load_balancing.get_name_leafdata());
    if (forwarding_elements.is_set || is_set(forwarding_elements.yfilter)) leaf_name_data.push_back(forwarding_elements.get_name_leafdata());
    if (routes.is_set || is_set(routes.yfilter)) leaf_name_data.push_back(routes.get_name_leafdata());
    if (prefix_in_place_modifications.is_set || is_set(prefix_in_place_modifications.yfilter)) leaf_name_data.push_back(prefix_in_place_modifications.get_name_leafdata());
    if (stale_prefix_deletes.is_set || is_set(stale_prefix_deletes.yfilter)) leaf_name_data.push_back(stale_prefix_deletes.get_name_leafdata());
    if (load_sharing_elements.is_set || is_set(load_sharing_elements.yfilter)) leaf_name_data.push_back(load_sharing_elements.get_name_leafdata());
    if (load_sharing_references.is_set || is_set(load_sharing_references.yfilter)) leaf_name_data.push_back(load_sharing_references.get_name_leafdata());
    if (total_load_share_element_bytes.is_set || is_set(total_load_share_element_bytes.yfilter)) leaf_name_data.push_back(total_load_share_element_bytes.get_name_leafdata());
    if (leaves_used_bytes.is_set || is_set(leaves_used_bytes.yfilter)) leaf_name_data.push_back(leaves_used_bytes.get_name_leafdata());
    if (reresolve_entries.is_set || is_set(reresolve_entries.yfilter)) leaf_name_data.push_back(reresolve_entries.get_name_leafdata());
    if (old_unresolve_entries.is_set || is_set(old_unresolve_entries.yfilter)) leaf_name_data.push_back(old_unresolve_entries.get_name_leafdata());
    if (new_unresolve_entries.is_set || is_set(new_unresolve_entries.yfilter)) leaf_name_data.push_back(new_unresolve_entries.get_name_leafdata());
    if (unresolve_entries.is_set || is_set(unresolve_entries.yfilter)) leaf_name_data.push_back(unresolve_entries.get_name_leafdata());
    if (cef_route_drops.is_set || is_set(cef_route_drops.yfilter)) leaf_name_data.push_back(cef_route_drops.get_name_leafdata());
    if (cef_version_mismatch_route_drops.is_set || is_set(cef_version_mismatch_route_drops.yfilter)) leaf_name_data.push_back(cef_version_mismatch_route_drops.get_name_leafdata());
    if (delete_cache_num_entries.is_set || is_set(delete_cache_num_entries.yfilter)) leaf_name_data.push_back(delete_cache_num_entries.get_name_leafdata());
    if (existing_leaves_revisions.is_set || is_set(existing_leaves_revisions.yfilter)) leaf_name_data.push_back(existing_leaves_revisions.get_name_leafdata());
    if (fib_default_prefix.is_set || is_set(fib_default_prefix.yfilter)) leaf_name_data.push_back(fib_default_prefix.get_name_leafdata());
    if (fib_default_prefix_mask_length.is_set || is_set(fib_default_prefix_mask_length.yfilter)) leaf_name_data.push_back(fib_default_prefix_mask_length.get_name_leafdata());
    if (next_hops.is_set || is_set(next_hops.yfilter)) leaf_name_data.push_back(next_hops.get_name_leafdata());
    if (incomplete_next_hops.is_set || is_set(incomplete_next_hops.yfilter)) leaf_name_data.push_back(incomplete_next_hops.get_name_leafdata());
    if (resolution_timer.is_set || is_set(resolution_timer.yfilter)) leaf_name_data.push_back(resolution_timer.get_name_leafdata());
    if (slow_process_timer.is_set || is_set(slow_process_timer.yfilter)) leaf_name_data.push_back(slow_process_timer.get_name_leafdata());
    if (max_resolution_timer.is_set || is_set(max_resolution_timer.yfilter)) leaf_name_data.push_back(max_resolution_timer.get_name_leafdata());
    if (imposition_prefixes.is_set || is_set(imposition_prefixes.yfilter)) leaf_name_data.push_back(imposition_prefixes.get_name_leafdata());
    if (extended_prefixes.is_set || is_set(extended_prefixes.yfilter)) leaf_name_data.push_back(extended_prefixes.get_name_leafdata());
    if (cefl_bl_recycled_routes.is_set || is_set(cefl_bl_recycled_routes.yfilter)) leaf_name_data.push_back(cefl_bl_recycled_routes.get_name_leafdata());
    if (ldi_backwalks.is_set || is_set(ldi_backwalks.yfilter)) leaf_name_data.push_back(ldi_backwalks.get_name_leafdata());
    if (ss_prot_route_count.is_set || is_set(ss_prot_route_count.yfilter)) leaf_name_data.push_back(ss_prot_route_count.get_name_leafdata());
    if (lisp_eid_prefixes.is_set || is_set(lisp_eid_prefixes.yfilter)) leaf_name_data.push_back(lisp_eid_prefixes.get_name_leafdata());
    if (lisp_eid_valid_prefixes.is_set || is_set(lisp_eid_valid_prefixes.yfilter)) leaf_name_data.push_back(lisp_eid_valid_prefixes.get_name_leafdata());
    if (lisp_rloc_objects.is_set || is_set(lisp_rloc_objects.yfilter)) leaf_name_data.push_back(lisp_rloc_objects.get_name_leafdata());
    if (number_of_sr_labels.is_set || is_set(number_of_sr_labels.yfilter)) leaf_name_data.push_back(number_of_sr_labels.get_name_leafdata());
    if (ss_vxlan_ltep_ifh.is_set || is_set(ss_vxlan_ltep_ifh.yfilter)) leaf_name_data.push_back(ss_vxlan_ltep_ifh.get_name_leafdata());
    if (ss_drop_pl_count.is_set || is_set(ss_drop_pl_count.yfilter)) leaf_name_data.push_back(ss_drop_pl_count.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "exclusive-load-sharing-element")
    {
        if(exclusive_load_sharing_element == nullptr)
        {
            exclusive_load_sharing_element = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement>();
        }
        return exclusive_load_sharing_element;
    }

    if(child_yang_name == "shared-load-sharing-element")
    {
        if(shared_load_sharing_element == nullptr)
        {
            shared_load_sharing_element = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement>();
        }
        return shared_load_sharing_element;
    }

    if(child_yang_name == "cross-shared-load-sharing-element")
    {
        if(cross_shared_load_sharing_element == nullptr)
        {
            cross_shared_load_sharing_element = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement>();
        }
        return cross_shared_load_sharing_element;
    }

    if(child_yang_name == "encap-shared-load-sharing-element")
    {
        if(encap_shared_load_sharing_element == nullptr)
        {
            encap_shared_load_sharing_element = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement>();
        }
        return encap_shared_load_sharing_element;
    }

    if(child_yang_name == "prefix-masklen-distribution")
    {
        if(prefix_masklen_distribution == nullptr)
        {
            prefix_masklen_distribution = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution>();
        }
        return prefix_masklen_distribution;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(exclusive_load_sharing_element != nullptr)
    {
        _children["exclusive-load-sharing-element"] = exclusive_load_sharing_element;
    }

    if(shared_load_sharing_element != nullptr)
    {
        _children["shared-load-sharing-element"] = shared_load_sharing_element;
    }

    if(cross_shared_load_sharing_element != nullptr)
    {
        _children["cross-shared-load-sharing-element"] = cross_shared_load_sharing_element;
    }

    if(encap_shared_load_sharing_element != nullptr)
    {
        _children["encap-shared-load-sharing-element"] = encap_shared_load_sharing_element;
    }

    if(prefix_masklen_distribution != nullptr)
    {
        _children["prefix-masklen-distribution"] = prefix_masklen_distribution;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "vrf-name")
    {
        vrf_name = value;
        vrf_name.value_namespace = name_space;
        vrf_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "table-id")
    {
        table_id = value;
        table_id.value_namespace = name_space;
        table_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix")
    {
        prefix = value;
        prefix.value_namespace = name_space;
        prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-tbl-id")
    {
        ss_tbl_id = value;
        ss_tbl_id.value_namespace = name_space;
        ss_tbl_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-tbl-id-ptr")
    {
        ss_tbl_id_ptr = value;
        ss_tbl_id_ptr.value_namespace = name_space;
        ss_tbl_id_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-vrf-id")
    {
        ss_vrf_id = value;
        ss_vrf_id.value_namespace = name_space;
        ss_vrf_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-vr-id")
    {
        ss_vr_id = value;
        ss_vr_id.value_namespace = name_space;
        ss_vr_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-balancing")
    {
        load_balancing = value;
        load_balancing.value_namespace = name_space;
        load_balancing.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forwarding-elements")
    {
        forwarding_elements = value;
        forwarding_elements.value_namespace = name_space;
        forwarding_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "routes")
    {
        routes = value;
        routes.value_namespace = name_space;
        routes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-in-place-modifications")
    {
        prefix_in_place_modifications = value;
        prefix_in_place_modifications.value_namespace = name_space;
        prefix_in_place_modifications.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "stale-prefix-deletes")
    {
        stale_prefix_deletes = value;
        stale_prefix_deletes.value_namespace = name_space;
        stale_prefix_deletes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-sharing-elements")
    {
        load_sharing_elements = value;
        load_sharing_elements.value_namespace = name_space;
        load_sharing_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-sharing-references")
    {
        load_sharing_references = value;
        load_sharing_references.value_namespace = name_space;
        load_sharing_references.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-share-element-bytes")
    {
        total_load_share_element_bytes = value;
        total_load_share_element_bytes.value_namespace = name_space;
        total_load_share_element_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "leaves-used-bytes")
    {
        leaves_used_bytes = value;
        leaves_used_bytes.value_namespace = name_space;
        leaves_used_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "reresolve-entries")
    {
        reresolve_entries = value;
        reresolve_entries.value_namespace = name_space;
        reresolve_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "old-unresolve-entries")
    {
        old_unresolve_entries = value;
        old_unresolve_entries.value_namespace = name_space;
        old_unresolve_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "new-unresolve-entries")
    {
        new_unresolve_entries = value;
        new_unresolve_entries.value_namespace = name_space;
        new_unresolve_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "unresolve-entries")
    {
        unresolve_entries = value;
        unresolve_entries.value_namespace = name_space;
        unresolve_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cef-route-drops")
    {
        cef_route_drops = value;
        cef_route_drops.value_namespace = name_space;
        cef_route_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cef-version-mismatch-route-drops")
    {
        cef_version_mismatch_route_drops = value;
        cef_version_mismatch_route_drops.value_namespace = name_space;
        cef_version_mismatch_route_drops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "delete-cache-num-entries")
    {
        delete_cache_num_entries = value;
        delete_cache_num_entries.value_namespace = name_space;
        delete_cache_num_entries.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "existing-leaves-revisions")
    {
        existing_leaves_revisions = value;
        existing_leaves_revisions.value_namespace = name_space;
        existing_leaves_revisions.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-default-prefix")
    {
        fib_default_prefix = value;
        fib_default_prefix.value_namespace = name_space;
        fib_default_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-default-prefix-mask-length")
    {
        fib_default_prefix_mask_length = value;
        fib_default_prefix_mask_length.value_namespace = name_space;
        fib_default_prefix_mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hops")
    {
        next_hops = value;
        next_hops.value_namespace = name_space;
        next_hops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "incomplete-next-hops")
    {
        incomplete_next_hops = value;
        incomplete_next_hops.value_namespace = name_space;
        incomplete_next_hops.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "resolution-timer")
    {
        resolution_timer = value;
        resolution_timer.value_namespace = name_space;
        resolution_timer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "slow-process-timer")
    {
        slow_process_timer = value;
        slow_process_timer.value_namespace = name_space;
        slow_process_timer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "max-resolution-timer")
    {
        max_resolution_timer = value;
        max_resolution_timer.value_namespace = name_space;
        max_resolution_timer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "imposition-prefixes")
    {
        imposition_prefixes = value;
        imposition_prefixes.value_namespace = name_space;
        imposition_prefixes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extended-prefixes")
    {
        extended_prefixes = value;
        extended_prefixes.value_namespace = name_space;
        extended_prefixes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cefl-bl-recycled-routes")
    {
        cefl_bl_recycled_routes = value;
        cefl_bl_recycled_routes.value_namespace = name_space;
        cefl_bl_recycled_routes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-backwalks")
    {
        ldi_backwalks = value;
        ldi_backwalks.value_namespace = name_space;
        ldi_backwalks.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-prot-route-count")
    {
        ss_prot_route_count = value;
        ss_prot_route_count.value_namespace = name_space;
        ss_prot_route_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-eid-prefixes")
    {
        lisp_eid_prefixes = value;
        lisp_eid_prefixes.value_namespace = name_space;
        lisp_eid_prefixes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-eid-valid-prefixes")
    {
        lisp_eid_valid_prefixes = value;
        lisp_eid_valid_prefixes.value_namespace = name_space;
        lisp_eid_valid_prefixes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisp-rloc-objects")
    {
        lisp_rloc_objects = value;
        lisp_rloc_objects.value_namespace = name_space;
        lisp_rloc_objects.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-sr-labels")
    {
        number_of_sr_labels = value;
        number_of_sr_labels.value_namespace = name_space;
        number_of_sr_labels.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-vxlan-ltep-ifh")
    {
        ss_vxlan_ltep_ifh = value;
        ss_vxlan_ltep_ifh.value_namespace = name_space;
        ss_vxlan_ltep_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ss-drop-pl-count")
    {
        ss_drop_pl_count = value;
        ss_drop_pl_count.value_namespace = name_space;
        ss_drop_pl_count.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "vrf-name")
    {
        vrf_name.yfilter = yfilter;
    }
    if(value_path == "table-id")
    {
        table_id.yfilter = yfilter;
    }
    if(value_path == "prefix")
    {
        prefix.yfilter = yfilter;
    }
    if(value_path == "ss-tbl-id")
    {
        ss_tbl_id.yfilter = yfilter;
    }
    if(value_path == "ss-tbl-id-ptr")
    {
        ss_tbl_id_ptr.yfilter = yfilter;
    }
    if(value_path == "ss-vrf-id")
    {
        ss_vrf_id.yfilter = yfilter;
    }
    if(value_path == "ss-vr-id")
    {
        ss_vr_id.yfilter = yfilter;
    }
    if(value_path == "load-balancing")
    {
        load_balancing.yfilter = yfilter;
    }
    if(value_path == "forwarding-elements")
    {
        forwarding_elements.yfilter = yfilter;
    }
    if(value_path == "routes")
    {
        routes.yfilter = yfilter;
    }
    if(value_path == "prefix-in-place-modifications")
    {
        prefix_in_place_modifications.yfilter = yfilter;
    }
    if(value_path == "stale-prefix-deletes")
    {
        stale_prefix_deletes.yfilter = yfilter;
    }
    if(value_path == "load-sharing-elements")
    {
        load_sharing_elements.yfilter = yfilter;
    }
    if(value_path == "load-sharing-references")
    {
        load_sharing_references.yfilter = yfilter;
    }
    if(value_path == "total-load-share-element-bytes")
    {
        total_load_share_element_bytes.yfilter = yfilter;
    }
    if(value_path == "leaves-used-bytes")
    {
        leaves_used_bytes.yfilter = yfilter;
    }
    if(value_path == "reresolve-entries")
    {
        reresolve_entries.yfilter = yfilter;
    }
    if(value_path == "old-unresolve-entries")
    {
        old_unresolve_entries.yfilter = yfilter;
    }
    if(value_path == "new-unresolve-entries")
    {
        new_unresolve_entries.yfilter = yfilter;
    }
    if(value_path == "unresolve-entries")
    {
        unresolve_entries.yfilter = yfilter;
    }
    if(value_path == "cef-route-drops")
    {
        cef_route_drops.yfilter = yfilter;
    }
    if(value_path == "cef-version-mismatch-route-drops")
    {
        cef_version_mismatch_route_drops.yfilter = yfilter;
    }
    if(value_path == "delete-cache-num-entries")
    {
        delete_cache_num_entries.yfilter = yfilter;
    }
    if(value_path == "existing-leaves-revisions")
    {
        existing_leaves_revisions.yfilter = yfilter;
    }
    if(value_path == "fib-default-prefix")
    {
        fib_default_prefix.yfilter = yfilter;
    }
    if(value_path == "fib-default-prefix-mask-length")
    {
        fib_default_prefix_mask_length.yfilter = yfilter;
    }
    if(value_path == "next-hops")
    {
        next_hops.yfilter = yfilter;
    }
    if(value_path == "incomplete-next-hops")
    {
        incomplete_next_hops.yfilter = yfilter;
    }
    if(value_path == "resolution-timer")
    {
        resolution_timer.yfilter = yfilter;
    }
    if(value_path == "slow-process-timer")
    {
        slow_process_timer.yfilter = yfilter;
    }
    if(value_path == "max-resolution-timer")
    {
        max_resolution_timer.yfilter = yfilter;
    }
    if(value_path == "imposition-prefixes")
    {
        imposition_prefixes.yfilter = yfilter;
    }
    if(value_path == "extended-prefixes")
    {
        extended_prefixes.yfilter = yfilter;
    }
    if(value_path == "cefl-bl-recycled-routes")
    {
        cefl_bl_recycled_routes.yfilter = yfilter;
    }
    if(value_path == "ldi-backwalks")
    {
        ldi_backwalks.yfilter = yfilter;
    }
    if(value_path == "ss-prot-route-count")
    {
        ss_prot_route_count.yfilter = yfilter;
    }
    if(value_path == "lisp-eid-prefixes")
    {
        lisp_eid_prefixes.yfilter = yfilter;
    }
    if(value_path == "lisp-eid-valid-prefixes")
    {
        lisp_eid_valid_prefixes.yfilter = yfilter;
    }
    if(value_path == "lisp-rloc-objects")
    {
        lisp_rloc_objects.yfilter = yfilter;
    }
    if(value_path == "number-of-sr-labels")
    {
        number_of_sr_labels.yfilter = yfilter;
    }
    if(value_path == "ss-vxlan-ltep-ifh")
    {
        ss_vxlan_ltep_ifh.yfilter = yfilter;
    }
    if(value_path == "ss-drop-pl-count")
    {
        ss_drop_pl_count.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "exclusive-load-sharing-element" || name == "shared-load-sharing-element" || name == "cross-shared-load-sharing-element" || name == "encap-shared-load-sharing-element" || name == "prefix-masklen-distribution" || name == "vrf-name" || name == "table-id" || name == "prefix" || name == "ss-tbl-id" || name == "ss-tbl-id-ptr" || name == "ss-vrf-id" || name == "ss-vr-id" || name == "load-balancing" || name == "forwarding-elements" || name == "routes" || name == "prefix-in-place-modifications" || name == "stale-prefix-deletes" || name == "load-sharing-elements" || name == "load-sharing-references" || name == "total-load-share-element-bytes" || name == "leaves-used-bytes" || name == "reresolve-entries" || name == "old-unresolve-entries" || name == "new-unresolve-entries" || name == "unresolve-entries" || name == "cef-route-drops" || name == "cef-version-mismatch-route-drops" || name == "delete-cache-num-entries" || name == "existing-leaves-revisions" || name == "fib-default-prefix" || name == "fib-default-prefix-mask-length" || name == "next-hops" || name == "incomplete-next-hops" || name == "resolution-timer" || name == "slow-process-timer" || name == "max-resolution-timer" || name == "imposition-prefixes" || name == "extended-prefixes" || name == "cefl-bl-recycled-routes" || name == "ldi-backwalks" || name == "ss-prot-route-count" || name == "lisp-eid-prefixes" || name == "lisp-eid-valid-prefixes" || name == "lisp-rloc-objects" || name == "number-of-sr-labels" || name == "ss-vxlan-ltep-ifh" || name == "ss-drop-pl-count")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement::ExclusiveLoadSharingElement()
    :
    total_load_sharing_element_bytes{YType::uint32, "total-load-sharing-element-bytes"},
    total_load_sharing_element_references{YType::uint64, "total-load-sharing-element-references"},
    total_path_list_elements{YType::uint32, "total-path-list-elements"},
    recursive_path_list_elements{YType::uint32, "recursive-path-list-elements"},
    platform_shared_path_list_elements{YType::uint32, "platform-shared-path-list-elements"},
    retry_path_list_elements{YType::uint32, "retry-path-list-elements"},
    total_load_info_elements{YType::uint32, "total-load-info-elements"},
    recursive_load_info_elements{YType::uint32, "recursive-load-info-elements"},
    platform_shared_load_info_elements{YType::uint32, "platform-shared-load-info-elements"},
    xpl_load_info_elements{YType::uint32, "xpl-load-info-elements"}
{

    yang_name = "exclusive-load-sharing-element"; yang_parent_name = "fib-summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement::~ExclusiveLoadSharingElement()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement::has_data() const
{
    if (is_presence_container) return true;
    return total_load_sharing_element_bytes.is_set
	|| total_load_sharing_element_references.is_set
	|| total_path_list_elements.is_set
	|| recursive_path_list_elements.is_set
	|| platform_shared_path_list_elements.is_set
	|| retry_path_list_elements.is_set
	|| total_load_info_elements.is_set
	|| recursive_load_info_elements.is_set
	|| platform_shared_load_info_elements.is_set
	|| xpl_load_info_elements.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(total_load_sharing_element_bytes.yfilter)
	|| ydk::is_set(total_load_sharing_element_references.yfilter)
	|| ydk::is_set(total_path_list_elements.yfilter)
	|| ydk::is_set(recursive_path_list_elements.yfilter)
	|| ydk::is_set(platform_shared_path_list_elements.yfilter)
	|| ydk::is_set(retry_path_list_elements.yfilter)
	|| ydk::is_set(total_load_info_elements.yfilter)
	|| ydk::is_set(recursive_load_info_elements.yfilter)
	|| ydk::is_set(platform_shared_load_info_elements.yfilter)
	|| ydk::is_set(xpl_load_info_elements.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "exclusive-load-sharing-element";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (total_load_sharing_element_bytes.is_set || is_set(total_load_sharing_element_bytes.yfilter)) leaf_name_data.push_back(total_load_sharing_element_bytes.get_name_leafdata());
    if (total_load_sharing_element_references.is_set || is_set(total_load_sharing_element_references.yfilter)) leaf_name_data.push_back(total_load_sharing_element_references.get_name_leafdata());
    if (total_path_list_elements.is_set || is_set(total_path_list_elements.yfilter)) leaf_name_data.push_back(total_path_list_elements.get_name_leafdata());
    if (recursive_path_list_elements.is_set || is_set(recursive_path_list_elements.yfilter)) leaf_name_data.push_back(recursive_path_list_elements.get_name_leafdata());
    if (platform_shared_path_list_elements.is_set || is_set(platform_shared_path_list_elements.yfilter)) leaf_name_data.push_back(platform_shared_path_list_elements.get_name_leafdata());
    if (retry_path_list_elements.is_set || is_set(retry_path_list_elements.yfilter)) leaf_name_data.push_back(retry_path_list_elements.get_name_leafdata());
    if (total_load_info_elements.is_set || is_set(total_load_info_elements.yfilter)) leaf_name_data.push_back(total_load_info_elements.get_name_leafdata());
    if (recursive_load_info_elements.is_set || is_set(recursive_load_info_elements.yfilter)) leaf_name_data.push_back(recursive_load_info_elements.get_name_leafdata());
    if (platform_shared_load_info_elements.is_set || is_set(platform_shared_load_info_elements.yfilter)) leaf_name_data.push_back(platform_shared_load_info_elements.get_name_leafdata());
    if (xpl_load_info_elements.is_set || is_set(xpl_load_info_elements.yfilter)) leaf_name_data.push_back(xpl_load_info_elements.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes = value;
        total_load_sharing_element_bytes.value_namespace = name_space;
        total_load_sharing_element_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references = value;
        total_load_sharing_element_references.value_namespace = name_space;
        total_load_sharing_element_references.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements = value;
        total_path_list_elements.value_namespace = name_space;
        total_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements = value;
        recursive_path_list_elements.value_namespace = name_space;
        recursive_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements = value;
        platform_shared_path_list_elements.value_namespace = name_space;
        platform_shared_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements = value;
        retry_path_list_elements.value_namespace = name_space;
        retry_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements = value;
        total_load_info_elements.value_namespace = name_space;
        total_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements = value;
        recursive_load_info_elements.value_namespace = name_space;
        recursive_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements = value;
        platform_shared_load_info_elements.value_namespace = name_space;
        platform_shared_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements = value;
        xpl_load_info_elements.value_namespace = name_space;
        xpl_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references.yfilter = yfilter;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::ExclusiveLoadSharingElement::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "total-load-sharing-element-bytes" || name == "total-load-sharing-element-references" || name == "total-path-list-elements" || name == "recursive-path-list-elements" || name == "platform-shared-path-list-elements" || name == "retry-path-list-elements" || name == "total-load-info-elements" || name == "recursive-load-info-elements" || name == "platform-shared-load-info-elements" || name == "xpl-load-info-elements")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement::SharedLoadSharingElement()
    :
    total_load_sharing_element_bytes{YType::uint32, "total-load-sharing-element-bytes"},
    total_load_sharing_element_references{YType::uint64, "total-load-sharing-element-references"},
    total_path_list_elements{YType::uint32, "total-path-list-elements"},
    recursive_path_list_elements{YType::uint32, "recursive-path-list-elements"},
    platform_shared_path_list_elements{YType::uint32, "platform-shared-path-list-elements"},
    retry_path_list_elements{YType::uint32, "retry-path-list-elements"},
    total_load_info_elements{YType::uint32, "total-load-info-elements"},
    recursive_load_info_elements{YType::uint32, "recursive-load-info-elements"},
    platform_shared_load_info_elements{YType::uint32, "platform-shared-load-info-elements"},
    xpl_load_info_elements{YType::uint32, "xpl-load-info-elements"}
{

    yang_name = "shared-load-sharing-element"; yang_parent_name = "fib-summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement::~SharedLoadSharingElement()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement::has_data() const
{
    if (is_presence_container) return true;
    return total_load_sharing_element_bytes.is_set
	|| total_load_sharing_element_references.is_set
	|| total_path_list_elements.is_set
	|| recursive_path_list_elements.is_set
	|| platform_shared_path_list_elements.is_set
	|| retry_path_list_elements.is_set
	|| total_load_info_elements.is_set
	|| recursive_load_info_elements.is_set
	|| platform_shared_load_info_elements.is_set
	|| xpl_load_info_elements.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(total_load_sharing_element_bytes.yfilter)
	|| ydk::is_set(total_load_sharing_element_references.yfilter)
	|| ydk::is_set(total_path_list_elements.yfilter)
	|| ydk::is_set(recursive_path_list_elements.yfilter)
	|| ydk::is_set(platform_shared_path_list_elements.yfilter)
	|| ydk::is_set(retry_path_list_elements.yfilter)
	|| ydk::is_set(total_load_info_elements.yfilter)
	|| ydk::is_set(recursive_load_info_elements.yfilter)
	|| ydk::is_set(platform_shared_load_info_elements.yfilter)
	|| ydk::is_set(xpl_load_info_elements.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "shared-load-sharing-element";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (total_load_sharing_element_bytes.is_set || is_set(total_load_sharing_element_bytes.yfilter)) leaf_name_data.push_back(total_load_sharing_element_bytes.get_name_leafdata());
    if (total_load_sharing_element_references.is_set || is_set(total_load_sharing_element_references.yfilter)) leaf_name_data.push_back(total_load_sharing_element_references.get_name_leafdata());
    if (total_path_list_elements.is_set || is_set(total_path_list_elements.yfilter)) leaf_name_data.push_back(total_path_list_elements.get_name_leafdata());
    if (recursive_path_list_elements.is_set || is_set(recursive_path_list_elements.yfilter)) leaf_name_data.push_back(recursive_path_list_elements.get_name_leafdata());
    if (platform_shared_path_list_elements.is_set || is_set(platform_shared_path_list_elements.yfilter)) leaf_name_data.push_back(platform_shared_path_list_elements.get_name_leafdata());
    if (retry_path_list_elements.is_set || is_set(retry_path_list_elements.yfilter)) leaf_name_data.push_back(retry_path_list_elements.get_name_leafdata());
    if (total_load_info_elements.is_set || is_set(total_load_info_elements.yfilter)) leaf_name_data.push_back(total_load_info_elements.get_name_leafdata());
    if (recursive_load_info_elements.is_set || is_set(recursive_load_info_elements.yfilter)) leaf_name_data.push_back(recursive_load_info_elements.get_name_leafdata());
    if (platform_shared_load_info_elements.is_set || is_set(platform_shared_load_info_elements.yfilter)) leaf_name_data.push_back(platform_shared_load_info_elements.get_name_leafdata());
    if (xpl_load_info_elements.is_set || is_set(xpl_load_info_elements.yfilter)) leaf_name_data.push_back(xpl_load_info_elements.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes = value;
        total_load_sharing_element_bytes.value_namespace = name_space;
        total_load_sharing_element_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references = value;
        total_load_sharing_element_references.value_namespace = name_space;
        total_load_sharing_element_references.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements = value;
        total_path_list_elements.value_namespace = name_space;
        total_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements = value;
        recursive_path_list_elements.value_namespace = name_space;
        recursive_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements = value;
        platform_shared_path_list_elements.value_namespace = name_space;
        platform_shared_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements = value;
        retry_path_list_elements.value_namespace = name_space;
        retry_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements = value;
        total_load_info_elements.value_namespace = name_space;
        total_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements = value;
        recursive_load_info_elements.value_namespace = name_space;
        recursive_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements = value;
        platform_shared_load_info_elements.value_namespace = name_space;
        platform_shared_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements = value;
        xpl_load_info_elements.value_namespace = name_space;
        xpl_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references.yfilter = yfilter;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::SharedLoadSharingElement::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "total-load-sharing-element-bytes" || name == "total-load-sharing-element-references" || name == "total-path-list-elements" || name == "recursive-path-list-elements" || name == "platform-shared-path-list-elements" || name == "retry-path-list-elements" || name == "total-load-info-elements" || name == "recursive-load-info-elements" || name == "platform-shared-load-info-elements" || name == "xpl-load-info-elements")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement::CrossSharedLoadSharingElement()
    :
    total_load_sharing_element_bytes{YType::uint32, "total-load-sharing-element-bytes"},
    total_load_sharing_element_references{YType::uint64, "total-load-sharing-element-references"},
    total_path_list_elements{YType::uint32, "total-path-list-elements"},
    recursive_path_list_elements{YType::uint32, "recursive-path-list-elements"},
    platform_shared_path_list_elements{YType::uint32, "platform-shared-path-list-elements"},
    retry_path_list_elements{YType::uint32, "retry-path-list-elements"},
    total_load_info_elements{YType::uint32, "total-load-info-elements"},
    recursive_load_info_elements{YType::uint32, "recursive-load-info-elements"},
    platform_shared_load_info_elements{YType::uint32, "platform-shared-load-info-elements"},
    xpl_load_info_elements{YType::uint32, "xpl-load-info-elements"}
{

    yang_name = "cross-shared-load-sharing-element"; yang_parent_name = "fib-summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement::~CrossSharedLoadSharingElement()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement::has_data() const
{
    if (is_presence_container) return true;
    return total_load_sharing_element_bytes.is_set
	|| total_load_sharing_element_references.is_set
	|| total_path_list_elements.is_set
	|| recursive_path_list_elements.is_set
	|| platform_shared_path_list_elements.is_set
	|| retry_path_list_elements.is_set
	|| total_load_info_elements.is_set
	|| recursive_load_info_elements.is_set
	|| platform_shared_load_info_elements.is_set
	|| xpl_load_info_elements.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(total_load_sharing_element_bytes.yfilter)
	|| ydk::is_set(total_load_sharing_element_references.yfilter)
	|| ydk::is_set(total_path_list_elements.yfilter)
	|| ydk::is_set(recursive_path_list_elements.yfilter)
	|| ydk::is_set(platform_shared_path_list_elements.yfilter)
	|| ydk::is_set(retry_path_list_elements.yfilter)
	|| ydk::is_set(total_load_info_elements.yfilter)
	|| ydk::is_set(recursive_load_info_elements.yfilter)
	|| ydk::is_set(platform_shared_load_info_elements.yfilter)
	|| ydk::is_set(xpl_load_info_elements.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cross-shared-load-sharing-element";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (total_load_sharing_element_bytes.is_set || is_set(total_load_sharing_element_bytes.yfilter)) leaf_name_data.push_back(total_load_sharing_element_bytes.get_name_leafdata());
    if (total_load_sharing_element_references.is_set || is_set(total_load_sharing_element_references.yfilter)) leaf_name_data.push_back(total_load_sharing_element_references.get_name_leafdata());
    if (total_path_list_elements.is_set || is_set(total_path_list_elements.yfilter)) leaf_name_data.push_back(total_path_list_elements.get_name_leafdata());
    if (recursive_path_list_elements.is_set || is_set(recursive_path_list_elements.yfilter)) leaf_name_data.push_back(recursive_path_list_elements.get_name_leafdata());
    if (platform_shared_path_list_elements.is_set || is_set(platform_shared_path_list_elements.yfilter)) leaf_name_data.push_back(platform_shared_path_list_elements.get_name_leafdata());
    if (retry_path_list_elements.is_set || is_set(retry_path_list_elements.yfilter)) leaf_name_data.push_back(retry_path_list_elements.get_name_leafdata());
    if (total_load_info_elements.is_set || is_set(total_load_info_elements.yfilter)) leaf_name_data.push_back(total_load_info_elements.get_name_leafdata());
    if (recursive_load_info_elements.is_set || is_set(recursive_load_info_elements.yfilter)) leaf_name_data.push_back(recursive_load_info_elements.get_name_leafdata());
    if (platform_shared_load_info_elements.is_set || is_set(platform_shared_load_info_elements.yfilter)) leaf_name_data.push_back(platform_shared_load_info_elements.get_name_leafdata());
    if (xpl_load_info_elements.is_set || is_set(xpl_load_info_elements.yfilter)) leaf_name_data.push_back(xpl_load_info_elements.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes = value;
        total_load_sharing_element_bytes.value_namespace = name_space;
        total_load_sharing_element_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references = value;
        total_load_sharing_element_references.value_namespace = name_space;
        total_load_sharing_element_references.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements = value;
        total_path_list_elements.value_namespace = name_space;
        total_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements = value;
        recursive_path_list_elements.value_namespace = name_space;
        recursive_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements = value;
        platform_shared_path_list_elements.value_namespace = name_space;
        platform_shared_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements = value;
        retry_path_list_elements.value_namespace = name_space;
        retry_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements = value;
        total_load_info_elements.value_namespace = name_space;
        total_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements = value;
        recursive_load_info_elements.value_namespace = name_space;
        recursive_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements = value;
        platform_shared_load_info_elements.value_namespace = name_space;
        platform_shared_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements = value;
        xpl_load_info_elements.value_namespace = name_space;
        xpl_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references.yfilter = yfilter;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::CrossSharedLoadSharingElement::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "total-load-sharing-element-bytes" || name == "total-load-sharing-element-references" || name == "total-path-list-elements" || name == "recursive-path-list-elements" || name == "platform-shared-path-list-elements" || name == "retry-path-list-elements" || name == "total-load-info-elements" || name == "recursive-load-info-elements" || name == "platform-shared-load-info-elements" || name == "xpl-load-info-elements")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement::EncapSharedLoadSharingElement()
    :
    total_load_sharing_element_bytes{YType::uint32, "total-load-sharing-element-bytes"},
    total_load_sharing_element_references{YType::uint64, "total-load-sharing-element-references"},
    total_path_list_elements{YType::uint32, "total-path-list-elements"},
    recursive_path_list_elements{YType::uint32, "recursive-path-list-elements"},
    platform_shared_path_list_elements{YType::uint32, "platform-shared-path-list-elements"},
    retry_path_list_elements{YType::uint32, "retry-path-list-elements"},
    total_load_info_elements{YType::uint32, "total-load-info-elements"},
    recursive_load_info_elements{YType::uint32, "recursive-load-info-elements"},
    platform_shared_load_info_elements{YType::uint32, "platform-shared-load-info-elements"},
    xpl_load_info_elements{YType::uint32, "xpl-load-info-elements"}
{

    yang_name = "encap-shared-load-sharing-element"; yang_parent_name = "fib-summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement::~EncapSharedLoadSharingElement()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement::has_data() const
{
    if (is_presence_container) return true;
    return total_load_sharing_element_bytes.is_set
	|| total_load_sharing_element_references.is_set
	|| total_path_list_elements.is_set
	|| recursive_path_list_elements.is_set
	|| platform_shared_path_list_elements.is_set
	|| retry_path_list_elements.is_set
	|| total_load_info_elements.is_set
	|| recursive_load_info_elements.is_set
	|| platform_shared_load_info_elements.is_set
	|| xpl_load_info_elements.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(total_load_sharing_element_bytes.yfilter)
	|| ydk::is_set(total_load_sharing_element_references.yfilter)
	|| ydk::is_set(total_path_list_elements.yfilter)
	|| ydk::is_set(recursive_path_list_elements.yfilter)
	|| ydk::is_set(platform_shared_path_list_elements.yfilter)
	|| ydk::is_set(retry_path_list_elements.yfilter)
	|| ydk::is_set(total_load_info_elements.yfilter)
	|| ydk::is_set(recursive_load_info_elements.yfilter)
	|| ydk::is_set(platform_shared_load_info_elements.yfilter)
	|| ydk::is_set(xpl_load_info_elements.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "encap-shared-load-sharing-element";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (total_load_sharing_element_bytes.is_set || is_set(total_load_sharing_element_bytes.yfilter)) leaf_name_data.push_back(total_load_sharing_element_bytes.get_name_leafdata());
    if (total_load_sharing_element_references.is_set || is_set(total_load_sharing_element_references.yfilter)) leaf_name_data.push_back(total_load_sharing_element_references.get_name_leafdata());
    if (total_path_list_elements.is_set || is_set(total_path_list_elements.yfilter)) leaf_name_data.push_back(total_path_list_elements.get_name_leafdata());
    if (recursive_path_list_elements.is_set || is_set(recursive_path_list_elements.yfilter)) leaf_name_data.push_back(recursive_path_list_elements.get_name_leafdata());
    if (platform_shared_path_list_elements.is_set || is_set(platform_shared_path_list_elements.yfilter)) leaf_name_data.push_back(platform_shared_path_list_elements.get_name_leafdata());
    if (retry_path_list_elements.is_set || is_set(retry_path_list_elements.yfilter)) leaf_name_data.push_back(retry_path_list_elements.get_name_leafdata());
    if (total_load_info_elements.is_set || is_set(total_load_info_elements.yfilter)) leaf_name_data.push_back(total_load_info_elements.get_name_leafdata());
    if (recursive_load_info_elements.is_set || is_set(recursive_load_info_elements.yfilter)) leaf_name_data.push_back(recursive_load_info_elements.get_name_leafdata());
    if (platform_shared_load_info_elements.is_set || is_set(platform_shared_load_info_elements.yfilter)) leaf_name_data.push_back(platform_shared_load_info_elements.get_name_leafdata());
    if (xpl_load_info_elements.is_set || is_set(xpl_load_info_elements.yfilter)) leaf_name_data.push_back(xpl_load_info_elements.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes = value;
        total_load_sharing_element_bytes.value_namespace = name_space;
        total_load_sharing_element_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references = value;
        total_load_sharing_element_references.value_namespace = name_space;
        total_load_sharing_element_references.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements = value;
        total_path_list_elements.value_namespace = name_space;
        total_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements = value;
        recursive_path_list_elements.value_namespace = name_space;
        recursive_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements = value;
        platform_shared_path_list_elements.value_namespace = name_space;
        platform_shared_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements = value;
        retry_path_list_elements.value_namespace = name_space;
        retry_path_list_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements = value;
        total_load_info_elements.value_namespace = name_space;
        total_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements = value;
        recursive_load_info_elements.value_namespace = name_space;
        recursive_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements = value;
        platform_shared_load_info_elements.value_namespace = name_space;
        platform_shared_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements = value;
        xpl_load_info_elements.value_namespace = name_space;
        xpl_load_info_elements.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "total-load-sharing-element-bytes")
    {
        total_load_sharing_element_bytes.yfilter = yfilter;
    }
    if(value_path == "total-load-sharing-element-references")
    {
        total_load_sharing_element_references.yfilter = yfilter;
    }
    if(value_path == "total-path-list-elements")
    {
        total_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-path-list-elements")
    {
        recursive_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-path-list-elements")
    {
        platform_shared_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "retry-path-list-elements")
    {
        retry_path_list_elements.yfilter = yfilter;
    }
    if(value_path == "total-load-info-elements")
    {
        total_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "recursive-load-info-elements")
    {
        recursive_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "platform-shared-load-info-elements")
    {
        platform_shared_load_info_elements.yfilter = yfilter;
    }
    if(value_path == "xpl-load-info-elements")
    {
        xpl_load_info_elements.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::EncapSharedLoadSharingElement::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "total-load-sharing-element-bytes" || name == "total-load-sharing-element-references" || name == "total-path-list-elements" || name == "recursive-path-list-elements" || name == "platform-shared-path-list-elements" || name == "retry-path-list-elements" || name == "total-load-info-elements" || name == "recursive-load-info-elements" || name == "platform-shared-load-info-elements" || name == "xpl-load-info-elements")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::PrefixMasklenDistribution()
    :
    unicast_prefixe(this, {})
    , broadcast_prefixe(this, {})
    , multicast_prefix(this, {})
{

    yang_name = "prefix-masklen-distribution"; yang_parent_name = "fib-summary"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::~PrefixMasklenDistribution()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<unicast_prefixe.len(); index++)
    {
        if(unicast_prefixe[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<broadcast_prefixe.len(); index++)
    {
        if(broadcast_prefixe[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<multicast_prefix.len(); index++)
    {
        if(multicast_prefix[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::has_operation() const
{
    for (std::size_t index=0; index<unicast_prefixe.len(); index++)
    {
        if(unicast_prefixe[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<broadcast_prefixe.len(); index++)
    {
        if(broadcast_prefixe[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<multicast_prefix.len(); index++)
    {
        if(multicast_prefix[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "prefix-masklen-distribution";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "unicast-prefixe")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe>();
        ent_->parent = this;
        unicast_prefixe.append(ent_);
        return ent_;
    }

    if(child_yang_name == "broadcast-prefixe")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe>();
        ent_->parent = this;
        broadcast_prefixe.append(ent_);
        return ent_;
    }

    if(child_yang_name == "multicast-prefix")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix>();
        ent_->parent = this;
        multicast_prefix.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : unicast_prefixe.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : broadcast_prefixe.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : multicast_prefix.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "unicast-prefixe" || name == "broadcast-prefixe" || name == "multicast-prefix")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe::UnicastPrefixe()
    :
    mask_length{YType::uint8, "mask-length"},
    number_of_prefixes{YType::uint32, "number-of-prefixes"}
{

    yang_name = "unicast-prefixe"; yang_parent_name = "prefix-masklen-distribution"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe::~UnicastPrefixe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe::has_data() const
{
    if (is_presence_container) return true;
    return mask_length.is_set
	|| number_of_prefixes.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(mask_length.yfilter)
	|| ydk::is_set(number_of_prefixes.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unicast-prefixe";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (mask_length.is_set || is_set(mask_length.yfilter)) leaf_name_data.push_back(mask_length.get_name_leafdata());
    if (number_of_prefixes.is_set || is_set(number_of_prefixes.yfilter)) leaf_name_data.push_back(number_of_prefixes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "mask-length")
    {
        mask_length = value;
        mask_length.value_namespace = name_space;
        mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes = value;
        number_of_prefixes.value_namespace = name_space;
        number_of_prefixes.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "mask-length")
    {
        mask_length.yfilter = yfilter;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::UnicastPrefixe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "mask-length" || name == "number-of-prefixes")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe::BroadcastPrefixe()
    :
    mask_length{YType::uint8, "mask-length"},
    number_of_prefixes{YType::uint32, "number-of-prefixes"}
{

    yang_name = "broadcast-prefixe"; yang_parent_name = "prefix-masklen-distribution"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe::~BroadcastPrefixe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe::has_data() const
{
    if (is_presence_container) return true;
    return mask_length.is_set
	|| number_of_prefixes.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(mask_length.yfilter)
	|| ydk::is_set(number_of_prefixes.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "broadcast-prefixe";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (mask_length.is_set || is_set(mask_length.yfilter)) leaf_name_data.push_back(mask_length.get_name_leafdata());
    if (number_of_prefixes.is_set || is_set(number_of_prefixes.yfilter)) leaf_name_data.push_back(number_of_prefixes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "mask-length")
    {
        mask_length = value;
        mask_length.value_namespace = name_space;
        mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes = value;
        number_of_prefixes.value_namespace = name_space;
        number_of_prefixes.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "mask-length")
    {
        mask_length.yfilter = yfilter;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::BroadcastPrefixe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "mask-length" || name == "number-of-prefixes")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix::MulticastPrefix()
    :
    mask_length{YType::uint8, "mask-length"},
    number_of_prefixes{YType::uint32, "number-of-prefixes"}
{

    yang_name = "multicast-prefix"; yang_parent_name = "prefix-masklen-distribution"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix::~MulticastPrefix()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix::has_data() const
{
    if (is_presence_container) return true;
    return mask_length.is_set
	|| number_of_prefixes.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(mask_length.yfilter)
	|| ydk::is_set(number_of_prefixes.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "multicast-prefix";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (mask_length.is_set || is_set(mask_length.yfilter)) leaf_name_data.push_back(mask_length.get_name_leafdata());
    if (number_of_prefixes.is_set || is_set(number_of_prefixes.yfilter)) leaf_name_data.push_back(number_of_prefixes.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "mask-length")
    {
        mask_length = value;
        mask_length.value_namespace = name_space;
        mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes = value;
        number_of_prefixes.value_namespace = name_space;
        number_of_prefixes.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "mask-length")
    {
        mask_length.yfilter = yfilter;
    }
    if(value_path == "number-of-prefixes")
    {
        number_of_prefixes.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::FibSummaries::FibSummary::PrefixMasklenDistribution::MulticastPrefix::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "mask-length" || name == "number-of-prefixes")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::ExternalSummaryAll()
    :
    sesa_num_client{YType::uint32, "sesa-num-client"}
        ,
    sesa_pl_sum(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum>())
{
    sesa_pl_sum->parent = this;

    yang_name = "external-summary-all"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::~ExternalSummaryAll()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::has_data() const
{
    if (is_presence_container) return true;
    return sesa_num_client.is_set
	|| (sesa_pl_sum !=  nullptr && sesa_pl_sum->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(sesa_num_client.yfilter)
	|| (sesa_pl_sum !=  nullptr && sesa_pl_sum->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "external-summary-all";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sesa_num_client.is_set || is_set(sesa_num_client.yfilter)) leaf_name_data.push_back(sesa_num_client.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sesa-pl-sum")
    {
        if(sesa_pl_sum == nullptr)
        {
            sesa_pl_sum = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum>();
        }
        return sesa_pl_sum;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(sesa_pl_sum != nullptr)
    {
        _children["sesa-pl-sum"] = sesa_pl_sum;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "sesa-num-client")
    {
        sesa_num_client = value;
        sesa_num_client.value_namespace = name_space;
        sesa_num_client.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "sesa-num-client")
    {
        sesa_num_client.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sesa-pl-sum" || name == "sesa-num-client")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SesaPlSum()
    :
    sep_num_ecd_pathlist{YType::uint32, "sep-num-ecd-pathlist"},
    sep_num_ecd_pl_unresolved{YType::uint32, "sep-num-ecd-pl-unresolved"}
        ,
    sep_num_ecd_pl_per_interest(this, {})
{

    yang_name = "sesa-pl-sum"; yang_parent_name = "external-summary-all"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::~SesaPlSum()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<sep_num_ecd_pl_per_interest.len(); index++)
    {
        if(sep_num_ecd_pl_per_interest[index]->has_data())
            return true;
    }
    return sep_num_ecd_pathlist.is_set
	|| sep_num_ecd_pl_unresolved.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::has_operation() const
{
    for (std::size_t index=0; index<sep_num_ecd_pl_per_interest.len(); index++)
    {
        if(sep_num_ecd_pl_per_interest[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(sep_num_ecd_pathlist.yfilter)
	|| ydk::is_set(sep_num_ecd_pl_unresolved.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sesa-pl-sum";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sep_num_ecd_pathlist.is_set || is_set(sep_num_ecd_pathlist.yfilter)) leaf_name_data.push_back(sep_num_ecd_pathlist.get_name_leafdata());
    if (sep_num_ecd_pl_unresolved.is_set || is_set(sep_num_ecd_pl_unresolved.yfilter)) leaf_name_data.push_back(sep_num_ecd_pl_unresolved.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sep-num-ecd-pl-per-interest")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest>();
        ent_->parent = this;
        sep_num_ecd_pl_per_interest.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : sep_num_ecd_pl_per_interest.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "sep-num-ecd-pathlist")
    {
        sep_num_ecd_pathlist = value;
        sep_num_ecd_pathlist.value_namespace = name_space;
        sep_num_ecd_pathlist.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "sep-num-ecd-pl-unresolved")
    {
        sep_num_ecd_pl_unresolved = value;
        sep_num_ecd_pl_unresolved.value_namespace = name_space;
        sep_num_ecd_pl_unresolved.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "sep-num-ecd-pathlist")
    {
        sep_num_ecd_pathlist.yfilter = yfilter;
    }
    if(value_path == "sep-num-ecd-pl-unresolved")
    {
        sep_num_ecd_pl_unresolved.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sep-num-ecd-pl-per-interest" || name == "sep-num-ecd-pathlist" || name == "sep-num-ecd-pl-unresolved")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest::SepNumEcdPlPerInterest()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "sep-num-ecd-pl-per-interest"; yang_parent_name = "sesa-pl-sum"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest::~SepNumEcdPlPerInterest()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sep-num-ecd-pl-per-interest";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::ExternalSummaryAll::SesaPlSum::SepNumEcdPlPerInterest::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrLog()
    :
    frr_interfaces(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces>())
{
    frr_interfaces->parent = this;

    yang_name = "frr-log"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::~FrrLog()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::has_data() const
{
    if (is_presence_container) return true;
    return (frr_interfaces !=  nullptr && frr_interfaces->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::has_operation() const
{
    return is_set(yfilter)
	|| (frr_interfaces !=  nullptr && frr_interfaces->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::FrrLog::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-log";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FrrLog::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FrrLog::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frr-interfaces")
    {
        if(frr_interfaces == nullptr)
        {
            frr_interfaces = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces>();
        }
        return frr_interfaces;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FrrLog::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(frr_interfaces != nullptr)
    {
        _children["frr-interfaces"] = frr_interfaces;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frr-interfaces")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterfaces()
    :
    frr_interface(this, {"frr_interface_name"})
{

    yang_name = "frr-interfaces"; yang_parent_name = "frr-log"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::~FrrInterfaces()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<frr_interface.len(); index++)
    {
        if(frr_interface[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::has_operation() const
{
    for (std::size_t index=0; index<frr_interface.len(); index++)
    {
        if(frr_interface[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-interfaces";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frr-interface")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface>();
        ent_->parent = this;
        frr_interface.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : frr_interface.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frr-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::FrrInterface()
    :
    frr_interface_name{YType::str, "frr-interface-name"}
        ,
    logs(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs>())
{
    logs->parent = this;

    yang_name = "frr-interface"; yang_parent_name = "frr-interfaces"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::~FrrInterface()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::has_data() const
{
    if (is_presence_container) return true;
    return frr_interface_name.is_set
	|| (logs !=  nullptr && logs->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(frr_interface_name.yfilter)
	|| (logs !=  nullptr && logs->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-interface";
    ADD_KEY_TOKEN(frr_interface_name, "frr-interface-name");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (frr_interface_name.is_set || is_set(frr_interface_name.yfilter)) leaf_name_data.push_back(frr_interface_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "logs")
    {
        if(logs == nullptr)
        {
            logs = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs>();
        }
        return logs;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(logs != nullptr)
    {
        _children["logs"] = logs;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "frr-interface-name")
    {
        frr_interface_name = value;
        frr_interface_name.value_namespace = name_space;
        frr_interface_name.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "frr-interface-name")
    {
        frr_interface_name.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "logs" || name == "frr-interface-name")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Logs()
    :
    log(this, {"log_index"})
{

    yang_name = "logs"; yang_parent_name = "frr-interface"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::~Logs()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<log.len(); index++)
    {
        if(log[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::has_operation() const
{
    for (std::size_t index=0; index<log.len(); index++)
    {
        if(log[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "logs";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "log")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log>();
        ent_->parent = this;
        log.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : log.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "log")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::Log()
    :
    log_index{YType::uint32, "log-index"},
    frr_protocol_type{YType::enumeration, "frr-protocol-type"},
    frr_interface_name{YType::str, "frr-interface-name"},
    frr_prefix{YType::str, "frr-prefix"},
    frr_switching_time{YType::uint32, "frr-switching-time"},
    bundle_member_interface_name{YType::str, "bundle-member-interface-name"}
        ,
    frr_timestamp(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp>())
{
    frr_timestamp->parent = this;

    yang_name = "log"; yang_parent_name = "logs"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::~Log()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::has_data() const
{
    if (is_presence_container) return true;
    return log_index.is_set
	|| frr_protocol_type.is_set
	|| frr_interface_name.is_set
	|| frr_prefix.is_set
	|| frr_switching_time.is_set
	|| bundle_member_interface_name.is_set
	|| (frr_timestamp !=  nullptr && frr_timestamp->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(log_index.yfilter)
	|| ydk::is_set(frr_protocol_type.yfilter)
	|| ydk::is_set(frr_interface_name.yfilter)
	|| ydk::is_set(frr_prefix.yfilter)
	|| ydk::is_set(frr_switching_time.yfilter)
	|| ydk::is_set(bundle_member_interface_name.yfilter)
	|| (frr_timestamp !=  nullptr && frr_timestamp->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "log";
    ADD_KEY_TOKEN(log_index, "log-index");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (log_index.is_set || is_set(log_index.yfilter)) leaf_name_data.push_back(log_index.get_name_leafdata());
    if (frr_protocol_type.is_set || is_set(frr_protocol_type.yfilter)) leaf_name_data.push_back(frr_protocol_type.get_name_leafdata());
    if (frr_interface_name.is_set || is_set(frr_interface_name.yfilter)) leaf_name_data.push_back(frr_interface_name.get_name_leafdata());
    if (frr_prefix.is_set || is_set(frr_prefix.yfilter)) leaf_name_data.push_back(frr_prefix.get_name_leafdata());
    if (frr_switching_time.is_set || is_set(frr_switching_time.yfilter)) leaf_name_data.push_back(frr_switching_time.get_name_leafdata());
    if (bundle_member_interface_name.is_set || is_set(bundle_member_interface_name.yfilter)) leaf_name_data.push_back(bundle_member_interface_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "frr-timestamp")
    {
        if(frr_timestamp == nullptr)
        {
            frr_timestamp = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp>();
        }
        return frr_timestamp;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(frr_timestamp != nullptr)
    {
        _children["frr-timestamp"] = frr_timestamp;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "log-index")
    {
        log_index = value;
        log_index.value_namespace = name_space;
        log_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-protocol-type")
    {
        frr_protocol_type = value;
        frr_protocol_type.value_namespace = name_space;
        frr_protocol_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-interface-name")
    {
        frr_interface_name = value;
        frr_interface_name.value_namespace = name_space;
        frr_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-prefix")
    {
        frr_prefix = value;
        frr_prefix.value_namespace = name_space;
        frr_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "frr-switching-time")
    {
        frr_switching_time = value;
        frr_switching_time.value_namespace = name_space;
        frr_switching_time.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bundle-member-interface-name")
    {
        bundle_member_interface_name = value;
        bundle_member_interface_name.value_namespace = name_space;
        bundle_member_interface_name.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "log-index")
    {
        log_index.yfilter = yfilter;
    }
    if(value_path == "frr-protocol-type")
    {
        frr_protocol_type.yfilter = yfilter;
    }
    if(value_path == "frr-interface-name")
    {
        frr_interface_name.yfilter = yfilter;
    }
    if(value_path == "frr-prefix")
    {
        frr_prefix.yfilter = yfilter;
    }
    if(value_path == "frr-switching-time")
    {
        frr_switching_time.yfilter = yfilter;
    }
    if(value_path == "bundle-member-interface-name")
    {
        bundle_member_interface_name.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "frr-timestamp" || name == "log-index" || name == "frr-protocol-type" || name == "frr-interface-name" || name == "frr-prefix" || name == "frr-switching-time" || name == "bundle-member-interface-name")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp::FrrTimestamp()
    :
    seconds{YType::int32, "seconds"},
    nano_seconds{YType::int32, "nano-seconds"}
{

    yang_name = "frr-timestamp"; yang_parent_name = "log"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp::~FrrTimestamp()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp::has_data() const
{
    if (is_presence_container) return true;
    return seconds.is_set
	|| nano_seconds.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(seconds.yfilter)
	|| ydk::is_set(nano_seconds.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-timestamp";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (seconds.is_set || is_set(seconds.yfilter)) leaf_name_data.push_back(seconds.get_name_leafdata());
    if (nano_seconds.is_set || is_set(nano_seconds.yfilter)) leaf_name_data.push_back(nano_seconds.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "seconds")
    {
        seconds = value;
        seconds.value_namespace = name_space;
        seconds.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nano-seconds")
    {
        nano_seconds = value;
        nano_seconds.value_namespace = name_space;
        nano_seconds.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "seconds")
    {
        seconds.yfilter = yfilter;
    }
    if(value_path == "nano-seconds")
    {
        nano_seconds.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::FrrLog::FrrInterfaces::FrrInterface::Logs::Log::FrrTimestamp::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "seconds" || name == "nano-seconds")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrfs()
    :
    vrf(this, {"vrf_name"})
{

    yang_name = "vrfs"; yang_parent_name = "protocol"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::~Vrfs()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<vrf.len(); index++)
    {
        if(vrf[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::has_operation() const
{
    for (std::size_t index=0; index<vrf.len(); index++)
    {
        if(vrf[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "vrfs";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "vrf")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf>();
        ent_->parent = this;
        vrf.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : vrf.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "vrf")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Vrf()
    :
    vrf_name{YType::str, "vrf-name"}
        ,
    nh_info_detail_hardware_egress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress>())
    , ip_prefix_details(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails>())
    , nh_info_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail>())
    , summary(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary>())
    , interface_infos(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::InterfaceInfos>())
    , ip_prefix_briefs(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs>())
    , nh_info_detail_hardware_ingress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress>())
    , nh_info_brief(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief>())
{
    nh_info_detail_hardware_egress->parent = this;
    ip_prefix_details->parent = this;
    nh_info_detail->parent = this;
    summary->parent = this;
    interface_infos->parent = this;
    ip_prefix_briefs->parent = this;
    nh_info_detail_hardware_ingress->parent = this;
    nh_info_brief->parent = this;

    yang_name = "vrf"; yang_parent_name = "vrfs"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::~Vrf()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::has_data() const
{
    if (is_presence_container) return true;
    return vrf_name.is_set
	|| (nh_info_detail_hardware_egress !=  nullptr && nh_info_detail_hardware_egress->has_data())
	|| (ip_prefix_details !=  nullptr && ip_prefix_details->has_data())
	|| (nh_info_detail !=  nullptr && nh_info_detail->has_data())
	|| (summary !=  nullptr && summary->has_data())
	|| (interface_infos !=  nullptr && interface_infos->has_data())
	|| (ip_prefix_briefs !=  nullptr && ip_prefix_briefs->has_data())
	|| (nh_info_detail_hardware_ingress !=  nullptr && nh_info_detail_hardware_ingress->has_data())
	|| (nh_info_brief !=  nullptr && nh_info_brief->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(vrf_name.yfilter)
	|| (nh_info_detail_hardware_egress !=  nullptr && nh_info_detail_hardware_egress->has_operation())
	|| (ip_prefix_details !=  nullptr && ip_prefix_details->has_operation())
	|| (nh_info_detail !=  nullptr && nh_info_detail->has_operation())
	|| (summary !=  nullptr && summary->has_operation())
	|| (interface_infos !=  nullptr && interface_infos->has_operation())
	|| (ip_prefix_briefs !=  nullptr && ip_prefix_briefs->has_operation())
	|| (nh_info_detail_hardware_ingress !=  nullptr && nh_info_detail_hardware_ingress->has_operation())
	|| (nh_info_brief !=  nullptr && nh_info_brief->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "vrf";
    ADD_KEY_TOKEN(vrf_name, "vrf-name");
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (vrf_name.is_set || is_set(vrf_name.yfilter)) leaf_name_data.push_back(vrf_name.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-detail-hardware-egress")
    {
        if(nh_info_detail_hardware_egress == nullptr)
        {
            nh_info_detail_hardware_egress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress>();
        }
        return nh_info_detail_hardware_egress;
    }

    if(child_yang_name == "ip-prefix-details")
    {
        if(ip_prefix_details == nullptr)
        {
            ip_prefix_details = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails>();
        }
        return ip_prefix_details;
    }

    if(child_yang_name == "nh-info-detail")
    {
        if(nh_info_detail == nullptr)
        {
            nh_info_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetail>();
        }
        return nh_info_detail;
    }

    if(child_yang_name == "summary")
    {
        if(summary == nullptr)
        {
            summary = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::Summary>();
        }
        return summary;
    }

    if(child_yang_name == "interface-infos")
    {
        if(interface_infos == nullptr)
        {
            interface_infos = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::InterfaceInfos>();
        }
        return interface_infos;
    }

    if(child_yang_name == "ip-prefix-briefs")
    {
        if(ip_prefix_briefs == nullptr)
        {
            ip_prefix_briefs = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixBriefs>();
        }
        return ip_prefix_briefs;
    }

    if(child_yang_name == "nh-info-detail-hardware-ingress")
    {
        if(nh_info_detail_hardware_ingress == nullptr)
        {
            nh_info_detail_hardware_ingress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareIngress>();
        }
        return nh_info_detail_hardware_ingress;
    }

    if(child_yang_name == "nh-info-brief")
    {
        if(nh_info_brief == nullptr)
        {
            nh_info_brief = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoBrief>();
        }
        return nh_info_brief;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(nh_info_detail_hardware_egress != nullptr)
    {
        _children["nh-info-detail-hardware-egress"] = nh_info_detail_hardware_egress;
    }

    if(ip_prefix_details != nullptr)
    {
        _children["ip-prefix-details"] = ip_prefix_details;
    }

    if(nh_info_detail != nullptr)
    {
        _children["nh-info-detail"] = nh_info_detail;
    }

    if(summary != nullptr)
    {
        _children["summary"] = summary;
    }

    if(interface_infos != nullptr)
    {
        _children["interface-infos"] = interface_infos;
    }

    if(ip_prefix_briefs != nullptr)
    {
        _children["ip-prefix-briefs"] = ip_prefix_briefs;
    }

    if(nh_info_detail_hardware_ingress != nullptr)
    {
        _children["nh-info-detail-hardware-ingress"] = nh_info_detail_hardware_ingress;
    }

    if(nh_info_brief != nullptr)
    {
        _children["nh-info-brief"] = nh_info_brief;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "vrf-name")
    {
        vrf_name = value;
        vrf_name.value_namespace = name_space;
        vrf_name.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "vrf-name")
    {
        vrf_name.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-detail-hardware-egress" || name == "ip-prefix-details" || name == "nh-info-detail" || name == "summary" || name == "interface-infos" || name == "ip-prefix-briefs" || name == "nh-info-detail-hardware-ingress" || name == "nh-info-brief" || name == "vrf-name")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoDetailHardwareEgress()
    :
    nh_info_special_detail_hardware_egress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress>())
    , nh_info_local_detail_hardware_egresses(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses>())
    , nh_info_remote_detail_hardware_egresses(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses>())
{
    nh_info_special_detail_hardware_egress->parent = this;
    nh_info_local_detail_hardware_egresses->parent = this;
    nh_info_remote_detail_hardware_egresses->parent = this;

    yang_name = "nh-info-detail-hardware-egress"; yang_parent_name = "vrf"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::~NhInfoDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_special_detail_hardware_egress !=  nullptr && nh_info_special_detail_hardware_egress->has_data())
	|| (nh_info_local_detail_hardware_egresses !=  nullptr && nh_info_local_detail_hardware_egresses->has_data())
	|| (nh_info_remote_detail_hardware_egresses !=  nullptr && nh_info_remote_detail_hardware_egresses->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_special_detail_hardware_egress !=  nullptr && nh_info_special_detail_hardware_egress->has_operation())
	|| (nh_info_local_detail_hardware_egresses !=  nullptr && nh_info_local_detail_hardware_egresses->has_operation())
	|| (nh_info_remote_detail_hardware_egresses !=  nullptr && nh_info_remote_detail_hardware_egresses->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-special-detail-hardware-egress")
    {
        if(nh_info_special_detail_hardware_egress == nullptr)
        {
            nh_info_special_detail_hardware_egress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress>();
        }
        return nh_info_special_detail_hardware_egress;
    }

    if(child_yang_name == "nh-info-local-detail-hardware-egresses")
    {
        if(nh_info_local_detail_hardware_egresses == nullptr)
        {
            nh_info_local_detail_hardware_egresses = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses>();
        }
        return nh_info_local_detail_hardware_egresses;
    }

    if(child_yang_name == "nh-info-remote-detail-hardware-egresses")
    {
        if(nh_info_remote_detail_hardware_egresses == nullptr)
        {
            nh_info_remote_detail_hardware_egresses = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses>();
        }
        return nh_info_remote_detail_hardware_egresses;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(nh_info_special_detail_hardware_egress != nullptr)
    {
        _children["nh-info-special-detail-hardware-egress"] = nh_info_special_detail_hardware_egress;
    }

    if(nh_info_local_detail_hardware_egresses != nullptr)
    {
        _children["nh-info-local-detail-hardware-egresses"] = nh_info_local_detail_hardware_egresses;
    }

    if(nh_info_remote_detail_hardware_egresses != nullptr)
    {
        _children["nh-info-remote-detail-hardware-egresses"] = nh_info_remote_detail_hardware_egresses;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-special-detail-hardware-egress" || name == "nh-info-local-detail-hardware-egresses" || name == "nh-info-remote-detail-hardware-egresses")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress()
    :
    nh_info_special_null_detail_hardware_egress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress>())
    , nh_info_special_punt_detail_hardware_egress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress>())
    , nh_info_special_discard_detail_hardware_egress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress>())
    , nh_info_special_drop_detail_hardware_egress(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress>())
{
    nh_info_special_null_detail_hardware_egress->parent = this;
    nh_info_special_punt_detail_hardware_egress->parent = this;
    nh_info_special_discard_detail_hardware_egress->parent = this;
    nh_info_special_drop_detail_hardware_egress->parent = this;

    yang_name = "nh-info-special-detail-hardware-egress"; yang_parent_name = "nh-info-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::~NhInfoSpecialDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_special_null_detail_hardware_egress !=  nullptr && nh_info_special_null_detail_hardware_egress->has_data())
	|| (nh_info_special_punt_detail_hardware_egress !=  nullptr && nh_info_special_punt_detail_hardware_egress->has_data())
	|| (nh_info_special_discard_detail_hardware_egress !=  nullptr && nh_info_special_discard_detail_hardware_egress->has_data())
	|| (nh_info_special_drop_detail_hardware_egress !=  nullptr && nh_info_special_drop_detail_hardware_egress->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_special_null_detail_hardware_egress !=  nullptr && nh_info_special_null_detail_hardware_egress->has_operation())
	|| (nh_info_special_punt_detail_hardware_egress !=  nullptr && nh_info_special_punt_detail_hardware_egress->has_operation())
	|| (nh_info_special_discard_detail_hardware_egress !=  nullptr && nh_info_special_discard_detail_hardware_egress->has_operation())
	|| (nh_info_special_drop_detail_hardware_egress !=  nullptr && nh_info_special_drop_detail_hardware_egress->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-special-null-detail-hardware-egress")
    {
        if(nh_info_special_null_detail_hardware_egress == nullptr)
        {
            nh_info_special_null_detail_hardware_egress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress>();
        }
        return nh_info_special_null_detail_hardware_egress;
    }

    if(child_yang_name == "nh-info-special-punt-detail-hardware-egress")
    {
        if(nh_info_special_punt_detail_hardware_egress == nullptr)
        {
            nh_info_special_punt_detail_hardware_egress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress>();
        }
        return nh_info_special_punt_detail_hardware_egress;
    }

    if(child_yang_name == "nh-info-special-discard-detail-hardware-egress")
    {
        if(nh_info_special_discard_detail_hardware_egress == nullptr)
        {
            nh_info_special_discard_detail_hardware_egress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress>();
        }
        return nh_info_special_discard_detail_hardware_egress;
    }

    if(child_yang_name == "nh-info-special-drop-detail-hardware-egress")
    {
        if(nh_info_special_drop_detail_hardware_egress == nullptr)
        {
            nh_info_special_drop_detail_hardware_egress = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress>();
        }
        return nh_info_special_drop_detail_hardware_egress;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(nh_info_special_null_detail_hardware_egress != nullptr)
    {
        _children["nh-info-special-null-detail-hardware-egress"] = nh_info_special_null_detail_hardware_egress;
    }

    if(nh_info_special_punt_detail_hardware_egress != nullptr)
    {
        _children["nh-info-special-punt-detail-hardware-egress"] = nh_info_special_punt_detail_hardware_egress;
    }

    if(nh_info_special_discard_detail_hardware_egress != nullptr)
    {
        _children["nh-info-special-discard-detail-hardware-egress"] = nh_info_special_discard_detail_hardware_egress;
    }

    if(nh_info_special_drop_detail_hardware_egress != nullptr)
    {
        _children["nh-info-special-drop-detail-hardware-egress"] = nh_info_special_drop_detail_hardware_egress;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-special-null-detail-hardware-egress" || name == "nh-info-special-punt-detail-hardware-egress" || name == "nh-info-special-discard-detail-hardware-egress" || name == "nh-info-special-drop-detail-hardware-egress")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress()
    :
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-special-null-detail-hardware-egress"; yang_parent_name = "nh-info-special-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::~NhInfoSpecialNullDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::has_data() const
{
    if (is_presence_container) return true;
    return si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-null-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(si_pwhe != nullptr)
    {
        _children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        _children["nh-info-extension"] = nh_info_extension;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-null-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-null-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        ent_->parent = this;
        nh_info_extension_detail.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : nh_info_extension_detail.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(nh_info_extension_base != nullptr)
    {
        _children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        _children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(object_base != nullptr)
    {
        _children["object-base"] = object_base;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(snecd_nhr != nullptr)
    {
        _children["snecd-nhr"] = snecd_nhr;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_encap_id{YType::uint64, "nh-info-replicated-encap-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_encap_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_encap_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_encap_id.is_set || is_set(nh_info_replicated_encap_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_encap_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id = value;
        nh_info_replicated_encap_id.value_namespace = name_space;
        nh_info_replicated_encap_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialNullDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-encap-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress()
    :
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-special-punt-detail-hardware-egress"; yang_parent_name = "nh-info-special-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::~NhInfoSpecialPuntDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::has_data() const
{
    if (is_presence_container) return true;
    return si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-punt-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(si_pwhe != nullptr)
    {
        _children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        _children["nh-info-extension"] = nh_info_extension;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-punt-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-punt-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        ent_->parent = this;
        nh_info_extension_detail.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : nh_info_extension_detail.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(nh_info_extension_base != nullptr)
    {
        _children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        _children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(object_base != nullptr)
    {
        _children["object-base"] = object_base;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(snecd_nhr != nullptr)
    {
        _children["snecd-nhr"] = snecd_nhr;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_encap_id{YType::uint64, "nh-info-replicated-encap-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_encap_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_encap_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_encap_id.is_set || is_set(nh_info_replicated_encap_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_encap_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id = value;
        nh_info_replicated_encap_id.value_namespace = name_space;
        nh_info_replicated_encap_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialPuntDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-encap-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress()
    :
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-special-discard-detail-hardware-egress"; yang_parent_name = "nh-info-special-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::~NhInfoSpecialDiscardDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::has_data() const
{
    if (is_presence_container) return true;
    return si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-discard-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(si_pwhe != nullptr)
    {
        _children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        _children["nh-info-extension"] = nh_info_extension;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-discard-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-discard-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        ent_->parent = this;
        nh_info_extension_detail.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : nh_info_extension_detail.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(nh_info_extension_base != nullptr)
    {
        _children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        _children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(object_base != nullptr)
    {
        _children["object-base"] = object_base;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(snecd_nhr != nullptr)
    {
        _children["snecd-nhr"] = snecd_nhr;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_encap_id{YType::uint64, "nh-info-replicated-encap-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_encap_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_encap_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_encap_id.is_set || is_set(nh_info_replicated_encap_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_encap_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id = value;
        nh_info_replicated_encap_id.value_namespace = name_space;
        nh_info_replicated_encap_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDiscardDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-encap-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress()
    :
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-special-drop-detail-hardware-egress"; yang_parent_name = "nh-info-special-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::~NhInfoSpecialDropDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::has_data() const
{
    if (is_presence_container) return true;
    return si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-special-drop-detail-hardware-egress";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(si_pwhe != nullptr)
    {
        _children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        _children["nh-info-extension"] = nh_info_extension;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-special-drop-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-special-drop-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        ent_->parent = this;
        nh_info_extension_detail.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : nh_info_extension_detail.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(nh_info_extension_base != nullptr)
    {
        _children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        _children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(object_base != nullptr)
    {
        _children["object-base"] = object_base;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(snecd_nhr != nullptr)
    {
        _children["snecd-nhr"] = snecd_nhr;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_encap_id{YType::uint64, "nh-info-replicated-encap-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_encap_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_encap_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_encap_id.is_set || is_set(nh_info_replicated_encap_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_encap_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id = value;
        nh_info_replicated_encap_id.value_namespace = name_space;
        nh_info_replicated_encap_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoSpecialDetailHardwareEgress::NhInfoSpecialDropDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-encap-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgresses()
    :
    nh_info_local_detail_hardware_egress(this, {})
{

    yang_name = "nh-info-local-detail-hardware-egresses"; yang_parent_name = "nh-info-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::~NhInfoLocalDetailHardwareEgresses()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_local_detail_hardware_egress.len(); index++)
    {
        if(nh_info_local_detail_hardware_egress[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::has_operation() const
{
    for (std::size_t index=0; index<nh_info_local_detail_hardware_egress.len(); index++)
    {
        if(nh_info_local_detail_hardware_egress[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-detail-hardware-egresses";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-local-detail-hardware-egress")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress>();
        ent_->parent = this;
        nh_info_local_detail_hardware_egress.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : nh_info_local_detail_hardware_egress.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-local-detail-hardware-egress")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoLocalDetailHardwareEgress()
    :
    nh_interface_name{YType::str, "nh-interface-name"},
    nh_proto{YType::enumeration, "nh-proto"},
    nh_pfx_length{YType::uint32, "nh-pfx-length"},
    nh_address{YType::str, "nh-address"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-local-detail-hardware-egress"; yang_parent_name = "nh-info-local-detail-hardware-egresses"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::~NhInfoLocalDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::has_data() const
{
    if (is_presence_container) return true;
    return nh_interface_name.is_set
	|| nh_proto.is_set
	|| nh_pfx_length.is_set
	|| nh_address.is_set
	|| si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(nh_proto.yfilter)
	|| ydk::is_set(nh_pfx_length.yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-local-detail-hardware-egress";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (nh_proto.is_set || is_set(nh_proto.yfilter)) leaf_name_data.push_back(nh_proto.get_name_leafdata());
    if (nh_pfx_length.is_set || is_set(nh_pfx_length.yfilter)) leaf_name_data.push_back(nh_pfx_length.get_name_leafdata());
    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(si_pwhe != nullptr)
    {
        _children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        _children["nh-info-extension"] = nh_info_extension;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-proto")
    {
        nh_proto = value;
        nh_proto.value_namespace = name_space;
        nh_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-pfx-length")
    {
        nh_pfx_length = value;
        nh_pfx_length.value_namespace = name_space;
        nh_pfx_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "nh-proto")
    {
        nh_proto.yfilter = yfilter;
    }
    if(value_path == "nh-pfx-length")
    {
        nh_pfx_length.yfilter = yfilter;
    }
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "nh-interface-name" || name == "nh-proto" || name == "nh-pfx-length" || name == "nh-address" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-local-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-local-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        ent_->parent = this;
        nh_info_extension_detail.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : nh_info_extension_detail.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(nh_info_extension_base != nullptr)
    {
        _children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        _children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(object_base != nullptr)
    {
        _children["object-base"] = object_base;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(snecd_nhr != nullptr)
    {
        _children["snecd-nhr"] = snecd_nhr;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_encap_id{YType::uint64, "nh-info-replicated-encap-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_encap_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_encap_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_encap_id.is_set || is_set(nh_info_replicated_encap_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_encap_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id = value;
        nh_info_replicated_encap_id.value_namespace = name_space;
        nh_info_replicated_encap_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoLocalDetailHardwareEgresses::NhInfoLocalDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-encap-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgresses()
    :
    nh_info_remote_detail_hardware_egress(this, {})
{

    yang_name = "nh-info-remote-detail-hardware-egresses"; yang_parent_name = "nh-info-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::~NhInfoRemoteDetailHardwareEgresses()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_remote_detail_hardware_egress.len(); index++)
    {
        if(nh_info_remote_detail_hardware_egress[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::has_operation() const
{
    for (std::size_t index=0; index<nh_info_remote_detail_hardware_egress.len(); index++)
    {
        if(nh_info_remote_detail_hardware_egress[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-detail-hardware-egresses";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-remote-detail-hardware-egress")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress>();
        ent_->parent = this;
        nh_info_remote_detail_hardware_egress.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : nh_info_remote_detail_hardware_egress.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-remote-detail-hardware-egress")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoRemoteDetailHardwareEgress()
    :
    nh_interface_name{YType::str, "nh-interface-name"},
    nh_proto{YType::enumeration, "nh-proto"},
    nh_pfx_length{YType::uint32, "nh-pfx-length"},
    nh_address{YType::str, "nh-address"},
    si_link_proto{YType::uint32, "si-link-proto"},
    si_nhinfo{YType::uint32, "si-nhinfo"},
    si_nhtype{YType::uint32, "si-nhtype"},
    si_ifh{YType::uint32, "si-ifh"},
    si_pfi_interface_type{YType::uint32, "si-pfi-interface-type"},
    si_adj_ptr{YType::uint32, "si-adj-ptr"},
    si_adj_present{YType::boolean, "si-adj-present"},
    si_special_type{YType::uint32, "si-special-type"},
    si_refcount{YType::uint32, "si-refcount"},
    si_flags{YType::uint32, "si-flags"},
    si_adj_if{YType::uint32, "si-adj-if"},
    si_ext_pfx{YType::str, "si-ext-pfx"},
    si_ext_pfx_len{YType::uint32, "si-ext-pfx-len"},
    si_ext_pfx_proto{YType::uint32, "si-ext-pfx-proto"},
    si_adj_address{YType::str, "si-adj-address"},
    si_adj_addrlen{YType::uint32, "si-adj-addrlen"},
    si_adj_addr_proto{YType::uint32, "si-adj-addr-proto"},
    si_adj_rw_len{YType::uint32, "si-adj-rw-len"},
    si_adj_rw{YType::str, "si-adj-rw"},
    si_dep_nhinfo_type{YType::uint32, "si-dep-nhinfo-type"},
    si_dep_nhinfo{YType::uint32, "si-dep-nhinfo"},
    si_dep_nhinfo_ifh{YType::uint32, "si-dep-nhinfo-ifh"},
    si_bkup_frr{YType::uint32, "si-bkup-frr"},
    si_protect_frr{YType::uint32, "si-protect-frr"},
    si_bkup_nhinfo{YType::uint32, "si-bkup-nhinfo"},
    si_bkup_ifh{YType::uint32, "si-bkup-ifh"},
    si_bkup_addr{YType::str, "si-bkup-addr"},
    si_bkup_addrlen{YType::uint32, "si-bkup-addrlen"},
    si_bkup_addr_proto{YType::uint32, "si-bkup-addr-proto"},
    si_frr_active{YType::boolean, "si-frr-active"},
    si_attr_is_ext_mgd{YType::boolean, "si-attr-is-ext-mgd"},
    si_attr_is_incomp{YType::boolean, "si-attr-is-incomp"},
    si_attr_is_tunnel{YType::boolean, "si-attr-is-tunnel"},
    si_attr_is_tunnel_srte{YType::boolean, "si-attr-is-tunnel-srte"},
    si_attr_is_gre_tunnel{YType::boolean, "si-attr-is-gre-tunnel"},
    si_gre_ti{YType::uint32, "si-gre-ti"},
    si_gre_ti_flags{YType::uint32, "si-gre-ti-flags"},
    si_gre_ti_refcnt{YType::uint32, "si-gre-ti-refcnt"},
    si_gre_tos_propagate{YType::boolean, "si-gre-tos-propagate"},
    si_hardware{YType::str, "si-hardware"},
    si_nhinfo_ptr{YType::uint32, "si-nhinfo-ptr"},
    si_fnb_idb_ptr{YType::uint32, "si-fnb-idb-ptr"},
    si_anc_ifh{YType::uint32, "si-anc-ifh"},
    si_gre_ti_resolving_leafp{YType::uint32, "si-gre-ti-resolving-leafp"},
    si_gre_dest_addr{YType::str, "si-gre-dest-addr"},
    si_nhid{YType::uint32, "si-nhid"},
    si_upd_ts{YType::uint64, "si-upd-ts"}
        ,
    si_pwhe(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe>())
    , nh_info_extension(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension>())
{
    si_pwhe->parent = this;
    nh_info_extension->parent = this;

    yang_name = "nh-info-remote-detail-hardware-egress"; yang_parent_name = "nh-info-remote-detail-hardware-egresses"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::~NhInfoRemoteDetailHardwareEgress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::has_data() const
{
    if (is_presence_container) return true;
    return nh_interface_name.is_set
	|| nh_proto.is_set
	|| nh_pfx_length.is_set
	|| nh_address.is_set
	|| si_link_proto.is_set
	|| si_nhinfo.is_set
	|| si_nhtype.is_set
	|| si_ifh.is_set
	|| si_pfi_interface_type.is_set
	|| si_adj_ptr.is_set
	|| si_adj_present.is_set
	|| si_special_type.is_set
	|| si_refcount.is_set
	|| si_flags.is_set
	|| si_adj_if.is_set
	|| si_ext_pfx.is_set
	|| si_ext_pfx_len.is_set
	|| si_ext_pfx_proto.is_set
	|| si_adj_address.is_set
	|| si_adj_addrlen.is_set
	|| si_adj_addr_proto.is_set
	|| si_adj_rw_len.is_set
	|| si_adj_rw.is_set
	|| si_dep_nhinfo_type.is_set
	|| si_dep_nhinfo.is_set
	|| si_dep_nhinfo_ifh.is_set
	|| si_bkup_frr.is_set
	|| si_protect_frr.is_set
	|| si_bkup_nhinfo.is_set
	|| si_bkup_ifh.is_set
	|| si_bkup_addr.is_set
	|| si_bkup_addrlen.is_set
	|| si_bkup_addr_proto.is_set
	|| si_frr_active.is_set
	|| si_attr_is_ext_mgd.is_set
	|| si_attr_is_incomp.is_set
	|| si_attr_is_tunnel.is_set
	|| si_attr_is_tunnel_srte.is_set
	|| si_attr_is_gre_tunnel.is_set
	|| si_gre_ti.is_set
	|| si_gre_ti_flags.is_set
	|| si_gre_ti_refcnt.is_set
	|| si_gre_tos_propagate.is_set
	|| si_hardware.is_set
	|| si_nhinfo_ptr.is_set
	|| si_fnb_idb_ptr.is_set
	|| si_anc_ifh.is_set
	|| si_gre_ti_resolving_leafp.is_set
	|| si_gre_dest_addr.is_set
	|| si_nhid.is_set
	|| si_upd_ts.is_set
	|| (si_pwhe !=  nullptr && si_pwhe->has_data())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_interface_name.yfilter)
	|| ydk::is_set(nh_proto.yfilter)
	|| ydk::is_set(nh_pfx_length.yfilter)
	|| ydk::is_set(nh_address.yfilter)
	|| ydk::is_set(si_link_proto.yfilter)
	|| ydk::is_set(si_nhinfo.yfilter)
	|| ydk::is_set(si_nhtype.yfilter)
	|| ydk::is_set(si_ifh.yfilter)
	|| ydk::is_set(si_pfi_interface_type.yfilter)
	|| ydk::is_set(si_adj_ptr.yfilter)
	|| ydk::is_set(si_adj_present.yfilter)
	|| ydk::is_set(si_special_type.yfilter)
	|| ydk::is_set(si_refcount.yfilter)
	|| ydk::is_set(si_flags.yfilter)
	|| ydk::is_set(si_adj_if.yfilter)
	|| ydk::is_set(si_ext_pfx.yfilter)
	|| ydk::is_set(si_ext_pfx_len.yfilter)
	|| ydk::is_set(si_ext_pfx_proto.yfilter)
	|| ydk::is_set(si_adj_address.yfilter)
	|| ydk::is_set(si_adj_addrlen.yfilter)
	|| ydk::is_set(si_adj_addr_proto.yfilter)
	|| ydk::is_set(si_adj_rw_len.yfilter)
	|| ydk::is_set(si_adj_rw.yfilter)
	|| ydk::is_set(si_dep_nhinfo_type.yfilter)
	|| ydk::is_set(si_dep_nhinfo.yfilter)
	|| ydk::is_set(si_dep_nhinfo_ifh.yfilter)
	|| ydk::is_set(si_bkup_frr.yfilter)
	|| ydk::is_set(si_protect_frr.yfilter)
	|| ydk::is_set(si_bkup_nhinfo.yfilter)
	|| ydk::is_set(si_bkup_ifh.yfilter)
	|| ydk::is_set(si_bkup_addr.yfilter)
	|| ydk::is_set(si_bkup_addrlen.yfilter)
	|| ydk::is_set(si_bkup_addr_proto.yfilter)
	|| ydk::is_set(si_frr_active.yfilter)
	|| ydk::is_set(si_attr_is_ext_mgd.yfilter)
	|| ydk::is_set(si_attr_is_incomp.yfilter)
	|| ydk::is_set(si_attr_is_tunnel.yfilter)
	|| ydk::is_set(si_attr_is_tunnel_srte.yfilter)
	|| ydk::is_set(si_attr_is_gre_tunnel.yfilter)
	|| ydk::is_set(si_gre_ti.yfilter)
	|| ydk::is_set(si_gre_ti_flags.yfilter)
	|| ydk::is_set(si_gre_ti_refcnt.yfilter)
	|| ydk::is_set(si_gre_tos_propagate.yfilter)
	|| ydk::is_set(si_hardware.yfilter)
	|| ydk::is_set(si_nhinfo_ptr.yfilter)
	|| ydk::is_set(si_fnb_idb_ptr.yfilter)
	|| ydk::is_set(si_anc_ifh.yfilter)
	|| ydk::is_set(si_gre_ti_resolving_leafp.yfilter)
	|| ydk::is_set(si_gre_dest_addr.yfilter)
	|| ydk::is_set(si_nhid.yfilter)
	|| ydk::is_set(si_upd_ts.yfilter)
	|| (si_pwhe !=  nullptr && si_pwhe->has_operation())
	|| (nh_info_extension !=  nullptr && nh_info_extension->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-remote-detail-hardware-egress";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_interface_name.is_set || is_set(nh_interface_name.yfilter)) leaf_name_data.push_back(nh_interface_name.get_name_leafdata());
    if (nh_proto.is_set || is_set(nh_proto.yfilter)) leaf_name_data.push_back(nh_proto.get_name_leafdata());
    if (nh_pfx_length.is_set || is_set(nh_pfx_length.yfilter)) leaf_name_data.push_back(nh_pfx_length.get_name_leafdata());
    if (nh_address.is_set || is_set(nh_address.yfilter)) leaf_name_data.push_back(nh_address.get_name_leafdata());
    if (si_link_proto.is_set || is_set(si_link_proto.yfilter)) leaf_name_data.push_back(si_link_proto.get_name_leafdata());
    if (si_nhinfo.is_set || is_set(si_nhinfo.yfilter)) leaf_name_data.push_back(si_nhinfo.get_name_leafdata());
    if (si_nhtype.is_set || is_set(si_nhtype.yfilter)) leaf_name_data.push_back(si_nhtype.get_name_leafdata());
    if (si_ifh.is_set || is_set(si_ifh.yfilter)) leaf_name_data.push_back(si_ifh.get_name_leafdata());
    if (si_pfi_interface_type.is_set || is_set(si_pfi_interface_type.yfilter)) leaf_name_data.push_back(si_pfi_interface_type.get_name_leafdata());
    if (si_adj_ptr.is_set || is_set(si_adj_ptr.yfilter)) leaf_name_data.push_back(si_adj_ptr.get_name_leafdata());
    if (si_adj_present.is_set || is_set(si_adj_present.yfilter)) leaf_name_data.push_back(si_adj_present.get_name_leafdata());
    if (si_special_type.is_set || is_set(si_special_type.yfilter)) leaf_name_data.push_back(si_special_type.get_name_leafdata());
    if (si_refcount.is_set || is_set(si_refcount.yfilter)) leaf_name_data.push_back(si_refcount.get_name_leafdata());
    if (si_flags.is_set || is_set(si_flags.yfilter)) leaf_name_data.push_back(si_flags.get_name_leafdata());
    if (si_adj_if.is_set || is_set(si_adj_if.yfilter)) leaf_name_data.push_back(si_adj_if.get_name_leafdata());
    if (si_ext_pfx.is_set || is_set(si_ext_pfx.yfilter)) leaf_name_data.push_back(si_ext_pfx.get_name_leafdata());
    if (si_ext_pfx_len.is_set || is_set(si_ext_pfx_len.yfilter)) leaf_name_data.push_back(si_ext_pfx_len.get_name_leafdata());
    if (si_ext_pfx_proto.is_set || is_set(si_ext_pfx_proto.yfilter)) leaf_name_data.push_back(si_ext_pfx_proto.get_name_leafdata());
    if (si_adj_address.is_set || is_set(si_adj_address.yfilter)) leaf_name_data.push_back(si_adj_address.get_name_leafdata());
    if (si_adj_addrlen.is_set || is_set(si_adj_addrlen.yfilter)) leaf_name_data.push_back(si_adj_addrlen.get_name_leafdata());
    if (si_adj_addr_proto.is_set || is_set(si_adj_addr_proto.yfilter)) leaf_name_data.push_back(si_adj_addr_proto.get_name_leafdata());
    if (si_adj_rw_len.is_set || is_set(si_adj_rw_len.yfilter)) leaf_name_data.push_back(si_adj_rw_len.get_name_leafdata());
    if (si_adj_rw.is_set || is_set(si_adj_rw.yfilter)) leaf_name_data.push_back(si_adj_rw.get_name_leafdata());
    if (si_dep_nhinfo_type.is_set || is_set(si_dep_nhinfo_type.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_type.get_name_leafdata());
    if (si_dep_nhinfo.is_set || is_set(si_dep_nhinfo.yfilter)) leaf_name_data.push_back(si_dep_nhinfo.get_name_leafdata());
    if (si_dep_nhinfo_ifh.is_set || is_set(si_dep_nhinfo_ifh.yfilter)) leaf_name_data.push_back(si_dep_nhinfo_ifh.get_name_leafdata());
    if (si_bkup_frr.is_set || is_set(si_bkup_frr.yfilter)) leaf_name_data.push_back(si_bkup_frr.get_name_leafdata());
    if (si_protect_frr.is_set || is_set(si_protect_frr.yfilter)) leaf_name_data.push_back(si_protect_frr.get_name_leafdata());
    if (si_bkup_nhinfo.is_set || is_set(si_bkup_nhinfo.yfilter)) leaf_name_data.push_back(si_bkup_nhinfo.get_name_leafdata());
    if (si_bkup_ifh.is_set || is_set(si_bkup_ifh.yfilter)) leaf_name_data.push_back(si_bkup_ifh.get_name_leafdata());
    if (si_bkup_addr.is_set || is_set(si_bkup_addr.yfilter)) leaf_name_data.push_back(si_bkup_addr.get_name_leafdata());
    if (si_bkup_addrlen.is_set || is_set(si_bkup_addrlen.yfilter)) leaf_name_data.push_back(si_bkup_addrlen.get_name_leafdata());
    if (si_bkup_addr_proto.is_set || is_set(si_bkup_addr_proto.yfilter)) leaf_name_data.push_back(si_bkup_addr_proto.get_name_leafdata());
    if (si_frr_active.is_set || is_set(si_frr_active.yfilter)) leaf_name_data.push_back(si_frr_active.get_name_leafdata());
    if (si_attr_is_ext_mgd.is_set || is_set(si_attr_is_ext_mgd.yfilter)) leaf_name_data.push_back(si_attr_is_ext_mgd.get_name_leafdata());
    if (si_attr_is_incomp.is_set || is_set(si_attr_is_incomp.yfilter)) leaf_name_data.push_back(si_attr_is_incomp.get_name_leafdata());
    if (si_attr_is_tunnel.is_set || is_set(si_attr_is_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel.get_name_leafdata());
    if (si_attr_is_tunnel_srte.is_set || is_set(si_attr_is_tunnel_srte.yfilter)) leaf_name_data.push_back(si_attr_is_tunnel_srte.get_name_leafdata());
    if (si_attr_is_gre_tunnel.is_set || is_set(si_attr_is_gre_tunnel.yfilter)) leaf_name_data.push_back(si_attr_is_gre_tunnel.get_name_leafdata());
    if (si_gre_ti.is_set || is_set(si_gre_ti.yfilter)) leaf_name_data.push_back(si_gre_ti.get_name_leafdata());
    if (si_gre_ti_flags.is_set || is_set(si_gre_ti_flags.yfilter)) leaf_name_data.push_back(si_gre_ti_flags.get_name_leafdata());
    if (si_gre_ti_refcnt.is_set || is_set(si_gre_ti_refcnt.yfilter)) leaf_name_data.push_back(si_gre_ti_refcnt.get_name_leafdata());
    if (si_gre_tos_propagate.is_set || is_set(si_gre_tos_propagate.yfilter)) leaf_name_data.push_back(si_gre_tos_propagate.get_name_leafdata());
    if (si_hardware.is_set || is_set(si_hardware.yfilter)) leaf_name_data.push_back(si_hardware.get_name_leafdata());
    if (si_nhinfo_ptr.is_set || is_set(si_nhinfo_ptr.yfilter)) leaf_name_data.push_back(si_nhinfo_ptr.get_name_leafdata());
    if (si_fnb_idb_ptr.is_set || is_set(si_fnb_idb_ptr.yfilter)) leaf_name_data.push_back(si_fnb_idb_ptr.get_name_leafdata());
    if (si_anc_ifh.is_set || is_set(si_anc_ifh.yfilter)) leaf_name_data.push_back(si_anc_ifh.get_name_leafdata());
    if (si_gre_ti_resolving_leafp.is_set || is_set(si_gre_ti_resolving_leafp.yfilter)) leaf_name_data.push_back(si_gre_ti_resolving_leafp.get_name_leafdata());
    if (si_gre_dest_addr.is_set || is_set(si_gre_dest_addr.yfilter)) leaf_name_data.push_back(si_gre_dest_addr.get_name_leafdata());
    if (si_nhid.is_set || is_set(si_nhid.yfilter)) leaf_name_data.push_back(si_nhid.get_name_leafdata());
    if (si_upd_ts.is_set || is_set(si_upd_ts.yfilter)) leaf_name_data.push_back(si_upd_ts.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "si-pwhe")
    {
        if(si_pwhe == nullptr)
        {
            si_pwhe = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe>();
        }
        return si_pwhe;
    }

    if(child_yang_name == "nh-info-extension")
    {
        if(nh_info_extension == nullptr)
        {
            nh_info_extension = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension>();
        }
        return nh_info_extension;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(si_pwhe != nullptr)
    {
        _children["si-pwhe"] = si_pwhe;
    }

    if(nh_info_extension != nullptr)
    {
        _children["nh-info-extension"] = nh_info_extension;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-interface-name")
    {
        nh_interface_name = value;
        nh_interface_name.value_namespace = name_space;
        nh_interface_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-proto")
    {
        nh_proto = value;
        nh_proto.value_namespace = name_space;
        nh_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-pfx-length")
    {
        nh_pfx_length = value;
        nh_pfx_length.value_namespace = name_space;
        nh_pfx_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-address")
    {
        nh_address = value;
        nh_address.value_namespace = name_space;
        nh_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto = value;
        si_link_proto.value_namespace = name_space;
        si_link_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo = value;
        si_nhinfo.value_namespace = name_space;
        si_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype = value;
        si_nhtype.value_namespace = name_space;
        si_nhtype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ifh")
    {
        si_ifh = value;
        si_ifh.value_namespace = name_space;
        si_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type = value;
        si_pfi_interface_type.value_namespace = name_space;
        si_pfi_interface_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr = value;
        si_adj_ptr.value_namespace = name_space;
        si_adj_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present = value;
        si_adj_present.value_namespace = name_space;
        si_adj_present.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-special-type")
    {
        si_special_type = value;
        si_special_type.value_namespace = name_space;
        si_special_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-refcount")
    {
        si_refcount = value;
        si_refcount.value_namespace = name_space;
        si_refcount.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-flags")
    {
        si_flags = value;
        si_flags.value_namespace = name_space;
        si_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if = value;
        si_adj_if.value_namespace = name_space;
        si_adj_if.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx = value;
        si_ext_pfx.value_namespace = name_space;
        si_ext_pfx.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len = value;
        si_ext_pfx_len.value_namespace = name_space;
        si_ext_pfx_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto = value;
        si_ext_pfx_proto.value_namespace = name_space;
        si_ext_pfx_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address = value;
        si_adj_address.value_namespace = name_space;
        si_adj_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen = value;
        si_adj_addrlen.value_namespace = name_space;
        si_adj_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto = value;
        si_adj_addr_proto.value_namespace = name_space;
        si_adj_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len = value;
        si_adj_rw_len.value_namespace = name_space;
        si_adj_rw_len.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw = value;
        si_adj_rw.value_namespace = name_space;
        si_adj_rw.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type = value;
        si_dep_nhinfo_type.value_namespace = name_space;
        si_dep_nhinfo_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo = value;
        si_dep_nhinfo.value_namespace = name_space;
        si_dep_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh = value;
        si_dep_nhinfo_ifh.value_namespace = name_space;
        si_dep_nhinfo_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr = value;
        si_bkup_frr.value_namespace = name_space;
        si_bkup_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr = value;
        si_protect_frr.value_namespace = name_space;
        si_protect_frr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo = value;
        si_bkup_nhinfo.value_namespace = name_space;
        si_bkup_nhinfo.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh = value;
        si_bkup_ifh.value_namespace = name_space;
        si_bkup_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr = value;
        si_bkup_addr.value_namespace = name_space;
        si_bkup_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen = value;
        si_bkup_addrlen.value_namespace = name_space;
        si_bkup_addrlen.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto = value;
        si_bkup_addr_proto.value_namespace = name_space;
        si_bkup_addr_proto.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active = value;
        si_frr_active.value_namespace = name_space;
        si_frr_active.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd = value;
        si_attr_is_ext_mgd.value_namespace = name_space;
        si_attr_is_ext_mgd.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp = value;
        si_attr_is_incomp.value_namespace = name_space;
        si_attr_is_incomp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel = value;
        si_attr_is_tunnel.value_namespace = name_space;
        si_attr_is_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte = value;
        si_attr_is_tunnel_srte.value_namespace = name_space;
        si_attr_is_tunnel_srte.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel = value;
        si_attr_is_gre_tunnel.value_namespace = name_space;
        si_attr_is_gre_tunnel.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti = value;
        si_gre_ti.value_namespace = name_space;
        si_gre_ti.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags = value;
        si_gre_ti_flags.value_namespace = name_space;
        si_gre_ti_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt = value;
        si_gre_ti_refcnt.value_namespace = name_space;
        si_gre_ti_refcnt.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate = value;
        si_gre_tos_propagate.value_namespace = name_space;
        si_gre_tos_propagate.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-hardware")
    {
        si_hardware = value;
        si_hardware.value_namespace = name_space;
        si_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr = value;
        si_nhinfo_ptr.value_namespace = name_space;
        si_nhinfo_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr = value;
        si_fnb_idb_ptr.value_namespace = name_space;
        si_fnb_idb_ptr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh = value;
        si_anc_ifh.value_namespace = name_space;
        si_anc_ifh.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp = value;
        si_gre_ti_resolving_leafp.value_namespace = name_space;
        si_gre_ti_resolving_leafp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr = value;
        si_gre_dest_addr.value_namespace = name_space;
        si_gre_dest_addr.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-nhid")
    {
        si_nhid = value;
        si_nhid.value_namespace = name_space;
        si_nhid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts = value;
        si_upd_ts.value_namespace = name_space;
        si_upd_ts.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-interface-name")
    {
        nh_interface_name.yfilter = yfilter;
    }
    if(value_path == "nh-proto")
    {
        nh_proto.yfilter = yfilter;
    }
    if(value_path == "nh-pfx-length")
    {
        nh_pfx_length.yfilter = yfilter;
    }
    if(value_path == "nh-address")
    {
        nh_address.yfilter = yfilter;
    }
    if(value_path == "si-link-proto")
    {
        si_link_proto.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo")
    {
        si_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-nhtype")
    {
        si_nhtype.yfilter = yfilter;
    }
    if(value_path == "si-ifh")
    {
        si_ifh.yfilter = yfilter;
    }
    if(value_path == "si-pfi-interface-type")
    {
        si_pfi_interface_type.yfilter = yfilter;
    }
    if(value_path == "si-adj-ptr")
    {
        si_adj_ptr.yfilter = yfilter;
    }
    if(value_path == "si-adj-present")
    {
        si_adj_present.yfilter = yfilter;
    }
    if(value_path == "si-special-type")
    {
        si_special_type.yfilter = yfilter;
    }
    if(value_path == "si-refcount")
    {
        si_refcount.yfilter = yfilter;
    }
    if(value_path == "si-flags")
    {
        si_flags.yfilter = yfilter;
    }
    if(value_path == "si-adj-if")
    {
        si_adj_if.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx")
    {
        si_ext_pfx.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-len")
    {
        si_ext_pfx_len.yfilter = yfilter;
    }
    if(value_path == "si-ext-pfx-proto")
    {
        si_ext_pfx_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-address")
    {
        si_adj_address.yfilter = yfilter;
    }
    if(value_path == "si-adj-addrlen")
    {
        si_adj_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-adj-addr-proto")
    {
        si_adj_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw-len")
    {
        si_adj_rw_len.yfilter = yfilter;
    }
    if(value_path == "si-adj-rw")
    {
        si_adj_rw.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-type")
    {
        si_dep_nhinfo_type.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo")
    {
        si_dep_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-dep-nhinfo-ifh")
    {
        si_dep_nhinfo_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-frr")
    {
        si_bkup_frr.yfilter = yfilter;
    }
    if(value_path == "si-protect-frr")
    {
        si_protect_frr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-nhinfo")
    {
        si_bkup_nhinfo.yfilter = yfilter;
    }
    if(value_path == "si-bkup-ifh")
    {
        si_bkup_ifh.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr")
    {
        si_bkup_addr.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addrlen")
    {
        si_bkup_addrlen.yfilter = yfilter;
    }
    if(value_path == "si-bkup-addr-proto")
    {
        si_bkup_addr_proto.yfilter = yfilter;
    }
    if(value_path == "si-frr-active")
    {
        si_frr_active.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-ext-mgd")
    {
        si_attr_is_ext_mgd.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-incomp")
    {
        si_attr_is_incomp.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel")
    {
        si_attr_is_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-tunnel-srte")
    {
        si_attr_is_tunnel_srte.yfilter = yfilter;
    }
    if(value_path == "si-attr-is-gre-tunnel")
    {
        si_attr_is_gre_tunnel.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti")
    {
        si_gre_ti.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-flags")
    {
        si_gre_ti_flags.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-refcnt")
    {
        si_gre_ti_refcnt.yfilter = yfilter;
    }
    if(value_path == "si-gre-tos-propagate")
    {
        si_gre_tos_propagate.yfilter = yfilter;
    }
    if(value_path == "si-hardware")
    {
        si_hardware.yfilter = yfilter;
    }
    if(value_path == "si-nhinfo-ptr")
    {
        si_nhinfo_ptr.yfilter = yfilter;
    }
    if(value_path == "si-fnb-idb-ptr")
    {
        si_fnb_idb_ptr.yfilter = yfilter;
    }
    if(value_path == "si-anc-ifh")
    {
        si_anc_ifh.yfilter = yfilter;
    }
    if(value_path == "si-gre-ti-resolving-leafp")
    {
        si_gre_ti_resolving_leafp.yfilter = yfilter;
    }
    if(value_path == "si-gre-dest-addr")
    {
        si_gre_dest_addr.yfilter = yfilter;
    }
    if(value_path == "si-nhid")
    {
        si_nhid.yfilter = yfilter;
    }
    if(value_path == "si-upd-ts")
    {
        si_upd_ts.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "si-pwhe" || name == "nh-info-extension" || name == "nh-interface-name" || name == "nh-proto" || name == "nh-pfx-length" || name == "nh-address" || name == "si-link-proto" || name == "si-nhinfo" || name == "si-nhtype" || name == "si-ifh" || name == "si-pfi-interface-type" || name == "si-adj-ptr" || name == "si-adj-present" || name == "si-special-type" || name == "si-refcount" || name == "si-flags" || name == "si-adj-if" || name == "si-ext-pfx" || name == "si-ext-pfx-len" || name == "si-ext-pfx-proto" || name == "si-adj-address" || name == "si-adj-addrlen" || name == "si-adj-addr-proto" || name == "si-adj-rw-len" || name == "si-adj-rw" || name == "si-dep-nhinfo-type" || name == "si-dep-nhinfo" || name == "si-dep-nhinfo-ifh" || name == "si-bkup-frr" || name == "si-protect-frr" || name == "si-bkup-nhinfo" || name == "si-bkup-ifh" || name == "si-bkup-addr" || name == "si-bkup-addrlen" || name == "si-bkup-addr-proto" || name == "si-frr-active" || name == "si-attr-is-ext-mgd" || name == "si-attr-is-incomp" || name == "si-attr-is-tunnel" || name == "si-attr-is-tunnel-srte" || name == "si-attr-is-gre-tunnel" || name == "si-gre-ti" || name == "si-gre-ti-flags" || name == "si-gre-ti-refcnt" || name == "si-gre-tos-propagate" || name == "si-hardware" || name == "si-nhinfo-ptr" || name == "si-fnb-idb-ptr" || name == "si-anc-ifh" || name == "si-gre-ti-resolving-leafp" || name == "si-gre-dest-addr" || name == "si-nhid" || name == "si-upd-ts")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::SiPwhe()
    :
    pwhe_adjacency_client_data{YType::uint32, "pwhe-adjacency-client-data"},
    vctype{YType::uint32, "vctype"},
    vc_internal_label{YType::uint32, "vc-internal-label"},
    cw_enabled{YType::boolean, "cw-enabled"},
    l2_overhead_bytes{YType::uint16, "l2-overhead-bytes"},
    dot1q_vlan_tag{YType::uint32, "dot1q-vlan-tag"}
{

    yang_name = "si-pwhe"; yang_parent_name = "nh-info-remote-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::~SiPwhe()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::has_data() const
{
    if (is_presence_container) return true;
    return pwhe_adjacency_client_data.is_set
	|| vctype.is_set
	|| vc_internal_label.is_set
	|| cw_enabled.is_set
	|| l2_overhead_bytes.is_set
	|| dot1q_vlan_tag.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(pwhe_adjacency_client_data.yfilter)
	|| ydk::is_set(vctype.yfilter)
	|| ydk::is_set(vc_internal_label.yfilter)
	|| ydk::is_set(cw_enabled.yfilter)
	|| ydk::is_set(l2_overhead_bytes.yfilter)
	|| ydk::is_set(dot1q_vlan_tag.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "si-pwhe";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pwhe_adjacency_client_data.is_set || is_set(pwhe_adjacency_client_data.yfilter)) leaf_name_data.push_back(pwhe_adjacency_client_data.get_name_leafdata());
    if (vctype.is_set || is_set(vctype.yfilter)) leaf_name_data.push_back(vctype.get_name_leafdata());
    if (vc_internal_label.is_set || is_set(vc_internal_label.yfilter)) leaf_name_data.push_back(vc_internal_label.get_name_leafdata());
    if (cw_enabled.is_set || is_set(cw_enabled.yfilter)) leaf_name_data.push_back(cw_enabled.get_name_leafdata());
    if (l2_overhead_bytes.is_set || is_set(l2_overhead_bytes.yfilter)) leaf_name_data.push_back(l2_overhead_bytes.get_name_leafdata());
    if (dot1q_vlan_tag.is_set || is_set(dot1q_vlan_tag.yfilter)) leaf_name_data.push_back(dot1q_vlan_tag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data = value;
        pwhe_adjacency_client_data.value_namespace = name_space;
        pwhe_adjacency_client_data.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vctype")
    {
        vctype = value;
        vctype.value_namespace = name_space;
        vctype.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label = value;
        vc_internal_label.value_namespace = name_space;
        vc_internal_label.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled = value;
        cw_enabled.value_namespace = name_space;
        cw_enabled.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes = value;
        l2_overhead_bytes.value_namespace = name_space;
        l2_overhead_bytes.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag = value;
        dot1q_vlan_tag.value_namespace = name_space;
        dot1q_vlan_tag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "pwhe-adjacency-client-data")
    {
        pwhe_adjacency_client_data.yfilter = yfilter;
    }
    if(value_path == "vctype")
    {
        vctype.yfilter = yfilter;
    }
    if(value_path == "vc-internal-label")
    {
        vc_internal_label.yfilter = yfilter;
    }
    if(value_path == "cw-enabled")
    {
        cw_enabled.yfilter = yfilter;
    }
    if(value_path == "l2-overhead-bytes")
    {
        l2_overhead_bytes.yfilter = yfilter;
    }
    if(value_path == "dot1q-vlan-tag")
    {
        dot1q_vlan_tag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::SiPwhe::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "pwhe-adjacency-client-data" || name == "vctype" || name == "vc-internal-label" || name == "cw-enabled" || name == "l2-overhead-bytes" || name == "dot1q-vlan-tag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtension()
    :
    nh_info_extension_detail(this, {})
{

    yang_name = "nh-info-extension"; yang_parent_name = "nh-info-remote-detail-hardware-egress"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::~NhInfoExtension()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::has_operation() const
{
    for (std::size_t index=0; index<nh_info_extension_detail.len(); index++)
    {
        if(nh_info_extension_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-detail")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail>();
        ent_->parent = this;
        nh_info_extension_detail.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : nh_info_extension_detail.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail()
    :
    nh_info_extension_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>())
    , nh_info_extension_detail(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>())
{
    nh_info_extension_base->parent = this;
    nh_info_extension_detail->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::~NhInfoExtensionDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_data() const
{
    if (is_presence_container) return true;
    return (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_data())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_operation() const
{
    return is_set(yfilter)
	|| (nh_info_extension_base !=  nullptr && nh_info_extension_base->has_operation())
	|| (nh_info_extension_detail !=  nullptr && nh_info_extension_detail->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "nh-info-extension-base")
    {
        if(nh_info_extension_base == nullptr)
        {
            nh_info_extension_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase>();
        }
        return nh_info_extension_base;
    }

    if(child_yang_name == "nh-info-extension-detail")
    {
        if(nh_info_extension_detail == nullptr)
        {
            nh_info_extension_detail = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_>();
        }
        return nh_info_extension_detail;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(nh_info_extension_base != nullptr)
    {
        _children["nh-info-extension-base"] = nh_info_extension_base;
    }

    if(nh_info_extension_detail != nullptr)
    {
        _children["nh-info-extension-detail"] = nh_info_extension_detail;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-extension-base" || name == "nh-info-extension-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::NhInfoExtensionBase()
    :
    parent_object_pointer{YType::uint64, "parent-object-pointer"},
    back_object_pointer{YType::uint64, "back-object-pointer"}
        ,
    object_base(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>())
{
    object_base->parent = this;

    yang_name = "nh-info-extension-base"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::~NhInfoExtensionBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_data() const
{
    if (is_presence_container) return true;
    return parent_object_pointer.is_set
	|| back_object_pointer.is_set
	|| (object_base !=  nullptr && object_base->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(parent_object_pointer.yfilter)
	|| ydk::is_set(back_object_pointer.yfilter)
	|| (object_base !=  nullptr && object_base->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (parent_object_pointer.is_set || is_set(parent_object_pointer.yfilter)) leaf_name_data.push_back(parent_object_pointer.get_name_leafdata());
    if (back_object_pointer.is_set || is_set(back_object_pointer.yfilter)) leaf_name_data.push_back(back_object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "object-base")
    {
        if(object_base == nullptr)
        {
            object_base = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase>();
        }
        return object_base;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(object_base != nullptr)
    {
        _children["object-base"] = object_base;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer = value;
        parent_object_pointer.value_namespace = name_space;
        parent_object_pointer.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer = value;
        back_object_pointer.value_namespace = name_space;
        back_object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "parent-object-pointer")
    {
        parent_object_pointer.yfilter = yfilter;
    }
    if(value_path == "back-object-pointer")
    {
        back_object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-base" || name == "parent-object-pointer" || name == "back-object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::ObjectBase()
    :
    object_reference_count{YType::uint32, "object-reference-count"},
    object_flags{YType::uint32, "object-flags"},
    object_type{YType::uint8, "object-type"},
    object_time_stamp{YType::uint64, "object-time-stamp"},
    object_pointer{YType::uint64, "object-pointer"}
{

    yang_name = "object-base"; yang_parent_name = "nh-info-extension-base"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::~ObjectBase()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_data() const
{
    if (is_presence_container) return true;
    return object_reference_count.is_set
	|| object_flags.is_set
	|| object_type.is_set
	|| object_time_stamp.is_set
	|| object_pointer.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(object_reference_count.yfilter)
	|| ydk::is_set(object_flags.yfilter)
	|| ydk::is_set(object_type.yfilter)
	|| ydk::is_set(object_time_stamp.yfilter)
	|| ydk::is_set(object_pointer.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "object-base";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (object_reference_count.is_set || is_set(object_reference_count.yfilter)) leaf_name_data.push_back(object_reference_count.get_name_leafdata());
    if (object_flags.is_set || is_set(object_flags.yfilter)) leaf_name_data.push_back(object_flags.get_name_leafdata());
    if (object_type.is_set || is_set(object_type.yfilter)) leaf_name_data.push_back(object_type.get_name_leafdata());
    if (object_time_stamp.is_set || is_set(object_time_stamp.yfilter)) leaf_name_data.push_back(object_time_stamp.get_name_leafdata());
    if (object_pointer.is_set || is_set(object_pointer.yfilter)) leaf_name_data.push_back(object_pointer.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count = value;
        object_reference_count.value_namespace = name_space;
        object_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-flags")
    {
        object_flags = value;
        object_flags.value_namespace = name_space;
        object_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-type")
    {
        object_type = value;
        object_type.value_namespace = name_space;
        object_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp = value;
        object_time_stamp.value_namespace = name_space;
        object_time_stamp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "object-pointer")
    {
        object_pointer = value;
        object_pointer.value_namespace = name_space;
        object_pointer.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "object-reference-count")
    {
        object_reference_count.yfilter = yfilter;
    }
    if(value_path == "object-flags")
    {
        object_flags.yfilter = yfilter;
    }
    if(value_path == "object-type")
    {
        object_type.yfilter = yfilter;
    }
    if(value_path == "object-time-stamp")
    {
        object_time_stamp.yfilter = yfilter;
    }
    if(value_path == "object-pointer")
    {
        object_pointer.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionBase::ObjectBase::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "object-reference-count" || name == "object-flags" || name == "object-type" || name == "object-time-stamp" || name == "object-pointer")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::NhInfoExtensionDetail_()
    :
    type{YType::enumeration, "type"}
        ,
    snecd_nhr(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>())
{
    snecd_nhr->parent = this;

    yang_name = "nh-info-extension-detail"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::~NhInfoExtensionDetail_()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_data() const
{
    if (is_presence_container) return true;
    return type.is_set
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(type.yfilter)
	|| (snecd_nhr !=  nullptr && snecd_nhr->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nh-info-extension-detail";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (type.is_set || is_set(type.yfilter)) leaf_name_data.push_back(type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "snecd-nhr")
    {
        if(snecd_nhr == nullptr)
        {
            snecd_nhr = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr>();
        }
        return snecd_nhr;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(snecd_nhr != nullptr)
    {
        _children["snecd-nhr"] = snecd_nhr;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "type")
    {
        type = value;
        type.value_namespace = name_space;
        type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "type")
    {
        type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "snecd-nhr" || name == "type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::SnecdNhr()
    :
    nh_info_replicated_type{YType::uint8, "nh-info-replicated-type"},
    nh_info_replicated_nh_id{YType::uint32, "nh-info-replicated-nh-id"},
    nh_info_replicated_encap_id{YType::uint64, "nh-info-replicated-encap-id"},
    nh_info_replicated_interface{YType::str, "nh-info-replicated-interface"}
{

    yang_name = "snecd-nhr"; yang_parent_name = "nh-info-extension-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::~SnecdNhr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_data() const
{
    if (is_presence_container) return true;
    return nh_info_replicated_type.is_set
	|| nh_info_replicated_nh_id.is_set
	|| nh_info_replicated_encap_id.is_set
	|| nh_info_replicated_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(nh_info_replicated_type.yfilter)
	|| ydk::is_set(nh_info_replicated_nh_id.yfilter)
	|| ydk::is_set(nh_info_replicated_encap_id.yfilter)
	|| ydk::is_set(nh_info_replicated_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "snecd-nhr";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nh_info_replicated_type.is_set || is_set(nh_info_replicated_type.yfilter)) leaf_name_data.push_back(nh_info_replicated_type.get_name_leafdata());
    if (nh_info_replicated_nh_id.is_set || is_set(nh_info_replicated_nh_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_nh_id.get_name_leafdata());
    if (nh_info_replicated_encap_id.is_set || is_set(nh_info_replicated_encap_id.yfilter)) leaf_name_data.push_back(nh_info_replicated_encap_id.get_name_leafdata());
    if (nh_info_replicated_interface.is_set || is_set(nh_info_replicated_interface.yfilter)) leaf_name_data.push_back(nh_info_replicated_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type = value;
        nh_info_replicated_type.value_namespace = name_space;
        nh_info_replicated_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id = value;
        nh_info_replicated_nh_id.value_namespace = name_space;
        nh_info_replicated_nh_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id = value;
        nh_info_replicated_encap_id.value_namespace = name_space;
        nh_info_replicated_encap_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface = value;
        nh_info_replicated_interface.value_namespace = name_space;
        nh_info_replicated_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "nh-info-replicated-type")
    {
        nh_info_replicated_type.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-nh-id")
    {
        nh_info_replicated_nh_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-encap-id")
    {
        nh_info_replicated_encap_id.yfilter = yfilter;
    }
    if(value_path == "nh-info-replicated-interface")
    {
        nh_info_replicated_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::NhInfoDetailHardwareEgress::NhInfoRemoteDetailHardwareEgresses::NhInfoRemoteDetailHardwareEgress::NhInfoExtension::NhInfoExtensionDetail::NhInfoExtensionDetail_::SnecdNhr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "nh-info-replicated-type" || name == "nh-info-replicated-nh-id" || name == "nh-info-replicated-encap-id" || name == "nh-info-replicated-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetails()
    :
    ip_prefix_detail(this, {})
{

    yang_name = "ip-prefix-details"; yang_parent_name = "vrf"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::~IpPrefixDetails()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<ip_prefix_detail.len(); index++)
    {
        if(ip_prefix_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::has_operation() const
{
    for (std::size_t index=0; index<ip_prefix_detail.len(); index++)
    {
        if(ip_prefix_detail[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ip-prefix-details";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ip-prefix-detail")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail>();
        ent_->parent = this;
        ip_prefix_detail.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : ip_prefix_detail.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ip-prefix-detail")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::IpPrefixDetail()
    :
    prefix{YType::str, "prefix"},
    prefix_length{YType::uint8, "prefix-length"},
    protocol_type_fib_entry{YType::uint32, "protocol-type-fib-entry"},
    platform_hardware{YType::str, "platform-hardware"},
    number_of_referances_to_path_list{YType::uint32, "number-of-referances-to-path-list"},
    path_list_flags{YType::uint32, "path-list-flags"},
    path_list_source{YType::uint32, "path-list-source"},
    number_of_referances_to_ldi{YType::uint32, "number-of-referances-to-ldi"},
    ldi_flags{YType::uint32, "ldi-flags"},
    flags_external_ldi{YType::uint32, "flags-external-ldi"},
    pointer_external_ldi{YType::uint32, "pointer-external-ldi"},
    exact_path_interface_handle{YType::uint32, "exact-path-interface-handle"},
    exact_path_gre_interface_handle{YType::uint32, "exact-path-gre-interface-handle"},
    exact_route_gre_phys_ifh_avail{YType::boolean, "exact-route-gre-phys-ifh-avail"},
    exact_route_result{YType::boolean, "exact-route-result"},
    prefix_is_static_or_connected{YType::boolean, "prefix-is-static-or-connected"},
    packet_should_recieve{YType::boolean, "packet-should-recieve"},
    prefix_connected{YType::boolean, "prefix-connected"},
    prefix_for_adjancency{YType::boolean, "prefix-for-adjancency"},
    prefix_for_pic_next_hop{YType::boolean, "prefix-for-pic-next-hop"},
    purgable_after_purge_interval{YType::boolean, "purgable-after-purge-interval"},
    broadcast_recive_flag{YType::boolean, "broadcast-recive-flag"},
    broadcast_forward_flag{YType::boolean, "broadcast-forward-flag"},
    zero_by_zero_route_as_default{YType::boolean, "zero-by-zero-route-as-default"},
    external_switch_triggered{YType::boolean, "external-switch-triggered"},
    route_attribute_flag{YType::boolean, "route-attribute-flag"},
    dummy_real_zero_route{YType::boolean, "dummy-real-zero-route"},
    ldi_lw_flag{YType::uint32, "ldi-lw-flag"},
    ref_counter_of_ldi_lw_ldi{YType::uint32, "ref-counter-of-ldi-lw-ldi"},
    type_of_ldi_lw_ldi{YType::uint32, "type-of-ldi-lw-ldi"},
    lspa_flags{YType::uint32, "lspa-flags"},
    version_of_route{YType::uint64, "version-of-route"},
    fib_route_download_priority{YType::uint32, "fib-route-download-priority"},
    time_of_last_update_in_msec{YType::uint64, "time-of-last-update-in-msec"},
    l2_subscriber_route{YType::boolean, "l2-subscriber-route"},
    l2_subscriber_xconnect_id{YType::uint32, "l2-subscriber-xconnect-id"},
    l2_subscriber_flags{YType::uint32, "l2-subscriber-flags"},
    l2_subscriber_ip_protocol{YType::uint32, "l2-subscriber-ip-protocol"},
    l2tpv3_cookie_length_bits{YType::uint32, "l2tpv3-cookie-length-bits"},
    route_for_external_reach_linecard_flag{YType::boolean, "route-for-external-reach-linecard-flag"},
    route_source_not_preferred{YType::boolean, "route-source-not-preferred"},
    route_is_sr_flag{YType::boolean, "route-is-sr-flag"}
        ,
    detail_fib_entry_information(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation>())
    , fib_entry_path(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath>())
    , extension_object(this, {})
{
    detail_fib_entry_information->parent = this;
    fib_entry_path->parent = this;

    yang_name = "ip-prefix-detail"; yang_parent_name = "ip-prefix-details"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::~IpPrefixDetail()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<extension_object.len(); index++)
    {
        if(extension_object[index]->has_data())
            return true;
    }
    return prefix.is_set
	|| prefix_length.is_set
	|| protocol_type_fib_entry.is_set
	|| platform_hardware.is_set
	|| number_of_referances_to_path_list.is_set
	|| path_list_flags.is_set
	|| path_list_source.is_set
	|| number_of_referances_to_ldi.is_set
	|| ldi_flags.is_set
	|| flags_external_ldi.is_set
	|| pointer_external_ldi.is_set
	|| exact_path_interface_handle.is_set
	|| exact_path_gre_interface_handle.is_set
	|| exact_route_gre_phys_ifh_avail.is_set
	|| exact_route_result.is_set
	|| prefix_is_static_or_connected.is_set
	|| packet_should_recieve.is_set
	|| prefix_connected.is_set
	|| prefix_for_adjancency.is_set
	|| prefix_for_pic_next_hop.is_set
	|| purgable_after_purge_interval.is_set
	|| broadcast_recive_flag.is_set
	|| broadcast_forward_flag.is_set
	|| zero_by_zero_route_as_default.is_set
	|| external_switch_triggered.is_set
	|| route_attribute_flag.is_set
	|| dummy_real_zero_route.is_set
	|| ldi_lw_flag.is_set
	|| ref_counter_of_ldi_lw_ldi.is_set
	|| type_of_ldi_lw_ldi.is_set
	|| lspa_flags.is_set
	|| version_of_route.is_set
	|| fib_route_download_priority.is_set
	|| time_of_last_update_in_msec.is_set
	|| l2_subscriber_route.is_set
	|| l2_subscriber_xconnect_id.is_set
	|| l2_subscriber_flags.is_set
	|| l2_subscriber_ip_protocol.is_set
	|| l2tpv3_cookie_length_bits.is_set
	|| route_for_external_reach_linecard_flag.is_set
	|| route_source_not_preferred.is_set
	|| route_is_sr_flag.is_set
	|| (detail_fib_entry_information !=  nullptr && detail_fib_entry_information->has_data())
	|| (fib_entry_path !=  nullptr && fib_entry_path->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::has_operation() const
{
    for (std::size_t index=0; index<extension_object.len(); index++)
    {
        if(extension_object[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(prefix.yfilter)
	|| ydk::is_set(prefix_length.yfilter)
	|| ydk::is_set(protocol_type_fib_entry.yfilter)
	|| ydk::is_set(platform_hardware.yfilter)
	|| ydk::is_set(number_of_referances_to_path_list.yfilter)
	|| ydk::is_set(path_list_flags.yfilter)
	|| ydk::is_set(path_list_source.yfilter)
	|| ydk::is_set(number_of_referances_to_ldi.yfilter)
	|| ydk::is_set(ldi_flags.yfilter)
	|| ydk::is_set(flags_external_ldi.yfilter)
	|| ydk::is_set(pointer_external_ldi.yfilter)
	|| ydk::is_set(exact_path_interface_handle.yfilter)
	|| ydk::is_set(exact_path_gre_interface_handle.yfilter)
	|| ydk::is_set(exact_route_gre_phys_ifh_avail.yfilter)
	|| ydk::is_set(exact_route_result.yfilter)
	|| ydk::is_set(prefix_is_static_or_connected.yfilter)
	|| ydk::is_set(packet_should_recieve.yfilter)
	|| ydk::is_set(prefix_connected.yfilter)
	|| ydk::is_set(prefix_for_adjancency.yfilter)
	|| ydk::is_set(prefix_for_pic_next_hop.yfilter)
	|| ydk::is_set(purgable_after_purge_interval.yfilter)
	|| ydk::is_set(broadcast_recive_flag.yfilter)
	|| ydk::is_set(broadcast_forward_flag.yfilter)
	|| ydk::is_set(zero_by_zero_route_as_default.yfilter)
	|| ydk::is_set(external_switch_triggered.yfilter)
	|| ydk::is_set(route_attribute_flag.yfilter)
	|| ydk::is_set(dummy_real_zero_route.yfilter)
	|| ydk::is_set(ldi_lw_flag.yfilter)
	|| ydk::is_set(ref_counter_of_ldi_lw_ldi.yfilter)
	|| ydk::is_set(type_of_ldi_lw_ldi.yfilter)
	|| ydk::is_set(lspa_flags.yfilter)
	|| ydk::is_set(version_of_route.yfilter)
	|| ydk::is_set(fib_route_download_priority.yfilter)
	|| ydk::is_set(time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(l2_subscriber_route.yfilter)
	|| ydk::is_set(l2_subscriber_xconnect_id.yfilter)
	|| ydk::is_set(l2_subscriber_flags.yfilter)
	|| ydk::is_set(l2_subscriber_ip_protocol.yfilter)
	|| ydk::is_set(l2tpv3_cookie_length_bits.yfilter)
	|| ydk::is_set(route_for_external_reach_linecard_flag.yfilter)
	|| ydk::is_set(route_source_not_preferred.yfilter)
	|| ydk::is_set(route_is_sr_flag.yfilter)
	|| (detail_fib_entry_information !=  nullptr && detail_fib_entry_information->has_operation())
	|| (fib_entry_path !=  nullptr && fib_entry_path->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ip-prefix-detail";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (prefix.is_set || is_set(prefix.yfilter)) leaf_name_data.push_back(prefix.get_name_leafdata());
    if (prefix_length.is_set || is_set(prefix_length.yfilter)) leaf_name_data.push_back(prefix_length.get_name_leafdata());
    if (protocol_type_fib_entry.is_set || is_set(protocol_type_fib_entry.yfilter)) leaf_name_data.push_back(protocol_type_fib_entry.get_name_leafdata());
    if (platform_hardware.is_set || is_set(platform_hardware.yfilter)) leaf_name_data.push_back(platform_hardware.get_name_leafdata());
    if (number_of_referances_to_path_list.is_set || is_set(number_of_referances_to_path_list.yfilter)) leaf_name_data.push_back(number_of_referances_to_path_list.get_name_leafdata());
    if (path_list_flags.is_set || is_set(path_list_flags.yfilter)) leaf_name_data.push_back(path_list_flags.get_name_leafdata());
    if (path_list_source.is_set || is_set(path_list_source.yfilter)) leaf_name_data.push_back(path_list_source.get_name_leafdata());
    if (number_of_referances_to_ldi.is_set || is_set(number_of_referances_to_ldi.yfilter)) leaf_name_data.push_back(number_of_referances_to_ldi.get_name_leafdata());
    if (ldi_flags.is_set || is_set(ldi_flags.yfilter)) leaf_name_data.push_back(ldi_flags.get_name_leafdata());
    if (flags_external_ldi.is_set || is_set(flags_external_ldi.yfilter)) leaf_name_data.push_back(flags_external_ldi.get_name_leafdata());
    if (pointer_external_ldi.is_set || is_set(pointer_external_ldi.yfilter)) leaf_name_data.push_back(pointer_external_ldi.get_name_leafdata());
    if (exact_path_interface_handle.is_set || is_set(exact_path_interface_handle.yfilter)) leaf_name_data.push_back(exact_path_interface_handle.get_name_leafdata());
    if (exact_path_gre_interface_handle.is_set || is_set(exact_path_gre_interface_handle.yfilter)) leaf_name_data.push_back(exact_path_gre_interface_handle.get_name_leafdata());
    if (exact_route_gre_phys_ifh_avail.is_set || is_set(exact_route_gre_phys_ifh_avail.yfilter)) leaf_name_data.push_back(exact_route_gre_phys_ifh_avail.get_name_leafdata());
    if (exact_route_result.is_set || is_set(exact_route_result.yfilter)) leaf_name_data.push_back(exact_route_result.get_name_leafdata());
    if (prefix_is_static_or_connected.is_set || is_set(prefix_is_static_or_connected.yfilter)) leaf_name_data.push_back(prefix_is_static_or_connected.get_name_leafdata());
    if (packet_should_recieve.is_set || is_set(packet_should_recieve.yfilter)) leaf_name_data.push_back(packet_should_recieve.get_name_leafdata());
    if (prefix_connected.is_set || is_set(prefix_connected.yfilter)) leaf_name_data.push_back(prefix_connected.get_name_leafdata());
    if (prefix_for_adjancency.is_set || is_set(prefix_for_adjancency.yfilter)) leaf_name_data.push_back(prefix_for_adjancency.get_name_leafdata());
    if (prefix_for_pic_next_hop.is_set || is_set(prefix_for_pic_next_hop.yfilter)) leaf_name_data.push_back(prefix_for_pic_next_hop.get_name_leafdata());
    if (purgable_after_purge_interval.is_set || is_set(purgable_after_purge_interval.yfilter)) leaf_name_data.push_back(purgable_after_purge_interval.get_name_leafdata());
    if (broadcast_recive_flag.is_set || is_set(broadcast_recive_flag.yfilter)) leaf_name_data.push_back(broadcast_recive_flag.get_name_leafdata());
    if (broadcast_forward_flag.is_set || is_set(broadcast_forward_flag.yfilter)) leaf_name_data.push_back(broadcast_forward_flag.get_name_leafdata());
    if (zero_by_zero_route_as_default.is_set || is_set(zero_by_zero_route_as_default.yfilter)) leaf_name_data.push_back(zero_by_zero_route_as_default.get_name_leafdata());
    if (external_switch_triggered.is_set || is_set(external_switch_triggered.yfilter)) leaf_name_data.push_back(external_switch_triggered.get_name_leafdata());
    if (route_attribute_flag.is_set || is_set(route_attribute_flag.yfilter)) leaf_name_data.push_back(route_attribute_flag.get_name_leafdata());
    if (dummy_real_zero_route.is_set || is_set(dummy_real_zero_route.yfilter)) leaf_name_data.push_back(dummy_real_zero_route.get_name_leafdata());
    if (ldi_lw_flag.is_set || is_set(ldi_lw_flag.yfilter)) leaf_name_data.push_back(ldi_lw_flag.get_name_leafdata());
    if (ref_counter_of_ldi_lw_ldi.is_set || is_set(ref_counter_of_ldi_lw_ldi.yfilter)) leaf_name_data.push_back(ref_counter_of_ldi_lw_ldi.get_name_leafdata());
    if (type_of_ldi_lw_ldi.is_set || is_set(type_of_ldi_lw_ldi.yfilter)) leaf_name_data.push_back(type_of_ldi_lw_ldi.get_name_leafdata());
    if (lspa_flags.is_set || is_set(lspa_flags.yfilter)) leaf_name_data.push_back(lspa_flags.get_name_leafdata());
    if (version_of_route.is_set || is_set(version_of_route.yfilter)) leaf_name_data.push_back(version_of_route.get_name_leafdata());
    if (fib_route_download_priority.is_set || is_set(fib_route_download_priority.yfilter)) leaf_name_data.push_back(fib_route_download_priority.get_name_leafdata());
    if (time_of_last_update_in_msec.is_set || is_set(time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(time_of_last_update_in_msec.get_name_leafdata());
    if (l2_subscriber_route.is_set || is_set(l2_subscriber_route.yfilter)) leaf_name_data.push_back(l2_subscriber_route.get_name_leafdata());
    if (l2_subscriber_xconnect_id.is_set || is_set(l2_subscriber_xconnect_id.yfilter)) leaf_name_data.push_back(l2_subscriber_xconnect_id.get_name_leafdata());
    if (l2_subscriber_flags.is_set || is_set(l2_subscriber_flags.yfilter)) leaf_name_data.push_back(l2_subscriber_flags.get_name_leafdata());
    if (l2_subscriber_ip_protocol.is_set || is_set(l2_subscriber_ip_protocol.yfilter)) leaf_name_data.push_back(l2_subscriber_ip_protocol.get_name_leafdata());
    if (l2tpv3_cookie_length_bits.is_set || is_set(l2tpv3_cookie_length_bits.yfilter)) leaf_name_data.push_back(l2tpv3_cookie_length_bits.get_name_leafdata());
    if (route_for_external_reach_linecard_flag.is_set || is_set(route_for_external_reach_linecard_flag.yfilter)) leaf_name_data.push_back(route_for_external_reach_linecard_flag.get_name_leafdata());
    if (route_source_not_preferred.is_set || is_set(route_source_not_preferred.yfilter)) leaf_name_data.push_back(route_source_not_preferred.get_name_leafdata());
    if (route_is_sr_flag.is_set || is_set(route_is_sr_flag.yfilter)) leaf_name_data.push_back(route_is_sr_flag.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "detail-fib-entry-information")
    {
        if(detail_fib_entry_information == nullptr)
        {
            detail_fib_entry_information = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation>();
        }
        return detail_fib_entry_information;
    }

    if(child_yang_name == "fib-entry-path")
    {
        if(fib_entry_path == nullptr)
        {
            fib_entry_path = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath>();
        }
        return fib_entry_path;
    }

    if(child_yang_name == "extension-object")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::ExtensionObject>();
        ent_->parent = this;
        extension_object.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(detail_fib_entry_information != nullptr)
    {
        _children["detail-fib-entry-information"] = detail_fib_entry_information;
    }

    if(fib_entry_path != nullptr)
    {
        _children["fib-entry-path"] = fib_entry_path;
    }

    count_ = 0;
    for (auto ent_ : extension_object.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "prefix")
    {
        prefix = value;
        prefix.value_namespace = name_space;
        prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-length")
    {
        prefix_length = value;
        prefix_length.value_namespace = name_space;
        prefix_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protocol-type-fib-entry")
    {
        protocol_type_fib_entry = value;
        protocol_type_fib_entry.value_namespace = name_space;
        protocol_type_fib_entry.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-hardware")
    {
        platform_hardware = value;
        platform_hardware.value_namespace = name_space;
        platform_hardware.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-referances-to-path-list")
    {
        number_of_referances_to_path_list = value;
        number_of_referances_to_path_list.value_namespace = name_space;
        number_of_referances_to_path_list.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-list-flags")
    {
        path_list_flags = value;
        path_list_flags.value_namespace = name_space;
        path_list_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-list-source")
    {
        path_list_source = value;
        path_list_source.value_namespace = name_space;
        path_list_source.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-referances-to-ldi")
    {
        number_of_referances_to_ldi = value;
        number_of_referances_to_ldi.value_namespace = name_space;
        number_of_referances_to_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-flags")
    {
        ldi_flags = value;
        ldi_flags.value_namespace = name_space;
        ldi_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flags-external-ldi")
    {
        flags_external_ldi = value;
        flags_external_ldi.value_namespace = name_space;
        flags_external_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pointer-external-ldi")
    {
        pointer_external_ldi = value;
        pointer_external_ldi.value_namespace = name_space;
        pointer_external_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-path-interface-handle")
    {
        exact_path_interface_handle = value;
        exact_path_interface_handle.value_namespace = name_space;
        exact_path_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-path-gre-interface-handle")
    {
        exact_path_gre_interface_handle = value;
        exact_path_gre_interface_handle.value_namespace = name_space;
        exact_path_gre_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-route-gre-phys-ifh-avail")
    {
        exact_route_gre_phys_ifh_avail = value;
        exact_route_gre_phys_ifh_avail.value_namespace = name_space;
        exact_route_gre_phys_ifh_avail.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "exact-route-result")
    {
        exact_route_result = value;
        exact_route_result.value_namespace = name_space;
        exact_route_result.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-is-static-or-connected")
    {
        prefix_is_static_or_connected = value;
        prefix_is_static_or_connected.value_namespace = name_space;
        prefix_is_static_or_connected.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "packet-should-recieve")
    {
        packet_should_recieve = value;
        packet_should_recieve.value_namespace = name_space;
        packet_should_recieve.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-connected")
    {
        prefix_connected = value;
        prefix_connected.value_namespace = name_space;
        prefix_connected.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-for-adjancency")
    {
        prefix_for_adjancency = value;
        prefix_for_adjancency.value_namespace = name_space;
        prefix_for_adjancency.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-for-pic-next-hop")
    {
        prefix_for_pic_next_hop = value;
        prefix_for_pic_next_hop.value_namespace = name_space;
        prefix_for_pic_next_hop.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "purgable-after-purge-interval")
    {
        purgable_after_purge_interval = value;
        purgable_after_purge_interval.value_namespace = name_space;
        purgable_after_purge_interval.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "broadcast-recive-flag")
    {
        broadcast_recive_flag = value;
        broadcast_recive_flag.value_namespace = name_space;
        broadcast_recive_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "broadcast-forward-flag")
    {
        broadcast_forward_flag = value;
        broadcast_forward_flag.value_namespace = name_space;
        broadcast_forward_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "zero-by-zero-route-as-default")
    {
        zero_by_zero_route_as_default = value;
        zero_by_zero_route_as_default.value_namespace = name_space;
        zero_by_zero_route_as_default.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "external-switch-triggered")
    {
        external_switch_triggered = value;
        external_switch_triggered.value_namespace = name_space;
        external_switch_triggered.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "route-attribute-flag")
    {
        route_attribute_flag = value;
        route_attribute_flag.value_namespace = name_space;
        route_attribute_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "dummy-real-zero-route")
    {
        dummy_real_zero_route = value;
        dummy_real_zero_route.value_namespace = name_space;
        dummy_real_zero_route.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-lw-flag")
    {
        ldi_lw_flag = value;
        ldi_lw_flag.value_namespace = name_space;
        ldi_lw_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ref-counter-of-ldi-lw-ldi")
    {
        ref_counter_of_ldi_lw_ldi = value;
        ref_counter_of_ldi_lw_ldi.value_namespace = name_space;
        ref_counter_of_ldi_lw_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "type-of-ldi-lw-ldi")
    {
        type_of_ldi_lw_ldi = value;
        type_of_ldi_lw_ldi.value_namespace = name_space;
        type_of_ldi_lw_ldi.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lspa-flags")
    {
        lspa_flags = value;
        lspa_flags.value_namespace = name_space;
        lspa_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "version-of-route")
    {
        version_of_route = value;
        version_of_route.value_namespace = name_space;
        version_of_route.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-route-download-priority")
    {
        fib_route_download_priority = value;
        fib_route_download_priority.value_namespace = name_space;
        fib_route_download_priority.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "time-of-last-update-in-msec")
    {
        time_of_last_update_in_msec = value;
        time_of_last_update_in_msec.value_namespace = name_space;
        time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-subscriber-route")
    {
        l2_subscriber_route = value;
        l2_subscriber_route.value_namespace = name_space;
        l2_subscriber_route.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-subscriber-xconnect-id")
    {
        l2_subscriber_xconnect_id = value;
        l2_subscriber_xconnect_id.value_namespace = name_space;
        l2_subscriber_xconnect_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-subscriber-flags")
    {
        l2_subscriber_flags = value;
        l2_subscriber_flags.value_namespace = name_space;
        l2_subscriber_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2-subscriber-ip-protocol")
    {
        l2_subscriber_ip_protocol = value;
        l2_subscriber_ip_protocol.value_namespace = name_space;
        l2_subscriber_ip_protocol.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "l2tpv3-cookie-length-bits")
    {
        l2tpv3_cookie_length_bits = value;
        l2tpv3_cookie_length_bits.value_namespace = name_space;
        l2tpv3_cookie_length_bits.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "route-for-external-reach-linecard-flag")
    {
        route_for_external_reach_linecard_flag = value;
        route_for_external_reach_linecard_flag.value_namespace = name_space;
        route_for_external_reach_linecard_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "route-source-not-preferred")
    {
        route_source_not_preferred = value;
        route_source_not_preferred.value_namespace = name_space;
        route_source_not_preferred.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "route-is-sr-flag")
    {
        route_is_sr_flag = value;
        route_is_sr_flag.value_namespace = name_space;
        route_is_sr_flag.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "prefix")
    {
        prefix.yfilter = yfilter;
    }
    if(value_path == "prefix-length")
    {
        prefix_length.yfilter = yfilter;
    }
    if(value_path == "protocol-type-fib-entry")
    {
        protocol_type_fib_entry.yfilter = yfilter;
    }
    if(value_path == "platform-hardware")
    {
        platform_hardware.yfilter = yfilter;
    }
    if(value_path == "number-of-referances-to-path-list")
    {
        number_of_referances_to_path_list.yfilter = yfilter;
    }
    if(value_path == "path-list-flags")
    {
        path_list_flags.yfilter = yfilter;
    }
    if(value_path == "path-list-source")
    {
        path_list_source.yfilter = yfilter;
    }
    if(value_path == "number-of-referances-to-ldi")
    {
        number_of_referances_to_ldi.yfilter = yfilter;
    }
    if(value_path == "ldi-flags")
    {
        ldi_flags.yfilter = yfilter;
    }
    if(value_path == "flags-external-ldi")
    {
        flags_external_ldi.yfilter = yfilter;
    }
    if(value_path == "pointer-external-ldi")
    {
        pointer_external_ldi.yfilter = yfilter;
    }
    if(value_path == "exact-path-interface-handle")
    {
        exact_path_interface_handle.yfilter = yfilter;
    }
    if(value_path == "exact-path-gre-interface-handle")
    {
        exact_path_gre_interface_handle.yfilter = yfilter;
    }
    if(value_path == "exact-route-gre-phys-ifh-avail")
    {
        exact_route_gre_phys_ifh_avail.yfilter = yfilter;
    }
    if(value_path == "exact-route-result")
    {
        exact_route_result.yfilter = yfilter;
    }
    if(value_path == "prefix-is-static-or-connected")
    {
        prefix_is_static_or_connected.yfilter = yfilter;
    }
    if(value_path == "packet-should-recieve")
    {
        packet_should_recieve.yfilter = yfilter;
    }
    if(value_path == "prefix-connected")
    {
        prefix_connected.yfilter = yfilter;
    }
    if(value_path == "prefix-for-adjancency")
    {
        prefix_for_adjancency.yfilter = yfilter;
    }
    if(value_path == "prefix-for-pic-next-hop")
    {
        prefix_for_pic_next_hop.yfilter = yfilter;
    }
    if(value_path == "purgable-after-purge-interval")
    {
        purgable_after_purge_interval.yfilter = yfilter;
    }
    if(value_path == "broadcast-recive-flag")
    {
        broadcast_recive_flag.yfilter = yfilter;
    }
    if(value_path == "broadcast-forward-flag")
    {
        broadcast_forward_flag.yfilter = yfilter;
    }
    if(value_path == "zero-by-zero-route-as-default")
    {
        zero_by_zero_route_as_default.yfilter = yfilter;
    }
    if(value_path == "external-switch-triggered")
    {
        external_switch_triggered.yfilter = yfilter;
    }
    if(value_path == "route-attribute-flag")
    {
        route_attribute_flag.yfilter = yfilter;
    }
    if(value_path == "dummy-real-zero-route")
    {
        dummy_real_zero_route.yfilter = yfilter;
    }
    if(value_path == "ldi-lw-flag")
    {
        ldi_lw_flag.yfilter = yfilter;
    }
    if(value_path == "ref-counter-of-ldi-lw-ldi")
    {
        ref_counter_of_ldi_lw_ldi.yfilter = yfilter;
    }
    if(value_path == "type-of-ldi-lw-ldi")
    {
        type_of_ldi_lw_ldi.yfilter = yfilter;
    }
    if(value_path == "lspa-flags")
    {
        lspa_flags.yfilter = yfilter;
    }
    if(value_path == "version-of-route")
    {
        version_of_route.yfilter = yfilter;
    }
    if(value_path == "fib-route-download-priority")
    {
        fib_route_download_priority.yfilter = yfilter;
    }
    if(value_path == "time-of-last-update-in-msec")
    {
        time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "l2-subscriber-route")
    {
        l2_subscriber_route.yfilter = yfilter;
    }
    if(value_path == "l2-subscriber-xconnect-id")
    {
        l2_subscriber_xconnect_id.yfilter = yfilter;
    }
    if(value_path == "l2-subscriber-flags")
    {
        l2_subscriber_flags.yfilter = yfilter;
    }
    if(value_path == "l2-subscriber-ip-protocol")
    {
        l2_subscriber_ip_protocol.yfilter = yfilter;
    }
    if(value_path == "l2tpv3-cookie-length-bits")
    {
        l2tpv3_cookie_length_bits.yfilter = yfilter;
    }
    if(value_path == "route-for-external-reach-linecard-flag")
    {
        route_for_external_reach_linecard_flag.yfilter = yfilter;
    }
    if(value_path == "route-source-not-preferred")
    {
        route_source_not_preferred.yfilter = yfilter;
    }
    if(value_path == "route-is-sr-flag")
    {
        route_is_sr_flag.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "detail-fib-entry-information" || name == "fib-entry-path" || name == "extension-object" || name == "prefix" || name == "prefix-length" || name == "protocol-type-fib-entry" || name == "platform-hardware" || name == "number-of-referances-to-path-list" || name == "path-list-flags" || name == "path-list-source" || name == "number-of-referances-to-ldi" || name == "ldi-flags" || name == "flags-external-ldi" || name == "pointer-external-ldi" || name == "exact-path-interface-handle" || name == "exact-path-gre-interface-handle" || name == "exact-route-gre-phys-ifh-avail" || name == "exact-route-result" || name == "prefix-is-static-or-connected" || name == "packet-should-recieve" || name == "prefix-connected" || name == "prefix-for-adjancency" || name == "prefix-for-pic-next-hop" || name == "purgable-after-purge-interval" || name == "broadcast-recive-flag" || name == "broadcast-forward-flag" || name == "zero-by-zero-route-as-default" || name == "external-switch-triggered" || name == "route-attribute-flag" || name == "dummy-real-zero-route" || name == "ldi-lw-flag" || name == "ref-counter-of-ldi-lw-ldi" || name == "type-of-ldi-lw-ldi" || name == "lspa-flags" || name == "version-of-route" || name == "fib-route-download-priority" || name == "time-of-last-update-in-msec" || name == "l2-subscriber-route" || name == "l2-subscriber-xconnect-id" || name == "l2-subscriber-flags" || name == "l2-subscriber-ip-protocol" || name == "l2tpv3-cookie-length-bits" || name == "route-for-external-reach-linecard-flag" || name == "route-source-not-preferred" || name == "route-is-sr-flag")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::DetailFibEntryInformation()
    :
    fib_entry_version{YType::uint32, "fib-entry-version"},
    per_prefix_accounting{YType::uint8, "per-prefix-accounting"},
    load_sharing_type{YType::enumeration, "load-sharing-type"},
    fib_entry_adjacency_type{YType::enumeration, "fib-entry-adjacency-type"},
    fib_protocol_type{YType::uint32, "fib-protocol-type"},
    afi_fib_protocol_type{YType::uint32, "afi-fib-protocol-type"},
    aib_l3_address{YType::str, "aib-l3-address"},
    adjacency_address_length{YType::uint32, "adjacency-address-length"},
    adjacency_interface{YType::uint32, "adjacency-interface"},
    fib_special_nh_information_type{YType::uint32, "fib-special-nh-information-type"},
    fib_entry_adjacency_address{YType::str, "fib-entry-adjacency-address"},
    fib_entry_adjacency_interface{YType::uint32, "fib-entry-adjacency-interface"},
    packets_through_fib_entry{YType::uint64, "packets-through-fib-entry"},
    bytes_through_fib_entry{YType::uint64, "bytes-through-fib-entry"},
    detailed_prefix_length{YType::uint32, "detailed-prefix-length"},
    prefix_protocol{YType::uint32, "prefix-protocol"},
    precedence_forpackets{YType::uint8, "precedence-forpackets"},
    traffic_index_for_packets{YType::uint8, "traffic-index-for-packets"},
    switch_compontent_id{YType::uint32, "switch-compontent-id"},
    fast_adjacency_flag{YType::boolean, "fast-adjacency-flag"},
    illegal_fast_adjacency_flag{YType::boolean, "illegal-fast-adjacency-flag"},
    remote_adjacency_flag{YType::boolean, "remote-adjacency-flag"},
    bgp_attribute_id{YType::uint32, "bgp-attribute-id"},
    bgp_local_attribute_id{YType::uint32, "bgp-local-attribute-id"},
    bgp_attribute_origin_as{YType::uint32, "bgp-attribute-origin-as"},
    bgp_attribute_next_hop_as{YType::uint32, "bgp-attribute-next-hop-as"},
    path_string{YType::str, "path-string"},
    extcom_string{YType::str, "extcom-string"},
    com_string{YType::str, "com-string"},
    extended_community{YType::uint32, "extended-community"},
    qos_group{YType::uint32, "qos-group"},
    mpls_fec{YType::uint32, "mpls-fec"},
    qppb_qos_group_and_ip_precedence{YType::uint32, "qppb-qos-group-and-ip-precedence"},
    flow_tag{YType::uint8, "flow-tag"},
    forward_class{YType::uint8, "forward-class"},
    pl_time_of_last_update_in_msec{YType::uint64, "pl-time-of-last-update-in-msec"},
    ldi_time_of_last_update_in_msec{YType::uint64, "ldi-time-of-last-update-in-msec"},
    lwldi_time_of_last_update_in_msec{YType::uint64, "lwldi-time-of-last-update-in-msec"},
    pl_time_stamp_type{YType::uint32, "pl-time-stamp-type"}
        ,
    loadshare_information(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation>())
{
    loadshare_information->parent = this;

    yang_name = "detail-fib-entry-information"; yang_parent_name = "ip-prefix-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::~DetailFibEntryInformation()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::has_data() const
{
    if (is_presence_container) return true;
    return fib_entry_version.is_set
	|| per_prefix_accounting.is_set
	|| load_sharing_type.is_set
	|| fib_entry_adjacency_type.is_set
	|| fib_protocol_type.is_set
	|| afi_fib_protocol_type.is_set
	|| aib_l3_address.is_set
	|| adjacency_address_length.is_set
	|| adjacency_interface.is_set
	|| fib_special_nh_information_type.is_set
	|| fib_entry_adjacency_address.is_set
	|| fib_entry_adjacency_interface.is_set
	|| packets_through_fib_entry.is_set
	|| bytes_through_fib_entry.is_set
	|| detailed_prefix_length.is_set
	|| prefix_protocol.is_set
	|| precedence_forpackets.is_set
	|| traffic_index_for_packets.is_set
	|| switch_compontent_id.is_set
	|| fast_adjacency_flag.is_set
	|| illegal_fast_adjacency_flag.is_set
	|| remote_adjacency_flag.is_set
	|| bgp_attribute_id.is_set
	|| bgp_local_attribute_id.is_set
	|| bgp_attribute_origin_as.is_set
	|| bgp_attribute_next_hop_as.is_set
	|| path_string.is_set
	|| extcom_string.is_set
	|| com_string.is_set
	|| extended_community.is_set
	|| qos_group.is_set
	|| mpls_fec.is_set
	|| qppb_qos_group_and_ip_precedence.is_set
	|| flow_tag.is_set
	|| forward_class.is_set
	|| pl_time_of_last_update_in_msec.is_set
	|| ldi_time_of_last_update_in_msec.is_set
	|| lwldi_time_of_last_update_in_msec.is_set
	|| pl_time_stamp_type.is_set
	|| (loadshare_information !=  nullptr && loadshare_information->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(fib_entry_version.yfilter)
	|| ydk::is_set(per_prefix_accounting.yfilter)
	|| ydk::is_set(load_sharing_type.yfilter)
	|| ydk::is_set(fib_entry_adjacency_type.yfilter)
	|| ydk::is_set(fib_protocol_type.yfilter)
	|| ydk::is_set(afi_fib_protocol_type.yfilter)
	|| ydk::is_set(aib_l3_address.yfilter)
	|| ydk::is_set(adjacency_address_length.yfilter)
	|| ydk::is_set(adjacency_interface.yfilter)
	|| ydk::is_set(fib_special_nh_information_type.yfilter)
	|| ydk::is_set(fib_entry_adjacency_address.yfilter)
	|| ydk::is_set(fib_entry_adjacency_interface.yfilter)
	|| ydk::is_set(packets_through_fib_entry.yfilter)
	|| ydk::is_set(bytes_through_fib_entry.yfilter)
	|| ydk::is_set(detailed_prefix_length.yfilter)
	|| ydk::is_set(prefix_protocol.yfilter)
	|| ydk::is_set(precedence_forpackets.yfilter)
	|| ydk::is_set(traffic_index_for_packets.yfilter)
	|| ydk::is_set(switch_compontent_id.yfilter)
	|| ydk::is_set(fast_adjacency_flag.yfilter)
	|| ydk::is_set(illegal_fast_adjacency_flag.yfilter)
	|| ydk::is_set(remote_adjacency_flag.yfilter)
	|| ydk::is_set(bgp_attribute_id.yfilter)
	|| ydk::is_set(bgp_local_attribute_id.yfilter)
	|| ydk::is_set(bgp_attribute_origin_as.yfilter)
	|| ydk::is_set(bgp_attribute_next_hop_as.yfilter)
	|| ydk::is_set(path_string.yfilter)
	|| ydk::is_set(extcom_string.yfilter)
	|| ydk::is_set(com_string.yfilter)
	|| ydk::is_set(extended_community.yfilter)
	|| ydk::is_set(qos_group.yfilter)
	|| ydk::is_set(mpls_fec.yfilter)
	|| ydk::is_set(qppb_qos_group_and_ip_precedence.yfilter)
	|| ydk::is_set(flow_tag.yfilter)
	|| ydk::is_set(forward_class.yfilter)
	|| ydk::is_set(pl_time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(ldi_time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(lwldi_time_of_last_update_in_msec.yfilter)
	|| ydk::is_set(pl_time_stamp_type.yfilter)
	|| (loadshare_information !=  nullptr && loadshare_information->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "detail-fib-entry-information";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (fib_entry_version.is_set || is_set(fib_entry_version.yfilter)) leaf_name_data.push_back(fib_entry_version.get_name_leafdata());
    if (per_prefix_accounting.is_set || is_set(per_prefix_accounting.yfilter)) leaf_name_data.push_back(per_prefix_accounting.get_name_leafdata());
    if (load_sharing_type.is_set || is_set(load_sharing_type.yfilter)) leaf_name_data.push_back(load_sharing_type.get_name_leafdata());
    if (fib_entry_adjacency_type.is_set || is_set(fib_entry_adjacency_type.yfilter)) leaf_name_data.push_back(fib_entry_adjacency_type.get_name_leafdata());
    if (fib_protocol_type.is_set || is_set(fib_protocol_type.yfilter)) leaf_name_data.push_back(fib_protocol_type.get_name_leafdata());
    if (afi_fib_protocol_type.is_set || is_set(afi_fib_protocol_type.yfilter)) leaf_name_data.push_back(afi_fib_protocol_type.get_name_leafdata());
    if (aib_l3_address.is_set || is_set(aib_l3_address.yfilter)) leaf_name_data.push_back(aib_l3_address.get_name_leafdata());
    if (adjacency_address_length.is_set || is_set(adjacency_address_length.yfilter)) leaf_name_data.push_back(adjacency_address_length.get_name_leafdata());
    if (adjacency_interface.is_set || is_set(adjacency_interface.yfilter)) leaf_name_data.push_back(adjacency_interface.get_name_leafdata());
    if (fib_special_nh_information_type.is_set || is_set(fib_special_nh_information_type.yfilter)) leaf_name_data.push_back(fib_special_nh_information_type.get_name_leafdata());
    if (fib_entry_adjacency_address.is_set || is_set(fib_entry_adjacency_address.yfilter)) leaf_name_data.push_back(fib_entry_adjacency_address.get_name_leafdata());
    if (fib_entry_adjacency_interface.is_set || is_set(fib_entry_adjacency_interface.yfilter)) leaf_name_data.push_back(fib_entry_adjacency_interface.get_name_leafdata());
    if (packets_through_fib_entry.is_set || is_set(packets_through_fib_entry.yfilter)) leaf_name_data.push_back(packets_through_fib_entry.get_name_leafdata());
    if (bytes_through_fib_entry.is_set || is_set(bytes_through_fib_entry.yfilter)) leaf_name_data.push_back(bytes_through_fib_entry.get_name_leafdata());
    if (detailed_prefix_length.is_set || is_set(detailed_prefix_length.yfilter)) leaf_name_data.push_back(detailed_prefix_length.get_name_leafdata());
    if (prefix_protocol.is_set || is_set(prefix_protocol.yfilter)) leaf_name_data.push_back(prefix_protocol.get_name_leafdata());
    if (precedence_forpackets.is_set || is_set(precedence_forpackets.yfilter)) leaf_name_data.push_back(precedence_forpackets.get_name_leafdata());
    if (traffic_index_for_packets.is_set || is_set(traffic_index_for_packets.yfilter)) leaf_name_data.push_back(traffic_index_for_packets.get_name_leafdata());
    if (switch_compontent_id.is_set || is_set(switch_compontent_id.yfilter)) leaf_name_data.push_back(switch_compontent_id.get_name_leafdata());
    if (fast_adjacency_flag.is_set || is_set(fast_adjacency_flag.yfilter)) leaf_name_data.push_back(fast_adjacency_flag.get_name_leafdata());
    if (illegal_fast_adjacency_flag.is_set || is_set(illegal_fast_adjacency_flag.yfilter)) leaf_name_data.push_back(illegal_fast_adjacency_flag.get_name_leafdata());
    if (remote_adjacency_flag.is_set || is_set(remote_adjacency_flag.yfilter)) leaf_name_data.push_back(remote_adjacency_flag.get_name_leafdata());
    if (bgp_attribute_id.is_set || is_set(bgp_attribute_id.yfilter)) leaf_name_data.push_back(bgp_attribute_id.get_name_leafdata());
    if (bgp_local_attribute_id.is_set || is_set(bgp_local_attribute_id.yfilter)) leaf_name_data.push_back(bgp_local_attribute_id.get_name_leafdata());
    if (bgp_attribute_origin_as.is_set || is_set(bgp_attribute_origin_as.yfilter)) leaf_name_data.push_back(bgp_attribute_origin_as.get_name_leafdata());
    if (bgp_attribute_next_hop_as.is_set || is_set(bgp_attribute_next_hop_as.yfilter)) leaf_name_data.push_back(bgp_attribute_next_hop_as.get_name_leafdata());
    if (path_string.is_set || is_set(path_string.yfilter)) leaf_name_data.push_back(path_string.get_name_leafdata());
    if (extcom_string.is_set || is_set(extcom_string.yfilter)) leaf_name_data.push_back(extcom_string.get_name_leafdata());
    if (com_string.is_set || is_set(com_string.yfilter)) leaf_name_data.push_back(com_string.get_name_leafdata());
    if (extended_community.is_set || is_set(extended_community.yfilter)) leaf_name_data.push_back(extended_community.get_name_leafdata());
    if (qos_group.is_set || is_set(qos_group.yfilter)) leaf_name_data.push_back(qos_group.get_name_leafdata());
    if (mpls_fec.is_set || is_set(mpls_fec.yfilter)) leaf_name_data.push_back(mpls_fec.get_name_leafdata());
    if (qppb_qos_group_and_ip_precedence.is_set || is_set(qppb_qos_group_and_ip_precedence.yfilter)) leaf_name_data.push_back(qppb_qos_group_and_ip_precedence.get_name_leafdata());
    if (flow_tag.is_set || is_set(flow_tag.yfilter)) leaf_name_data.push_back(flow_tag.get_name_leafdata());
    if (forward_class.is_set || is_set(forward_class.yfilter)) leaf_name_data.push_back(forward_class.get_name_leafdata());
    if (pl_time_of_last_update_in_msec.is_set || is_set(pl_time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(pl_time_of_last_update_in_msec.get_name_leafdata());
    if (ldi_time_of_last_update_in_msec.is_set || is_set(ldi_time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(ldi_time_of_last_update_in_msec.get_name_leafdata());
    if (lwldi_time_of_last_update_in_msec.is_set || is_set(lwldi_time_of_last_update_in_msec.yfilter)) leaf_name_data.push_back(lwldi_time_of_last_update_in_msec.get_name_leafdata());
    if (pl_time_stamp_type.is_set || is_set(pl_time_stamp_type.yfilter)) leaf_name_data.push_back(pl_time_stamp_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "loadshare-information")
    {
        if(loadshare_information == nullptr)
        {
            loadshare_information = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation>();
        }
        return loadshare_information;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(loadshare_information != nullptr)
    {
        _children["loadshare-information"] = loadshare_information;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "fib-entry-version")
    {
        fib_entry_version = value;
        fib_entry_version.value_namespace = name_space;
        fib_entry_version.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "per-prefix-accounting")
    {
        per_prefix_accounting = value;
        per_prefix_accounting.value_namespace = name_space;
        per_prefix_accounting.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-sharing-type")
    {
        load_sharing_type = value;
        load_sharing_type.value_namespace = name_space;
        load_sharing_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-entry-adjacency-type")
    {
        fib_entry_adjacency_type = value;
        fib_entry_adjacency_type.value_namespace = name_space;
        fib_entry_adjacency_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-protocol-type")
    {
        fib_protocol_type = value;
        fib_protocol_type.value_namespace = name_space;
        fib_protocol_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "afi-fib-protocol-type")
    {
        afi_fib_protocol_type = value;
        afi_fib_protocol_type.value_namespace = name_space;
        afi_fib_protocol_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "aib-l3-address")
    {
        aib_l3_address = value;
        aib_l3_address.value_namespace = name_space;
        aib_l3_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "adjacency-address-length")
    {
        adjacency_address_length = value;
        adjacency_address_length.value_namespace = name_space;
        adjacency_address_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "adjacency-interface")
    {
        adjacency_interface = value;
        adjacency_interface.value_namespace = name_space;
        adjacency_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-special-nh-information-type")
    {
        fib_special_nh_information_type = value;
        fib_special_nh_information_type.value_namespace = name_space;
        fib_special_nh_information_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-entry-adjacency-address")
    {
        fib_entry_adjacency_address = value;
        fib_entry_adjacency_address.value_namespace = name_space;
        fib_entry_adjacency_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-entry-adjacency-interface")
    {
        fib_entry_adjacency_interface = value;
        fib_entry_adjacency_interface.value_namespace = name_space;
        fib_entry_adjacency_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "packets-through-fib-entry")
    {
        packets_through_fib_entry = value;
        packets_through_fib_entry.value_namespace = name_space;
        packets_through_fib_entry.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bytes-through-fib-entry")
    {
        bytes_through_fib_entry = value;
        bytes_through_fib_entry.value_namespace = name_space;
        bytes_through_fib_entry.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "detailed-prefix-length")
    {
        detailed_prefix_length = value;
        detailed_prefix_length.value_namespace = name_space;
        detailed_prefix_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-protocol")
    {
        prefix_protocol = value;
        prefix_protocol.value_namespace = name_space;
        prefix_protocol.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "precedence-forpackets")
    {
        precedence_forpackets = value;
        precedence_forpackets.value_namespace = name_space;
        precedence_forpackets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "traffic-index-for-packets")
    {
        traffic_index_for_packets = value;
        traffic_index_for_packets.value_namespace = name_space;
        traffic_index_for_packets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "switch-compontent-id")
    {
        switch_compontent_id = value;
        switch_compontent_id.value_namespace = name_space;
        switch_compontent_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fast-adjacency-flag")
    {
        fast_adjacency_flag = value;
        fast_adjacency_flag.value_namespace = name_space;
        fast_adjacency_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "illegal-fast-adjacency-flag")
    {
        illegal_fast_adjacency_flag = value;
        illegal_fast_adjacency_flag.value_namespace = name_space;
        illegal_fast_adjacency_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "remote-adjacency-flag")
    {
        remote_adjacency_flag = value;
        remote_adjacency_flag.value_namespace = name_space;
        remote_adjacency_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-attribute-id")
    {
        bgp_attribute_id = value;
        bgp_attribute_id.value_namespace = name_space;
        bgp_attribute_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-local-attribute-id")
    {
        bgp_local_attribute_id = value;
        bgp_local_attribute_id.value_namespace = name_space;
        bgp_local_attribute_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-attribute-origin-as")
    {
        bgp_attribute_origin_as = value;
        bgp_attribute_origin_as.value_namespace = name_space;
        bgp_attribute_origin_as.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bgp-attribute-next-hop-as")
    {
        bgp_attribute_next_hop_as = value;
        bgp_attribute_next_hop_as.value_namespace = name_space;
        bgp_attribute_next_hop_as.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-string")
    {
        path_string = value;
        path_string.value_namespace = name_space;
        path_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extcom-string")
    {
        extcom_string = value;
        extcom_string.value_namespace = name_space;
        extcom_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "com-string")
    {
        com_string = value;
        com_string.value_namespace = name_space;
        com_string.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "extended-community")
    {
        extended_community = value;
        extended_community.value_namespace = name_space;
        extended_community.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "qos-group")
    {
        qos_group = value;
        qos_group.value_namespace = name_space;
        qos_group.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mpls-fec")
    {
        mpls_fec = value;
        mpls_fec.value_namespace = name_space;
        mpls_fec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "qppb-qos-group-and-ip-precedence")
    {
        qppb_qos_group_and_ip_precedence = value;
        qppb_qos_group_and_ip_precedence.value_namespace = name_space;
        qppb_qos_group_and_ip_precedence.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "flow-tag")
    {
        flow_tag = value;
        flow_tag.value_namespace = name_space;
        flow_tag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "forward-class")
    {
        forward_class = value;
        forward_class.value_namespace = name_space;
        forward_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pl-time-of-last-update-in-msec")
    {
        pl_time_of_last_update_in_msec = value;
        pl_time_of_last_update_in_msec.value_namespace = name_space;
        pl_time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-time-of-last-update-in-msec")
    {
        ldi_time_of_last_update_in_msec = value;
        ldi_time_of_last_update_in_msec.value_namespace = name_space;
        ldi_time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lwldi-time-of-last-update-in-msec")
    {
        lwldi_time_of_last_update_in_msec = value;
        lwldi_time_of_last_update_in_msec.value_namespace = name_space;
        lwldi_time_of_last_update_in_msec.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pl-time-stamp-type")
    {
        pl_time_stamp_type = value;
        pl_time_stamp_type.value_namespace = name_space;
        pl_time_stamp_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "fib-entry-version")
    {
        fib_entry_version.yfilter = yfilter;
    }
    if(value_path == "per-prefix-accounting")
    {
        per_prefix_accounting.yfilter = yfilter;
    }
    if(value_path == "load-sharing-type")
    {
        load_sharing_type.yfilter = yfilter;
    }
    if(value_path == "fib-entry-adjacency-type")
    {
        fib_entry_adjacency_type.yfilter = yfilter;
    }
    if(value_path == "fib-protocol-type")
    {
        fib_protocol_type.yfilter = yfilter;
    }
    if(value_path == "afi-fib-protocol-type")
    {
        afi_fib_protocol_type.yfilter = yfilter;
    }
    if(value_path == "aib-l3-address")
    {
        aib_l3_address.yfilter = yfilter;
    }
    if(value_path == "adjacency-address-length")
    {
        adjacency_address_length.yfilter = yfilter;
    }
    if(value_path == "adjacency-interface")
    {
        adjacency_interface.yfilter = yfilter;
    }
    if(value_path == "fib-special-nh-information-type")
    {
        fib_special_nh_information_type.yfilter = yfilter;
    }
    if(value_path == "fib-entry-adjacency-address")
    {
        fib_entry_adjacency_address.yfilter = yfilter;
    }
    if(value_path == "fib-entry-adjacency-interface")
    {
        fib_entry_adjacency_interface.yfilter = yfilter;
    }
    if(value_path == "packets-through-fib-entry")
    {
        packets_through_fib_entry.yfilter = yfilter;
    }
    if(value_path == "bytes-through-fib-entry")
    {
        bytes_through_fib_entry.yfilter = yfilter;
    }
    if(value_path == "detailed-prefix-length")
    {
        detailed_prefix_length.yfilter = yfilter;
    }
    if(value_path == "prefix-protocol")
    {
        prefix_protocol.yfilter = yfilter;
    }
    if(value_path == "precedence-forpackets")
    {
        precedence_forpackets.yfilter = yfilter;
    }
    if(value_path == "traffic-index-for-packets")
    {
        traffic_index_for_packets.yfilter = yfilter;
    }
    if(value_path == "switch-compontent-id")
    {
        switch_compontent_id.yfilter = yfilter;
    }
    if(value_path == "fast-adjacency-flag")
    {
        fast_adjacency_flag.yfilter = yfilter;
    }
    if(value_path == "illegal-fast-adjacency-flag")
    {
        illegal_fast_adjacency_flag.yfilter = yfilter;
    }
    if(value_path == "remote-adjacency-flag")
    {
        remote_adjacency_flag.yfilter = yfilter;
    }
    if(value_path == "bgp-attribute-id")
    {
        bgp_attribute_id.yfilter = yfilter;
    }
    if(value_path == "bgp-local-attribute-id")
    {
        bgp_local_attribute_id.yfilter = yfilter;
    }
    if(value_path == "bgp-attribute-origin-as")
    {
        bgp_attribute_origin_as.yfilter = yfilter;
    }
    if(value_path == "bgp-attribute-next-hop-as")
    {
        bgp_attribute_next_hop_as.yfilter = yfilter;
    }
    if(value_path == "path-string")
    {
        path_string.yfilter = yfilter;
    }
    if(value_path == "extcom-string")
    {
        extcom_string.yfilter = yfilter;
    }
    if(value_path == "com-string")
    {
        com_string.yfilter = yfilter;
    }
    if(value_path == "extended-community")
    {
        extended_community.yfilter = yfilter;
    }
    if(value_path == "qos-group")
    {
        qos_group.yfilter = yfilter;
    }
    if(value_path == "mpls-fec")
    {
        mpls_fec.yfilter = yfilter;
    }
    if(value_path == "qppb-qos-group-and-ip-precedence")
    {
        qppb_qos_group_and_ip_precedence.yfilter = yfilter;
    }
    if(value_path == "flow-tag")
    {
        flow_tag.yfilter = yfilter;
    }
    if(value_path == "forward-class")
    {
        forward_class.yfilter = yfilter;
    }
    if(value_path == "pl-time-of-last-update-in-msec")
    {
        pl_time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "ldi-time-of-last-update-in-msec")
    {
        ldi_time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "lwldi-time-of-last-update-in-msec")
    {
        lwldi_time_of_last_update_in_msec.yfilter = yfilter;
    }
    if(value_path == "pl-time-stamp-type")
    {
        pl_time_stamp_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "loadshare-information" || name == "fib-entry-version" || name == "per-prefix-accounting" || name == "load-sharing-type" || name == "fib-entry-adjacency-type" || name == "fib-protocol-type" || name == "afi-fib-protocol-type" || name == "aib-l3-address" || name == "adjacency-address-length" || name == "adjacency-interface" || name == "fib-special-nh-information-type" || name == "fib-entry-adjacency-address" || name == "fib-entry-adjacency-interface" || name == "packets-through-fib-entry" || name == "bytes-through-fib-entry" || name == "detailed-prefix-length" || name == "prefix-protocol" || name == "precedence-forpackets" || name == "traffic-index-for-packets" || name == "switch-compontent-id" || name == "fast-adjacency-flag" || name == "illegal-fast-adjacency-flag" || name == "remote-adjacency-flag" || name == "bgp-attribute-id" || name == "bgp-local-attribute-id" || name == "bgp-attribute-origin-as" || name == "bgp-attribute-next-hop-as" || name == "path-string" || name == "extcom-string" || name == "com-string" || name == "extended-community" || name == "qos-group" || name == "mpls-fec" || name == "qppb-qos-group-and-ip-precedence" || name == "flow-tag" || name == "forward-class" || name == "pl-time-of-last-update-in-msec" || name == "ldi-time-of-last-update-in-msec" || name == "lwldi-time-of-last-update-in-msec" || name == "pl-time-stamp-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadshareInformation()
    :
    packets_through_load_information{YType::uint64, "packets-through-load-information"},
    bytes_through_load_information{YType::uint64, "bytes-through-load-information"},
    total_packets_through_load_information{YType::uint64, "total-packets-through-load-information"},
    total_bytes_through_load_information{YType::uint64, "total-bytes-through-load-information"},
    prefix_of_owner{YType::uint32, "prefix-of-owner"},
    mask_length_of_owner{YType::uint32, "mask-length-of-owner"},
    load_information_reference_count{YType::uint16, "load-information-reference-count"},
    per_dest_load_sharing_flag{YType::boolean, "per-dest-load-sharing-flag"},
    load_information_owner_deleted_flag{YType::boolean, "load-information-owner-deleted-flag"},
    loadinfo_sanity_flag{YType::boolean, "loadinfo-sanity-flag"},
    is_owner{YType::boolean, "is-owner"}
        ,
    load_informtion_internal_data(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData>())
{
    load_informtion_internal_data->parent = this;

    yang_name = "loadshare-information"; yang_parent_name = "detail-fib-entry-information"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::~LoadshareInformation()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::has_data() const
{
    if (is_presence_container) return true;
    return packets_through_load_information.is_set
	|| bytes_through_load_information.is_set
	|| total_packets_through_load_information.is_set
	|| total_bytes_through_load_information.is_set
	|| prefix_of_owner.is_set
	|| mask_length_of_owner.is_set
	|| load_information_reference_count.is_set
	|| per_dest_load_sharing_flag.is_set
	|| load_information_owner_deleted_flag.is_set
	|| loadinfo_sanity_flag.is_set
	|| is_owner.is_set
	|| (load_informtion_internal_data !=  nullptr && load_informtion_internal_data->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(packets_through_load_information.yfilter)
	|| ydk::is_set(bytes_through_load_information.yfilter)
	|| ydk::is_set(total_packets_through_load_information.yfilter)
	|| ydk::is_set(total_bytes_through_load_information.yfilter)
	|| ydk::is_set(prefix_of_owner.yfilter)
	|| ydk::is_set(mask_length_of_owner.yfilter)
	|| ydk::is_set(load_information_reference_count.yfilter)
	|| ydk::is_set(per_dest_load_sharing_flag.yfilter)
	|| ydk::is_set(load_information_owner_deleted_flag.yfilter)
	|| ydk::is_set(loadinfo_sanity_flag.yfilter)
	|| ydk::is_set(is_owner.yfilter)
	|| (load_informtion_internal_data !=  nullptr && load_informtion_internal_data->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "loadshare-information";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (packets_through_load_information.is_set || is_set(packets_through_load_information.yfilter)) leaf_name_data.push_back(packets_through_load_information.get_name_leafdata());
    if (bytes_through_load_information.is_set || is_set(bytes_through_load_information.yfilter)) leaf_name_data.push_back(bytes_through_load_information.get_name_leafdata());
    if (total_packets_through_load_information.is_set || is_set(total_packets_through_load_information.yfilter)) leaf_name_data.push_back(total_packets_through_load_information.get_name_leafdata());
    if (total_bytes_through_load_information.is_set || is_set(total_bytes_through_load_information.yfilter)) leaf_name_data.push_back(total_bytes_through_load_information.get_name_leafdata());
    if (prefix_of_owner.is_set || is_set(prefix_of_owner.yfilter)) leaf_name_data.push_back(prefix_of_owner.get_name_leafdata());
    if (mask_length_of_owner.is_set || is_set(mask_length_of_owner.yfilter)) leaf_name_data.push_back(mask_length_of_owner.get_name_leafdata());
    if (load_information_reference_count.is_set || is_set(load_information_reference_count.yfilter)) leaf_name_data.push_back(load_information_reference_count.get_name_leafdata());
    if (per_dest_load_sharing_flag.is_set || is_set(per_dest_load_sharing_flag.yfilter)) leaf_name_data.push_back(per_dest_load_sharing_flag.get_name_leafdata());
    if (load_information_owner_deleted_flag.is_set || is_set(load_information_owner_deleted_flag.yfilter)) leaf_name_data.push_back(load_information_owner_deleted_flag.get_name_leafdata());
    if (loadinfo_sanity_flag.is_set || is_set(loadinfo_sanity_flag.yfilter)) leaf_name_data.push_back(loadinfo_sanity_flag.get_name_leafdata());
    if (is_owner.is_set || is_set(is_owner.yfilter)) leaf_name_data.push_back(is_owner.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "load-informtion-internal-data")
    {
        if(load_informtion_internal_data == nullptr)
        {
            load_informtion_internal_data = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData>();
        }
        return load_informtion_internal_data;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(load_informtion_internal_data != nullptr)
    {
        _children["load-informtion-internal-data"] = load_informtion_internal_data;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "packets-through-load-information")
    {
        packets_through_load_information = value;
        packets_through_load_information.value_namespace = name_space;
        packets_through_load_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "bytes-through-load-information")
    {
        bytes_through_load_information = value;
        bytes_through_load_information.value_namespace = name_space;
        bytes_through_load_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-packets-through-load-information")
    {
        total_packets_through_load_information = value;
        total_packets_through_load_information.value_namespace = name_space;
        total_packets_through_load_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "total-bytes-through-load-information")
    {
        total_bytes_through_load_information = value;
        total_bytes_through_load_information.value_namespace = name_space;
        total_bytes_through_load_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "prefix-of-owner")
    {
        prefix_of_owner = value;
        prefix_of_owner.value_namespace = name_space;
        prefix_of_owner.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "mask-length-of-owner")
    {
        mask_length_of_owner = value;
        mask_length_of_owner.value_namespace = name_space;
        mask_length_of_owner.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-information-reference-count")
    {
        load_information_reference_count = value;
        load_information_reference_count.value_namespace = name_space;
        load_information_reference_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "per-dest-load-sharing-flag")
    {
        per_dest_load_sharing_flag = value;
        per_dest_load_sharing_flag.value_namespace = name_space;
        per_dest_load_sharing_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "load-information-owner-deleted-flag")
    {
        load_information_owner_deleted_flag = value;
        load_information_owner_deleted_flag.value_namespace = name_space;
        load_information_owner_deleted_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "loadinfo-sanity-flag")
    {
        loadinfo_sanity_flag = value;
        loadinfo_sanity_flag.value_namespace = name_space;
        loadinfo_sanity_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "is-owner")
    {
        is_owner = value;
        is_owner.value_namespace = name_space;
        is_owner.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "packets-through-load-information")
    {
        packets_through_load_information.yfilter = yfilter;
    }
    if(value_path == "bytes-through-load-information")
    {
        bytes_through_load_information.yfilter = yfilter;
    }
    if(value_path == "total-packets-through-load-information")
    {
        total_packets_through_load_information.yfilter = yfilter;
    }
    if(value_path == "total-bytes-through-load-information")
    {
        total_bytes_through_load_information.yfilter = yfilter;
    }
    if(value_path == "prefix-of-owner")
    {
        prefix_of_owner.yfilter = yfilter;
    }
    if(value_path == "mask-length-of-owner")
    {
        mask_length_of_owner.yfilter = yfilter;
    }
    if(value_path == "load-information-reference-count")
    {
        load_information_reference_count.yfilter = yfilter;
    }
    if(value_path == "per-dest-load-sharing-flag")
    {
        per_dest_load_sharing_flag.yfilter = yfilter;
    }
    if(value_path == "load-information-owner-deleted-flag")
    {
        load_information_owner_deleted_flag.yfilter = yfilter;
    }
    if(value_path == "loadinfo-sanity-flag")
    {
        loadinfo_sanity_flag.yfilter = yfilter;
    }
    if(value_path == "is-owner")
    {
        is_owner.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "load-informtion-internal-data" || name == "packets-through-load-information" || name == "bytes-through-load-information" || name == "total-packets-through-load-information" || name == "total-bytes-through-load-information" || name == "prefix-of-owner" || name == "mask-length-of-owner" || name == "load-information-reference-count" || name == "per-dest-load-sharing-flag" || name == "load-information-owner-deleted-flag" || name == "loadinfo-sanity-flag" || name == "is-owner")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::LoadInformtionInternalData()
    :
    level_ofldis{YType::uint8, "level-ofldis"},
    number_of_ldis{YType::uint8, "number-of-ldis"},
    maximum_index_arrays{YType::uint32, "maximum-index-arrays"},
    path_indices{YType::str, "path-indices"},
    path_ldi_numbers{YType::str, "path-ldi-numbers"},
    maximum_slots{YType::uint32, "maximum-slots"},
    normalized_weights{YType::str, "normalized-weights"},
    tunnel_class_value{YType::str, "tunnel-class-value"},
    is_pbts_info_valid{YType::boolean, "is-pbts-info-valid"},
    pbts_class_offset{YType::str, "pbts-class-offset"},
    pbts_class_num_paths{YType::str, "pbts-class-num-paths"},
    pbts_fallback_mapped_class{YType::str, "pbts-fallback-mapped-class"},
    round_robin_disable{YType::boolean, "round-robin-disable"},
    ldi_next_hop_buckets{YType::uint8, "ldi-next-hop-buckets"},
    platform_hardware_information{YType::str, "platform-hardware-information"}
        ,
    sanity_flag(this, {})
    , interface_handle(this, {})
    , weights_of_path(this, {})
    , adjacency_address(this, {})
    , pbts_class_is_fallback_mapped(this, {})
    , pbts_fallback_to_drop(this, {})
    , tunnel_is_forward_class(this, {})
{

    yang_name = "load-informtion-internal-data"; yang_parent_name = "loadshare-information"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::~LoadInformtionInternalData()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<sanity_flag.len(); index++)
    {
        if(sanity_flag[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<interface_handle.len(); index++)
    {
        if(interface_handle[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<weights_of_path.len(); index++)
    {
        if(weights_of_path[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<adjacency_address.len(); index++)
    {
        if(adjacency_address[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<pbts_class_is_fallback_mapped.len(); index++)
    {
        if(pbts_class_is_fallback_mapped[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<pbts_fallback_to_drop.len(); index++)
    {
        if(pbts_fallback_to_drop[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<tunnel_is_forward_class.len(); index++)
    {
        if(tunnel_is_forward_class[index]->has_data())
            return true;
    }
    return level_ofldis.is_set
	|| number_of_ldis.is_set
	|| maximum_index_arrays.is_set
	|| path_indices.is_set
	|| path_ldi_numbers.is_set
	|| maximum_slots.is_set
	|| normalized_weights.is_set
	|| tunnel_class_value.is_set
	|| is_pbts_info_valid.is_set
	|| pbts_class_offset.is_set
	|| pbts_class_num_paths.is_set
	|| pbts_fallback_mapped_class.is_set
	|| round_robin_disable.is_set
	|| ldi_next_hop_buckets.is_set
	|| platform_hardware_information.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::has_operation() const
{
    for (std::size_t index=0; index<sanity_flag.len(); index++)
    {
        if(sanity_flag[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<interface_handle.len(); index++)
    {
        if(interface_handle[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<weights_of_path.len(); index++)
    {
        if(weights_of_path[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<adjacency_address.len(); index++)
    {
        if(adjacency_address[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<pbts_class_is_fallback_mapped.len(); index++)
    {
        if(pbts_class_is_fallback_mapped[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<pbts_fallback_to_drop.len(); index++)
    {
        if(pbts_fallback_to_drop[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<tunnel_is_forward_class.len(); index++)
    {
        if(tunnel_is_forward_class[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(level_ofldis.yfilter)
	|| ydk::is_set(number_of_ldis.yfilter)
	|| ydk::is_set(maximum_index_arrays.yfilter)
	|| ydk::is_set(path_indices.yfilter)
	|| ydk::is_set(path_ldi_numbers.yfilter)
	|| ydk::is_set(maximum_slots.yfilter)
	|| ydk::is_set(normalized_weights.yfilter)
	|| ydk::is_set(tunnel_class_value.yfilter)
	|| ydk::is_set(is_pbts_info_valid.yfilter)
	|| ydk::is_set(pbts_class_offset.yfilter)
	|| ydk::is_set(pbts_class_num_paths.yfilter)
	|| ydk::is_set(pbts_fallback_mapped_class.yfilter)
	|| ydk::is_set(round_robin_disable.yfilter)
	|| ydk::is_set(ldi_next_hop_buckets.yfilter)
	|| ydk::is_set(platform_hardware_information.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "load-informtion-internal-data";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (level_ofldis.is_set || is_set(level_ofldis.yfilter)) leaf_name_data.push_back(level_ofldis.get_name_leafdata());
    if (number_of_ldis.is_set || is_set(number_of_ldis.yfilter)) leaf_name_data.push_back(number_of_ldis.get_name_leafdata());
    if (maximum_index_arrays.is_set || is_set(maximum_index_arrays.yfilter)) leaf_name_data.push_back(maximum_index_arrays.get_name_leafdata());
    if (path_indices.is_set || is_set(path_indices.yfilter)) leaf_name_data.push_back(path_indices.get_name_leafdata());
    if (path_ldi_numbers.is_set || is_set(path_ldi_numbers.yfilter)) leaf_name_data.push_back(path_ldi_numbers.get_name_leafdata());
    if (maximum_slots.is_set || is_set(maximum_slots.yfilter)) leaf_name_data.push_back(maximum_slots.get_name_leafdata());
    if (normalized_weights.is_set || is_set(normalized_weights.yfilter)) leaf_name_data.push_back(normalized_weights.get_name_leafdata());
    if (tunnel_class_value.is_set || is_set(tunnel_class_value.yfilter)) leaf_name_data.push_back(tunnel_class_value.get_name_leafdata());
    if (is_pbts_info_valid.is_set || is_set(is_pbts_info_valid.yfilter)) leaf_name_data.push_back(is_pbts_info_valid.get_name_leafdata());
    if (pbts_class_offset.is_set || is_set(pbts_class_offset.yfilter)) leaf_name_data.push_back(pbts_class_offset.get_name_leafdata());
    if (pbts_class_num_paths.is_set || is_set(pbts_class_num_paths.yfilter)) leaf_name_data.push_back(pbts_class_num_paths.get_name_leafdata());
    if (pbts_fallback_mapped_class.is_set || is_set(pbts_fallback_mapped_class.yfilter)) leaf_name_data.push_back(pbts_fallback_mapped_class.get_name_leafdata());
    if (round_robin_disable.is_set || is_set(round_robin_disable.yfilter)) leaf_name_data.push_back(round_robin_disable.get_name_leafdata());
    if (ldi_next_hop_buckets.is_set || is_set(ldi_next_hop_buckets.yfilter)) leaf_name_data.push_back(ldi_next_hop_buckets.get_name_leafdata());
    if (platform_hardware_information.is_set || is_set(platform_hardware_information.yfilter)) leaf_name_data.push_back(platform_hardware_information.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "sanity-flag")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag>();
        ent_->parent = this;
        sanity_flag.append(ent_);
        return ent_;
    }

    if(child_yang_name == "interface-handle")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle>();
        ent_->parent = this;
        interface_handle.append(ent_);
        return ent_;
    }

    if(child_yang_name == "weights-of-path")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath>();
        ent_->parent = this;
        weights_of_path.append(ent_);
        return ent_;
    }

    if(child_yang_name == "adjacency-address")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress>();
        ent_->parent = this;
        adjacency_address.append(ent_);
        return ent_;
    }

    if(child_yang_name == "pbts-class-is-fallback-mapped")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped>();
        ent_->parent = this;
        pbts_class_is_fallback_mapped.append(ent_);
        return ent_;
    }

    if(child_yang_name == "pbts-fallback-to-drop")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop>();
        ent_->parent = this;
        pbts_fallback_to_drop.append(ent_);
        return ent_;
    }

    if(child_yang_name == "tunnel-is-forward-class")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass>();
        ent_->parent = this;
        tunnel_is_forward_class.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : sanity_flag.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : interface_handle.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : weights_of_path.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : adjacency_address.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : pbts_class_is_fallback_mapped.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : pbts_fallback_to_drop.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : tunnel_is_forward_class.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "level-ofldis")
    {
        level_ofldis = value;
        level_ofldis.value_namespace = name_space;
        level_ofldis.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-ldis")
    {
        number_of_ldis = value;
        number_of_ldis.value_namespace = name_space;
        number_of_ldis.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maximum-index-arrays")
    {
        maximum_index_arrays = value;
        maximum_index_arrays.value_namespace = name_space;
        maximum_index_arrays.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-indices")
    {
        path_indices = value;
        path_indices.value_namespace = name_space;
        path_indices.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-ldi-numbers")
    {
        path_ldi_numbers = value;
        path_ldi_numbers.value_namespace = name_space;
        path_ldi_numbers.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "maximum-slots")
    {
        maximum_slots = value;
        maximum_slots.value_namespace = name_space;
        maximum_slots.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "normalized-weights")
    {
        normalized_weights = value;
        normalized_weights.value_namespace = name_space;
        normalized_weights.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-class-value")
    {
        tunnel_class_value = value;
        tunnel_class_value.value_namespace = name_space;
        tunnel_class_value.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "is-pbts-info-valid")
    {
        is_pbts_info_valid = value;
        is_pbts_info_valid.value_namespace = name_space;
        is_pbts_info_valid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pbts-class-offset")
    {
        pbts_class_offset = value;
        pbts_class_offset.value_namespace = name_space;
        pbts_class_offset.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pbts-class-num-paths")
    {
        pbts_class_num_paths = value;
        pbts_class_num_paths.value_namespace = name_space;
        pbts_class_num_paths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "pbts-fallback-mapped-class")
    {
        pbts_fallback_mapped_class = value;
        pbts_fallback_mapped_class.value_namespace = name_space;
        pbts_fallback_mapped_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "round-robin-disable")
    {
        round_robin_disable = value;
        round_robin_disable.value_namespace = name_space;
        round_robin_disable.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ldi-next-hop-buckets")
    {
        ldi_next_hop_buckets = value;
        ldi_next_hop_buckets.value_namespace = name_space;
        ldi_next_hop_buckets.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "platform-hardware-information")
    {
        platform_hardware_information = value;
        platform_hardware_information.value_namespace = name_space;
        platform_hardware_information.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "level-ofldis")
    {
        level_ofldis.yfilter = yfilter;
    }
    if(value_path == "number-of-ldis")
    {
        number_of_ldis.yfilter = yfilter;
    }
    if(value_path == "maximum-index-arrays")
    {
        maximum_index_arrays.yfilter = yfilter;
    }
    if(value_path == "path-indices")
    {
        path_indices.yfilter = yfilter;
    }
    if(value_path == "path-ldi-numbers")
    {
        path_ldi_numbers.yfilter = yfilter;
    }
    if(value_path == "maximum-slots")
    {
        maximum_slots.yfilter = yfilter;
    }
    if(value_path == "normalized-weights")
    {
        normalized_weights.yfilter = yfilter;
    }
    if(value_path == "tunnel-class-value")
    {
        tunnel_class_value.yfilter = yfilter;
    }
    if(value_path == "is-pbts-info-valid")
    {
        is_pbts_info_valid.yfilter = yfilter;
    }
    if(value_path == "pbts-class-offset")
    {
        pbts_class_offset.yfilter = yfilter;
    }
    if(value_path == "pbts-class-num-paths")
    {
        pbts_class_num_paths.yfilter = yfilter;
    }
    if(value_path == "pbts-fallback-mapped-class")
    {
        pbts_fallback_mapped_class.yfilter = yfilter;
    }
    if(value_path == "round-robin-disable")
    {
        round_robin_disable.yfilter = yfilter;
    }
    if(value_path == "ldi-next-hop-buckets")
    {
        ldi_next_hop_buckets.yfilter = yfilter;
    }
    if(value_path == "platform-hardware-information")
    {
        platform_hardware_information.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "sanity-flag" || name == "interface-handle" || name == "weights-of-path" || name == "adjacency-address" || name == "pbts-class-is-fallback-mapped" || name == "pbts-fallback-to-drop" || name == "tunnel-is-forward-class" || name == "level-ofldis" || name == "number-of-ldis" || name == "maximum-index-arrays" || name == "path-indices" || name == "path-ldi-numbers" || name == "maximum-slots" || name == "normalized-weights" || name == "tunnel-class-value" || name == "is-pbts-info-valid" || name == "pbts-class-offset" || name == "pbts-class-num-paths" || name == "pbts-fallback-mapped-class" || name == "round-robin-disable" || name == "ldi-next-hop-buckets" || name == "platform-hardware-information")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::SanityFlag()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "sanity-flag"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::~SanityFlag()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sanity-flag";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::SanityFlag::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::InterfaceHandle()
    :
    entry{YType::str, "entry"}
{

    yang_name = "interface-handle"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::~InterfaceHandle()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-handle";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::InterfaceHandle::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::WeightsOfPath()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "weights-of-path"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::~WeightsOfPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "weights-of-path";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::WeightsOfPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::AdjacencyAddress()
    :
    address{YType::str, "address"}
{

    yang_name = "adjacency-address"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::~AdjacencyAddress()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::has_data() const
{
    if (is_presence_container) return true;
    return address.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(address.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "adjacency-address";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (address.is_set || is_set(address.yfilter)) leaf_name_data.push_back(address.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "address")
    {
        address = value;
        address.value_namespace = name_space;
        address.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "address")
    {
        address.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::AdjacencyAddress::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "address")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::PbtsClassIsFallbackMapped()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "pbts-class-is-fallback-mapped"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::~PbtsClassIsFallbackMapped()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pbts-class-is-fallback-mapped";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsClassIsFallbackMapped::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::PbtsFallbackToDrop()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "pbts-fallback-to-drop"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::~PbtsFallbackToDrop()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pbts-fallback-to-drop";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::PbtsFallbackToDrop::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::TunnelIsForwardClass()
    :
    entry{YType::boolean, "entry"}
{

    yang_name = "tunnel-is-forward-class"; yang_parent_name = "load-informtion-internal-data"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::~TunnelIsForwardClass()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tunnel-is-forward-class";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::DetailFibEntryInformation::LoadshareInformation::LoadInformtionInternalData::TunnelIsForwardClass::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibEntryPath()
    :
    fib_sh_tbl_path(this, {})
{

    yang_name = "fib-entry-path"; yang_parent_name = "ip-prefix-detail"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::~FibEntryPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<fib_sh_tbl_path.len(); index++)
    {
        if(fib_sh_tbl_path[index]->has_data())
            return true;
    }
    return false;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::has_operation() const
{
    for (std::size_t index=0; index<fib_sh_tbl_path.len(); index++)
    {
        if(fib_sh_tbl_path[index]->has_operation())
            return true;
    }
    return is_set(yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-entry-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "fib-sh-tbl-path")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath>();
        ent_->parent = this;
        fib_sh_tbl_path.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : fib_sh_tbl_path.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::set_filter(const std::string & value_path, YFilter yfilter)
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "fib-sh-tbl-path")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::FibShTblPath()
    :
    hardware_information{YType::str, "hardware-information"},
    brief_interface_handle{YType::str, "brief-interface-handle"},
    brief_next_hop_prefix{YType::str, "brief-next-hop-prefix"},
    via_label_to_recurse{YType::uint32, "via-label-to-recurse"},
    brief_pnode_address{YType::str, "brief-pnode-address"},
    brief_qnode_address{YType::str, "brief-qnode-address"},
    brief_lfa_protection_type{YType::enumeration, "brief-lfa-protection-type"},
    resolved_path{YType::boolean, "resolved-path"},
    recursive_path{YType::boolean, "recursive-path"},
    packets_received_path{YType::boolean, "packets-received-path"},
    attached_path{YType::boolean, "attached-path"},
    backup_path{YType::boolean, "backup-path"},
    best_external_path{YType::boolean, "best-external-path"},
    protect_ignore{YType::boolean, "protect-ignore"},
    path_dlb{YType::boolean, "path-dlb"},
    path_flags{YType::uint32, "path-flags"},
    path_info_flags{YType::uint16, "path-info-flags"},
    path_index{YType::uint8, "path-index"},
    backup_index{YType::uint8, "backup-index"},
    next_hop_index{YType::uint32, "next-hop-index"},
    parent_interface_handle{YType::str, "parent-interface-handle"},
    recursionvia_len{YType::uint8, "recursionvia-len"}
        ,
    more_detail_about_path(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath>())
    , mpls_information_for_path(std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath>())
{
    more_detail_about_path->parent = this;
    mpls_information_for_path->parent = this;

    yang_name = "fib-sh-tbl-path"; yang_parent_name = "fib-entry-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::~FibShTblPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::has_data() const
{
    if (is_presence_container) return true;
    return hardware_information.is_set
	|| brief_interface_handle.is_set
	|| brief_next_hop_prefix.is_set
	|| via_label_to_recurse.is_set
	|| brief_pnode_address.is_set
	|| brief_qnode_address.is_set
	|| brief_lfa_protection_type.is_set
	|| resolved_path.is_set
	|| recursive_path.is_set
	|| packets_received_path.is_set
	|| attached_path.is_set
	|| backup_path.is_set
	|| best_external_path.is_set
	|| protect_ignore.is_set
	|| path_dlb.is_set
	|| path_flags.is_set
	|| path_info_flags.is_set
	|| path_index.is_set
	|| backup_index.is_set
	|| next_hop_index.is_set
	|| parent_interface_handle.is_set
	|| recursionvia_len.is_set
	|| (more_detail_about_path !=  nullptr && more_detail_about_path->has_data())
	|| (mpls_information_for_path !=  nullptr && mpls_information_for_path->has_data());
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(hardware_information.yfilter)
	|| ydk::is_set(brief_interface_handle.yfilter)
	|| ydk::is_set(brief_next_hop_prefix.yfilter)
	|| ydk::is_set(via_label_to_recurse.yfilter)
	|| ydk::is_set(brief_pnode_address.yfilter)
	|| ydk::is_set(brief_qnode_address.yfilter)
	|| ydk::is_set(brief_lfa_protection_type.yfilter)
	|| ydk::is_set(resolved_path.yfilter)
	|| ydk::is_set(recursive_path.yfilter)
	|| ydk::is_set(packets_received_path.yfilter)
	|| ydk::is_set(attached_path.yfilter)
	|| ydk::is_set(backup_path.yfilter)
	|| ydk::is_set(best_external_path.yfilter)
	|| ydk::is_set(protect_ignore.yfilter)
	|| ydk::is_set(path_dlb.yfilter)
	|| ydk::is_set(path_flags.yfilter)
	|| ydk::is_set(path_info_flags.yfilter)
	|| ydk::is_set(path_index.yfilter)
	|| ydk::is_set(backup_index.yfilter)
	|| ydk::is_set(next_hop_index.yfilter)
	|| ydk::is_set(parent_interface_handle.yfilter)
	|| ydk::is_set(recursionvia_len.yfilter)
	|| (more_detail_about_path !=  nullptr && more_detail_about_path->has_operation())
	|| (mpls_information_for_path !=  nullptr && mpls_information_for_path->has_operation());
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "fib-sh-tbl-path";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (hardware_information.is_set || is_set(hardware_information.yfilter)) leaf_name_data.push_back(hardware_information.get_name_leafdata());
    if (brief_interface_handle.is_set || is_set(brief_interface_handle.yfilter)) leaf_name_data.push_back(brief_interface_handle.get_name_leafdata());
    if (brief_next_hop_prefix.is_set || is_set(brief_next_hop_prefix.yfilter)) leaf_name_data.push_back(brief_next_hop_prefix.get_name_leafdata());
    if (via_label_to_recurse.is_set || is_set(via_label_to_recurse.yfilter)) leaf_name_data.push_back(via_label_to_recurse.get_name_leafdata());
    if (brief_pnode_address.is_set || is_set(brief_pnode_address.yfilter)) leaf_name_data.push_back(brief_pnode_address.get_name_leafdata());
    if (brief_qnode_address.is_set || is_set(brief_qnode_address.yfilter)) leaf_name_data.push_back(brief_qnode_address.get_name_leafdata());
    if (brief_lfa_protection_type.is_set || is_set(brief_lfa_protection_type.yfilter)) leaf_name_data.push_back(brief_lfa_protection_type.get_name_leafdata());
    if (resolved_path.is_set || is_set(resolved_path.yfilter)) leaf_name_data.push_back(resolved_path.get_name_leafdata());
    if (recursive_path.is_set || is_set(recursive_path.yfilter)) leaf_name_data.push_back(recursive_path.get_name_leafdata());
    if (packets_received_path.is_set || is_set(packets_received_path.yfilter)) leaf_name_data.push_back(packets_received_path.get_name_leafdata());
    if (attached_path.is_set || is_set(attached_path.yfilter)) leaf_name_data.push_back(attached_path.get_name_leafdata());
    if (backup_path.is_set || is_set(backup_path.yfilter)) leaf_name_data.push_back(backup_path.get_name_leafdata());
    if (best_external_path.is_set || is_set(best_external_path.yfilter)) leaf_name_data.push_back(best_external_path.get_name_leafdata());
    if (protect_ignore.is_set || is_set(protect_ignore.yfilter)) leaf_name_data.push_back(protect_ignore.get_name_leafdata());
    if (path_dlb.is_set || is_set(path_dlb.yfilter)) leaf_name_data.push_back(path_dlb.get_name_leafdata());
    if (path_flags.is_set || is_set(path_flags.yfilter)) leaf_name_data.push_back(path_flags.get_name_leafdata());
    if (path_info_flags.is_set || is_set(path_info_flags.yfilter)) leaf_name_data.push_back(path_info_flags.get_name_leafdata());
    if (path_index.is_set || is_set(path_index.yfilter)) leaf_name_data.push_back(path_index.get_name_leafdata());
    if (backup_index.is_set || is_set(backup_index.yfilter)) leaf_name_data.push_back(backup_index.get_name_leafdata());
    if (next_hop_index.is_set || is_set(next_hop_index.yfilter)) leaf_name_data.push_back(next_hop_index.get_name_leafdata());
    if (parent_interface_handle.is_set || is_set(parent_interface_handle.yfilter)) leaf_name_data.push_back(parent_interface_handle.get_name_leafdata());
    if (recursionvia_len.is_set || is_set(recursionvia_len.yfilter)) leaf_name_data.push_back(recursionvia_len.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "more-detail-about-path")
    {
        if(more_detail_about_path == nullptr)
        {
            more_detail_about_path = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath>();
        }
        return more_detail_about_path;
    }

    if(child_yang_name == "mpls-information-for-path")
    {
        if(mpls_information_for_path == nullptr)
        {
            mpls_information_for_path = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath>();
        }
        return mpls_information_for_path;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    if(more_detail_about_path != nullptr)
    {
        _children["more-detail-about-path"] = more_detail_about_path;
    }

    if(mpls_information_for_path != nullptr)
    {
        _children["mpls-information-for-path"] = mpls_information_for_path;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "hardware-information")
    {
        hardware_information = value;
        hardware_information.value_namespace = name_space;
        hardware_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-interface-handle")
    {
        brief_interface_handle = value;
        brief_interface_handle.value_namespace = name_space;
        brief_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-next-hop-prefix")
    {
        brief_next_hop_prefix = value;
        brief_next_hop_prefix.value_namespace = name_space;
        brief_next_hop_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "via-label-to-recurse")
    {
        via_label_to_recurse = value;
        via_label_to_recurse.value_namespace = name_space;
        via_label_to_recurse.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-pnode-address")
    {
        brief_pnode_address = value;
        brief_pnode_address.value_namespace = name_space;
        brief_pnode_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-qnode-address")
    {
        brief_qnode_address = value;
        brief_qnode_address.value_namespace = name_space;
        brief_qnode_address.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "brief-lfa-protection-type")
    {
        brief_lfa_protection_type = value;
        brief_lfa_protection_type.value_namespace = name_space;
        brief_lfa_protection_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "resolved-path")
    {
        resolved_path = value;
        resolved_path.value_namespace = name_space;
        resolved_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path")
    {
        recursive_path = value;
        recursive_path.value_namespace = name_space;
        recursive_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "packets-received-path")
    {
        packets_received_path = value;
        packets_received_path.value_namespace = name_space;
        packets_received_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "attached-path")
    {
        attached_path = value;
        attached_path.value_namespace = name_space;
        attached_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "backup-path")
    {
        backup_path = value;
        backup_path.value_namespace = name_space;
        backup_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "best-external-path")
    {
        best_external_path = value;
        best_external_path.value_namespace = name_space;
        best_external_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "protect-ignore")
    {
        protect_ignore = value;
        protect_ignore.value_namespace = name_space;
        protect_ignore.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-dlb")
    {
        path_dlb = value;
        path_dlb.value_namespace = name_space;
        path_dlb.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-flags")
    {
        path_flags = value;
        path_flags.value_namespace = name_space;
        path_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-info-flags")
    {
        path_info_flags = value;
        path_info_flags.value_namespace = name_space;
        path_info_flags.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "path-index")
    {
        path_index = value;
        path_index.value_namespace = name_space;
        path_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "backup-index")
    {
        backup_index = value;
        backup_index.value_namespace = name_space;
        backup_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-index")
    {
        next_hop_index = value;
        next_hop_index.value_namespace = name_space;
        next_hop_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "parent-interface-handle")
    {
        parent_interface_handle = value;
        parent_interface_handle.value_namespace = name_space;
        parent_interface_handle.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursionvia-len")
    {
        recursionvia_len = value;
        recursionvia_len.value_namespace = name_space;
        recursionvia_len.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "hardware-information")
    {
        hardware_information.yfilter = yfilter;
    }
    if(value_path == "brief-interface-handle")
    {
        brief_interface_handle.yfilter = yfilter;
    }
    if(value_path == "brief-next-hop-prefix")
    {
        brief_next_hop_prefix.yfilter = yfilter;
    }
    if(value_path == "via-label-to-recurse")
    {
        via_label_to_recurse.yfilter = yfilter;
    }
    if(value_path == "brief-pnode-address")
    {
        brief_pnode_address.yfilter = yfilter;
    }
    if(value_path == "brief-qnode-address")
    {
        brief_qnode_address.yfilter = yfilter;
    }
    if(value_path == "brief-lfa-protection-type")
    {
        brief_lfa_protection_type.yfilter = yfilter;
    }
    if(value_path == "resolved-path")
    {
        resolved_path.yfilter = yfilter;
    }
    if(value_path == "recursive-path")
    {
        recursive_path.yfilter = yfilter;
    }
    if(value_path == "packets-received-path")
    {
        packets_received_path.yfilter = yfilter;
    }
    if(value_path == "attached-path")
    {
        attached_path.yfilter = yfilter;
    }
    if(value_path == "backup-path")
    {
        backup_path.yfilter = yfilter;
    }
    if(value_path == "best-external-path")
    {
        best_external_path.yfilter = yfilter;
    }
    if(value_path == "protect-ignore")
    {
        protect_ignore.yfilter = yfilter;
    }
    if(value_path == "path-dlb")
    {
        path_dlb.yfilter = yfilter;
    }
    if(value_path == "path-flags")
    {
        path_flags.yfilter = yfilter;
    }
    if(value_path == "path-info-flags")
    {
        path_info_flags.yfilter = yfilter;
    }
    if(value_path == "path-index")
    {
        path_index.yfilter = yfilter;
    }
    if(value_path == "backup-index")
    {
        backup_index.yfilter = yfilter;
    }
    if(value_path == "next-hop-index")
    {
        next_hop_index.yfilter = yfilter;
    }
    if(value_path == "parent-interface-handle")
    {
        parent_interface_handle.yfilter = yfilter;
    }
    if(value_path == "recursionvia-len")
    {
        recursionvia_len.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "more-detail-about-path" || name == "mpls-information-for-path" || name == "hardware-information" || name == "brief-interface-handle" || name == "brief-next-hop-prefix" || name == "via-label-to-recurse" || name == "brief-pnode-address" || name == "brief-qnode-address" || name == "brief-lfa-protection-type" || name == "resolved-path" || name == "recursive-path" || name == "packets-received-path" || name == "attached-path" || name == "backup-path" || name == "best-external-path" || name == "protect-ignore" || name == "path-dlb" || name == "path-flags" || name == "path-info-flags" || name == "path-index" || name == "backup-index" || name == "next-hop-index" || name == "parent-interface-handle" || name == "recursionvia-len")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::MoreDetailAboutPath()
    :
    ip_address_to_recurse{YType::str, "ip-address-to-recurse"},
    label_to_recurse{YType::uint32, "label-to-recurse"},
    detail_next_hop_prefix{YType::str, "detail-next-hop-prefix"},
    next_hop_mask_length{YType::uint8, "next-hop-mask-length"},
    interface_associated_path{YType::str, "interface-associated-path"},
    next_hop_interface{YType::str, "next-hop-interface"},
    next_hop_vrf{YType::str, "next-hop-vrf"},
    tunnle_endpoint_id{YType::uint32, "tunnle-endpoint-id"},
    lisprlocid{YType::uint32, "lisprlocid"},
    number_of_dependencies_this_path{YType::uint32, "number-of-dependencies-this-path"},
    robin_reset_value{YType::uint8, "robin-reset-value"},
    recurse_prefix_object{YType::boolean, "recurse-prefix-object"},
    next_prefix_recursion{YType::str, "next-prefix-recursion"},
    next_prefix_length{YType::uint8, "next-prefix-length"},
    recurse_prefix_object2{YType::boolean, "recurse-prefix-object2"},
    next_prefix_recursion2{YType::str, "next-prefix-recursion2"},
    next_prefix_length2{YType::uint8, "next-prefix-length2"},
    detail_fib_adjacency_type{YType::enumeration, "detail-fib-adjacency-type"},
    current_path_flag{YType::boolean, "current-path-flag"},
    recursive_path_information{YType::boolean, "recursive-path-information"},
    external_adjacency{YType::boolean, "external-adjacency"},
    fib_path_nh_information_type{YType::enumeration, "fib-path-nh-information-type"},
    fib_path_nh_information_type_special{YType::enumeration, "fib-path-nh-information-type-special"},
    weight_of_path{YType::uint32, "weight-of-path"},
    tunnel_class{YType::uint8, "tunnel-class"},
    tunnel_is_forward_class{YType::boolean, "tunnel-is-forward-class"}
        ,
    spd_ipencap(this, {})
    , next_next_hop(this, {})
{

    yang_name = "more-detail-about-path"; yang_parent_name = "fib-sh-tbl-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::~MoreDetailAboutPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<spd_ipencap.len(); index++)
    {
        if(spd_ipencap[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<next_next_hop.len(); index++)
    {
        if(next_next_hop[index]->has_data())
            return true;
    }
    return ip_address_to_recurse.is_set
	|| label_to_recurse.is_set
	|| detail_next_hop_prefix.is_set
	|| next_hop_mask_length.is_set
	|| interface_associated_path.is_set
	|| next_hop_interface.is_set
	|| next_hop_vrf.is_set
	|| tunnle_endpoint_id.is_set
	|| lisprlocid.is_set
	|| number_of_dependencies_this_path.is_set
	|| robin_reset_value.is_set
	|| recurse_prefix_object.is_set
	|| next_prefix_recursion.is_set
	|| next_prefix_length.is_set
	|| recurse_prefix_object2.is_set
	|| next_prefix_recursion2.is_set
	|| next_prefix_length2.is_set
	|| detail_fib_adjacency_type.is_set
	|| current_path_flag.is_set
	|| recursive_path_information.is_set
	|| external_adjacency.is_set
	|| fib_path_nh_information_type.is_set
	|| fib_path_nh_information_type_special.is_set
	|| weight_of_path.is_set
	|| tunnel_class.is_set
	|| tunnel_is_forward_class.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_operation() const
{
    for (std::size_t index=0; index<spd_ipencap.len(); index++)
    {
        if(spd_ipencap[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<next_next_hop.len(); index++)
    {
        if(next_next_hop[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(ip_address_to_recurse.yfilter)
	|| ydk::is_set(label_to_recurse.yfilter)
	|| ydk::is_set(detail_next_hop_prefix.yfilter)
	|| ydk::is_set(next_hop_mask_length.yfilter)
	|| ydk::is_set(interface_associated_path.yfilter)
	|| ydk::is_set(next_hop_interface.yfilter)
	|| ydk::is_set(next_hop_vrf.yfilter)
	|| ydk::is_set(tunnle_endpoint_id.yfilter)
	|| ydk::is_set(lisprlocid.yfilter)
	|| ydk::is_set(number_of_dependencies_this_path.yfilter)
	|| ydk::is_set(robin_reset_value.yfilter)
	|| ydk::is_set(recurse_prefix_object.yfilter)
	|| ydk::is_set(next_prefix_recursion.yfilter)
	|| ydk::is_set(next_prefix_length.yfilter)
	|| ydk::is_set(recurse_prefix_object2.yfilter)
	|| ydk::is_set(next_prefix_recursion2.yfilter)
	|| ydk::is_set(next_prefix_length2.yfilter)
	|| ydk::is_set(detail_fib_adjacency_type.yfilter)
	|| ydk::is_set(current_path_flag.yfilter)
	|| ydk::is_set(recursive_path_information.yfilter)
	|| ydk::is_set(external_adjacency.yfilter)
	|| ydk::is_set(fib_path_nh_information_type.yfilter)
	|| ydk::is_set(fib_path_nh_information_type_special.yfilter)
	|| ydk::is_set(weight_of_path.yfilter)
	|| ydk::is_set(tunnel_class.yfilter)
	|| ydk::is_set(tunnel_is_forward_class.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "more-detail-about-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_address_to_recurse.is_set || is_set(ip_address_to_recurse.yfilter)) leaf_name_data.push_back(ip_address_to_recurse.get_name_leafdata());
    if (label_to_recurse.is_set || is_set(label_to_recurse.yfilter)) leaf_name_data.push_back(label_to_recurse.get_name_leafdata());
    if (detail_next_hop_prefix.is_set || is_set(detail_next_hop_prefix.yfilter)) leaf_name_data.push_back(detail_next_hop_prefix.get_name_leafdata());
    if (next_hop_mask_length.is_set || is_set(next_hop_mask_length.yfilter)) leaf_name_data.push_back(next_hop_mask_length.get_name_leafdata());
    if (interface_associated_path.is_set || is_set(interface_associated_path.yfilter)) leaf_name_data.push_back(interface_associated_path.get_name_leafdata());
    if (next_hop_interface.is_set || is_set(next_hop_interface.yfilter)) leaf_name_data.push_back(next_hop_interface.get_name_leafdata());
    if (next_hop_vrf.is_set || is_set(next_hop_vrf.yfilter)) leaf_name_data.push_back(next_hop_vrf.get_name_leafdata());
    if (tunnle_endpoint_id.is_set || is_set(tunnle_endpoint_id.yfilter)) leaf_name_data.push_back(tunnle_endpoint_id.get_name_leafdata());
    if (lisprlocid.is_set || is_set(lisprlocid.yfilter)) leaf_name_data.push_back(lisprlocid.get_name_leafdata());
    if (number_of_dependencies_this_path.is_set || is_set(number_of_dependencies_this_path.yfilter)) leaf_name_data.push_back(number_of_dependencies_this_path.get_name_leafdata());
    if (robin_reset_value.is_set || is_set(robin_reset_value.yfilter)) leaf_name_data.push_back(robin_reset_value.get_name_leafdata());
    if (recurse_prefix_object.is_set || is_set(recurse_prefix_object.yfilter)) leaf_name_data.push_back(recurse_prefix_object.get_name_leafdata());
    if (next_prefix_recursion.is_set || is_set(next_prefix_recursion.yfilter)) leaf_name_data.push_back(next_prefix_recursion.get_name_leafdata());
    if (next_prefix_length.is_set || is_set(next_prefix_length.yfilter)) leaf_name_data.push_back(next_prefix_length.get_name_leafdata());
    if (recurse_prefix_object2.is_set || is_set(recurse_prefix_object2.yfilter)) leaf_name_data.push_back(recurse_prefix_object2.get_name_leafdata());
    if (next_prefix_recursion2.is_set || is_set(next_prefix_recursion2.yfilter)) leaf_name_data.push_back(next_prefix_recursion2.get_name_leafdata());
    if (next_prefix_length2.is_set || is_set(next_prefix_length2.yfilter)) leaf_name_data.push_back(next_prefix_length2.get_name_leafdata());
    if (detail_fib_adjacency_type.is_set || is_set(detail_fib_adjacency_type.yfilter)) leaf_name_data.push_back(detail_fib_adjacency_type.get_name_leafdata());
    if (current_path_flag.is_set || is_set(current_path_flag.yfilter)) leaf_name_data.push_back(current_path_flag.get_name_leafdata());
    if (recursive_path_information.is_set || is_set(recursive_path_information.yfilter)) leaf_name_data.push_back(recursive_path_information.get_name_leafdata());
    if (external_adjacency.is_set || is_set(external_adjacency.yfilter)) leaf_name_data.push_back(external_adjacency.get_name_leafdata());
    if (fib_path_nh_information_type.is_set || is_set(fib_path_nh_information_type.yfilter)) leaf_name_data.push_back(fib_path_nh_information_type.get_name_leafdata());
    if (fib_path_nh_information_type_special.is_set || is_set(fib_path_nh_information_type_special.yfilter)) leaf_name_data.push_back(fib_path_nh_information_type_special.get_name_leafdata());
    if (weight_of_path.is_set || is_set(weight_of_path.yfilter)) leaf_name_data.push_back(weight_of_path.get_name_leafdata());
    if (tunnel_class.is_set || is_set(tunnel_class.yfilter)) leaf_name_data.push_back(tunnel_class.get_name_leafdata());
    if (tunnel_is_forward_class.is_set || is_set(tunnel_is_forward_class.yfilter)) leaf_name_data.push_back(tunnel_is_forward_class.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "spd-ipencap")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap>();
        ent_->parent = this;
        spd_ipencap.append(ent_);
        return ent_;
    }

    if(child_yang_name == "next-next-hop")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop>();
        ent_->parent = this;
        next_next_hop.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : spd_ipencap.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : next_next_hop.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "ip-address-to-recurse")
    {
        ip_address_to_recurse = value;
        ip_address_to_recurse.value_namespace = name_space;
        ip_address_to_recurse.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "label-to-recurse")
    {
        label_to_recurse = value;
        label_to_recurse.value_namespace = name_space;
        label_to_recurse.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "detail-next-hop-prefix")
    {
        detail_next_hop_prefix = value;
        detail_next_hop_prefix.value_namespace = name_space;
        detail_next_hop_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-mask-length")
    {
        next_hop_mask_length = value;
        next_hop_mask_length.value_namespace = name_space;
        next_hop_mask_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "interface-associated-path")
    {
        interface_associated_path = value;
        interface_associated_path.value_namespace = name_space;
        interface_associated_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-interface")
    {
        next_hop_interface = value;
        next_hop_interface.value_namespace = name_space;
        next_hop_interface.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-hop-vrf")
    {
        next_hop_vrf = value;
        next_hop_vrf.value_namespace = name_space;
        next_hop_vrf.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnle-endpoint-id")
    {
        tunnle_endpoint_id = value;
        tunnle_endpoint_id.value_namespace = name_space;
        tunnle_endpoint_id.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "lisprlocid")
    {
        lisprlocid = value;
        lisprlocid.value_namespace = name_space;
        lisprlocid.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-dependencies-this-path")
    {
        number_of_dependencies_this_path = value;
        number_of_dependencies_this_path.value_namespace = name_space;
        number_of_dependencies_this_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "robin-reset-value")
    {
        robin_reset_value = value;
        robin_reset_value.value_namespace = name_space;
        robin_reset_value.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recurse-prefix-object")
    {
        recurse_prefix_object = value;
        recurse_prefix_object.value_namespace = name_space;
        recurse_prefix_object.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-recursion")
    {
        next_prefix_recursion = value;
        next_prefix_recursion.value_namespace = name_space;
        next_prefix_recursion.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-length")
    {
        next_prefix_length = value;
        next_prefix_length.value_namespace = name_space;
        next_prefix_length.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recurse-prefix-object2")
    {
        recurse_prefix_object2 = value;
        recurse_prefix_object2.value_namespace = name_space;
        recurse_prefix_object2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-recursion2")
    {
        next_prefix_recursion2 = value;
        next_prefix_recursion2.value_namespace = name_space;
        next_prefix_recursion2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-prefix-length2")
    {
        next_prefix_length2 = value;
        next_prefix_length2.value_namespace = name_space;
        next_prefix_length2.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "detail-fib-adjacency-type")
    {
        detail_fib_adjacency_type = value;
        detail_fib_adjacency_type.value_namespace = name_space;
        detail_fib_adjacency_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "current-path-flag")
    {
        current_path_flag = value;
        current_path_flag.value_namespace = name_space;
        current_path_flag.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-path-information")
    {
        recursive_path_information = value;
        recursive_path_information.value_namespace = name_space;
        recursive_path_information.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "external-adjacency")
    {
        external_adjacency = value;
        external_adjacency.value_namespace = name_space;
        external_adjacency.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-path-nh-information-type")
    {
        fib_path_nh_information_type = value;
        fib_path_nh_information_type.value_namespace = name_space;
        fib_path_nh_information_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "fib-path-nh-information-type-special")
    {
        fib_path_nh_information_type_special = value;
        fib_path_nh_information_type_special.value_namespace = name_space;
        fib_path_nh_information_type_special.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "weight-of-path")
    {
        weight_of_path = value;
        weight_of_path.value_namespace = name_space;
        weight_of_path.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-class")
    {
        tunnel_class = value;
        tunnel_class.value_namespace = name_space;
        tunnel_class.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "tunnel-is-forward-class")
    {
        tunnel_is_forward_class = value;
        tunnel_is_forward_class.value_namespace = name_space;
        tunnel_is_forward_class.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "ip-address-to-recurse")
    {
        ip_address_to_recurse.yfilter = yfilter;
    }
    if(value_path == "label-to-recurse")
    {
        label_to_recurse.yfilter = yfilter;
    }
    if(value_path == "detail-next-hop-prefix")
    {
        detail_next_hop_prefix.yfilter = yfilter;
    }
    if(value_path == "next-hop-mask-length")
    {
        next_hop_mask_length.yfilter = yfilter;
    }
    if(value_path == "interface-associated-path")
    {
        interface_associated_path.yfilter = yfilter;
    }
    if(value_path == "next-hop-interface")
    {
        next_hop_interface.yfilter = yfilter;
    }
    if(value_path == "next-hop-vrf")
    {
        next_hop_vrf.yfilter = yfilter;
    }
    if(value_path == "tunnle-endpoint-id")
    {
        tunnle_endpoint_id.yfilter = yfilter;
    }
    if(value_path == "lisprlocid")
    {
        lisprlocid.yfilter = yfilter;
    }
    if(value_path == "number-of-dependencies-this-path")
    {
        number_of_dependencies_this_path.yfilter = yfilter;
    }
    if(value_path == "robin-reset-value")
    {
        robin_reset_value.yfilter = yfilter;
    }
    if(value_path == "recurse-prefix-object")
    {
        recurse_prefix_object.yfilter = yfilter;
    }
    if(value_path == "next-prefix-recursion")
    {
        next_prefix_recursion.yfilter = yfilter;
    }
    if(value_path == "next-prefix-length")
    {
        next_prefix_length.yfilter = yfilter;
    }
    if(value_path == "recurse-prefix-object2")
    {
        recurse_prefix_object2.yfilter = yfilter;
    }
    if(value_path == "next-prefix-recursion2")
    {
        next_prefix_recursion2.yfilter = yfilter;
    }
    if(value_path == "next-prefix-length2")
    {
        next_prefix_length2.yfilter = yfilter;
    }
    if(value_path == "detail-fib-adjacency-type")
    {
        detail_fib_adjacency_type.yfilter = yfilter;
    }
    if(value_path == "current-path-flag")
    {
        current_path_flag.yfilter = yfilter;
    }
    if(value_path == "recursive-path-information")
    {
        recursive_path_information.yfilter = yfilter;
    }
    if(value_path == "external-adjacency")
    {
        external_adjacency.yfilter = yfilter;
    }
    if(value_path == "fib-path-nh-information-type")
    {
        fib_path_nh_information_type.yfilter = yfilter;
    }
    if(value_path == "fib-path-nh-information-type-special")
    {
        fib_path_nh_information_type_special.yfilter = yfilter;
    }
    if(value_path == "weight-of-path")
    {
        weight_of_path.yfilter = yfilter;
    }
    if(value_path == "tunnel-class")
    {
        tunnel_class.yfilter = yfilter;
    }
    if(value_path == "tunnel-is-forward-class")
    {
        tunnel_is_forward_class.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "spd-ipencap" || name == "next-next-hop" || name == "ip-address-to-recurse" || name == "label-to-recurse" || name == "detail-next-hop-prefix" || name == "next-hop-mask-length" || name == "interface-associated-path" || name == "next-hop-interface" || name == "next-hop-vrf" || name == "tunnle-endpoint-id" || name == "lisprlocid" || name == "number-of-dependencies-this-path" || name == "robin-reset-value" || name == "recurse-prefix-object" || name == "next-prefix-recursion" || name == "next-prefix-length" || name == "recurse-prefix-object2" || name == "next-prefix-recursion2" || name == "next-prefix-length2" || name == "detail-fib-adjacency-type" || name == "current-path-flag" || name == "recursive-path-information" || name == "external-adjacency" || name == "fib-path-nh-information-type" || name == "fib-path-nh-information-type-special" || name == "weight-of-path" || name == "tunnel-class" || name == "tunnel-is-forward-class")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::SpdIpencap()
    :
    ip_encap_hdr_count{YType::uint8, "ip-encap-hdr-count"},
    ip_encap_locks{YType::uint32, "ip-encap-locks"},
    ip_encap_transport_tbl{YType::uint32, "ip-encap-transport-tbl"},
    ipe_transport_vrf_name{YType::str, "ipe-transport-vrf-name"},
    ip_encap_transport_af{YType::uint32, "ip-encap-transport-af"},
    ip_encap_payload_af{YType::uint32, "ip-encap-payload-af"},
    ip_encap_payload_mtu{YType::uint16, "ip-encap-payload-mtu"},
    ip_encap_parent{YType::uint32, "ip-encap-parent"},
    ip_encap_parent_type{YType::uint32, "ip-encap-parent-type"}
        ,
    ip_encap_hdr(this, {})
{

    yang_name = "spd-ipencap"; yang_parent_name = "more-detail-about-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::~SpdIpencap()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<ip_encap_hdr.len(); index++)
    {
        if(ip_encap_hdr[index]->has_data())
            return true;
    }
    return ip_encap_hdr_count.is_set
	|| ip_encap_locks.is_set
	|| ip_encap_transport_tbl.is_set
	|| ipe_transport_vrf_name.is_set
	|| ip_encap_transport_af.is_set
	|| ip_encap_payload_af.is_set
	|| ip_encap_payload_mtu.is_set
	|| ip_encap_parent.is_set
	|| ip_encap_parent_type.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_operation() const
{
    for (std::size_t index=0; index<ip_encap_hdr.len(); index++)
    {
        if(ip_encap_hdr[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(ip_encap_hdr_count.yfilter)
	|| ydk::is_set(ip_encap_locks.yfilter)
	|| ydk::is_set(ip_encap_transport_tbl.yfilter)
	|| ydk::is_set(ipe_transport_vrf_name.yfilter)
	|| ydk::is_set(ip_encap_transport_af.yfilter)
	|| ydk::is_set(ip_encap_payload_af.yfilter)
	|| ydk::is_set(ip_encap_payload_mtu.yfilter)
	|| ydk::is_set(ip_encap_parent.yfilter)
	|| ydk::is_set(ip_encap_parent_type.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "spd-ipencap";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_encap_hdr_count.is_set || is_set(ip_encap_hdr_count.yfilter)) leaf_name_data.push_back(ip_encap_hdr_count.get_name_leafdata());
    if (ip_encap_locks.is_set || is_set(ip_encap_locks.yfilter)) leaf_name_data.push_back(ip_encap_locks.get_name_leafdata());
    if (ip_encap_transport_tbl.is_set || is_set(ip_encap_transport_tbl.yfilter)) leaf_name_data.push_back(ip_encap_transport_tbl.get_name_leafdata());
    if (ipe_transport_vrf_name.is_set || is_set(ipe_transport_vrf_name.yfilter)) leaf_name_data.push_back(ipe_transport_vrf_name.get_name_leafdata());
    if (ip_encap_transport_af.is_set || is_set(ip_encap_transport_af.yfilter)) leaf_name_data.push_back(ip_encap_transport_af.get_name_leafdata());
    if (ip_encap_payload_af.is_set || is_set(ip_encap_payload_af.yfilter)) leaf_name_data.push_back(ip_encap_payload_af.get_name_leafdata());
    if (ip_encap_payload_mtu.is_set || is_set(ip_encap_payload_mtu.yfilter)) leaf_name_data.push_back(ip_encap_payload_mtu.get_name_leafdata());
    if (ip_encap_parent.is_set || is_set(ip_encap_parent.yfilter)) leaf_name_data.push_back(ip_encap_parent.get_name_leafdata());
    if (ip_encap_parent_type.is_set || is_set(ip_encap_parent_type.yfilter)) leaf_name_data.push_back(ip_encap_parent_type.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "ip-encap-hdr")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr>();
        ent_->parent = this;
        ip_encap_hdr.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : ip_encap_hdr.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "ip-encap-hdr-count")
    {
        ip_encap_hdr_count = value;
        ip_encap_hdr_count.value_namespace = name_space;
        ip_encap_hdr_count.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-locks")
    {
        ip_encap_locks = value;
        ip_encap_locks.value_namespace = name_space;
        ip_encap_locks.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-transport-tbl")
    {
        ip_encap_transport_tbl = value;
        ip_encap_transport_tbl.value_namespace = name_space;
        ip_encap_transport_tbl.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ipe-transport-vrf-name")
    {
        ipe_transport_vrf_name = value;
        ipe_transport_vrf_name.value_namespace = name_space;
        ipe_transport_vrf_name.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-transport-af")
    {
        ip_encap_transport_af = value;
        ip_encap_transport_af.value_namespace = name_space;
        ip_encap_transport_af.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-payload-af")
    {
        ip_encap_payload_af = value;
        ip_encap_payload_af.value_namespace = name_space;
        ip_encap_payload_af.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-payload-mtu")
    {
        ip_encap_payload_mtu = value;
        ip_encap_payload_mtu.value_namespace = name_space;
        ip_encap_payload_mtu.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-parent")
    {
        ip_encap_parent = value;
        ip_encap_parent.value_namespace = name_space;
        ip_encap_parent.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-parent-type")
    {
        ip_encap_parent_type = value;
        ip_encap_parent_type.value_namespace = name_space;
        ip_encap_parent_type.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "ip-encap-hdr-count")
    {
        ip_encap_hdr_count.yfilter = yfilter;
    }
    if(value_path == "ip-encap-locks")
    {
        ip_encap_locks.yfilter = yfilter;
    }
    if(value_path == "ip-encap-transport-tbl")
    {
        ip_encap_transport_tbl.yfilter = yfilter;
    }
    if(value_path == "ipe-transport-vrf-name")
    {
        ipe_transport_vrf_name.yfilter = yfilter;
    }
    if(value_path == "ip-encap-transport-af")
    {
        ip_encap_transport_af.yfilter = yfilter;
    }
    if(value_path == "ip-encap-payload-af")
    {
        ip_encap_payload_af.yfilter = yfilter;
    }
    if(value_path == "ip-encap-payload-mtu")
    {
        ip_encap_payload_mtu.yfilter = yfilter;
    }
    if(value_path == "ip-encap-parent")
    {
        ip_encap_parent.yfilter = yfilter;
    }
    if(value_path == "ip-encap-parent-type")
    {
        ip_encap_parent_type.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ip-encap-hdr" || name == "ip-encap-hdr-count" || name == "ip-encap-locks" || name == "ip-encap-transport-tbl" || name == "ipe-transport-vrf-name" || name == "ip-encap-transport-af" || name == "ip-encap-payload-af" || name == "ip-encap-payload-mtu" || name == "ip-encap-parent" || name == "ip-encap-parent-type")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::IpEncapHdr()
    :
    ip_encap_hdr_type{YType::enumeration, "ip-encap-hdr-type"},
    ip_encap_hdrp{YType::str, "ip-encap-hdrp"},
    ip_encap_hdr_dyn{YType::uint32, "ip-encap-hdr-dyn"}
{

    yang_name = "ip-encap-hdr"; yang_parent_name = "spd-ipencap"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::~IpEncapHdr()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_data() const
{
    if (is_presence_container) return true;
    return ip_encap_hdr_type.is_set
	|| ip_encap_hdrp.is_set
	|| ip_encap_hdr_dyn.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(ip_encap_hdr_type.yfilter)
	|| ydk::is_set(ip_encap_hdrp.yfilter)
	|| ydk::is_set(ip_encap_hdr_dyn.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ip-encap-hdr";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_encap_hdr_type.is_set || is_set(ip_encap_hdr_type.yfilter)) leaf_name_data.push_back(ip_encap_hdr_type.get_name_leafdata());
    if (ip_encap_hdrp.is_set || is_set(ip_encap_hdrp.yfilter)) leaf_name_data.push_back(ip_encap_hdrp.get_name_leafdata());
    if (ip_encap_hdr_dyn.is_set || is_set(ip_encap_hdr_dyn.yfilter)) leaf_name_data.push_back(ip_encap_hdr_dyn.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "ip-encap-hdr-type")
    {
        ip_encap_hdr_type = value;
        ip_encap_hdr_type.value_namespace = name_space;
        ip_encap_hdr_type.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-hdrp")
    {
        ip_encap_hdrp = value;
        ip_encap_hdrp.value_namespace = name_space;
        ip_encap_hdrp.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "ip-encap-hdr-dyn")
    {
        ip_encap_hdr_dyn = value;
        ip_encap_hdr_dyn.value_namespace = name_space;
        ip_encap_hdr_dyn.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "ip-encap-hdr-type")
    {
        ip_encap_hdr_type.yfilter = yfilter;
    }
    if(value_path == "ip-encap-hdrp")
    {
        ip_encap_hdrp.yfilter = yfilter;
    }
    if(value_path == "ip-encap-hdr-dyn")
    {
        ip_encap_hdr_dyn.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::SpdIpencap::IpEncapHdr::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "ip-encap-hdr-type" || name == "ip-encap-hdrp" || name == "ip-encap-hdr-dyn")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::NextNextHop()
    :
    next_next_hop_index{YType::uint8, "next-next-hop-index"},
    next_next_hop_prefix{YType::str, "next-next-hop-prefix"},
    next_next_hop_interface{YType::uint32, "next-next-hop-interface"}
{

    yang_name = "next-next-hop"; yang_parent_name = "more-detail-about-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::~NextNextHop()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::has_data() const
{
    if (is_presence_container) return true;
    return next_next_hop_index.is_set
	|| next_next_hop_prefix.is_set
	|| next_next_hop_interface.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(next_next_hop_index.yfilter)
	|| ydk::is_set(next_next_hop_prefix.yfilter)
	|| ydk::is_set(next_next_hop_interface.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "next-next-hop";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (next_next_hop_index.is_set || is_set(next_next_hop_index.yfilter)) leaf_name_data.push_back(next_next_hop_index.get_name_leafdata());
    if (next_next_hop_prefix.is_set || is_set(next_next_hop_prefix.yfilter)) leaf_name_data.push_back(next_next_hop_prefix.get_name_leafdata());
    if (next_next_hop_interface.is_set || is_set(next_next_hop_interface.yfilter)) leaf_name_data.push_back(next_next_hop_interface.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "next-next-hop-index")
    {
        next_next_hop_index = value;
        next_next_hop_index.value_namespace = name_space;
        next_next_hop_index.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-next-hop-prefix")
    {
        next_next_hop_prefix = value;
        next_next_hop_prefix.value_namespace = name_space;
        next_next_hop_prefix.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "next-next-hop-interface")
    {
        next_next_hop_interface = value;
        next_next_hop_interface.value_namespace = name_space;
        next_next_hop_interface.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "next-next-hop-index")
    {
        next_next_hop_index.yfilter = yfilter;
    }
    if(value_path == "next-next-hop-prefix")
    {
        next_next_hop_prefix.yfilter = yfilter;
    }
    if(value_path == "next-next-hop-interface")
    {
        next_next_hop_interface.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MoreDetailAboutPath::NextNextHop::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "next-next-hop-index" || name == "next-next-hop-prefix" || name == "next-next-hop-interface")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::MplsInformationForPath()
    :
    local_lable{YType::uint32, "local-lable"},
    recursive_fwd_chain{YType::boolean, "recursive-fwd-chain"},
    number_of_igp_paths{YType::uint32, "number-of-igp-paths"},
    remote_backup{YType::boolean, "remote-backup"}
        ,
    recursive_lbl_stack(this, {})
    , igp_label_stack_array(this, {})
{

    yang_name = "mpls-information-for-path"; yang_parent_name = "fib-sh-tbl-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::~MplsInformationForPath()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::has_data() const
{
    if (is_presence_container) return true;
    for (std::size_t index=0; index<recursive_lbl_stack.len(); index++)
    {
        if(recursive_lbl_stack[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<igp_label_stack_array.len(); index++)
    {
        if(igp_label_stack_array[index]->has_data())
            return true;
    }
    return local_lable.is_set
	|| recursive_fwd_chain.is_set
	|| number_of_igp_paths.is_set
	|| remote_backup.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::has_operation() const
{
    for (std::size_t index=0; index<recursive_lbl_stack.len(); index++)
    {
        if(recursive_lbl_stack[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<igp_label_stack_array.len(); index++)
    {
        if(igp_label_stack_array[index]->has_operation())
            return true;
    }
    return is_set(yfilter)
	|| ydk::is_set(local_lable.yfilter)
	|| ydk::is_set(recursive_fwd_chain.yfilter)
	|| ydk::is_set(number_of_igp_paths.yfilter)
	|| ydk::is_set(remote_backup.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "mpls-information-for-path";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (local_lable.is_set || is_set(local_lable.yfilter)) leaf_name_data.push_back(local_lable.get_name_leafdata());
    if (recursive_fwd_chain.is_set || is_set(recursive_fwd_chain.yfilter)) leaf_name_data.push_back(recursive_fwd_chain.get_name_leafdata());
    if (number_of_igp_paths.is_set || is_set(number_of_igp_paths.yfilter)) leaf_name_data.push_back(number_of_igp_paths.get_name_leafdata());
    if (remote_backup.is_set || is_set(remote_backup.yfilter)) leaf_name_data.push_back(remote_backup.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(child_yang_name == "recursive-lbl-stack")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack>();
        ent_->parent = this;
        recursive_lbl_stack.append(ent_);
        return ent_;
    }

    if(child_yang_name == "igp-label-stack-array")
    {
        auto ent_ = std::make_shared<Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::IgpLabelStackArray>();
        ent_->parent = this;
        igp_label_stack_array.append(ent_);
        return ent_;
    }

    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    count_ = 0;
    for (auto ent_ : recursive_lbl_stack.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    count_ = 0;
    for (auto ent_ : igp_label_stack_array.entities())
    {
        if(_children.find(ent_->get_segment_path()) == _children.end())
            _children[ent_->get_segment_path()] = ent_;
        else
            _children[ent_->get_segment_path()+count_++] = ent_;
    }

    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "local-lable")
    {
        local_lable = value;
        local_lable.value_namespace = name_space;
        local_lable.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "recursive-fwd-chain")
    {
        recursive_fwd_chain = value;
        recursive_fwd_chain.value_namespace = name_space;
        recursive_fwd_chain.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "number-of-igp-paths")
    {
        number_of_igp_paths = value;
        number_of_igp_paths.value_namespace = name_space;
        number_of_igp_paths.value_namespace_prefix = name_space_prefix;
    }
    if(value_path == "remote-backup")
    {
        remote_backup = value;
        remote_backup.value_namespace = name_space;
        remote_backup.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "local-lable")
    {
        local_lable.yfilter = yfilter;
    }
    if(value_path == "recursive-fwd-chain")
    {
        recursive_fwd_chain.yfilter = yfilter;
    }
    if(value_path == "number-of-igp-paths")
    {
        number_of_igp_paths.yfilter = yfilter;
    }
    if(value_path == "remote-backup")
    {
        remote_backup.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "recursive-lbl-stack" || name == "igp-label-stack-array" || name == "local-lable" || name == "recursive-fwd-chain" || name == "number-of-igp-paths" || name == "remote-backup")
        return true;
    return false;
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::RecursiveLblStack()
    :
    entry{YType::uint32, "entry"}
{

    yang_name = "recursive-lbl-stack"; yang_parent_name = "mpls-information-for-path"; is_top_level_class = false; has_list_ancestor = true; 
}

Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::~RecursiveLblStack()
{
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_data() const
{
    if (is_presence_container) return true;
    return entry.is_set;
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_operation() const
{
    return is_set(yfilter)
	|| ydk::is_set(entry.yfilter);
}

std::string Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recursive-lbl-stack";
    path_buffer << "[" << get_ylist_key() << "]";
    return path_buffer.str();
}

std::vector<std::pair<std::string, LeafData> > Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_name_leaf_data() const
{
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (entry.is_set || is_set(entry.yfilter)) leaf_name_data.push_back(entry.get_name_leafdata());

    return leaf_name_data;

}

std::shared_ptr<ydk::Entity> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    return nullptr;
}

std::map<std::string, std::shared_ptr<ydk::Entity>> Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::get_children() const
{
    std::map<std::string, std::shared_ptr<ydk::Entity>> _children{};
    char count_=0;
    return _children;
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix)
{
    if(value_path == "entry")
    {
        entry = value;
        entry.value_namespace = name_space;
        entry.value_namespace_prefix = name_space_prefix;
    }
}

void Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::set_filter(const std::string & value_path, YFilter yfilter)
{
    if(value_path == "entry")
    {
        entry.yfilter = yfilter;
    }
}

bool Fib::Nodes::Node::Protocols::Protocol::Vrfs::Vrf::IpPrefixDetails::IpPrefixDetail::FibEntryPath::FibShTblPath::MplsInformationForPath::RecursiveLblStack::has_leaf_or_child_of_name(const std::string & name) const
{
    if(name == "entry")
        return true;
    return false;
}

const Enum::YLeaf MgmtFibMplsFrrState::partial {0, "partial"};
const Enum::YLeaf MgmtFibMplsFrrState::active {1, "active"};
const Enum::YLeaf MgmtFibMplsFrrState::ready {2, "ready"};
const Enum::YLeaf MgmtFibMplsFrrState::complete {3, "complete"};
const Enum::YLeaf MgmtFibMplsFrrState::any {4, "any"};

const Enum::YLeaf FibNehSpecial::nh_not_found {0, "nh-not-found"};
const Enum::YLeaf FibNehSpecial::nh_null0 {1, "nh-null0"};
const Enum::YLeaf FibNehSpecial::nh_punt {2, "nh-punt"};
const Enum::YLeaf FibNehSpecial::nh_drop {3, "nh-drop"};
const Enum::YLeaf FibNehSpecial::nh_glean {4, "nh-glean"};
const Enum::YLeaf FibNehSpecial::nh_receive {5, "nh-receive"};
const Enum::YLeaf FibNehSpecial::nh_broadcast {6, "nh-broadcast"};
const Enum::YLeaf FibNehSpecial::nh_external {7, "nh-external"};
const Enum::YLeaf FibNehSpecial::nh_lisp {8, "nh-lisp"};
const Enum::YLeaf FibNehSpecial::nh_lookup {9, "nh-lookup"};
const Enum::YLeaf FibNehSpecial::nh_max_type {10, "nh-max-type"};

const Enum::YLeaf Proto::ipv4 {0, "ipv4"};
const Enum::YLeaf Proto::ipv6 {1, "ipv6"};
const Enum::YLeaf Proto::mpls {2, "mpls"};

const Enum::YLeaf FibShIpencapHdr::fib_sh_ip_encap_none {0, "fib-sh-ip-encap-none"};
const Enum::YLeaf FibShIpencapHdr::fib_sh_ip_encap_ip4 {1, "fib-sh-ip-encap-ip4"};
const Enum::YLeaf FibShIpencapHdr::fib_sh_ip_encap_ip6 {2, "fib-sh-ip-encap-ip6"};
const Enum::YLeaf FibShIpencapHdr::fib_sh_ip_encap_udp {3, "fib-sh-ip-encap-udp"};
const Enum::YLeaf FibShIpencapHdr::fib_sh_ip_encap_lisp {4, "fib-sh-ip-encap-lisp"};

const Enum::YLeaf FibAdjacencyShow::fib_adjacency_normal {0, "fib-adjacency-normal"};
const Enum::YLeaf FibAdjacencyShow::fib_adjacency_null {1, "fib-adjacency-null"};
const Enum::YLeaf FibAdjacencyShow::fib_adjacency_punt {2, "fib-adjacency-punt"};
const Enum::YLeaf FibAdjacencyShow::fib_adjacency_drop {3, "fib-adjacency-drop"};
const Enum::YLeaf FibAdjacencyShow::fib_adjacency_glean {4, "fib-adjacency-glean"};
const Enum::YLeaf FibAdjacencyShow::fib_adjacency_discard {5, "fib-adjacency-discard"};
const Enum::YLeaf FibAdjacencyShow::fib_adjacency_broadcast {6, "fib-adjacency-broadcast"};
const Enum::YLeaf FibAdjacencyShow::fib_adjacency_external {7, "fib-adjacency-external"};
const Enum::YLeaf FibAdjacencyShow::fib_adjacency_lisp {8, "fib-adjacency-lisp"};
const Enum::YLeaf FibAdjacencyShow::fib_adjacency_unknown {9, "fib-adjacency-unknown"};

const Enum::YLeaf FibNhinfoExtBag::replicated_nh_info {0, "replicated-nh-info"};
const Enum::YLeaf FibNhinfoExtBag::shared_nh_info {1, "shared-nh-info"};

const Enum::YLeaf SsLbaState::l3 {0, "l3"};
const Enum::YLeaf SsLbaState::l4 {1, "l4"};

const Enum::YLeaf FibRouteSource::lsd {5, "lsd"};
const Enum::YLeaf FibRouteSource::rib {7, "rib"};
const Enum::YLeaf FibRouteSource::mrib {13, "mrib"};

const Enum::YLeaf FibMplsLlcEntryBag::fib_mpls_llc_bag_type_xc {1, "fib-mpls-llc-bag-type-xc"};
const Enum::YLeaf FibMplsLlcEntryBag::fib_mpls_llc_bag_type_pfx {2, "fib-mpls-llc-bag-type-pfx"};
const Enum::YLeaf FibMplsLlcEntryBag::fib_mpls_llc_bag_type_lsm {3, "fib-mpls-llc-bag-type-lsm"};
const Enum::YLeaf FibMplsLlcEntryBag::fib_mpls_llc_bag_type_max {4, "fib-mpls-llc-bag-type-max"};

const Enum::YLeaf FibRpfMode::fib_rpf_mode_strict {0, "fib-rpf-mode-strict"};
const Enum::YLeaf FibRpfMode::fib_rpf_mode_loose {1, "fib-rpf-mode-loose"};
const Enum::YLeaf FibRpfMode::fib_rpf_mode_unknown {2, "fib-rpf-mode-unknown"};

const Enum::YLeaf FibafiProto::ipv4 {0, "ipv4"};
const Enum::YLeaf FibafiProto::ipv4_mpls {1, "ipv4-mpls"};
const Enum::YLeaf FibafiProto::ipv6 {2, "ipv6"};
const Enum::YLeaf FibafiProto::ipv6_mpls {3, "ipv6-mpls"};

const Enum::YLeaf Mplseos::eos0 {0, "eos0"};
const Enum::YLeaf Mplseos::eos1 {1, "eos1"};

const Enum::YLeaf FibFrrProtocolShow::frr_protocol_ipv4 {0, "frr-protocol-ipv4"};
const Enum::YLeaf FibFrrProtocolShow::frr_protocol_ipv6 {1, "frr-protocol-ipv6"};
const Enum::YLeaf FibFrrProtocolShow::frr_protocol_mpls {2, "frr-protocol-mpls"};

const Enum::YLeaf FibShTblFibExtBag::leaf_extension {1, "leaf-extension"};

const Enum::YLeaf FibLink::link_ipv4 {0, "link-ipv4"};
const Enum::YLeaf FibLink::link_ipv6 {1, "link-ipv6"};
const Enum::YLeaf FibLink::link_mpls {2, "link-mpls"};

const Enum::YLeaf FibUpdatePathLfaProtection::not_lfa_protected {0, "not-lfa-protected"};
const Enum::YLeaf FibUpdatePathLfaProtection::local_lfa_protected {1, "local-lfa-protected"};
const Enum::YLeaf FibUpdatePathLfaProtection::remote_lfa_protected {2, "remote-lfa-protected"};
const Enum::YLeaf FibUpdatePathLfaProtection::ti_lfa_protected {3, "ti-lfa-protected"};

const Enum::YLeaf FibLoadshareShow::fib_load_share_none {0, "fib-load-share-none"};
const Enum::YLeaf FibLoadshareShow::fib_load_share_per_packet {1, "fib-load-share-per-packet"};
const Enum::YLeaf FibLoadshareShow::fib_load_share_dest_sharing {2, "fib-load-share-dest-sharing"};

const Enum::YLeaf FibllcEntry::xc {1, "xc"};
const Enum::YLeaf FibllcEntry::pfx {2, "pfx"};

const Enum::YLeaf FibNeh::nh_local {0, "nh-local"};
const Enum::YLeaf FibNeh::nh_remote {1, "nh-remote"};
const Enum::YLeaf FibNeh::nh_special {2, "nh-special"};

const Enum::YLeaf NextHop::tx {0, "tx"};
const Enum::YLeaf NextHop::rx {1, "rx"};
const Enum::YLeaf NextHop::special {2, "special"};

const Enum::YLeaf MgmtFibMplsLspRole::head {0, "head"};
const Enum::YLeaf MgmtFibMplsLspRole::midpoint {1, "midpoint"};

const Enum::YLeaf FibProtocol::ipv4 {0, "ipv4"};
const Enum::YLeaf FibProtocol::ipv6 {1, "ipv6"};
const Enum::YLeaf FibProtocol::mpls {2, "mpls"};

const Enum::YLeaf FibnhInfoRepl::fib_nh_repl_none {0, "fib-nh-repl-none"};
const Enum::YLeaf FibnhInfoRepl::fib_nh_repl_rsvpte {1, "fib-nh-repl-rsvpte"};
const Enum::YLeaf FibnhInfoRepl::fib_nh_repl_sr_mpls {2, "fib-nh-repl-sr-mpls"};
const Enum::YLeaf FibnhInfoRepl::fib_nh_repl_bm {3, "fib-nh-repl-bm"};

const Enum::YLeaf FibidbOper::fibidb_none {0, "fibidb-none"};
const Enum::YLeaf FibidbOper::fibidb_create {1, "fibidb-create"};
const Enum::YLeaf FibidbOper::fibidb_delete {2, "fibidb-delete"};
const Enum::YLeaf FibidbOper::fibidb_modify {3, "fibidb-modify"};
const Enum::YLeaf FibidbOper::fibidb_max {4, "fibidb-max"};

const Enum::YLeaf Fibfrr::fib_te_frr_node {0, "fib-te-frr-node"};
const Enum::YLeaf Fibfrr::fib_te_frr_intf {1, "fib-te-frr-intf"};
const Enum::YLeaf Fibfrr::fib_te_frr_protected_nh {2, "fib-te-frr-protected-nh"};
const Enum::YLeaf Fibfrr::fib_te_frr_backup_nh {3, "fib-te-frr-backup-nh"};
const Enum::YLeaf Fibfrr::fib_per_link_frr_protected_nh {4, "fib-per-link-frr-protected-nh"};
const Enum::YLeaf Fibfrr::fib_per_link_frr_backup_nh {5, "fib-per-link-frr-backup-nh"};
const Enum::YLeaf Fibfrr::fib_prefix_frr_protected_nh {6, "fib-prefix-frr-protected-nh"};
const Enum::YLeaf Fibfrr::fib_prefix_frr_backup_nh {7, "fib-prefix-frr-backup-nh"};
const Enum::YLeaf Fibfrr::fib_pic_frr_protected_nh {8, "fib-pic-frr-protected-nh"};
const Enum::YLeaf Fibfrr::fib_pic_frr_backup_nh {9, "fib-pic-frr-backup-nh"};


}
}

