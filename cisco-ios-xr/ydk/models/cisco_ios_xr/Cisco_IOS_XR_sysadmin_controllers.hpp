#ifndef _CISCO_IOS_XR_SYSADMIN_CONTROLLERS_
#define _CISCO_IOS_XR_SYSADMIN_CONTROLLERS_

#include <memory>
#include <vector>
#include <string>
#include <ydk/types.hpp>
#include <ydk/errors.hpp>


namespace cisco_ios_xr {
namespace Cisco_IOS_XR_sysadmin_controllers {

class Gaspp : public ydk::Entity
{
    public:
        Gaspp();
        ~Gaspp();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::shared_ptr<ydk::Entity> clone_ptr() const override;
        ydk::augment_capabilities_function get_augment_capabilities_function() const override;
        std::string get_bundle_yang_models_location() const override;
        std::string get_bundle_name() const override;
        std::map<std::pair<std::string, std::string>, std::string> get_namespace_identity_lookup() const override;

        class Asic; //type: Gaspp::Asic

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic> > asic;
        
}; // Gaspp


class Gaspp::Asic : public ydk::Entity
{
    public:
        Asic();
        ~Asic();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf asic_name; //type: string
        class Instance; //type: Gaspp::Asic::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance> > instance;
        
}; // Gaspp::Asic


class Gaspp::Asic::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: uint32
        ydk::YLeaf instance_name; //type: string
        class Address; //type: Gaspp::Asic::Instance::Address
        class BlockName; //type: Gaspp::Asic::Instance::BlockName
        class BlockNumber; //type: Gaspp::Asic::Instance::BlockNumber

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::Address> > address;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::BlockName> > block_name;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::BlockNumber> > block_number;
        
}; // Gaspp::Asic::Instance


class Gaspp::Asic::Instance::Address : public ydk::Entity
{
    public:
        Address();
        ~Address();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf addr; //type: string
        ydk::YLeaf size; //type: uint32
        ydk::YLeaf entries; //type: uint32
        ydk::YLeaf width; //type: uint32
        class Location; //type: Gaspp::Asic::Instance::Address::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::Address::Location> > location;
        
}; // Gaspp::Asic::Instance::Address


class Gaspp::Asic::Instance::Address::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class DirectData; //type: Gaspp::Asic::Instance::Address::Location::DirectData

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::Address::Location::DirectData> > direct_data;
        
}; // Gaspp::Asic::Instance::Address::Location


class Gaspp::Asic::Instance::Address::Location::DirectData : public ydk::Entity
{
    public:
        DirectData();
        ~DirectData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf address; //type: uint64
        ydk::YLeaf name; //type: string
        ydk::YLeaf value_; //type: string
        ydk::YLeaf size; //type: uint32

}; // Gaspp::Asic::Instance::Address::Location::DirectData


class Gaspp::Asic::Instance::BlockName : public ydk::Entity
{
    public:
        BlockName();
        ~BlockName();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf block_nm; //type: string
        ydk::YLeaf block_num; //type: uint32
        class RegisterName; //type: Gaspp::Asic::Instance::BlockName::RegisterName

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::BlockName::RegisterName> > register_name;
        
}; // Gaspp::Asic::Instance::BlockName


class Gaspp::Asic::Instance::BlockName::RegisterName : public ydk::Entity
{
    public:
        RegisterName();
        ~RegisterName();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf name; //type: string
        ydk::YLeaf register_; //type: uint32
        class Data; //type: Gaspp::Asic::Instance::BlockName::RegisterName::Data

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::BlockName::RegisterName::Data> > data;
        
}; // Gaspp::Asic::Instance::BlockName::RegisterName


class Gaspp::Asic::Instance::BlockName::RegisterName::Data : public ydk::Entity
{
    public:
        Data();
        ~Data();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf address; //type: uint64
        ydk::YLeaf name; //type: string
        ydk::YLeaf value_; //type: string
        ydk::YLeaf size; //type: uint32

}; // Gaspp::Asic::Instance::BlockName::RegisterName::Data


class Gaspp::Asic::Instance::BlockNumber : public ydk::Entity
{
    public:
        BlockNumber();
        ~BlockNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf block_num; //type: uint32
        ydk::YLeaf block_nm; //type: string
        class RegisterNumber; //type: Gaspp::Asic::Instance::BlockNumber::RegisterNumber

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::BlockNumber::RegisterNumber> > register_number;
        
}; // Gaspp::Asic::Instance::BlockNumber


class Gaspp::Asic::Instance::BlockNumber::RegisterNumber : public ydk::Entity
{
    public:
        RegisterNumber();
        ~RegisterNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf register_; //type: uint32
        ydk::YLeaf register_name; //type: string
        class RegisterOffsets; //type: Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets
        class Location; //type: Gaspp::Asic::Instance::BlockNumber::RegisterNumber::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets> > register_offsets;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::BlockNumber::RegisterNumber::Location> > location;
        
}; // Gaspp::Asic::Instance::BlockNumber::RegisterNumber


class Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets : public ydk::Entity
{
    public:
        RegisterOffsets();
        ~RegisterOffsets();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf reg_start; //type: uint32
        ydk::YLeaf num_entries; //type: uint32
        class Location; //type: Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location> > location;
        
}; // Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets


class Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class Data; //type: Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location::Data

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location::Data> > data;
        
}; // Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location


class Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location::Data : public ydk::Entity
{
    public:
        Data();
        ~Data();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf address; //type: uint64
        ydk::YLeaf name; //type: string
        ydk::YLeaf value_; //type: string
        ydk::YLeaf size; //type: uint32

}; // Gaspp::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location::Data


class Gaspp::Asic::Instance::BlockNumber::RegisterNumber::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class Data; //type: Gaspp::Asic::Instance::BlockNumber::RegisterNumber::Location::Data

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Gaspp::Asic::Instance::BlockNumber::RegisterNumber::Location::Data> > data;
        
}; // Gaspp::Asic::Instance::BlockNumber::RegisterNumber::Location


class Gaspp::Asic::Instance::BlockNumber::RegisterNumber::Location::Data : public ydk::Entity
{
    public:
        Data();
        ~Data();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf address; //type: uint64
        ydk::YLeaf name; //type: string
        ydk::YLeaf value_; //type: string
        ydk::YLeaf size; //type: uint32

}; // Gaspp::Asic::Instance::BlockNumber::RegisterNumber::Location::Data

class Set : public ydk::Entity
{
    public:
        Set();
        ~Set();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::shared_ptr<ydk::Entity> clone_ptr() const override;
        ydk::augment_capabilities_function get_augment_capabilities_function() const override;
        std::string get_bundle_yang_models_location() const override;
        std::string get_bundle_name() const override;
        std::map<std::pair<std::string, std::string>, std::string> get_namespace_identity_lookup() const override;

        class Controller; //type: Set::Controller

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller> controller;
        
}; // Set


class Set::Controller : public ydk::Entity
{
    public:
        Controller();
        ~Controller();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Asic; //type: Set::Controller::Asic

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic> > asic;
        
}; // Set::Controller


class Set::Controller::Asic : public ydk::Entity
{
    public:
        Asic();
        ~Asic();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf asic_name; //type: string
        class Instance; //type: Set::Controller::Asic::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance> > instance;
        
}; // Set::Controller::Asic


class Set::Controller::Asic::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_ids; //type: uint32
        class FaultInjection; //type: Set::Controller::Asic::Instance::FaultInjection

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection> fault_injection;
        
}; // Set::Controller::Asic::Instance


class Set::Controller::Asic::Instance::FaultInjection : public ydk::Entity
{
    public:
        FaultInjection();
        ~FaultInjection();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Module; //type: Set::Controller::Asic::Instance::FaultInjection::Module

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module> > module;
        
}; // Set::Controller::Asic::Instance::FaultInjection


class Set::Controller::Asic::Instance::FaultInjection::Module : public ydk::Entity
{
    public:
        Module();
        ~Module();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf module_name; //type: string
        class FaultType; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType> fault_type;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType : public ydk::Entity
{
    public:
        FaultType();
        ~FaultType();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Ecc; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc
        class Parity; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity
        class Other; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc> ecc;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity> parity;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other> other;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc : public ydk::Entity
{
    public:
        Ecc();
        ~Ecc();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class All; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All
        class BlockNameLst; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All> all;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst> > block_name_lst;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All : public ydk::Entity
{
    public:
        All();
        ~All();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Threshold; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Threshold
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Threshold> > threshold;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Threshold : public ydk::Entity
{
    public:
        Threshold();
        ~Threshold();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_seconds; //type: uint32
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Threshold::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Threshold::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Threshold


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Threshold::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Threshold::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::All::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst : public ydk::Entity
{
    public:
        BlockNameLst();
        ~BlockNameLst();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf block_name; //type: string
        class One; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One
        class Continuous; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous
        class Stop; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Stop

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One> one;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous> continuous;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Stop> stop;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One : public ydk::Entity
{
    public:
        One();
        ~One();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Rate; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Location

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate> rate;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate : public ydk::Entity
{
    public:
        Rate();
        ~Rate();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ErrorNumber; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber> > error_number;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber : public ydk::Entity
{
    public:
        ErrorNumber();
        ~ErrorNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_errs; //type: uint32
        class Duration; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber::Duration

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber::Duration> > duration;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber::Duration : public ydk::Entity
{
    public:
        Duration();
        ~Duration();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_seconds; //type: uint32
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber::Duration::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber::Duration::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber::Duration


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber::Duration::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Rate::ErrorNumber::Duration::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::One::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous : public ydk::Entity
{
    public:
        Continuous();
        ~Continuous();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Rate; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Location

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate> rate;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate : public ydk::Entity
{
    public:
        Rate();
        ~Rate();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ErrorNumber; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber> > error_number;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber : public ydk::Entity
{
    public:
        ErrorNumber();
        ~ErrorNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_errs; //type: uint32
        class Duration; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber::Duration

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber::Duration> > duration;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber::Duration : public ydk::Entity
{
    public:
        Duration();
        ~Duration();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_seconds; //type: uint32
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber::Duration


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Continuous::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Stop : public ydk::Entity
{
    public:
        Stop();
        ~Stop();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Stop::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Stop::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Stop


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Stop::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Ecc::BlockNameLst::Stop::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity : public ydk::Entity
{
    public:
        Parity();
        ~Parity();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class All; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All
        class BlockNameLst; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All> all;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst> > block_name_lst;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All : public ydk::Entity
{
    public:
        All();
        ~All();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Threshold; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Threshold
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Threshold> > threshold;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Threshold : public ydk::Entity
{
    public:
        Threshold();
        ~Threshold();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_seconds; //type: uint32
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Threshold::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Threshold::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Threshold


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Threshold::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Threshold::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::All::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst : public ydk::Entity
{
    public:
        BlockNameLst();
        ~BlockNameLst();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf block_name; //type: string
        class One; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One
        class Continuous; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous
        class Stop; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Stop

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One> one;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous> continuous;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Stop> stop;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One : public ydk::Entity
{
    public:
        One();
        ~One();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Rate; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Location

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate> rate;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate : public ydk::Entity
{
    public:
        Rate();
        ~Rate();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ErrorNumber; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber> > error_number;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber : public ydk::Entity
{
    public:
        ErrorNumber();
        ~ErrorNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_errs; //type: uint32
        class Duration; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber::Duration

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber::Duration> > duration;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber::Duration : public ydk::Entity
{
    public:
        Duration();
        ~Duration();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_seconds; //type: uint32
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber::Duration::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber::Duration::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber::Duration


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber::Duration::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Rate::ErrorNumber::Duration::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::One::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous : public ydk::Entity
{
    public:
        Continuous();
        ~Continuous();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Rate; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Location

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate> rate;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate : public ydk::Entity
{
    public:
        Rate();
        ~Rate();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ErrorNumber; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber> > error_number;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber : public ydk::Entity
{
    public:
        ErrorNumber();
        ~ErrorNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_errs; //type: uint32
        class Duration; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber::Duration

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber::Duration> > duration;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber::Duration : public ydk::Entity
{
    public:
        Duration();
        ~Duration();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_seconds; //type: uint32
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber::Duration


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Continuous::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Stop : public ydk::Entity
{
    public:
        Stop();
        ~Stop();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Stop::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Stop::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Stop


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Stop::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Parity::BlockNameLst::Stop::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other : public ydk::Entity
{
    public:
        Other();
        ~Other();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class All; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All
        class BlockNameLst; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All> all;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst> > block_name_lst;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All : public ydk::Entity
{
    public:
        All();
        ~All();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Threshold; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Threshold
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Threshold> > threshold;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Threshold : public ydk::Entity
{
    public:
        Threshold();
        ~Threshold();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_seconds; //type: uint32
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Threshold::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Threshold::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Threshold


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Threshold::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Threshold::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::All::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst : public ydk::Entity
{
    public:
        BlockNameLst();
        ~BlockNameLst();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf block_name; //type: string
        class One; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One
        class Continuous; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous
        class Stop; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Stop

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One> one;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous> continuous;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Stop> stop;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One : public ydk::Entity
{
    public:
        One();
        ~One();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Rate; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Location

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate> rate;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate : public ydk::Entity
{
    public:
        Rate();
        ~Rate();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ErrorNumber; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber> > error_number;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber : public ydk::Entity
{
    public:
        ErrorNumber();
        ~ErrorNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_errs; //type: uint32
        class Duration; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber::Duration

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber::Duration> > duration;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber::Duration : public ydk::Entity
{
    public:
        Duration();
        ~Duration();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_seconds; //type: uint32
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber::Duration::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber::Duration::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber::Duration


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber::Duration::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Rate::ErrorNumber::Duration::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::One::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous : public ydk::Entity
{
    public:
        Continuous();
        ~Continuous();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Rate; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Location

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate> rate;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate : public ydk::Entity
{
    public:
        Rate();
        ~Rate();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ErrorNumber; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber> > error_number;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber : public ydk::Entity
{
    public:
        ErrorNumber();
        ~ErrorNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_errs; //type: uint32
        class Duration; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber::Duration

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber::Duration> > duration;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber::Duration : public ydk::Entity
{
    public:
        Duration();
        ~Duration();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf num_seconds; //type: uint32
        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber::Duration


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Rate::ErrorNumber::Duration::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Continuous::Location


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Stop : public ydk::Entity
{
    public:
        Stop();
        ~Stop();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Location; //type: Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Stop::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Stop::Location> > location;
        
}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Stop


class Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Stop::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fit_location_name; //type: string

}; // Set::Controller::Asic::Instance::FaultInjection::Module::FaultType::Other::BlockNameLst::Stop::Location

class Controller : public ydk::Entity
{
    public:
        Controller();
        ~Controller();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::shared_ptr<ydk::Entity> clone_ptr() const override;
        ydk::augment_capabilities_function get_augment_capabilities_function() const override;
        std::string get_bundle_yang_models_location() const override;
        std::string get_bundle_name() const override;
        std::map<std::pair<std::string, std::string>, std::string> get_namespace_identity_lookup() const override;

        class Fabric; //type: Controller::Fabric
        class SfeOper; //type: Controller::SfeOper
        class Asic; //type: Controller::Asic
        class Oper; //type: Controller::Oper
        class Zen; //type: Controller::Zen
        class CccDriver; //type: Controller::CccDriver
        class Switch; //type: Controller::Switch
        class FabricAction; //type: Controller::FabricAction

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric> fabric;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper> sfe_oper;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic> > asic;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper> oper;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen> zen;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver> ccc_driver;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch> switch_;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::FabricAction> fabric_action;
        
}; // Controller


class Controller::Fabric : public ydk::Entity
{
    public:
        Fabric();
        ~Fabric();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Fabric_; //type: Controller::Fabric::Fabric_
        class Oper; //type: Controller::Fabric::Oper

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_> fabric;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper> oper;
        
}; // Controller::Fabric


class Controller::Fabric::Fabric_ : public ydk::Entity
{
    public:
        Fabric_();
        ~Fabric_();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Fsdbagg; //type: Controller::Fabric::Fabric_::Fsdbagg
        class Fgid; //type: Controller::Fabric::Fabric_::Fgid

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_::Fsdbagg> fsdbagg;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_::Fgid> fgid;
        
}; // Controller::Fabric::Fabric_


class Controller::Fabric::Fabric_::Fsdbagg : public ydk::Entity
{
    public:
        Fsdbagg();
        ~Fsdbagg();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Plane; //type: Controller::Fabric::Fabric_::Fsdbagg::Plane
        class Link; //type: Controller::Fabric::Fabric_::Fsdbagg::Link

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_::Fsdbagg::Plane> > plane;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_::Fsdbagg::Link> link;
        
}; // Controller::Fabric::Fabric_::Fsdbagg


class Controller::Fabric::Fabric_::Fsdbagg::Plane : public ydk::Entity
{
    public:
        Plane();
        ~Plane();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf plane_id; //type: string
        ydk::YLeaf shutdown; //type: empty
        ydk::YLeaf b2b; //type: empty
        class Instance; //type: Controller::Fabric::Fabric_::Fsdbagg::Plane::Instance
        class InstanceFolded; //type: Controller::Fabric::Fabric_::Fsdbagg::Plane::InstanceFolded

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_::Fsdbagg::Plane::Instance> > instance;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_::Fsdbagg::Plane::InstanceFolded> > instance_folded;
        
}; // Controller::Fabric::Fabric_::Fsdbagg::Plane


class Controller::Fabric::Fabric_::Fsdbagg::Plane::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: int32
        ydk::YLeaf location; //type: string

}; // Controller::Fabric::Fabric_::Fsdbagg::Plane::Instance


class Controller::Fabric::Fabric_::Fsdbagg::Plane::InstanceFolded : public ydk::Entity
{
    public:
        InstanceFolded();
        ~InstanceFolded();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: int32
        ydk::YLeaf location; //type: string

}; // Controller::Fabric::Fabric_::Fsdbagg::Plane::InstanceFolded


class Controller::Fabric::Fabric_::Fsdbagg::Link : public ydk::Entity
{
    public:
        Link();
        ~Link();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Port; //type: Controller::Fabric::Fabric_::Fsdbagg::Link::Port

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_::Fsdbagg::Link::Port> port;
        
}; // Controller::Fabric::Fabric_::Fsdbagg::Link


class Controller::Fabric::Fabric_::Fsdbagg::Link::Port : public ydk::Entity
{
    public:
        Port();
        ~Port();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Fabric::Fabric_::Fsdbagg::Link::Port::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_::Fsdbagg::Link::Port::Location> > location;
        
}; // Controller::Fabric::Fabric_::Fsdbagg::Link::Port


class Controller::Fabric::Fabric_::Fsdbagg::Link::Port::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc_str; //type: string
        ydk::YLeaf shutdown; //type: empty
        ydk::YLeaf maintenance; //type: empty

}; // Controller::Fabric::Fabric_::Fsdbagg::Link::Port::Location


class Controller::Fabric::Fabric_::Fgid : public ydk::Entity
{
    public:
        Fgid();
        ~Fgid();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Resource; //type: Controller::Fabric::Fabric_::Fgid::Resource

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_::Fgid::Resource> resource;
        
}; // Controller::Fabric::Fabric_::Fgid


class Controller::Fabric::Fabric_::Fgid::Resource : public ydk::Entity
{
    public:
        Resource();
        ~Resource();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Sdr; //type: Controller::Fabric::Fabric_::Fgid::Resource::Sdr

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_::Fgid::Resource::Sdr> sdr;
        
}; // Controller::Fabric::Fabric_::Fgid::Resource


class Controller::Fabric::Fabric_::Fgid::Resource::Sdr : public ydk::Entity
{
    public:
        Sdr();
        ~Sdr();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Allocation; //type: Controller::Fabric::Fabric_::Fgid::Resource::Sdr::Allocation

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Fabric_::Fgid::Resource::Sdr::Allocation> allocation;
        
}; // Controller::Fabric::Fabric_::Fgid::Resource::Sdr


class Controller::Fabric::Fabric_::Fgid::Resource::Sdr::Allocation : public ydk::Entity
{
    public:
        Allocation();
        ~Allocation();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf percent; //type: int32

}; // Controller::Fabric::Fabric_::Fgid::Resource::Sdr::Allocation


class Controller::Fabric::Oper : public ydk::Entity
{
    public:
        Oper();
        ~Oper();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Cxp; //type: Controller::Fabric::Oper::Cxp
        class Fgid; //type: Controller::Fabric::Oper::Fgid
        class FsdbaggActive; //type: Controller::Fabric::Oper::FsdbaggActive
        class FsdbaggLink; //type: Controller::Fabric::Oper::FsdbaggLink
        class FsdbaggSfeAsicType; //type: Controller::Fabric::Oper::FsdbaggSfeAsicType
        class FsdbaggStandby; //type: Controller::Fabric::Oper::FsdbaggStandby
        class FabHealth; //type: Controller::Fabric::Oper::FabHealth
        class FsdbAggregator; //type: Controller::Fabric::Oper::FsdbAggregator
        class Link; //type: Controller::Fabric::Oper::Link
        class Sfe; //type: Controller::Fabric::Oper::Sfe
        class FsdbPla; //type: Controller::Fabric::Oper::FsdbPla
        class FsdbSrvr; //type: Controller::Fabric::Oper::FsdbSrvr

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Cxp> cxp;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid> fgid;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive> fsdbagg_active;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggLink> fsdbagg_link;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggSfeAsicType> fsdbagg_sfe_asic_type;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggStandby> fsdbagg_standby;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FabHealth> fab_health;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbAggregator> fsdb_aggregator;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link> link;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe> sfe;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbPla> fsdb_pla;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbSrvr> fsdb_srvr;
        
}; // Controller::Fabric::Oper


class Controller::Fabric::Oper::Cxp : public ydk::Entity
{
    public:
        Cxp();
        ~Cxp();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Dom; //type: Controller::Fabric::Oper::Cxp::Dom
        class Summary; //type: Controller::Fabric::Oper::Cxp::Summary

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Cxp::Dom> dom;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Cxp::Summary> summary;
        
}; // Controller::Fabric::Oper::Cxp


class Controller::Fabric::Oper::Cxp::Dom : public ydk::Entity
{
    public:
        Dom();
        ~Dom();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Fabric::Oper::Cxp::Dom::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Cxp::Dom::Location> > location;
        
}; // Controller::Fabric::Oper::Cxp::Dom


class Controller::Fabric::Oper::Cxp::Dom::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc_str; //type: string
        ydk::YLeaf description; //type: string
        class Port; //type: Controller::Fabric::Oper::Cxp::Dom::Location::Port

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Cxp::Dom::Location::Port> > port;
        
}; // Controller::Fabric::Oper::Cxp::Dom::Location


class Controller::Fabric::Oper::Cxp::Dom::Location::Port : public ydk::Entity
{
    public:
        Port();
        ~Port();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf cxp_port; //type: uint32
        ydk::YLeaf show_port; //type: boolean
        ydk::YLeaf cxp2_display; //type: boolean
        ydk::YLeaf rack_num; //type: uint32
        ydk::YLeaf slot_num; //type: uint32
        ydk::YLeaf cur_loc_str; //type: string
        ydk::YLeaf vendorname; //type: string
        ydk::YLeaf partnumber; //type: string
        ydk::YLeaf serialnumber; //type: string
        ydk::YLeaf vid; //type: string
        ydk::YLeaf pid; //type: string
        ydk::YLeaf vendor_rev_num; //type: uint32
        ydk::YLeaf vendor_pn; //type: string
        ydk::YLeaf vendor_sn; //type: string
        ydk::YLeaf dev_description; //type: string
        ydk::YLeaf clei_code_num; //type: string
        ydk::YLeaf ven_date_code; //type: string
        ydk::YLeaf ven_lot_code; //type: string
        ydk::YLeaf vendor_oui_ieee_company_id; //type: uint32
        ydk::YLeaf eeprom_rev_num; //type: uint32
        ydk::YLeaf firmware_rev_num; //type: uint32
        ydk::YLeaf tx_temp_rd; //type: string
        ydk::YLeaf tx_temp_sts; //type: string
        ydk::YLeaf tx_volt_sts; //type: string
        ydk::YLeaf tx_volt_rd; //type: string
        ydk::YLeaf tx_chn_sts0; //type: string
        ydk::YLeaf tx_chn_sts1; //type: string
        ydk::YLeaf tx_chn_sts2; //type: string
        ydk::YLeaf tx_chn_sts3; //type: string
        ydk::YLeaf tx_chn_sts4; //type: string
        ydk::YLeaf tx_chn_sts5; //type: string
        ydk::YLeaf tx_chn_sts6; //type: string
        ydk::YLeaf tx_chn_sts7; //type: string
        ydk::YLeaf tx_chn_sts8; //type: string
        ydk::YLeaf tx_chn_sts9; //type: string
        ydk::YLeaf tx_chn_sts10; //type: string
        ydk::YLeaf tx_chn_sts11; //type: string
        ydk::YLeaf tx_fault0; //type: string
        ydk::YLeaf tx_fault1; //type: string
        ydk::YLeaf tx_fault2; //type: string
        ydk::YLeaf tx_fault3; //type: string
        ydk::YLeaf tx_fault4; //type: string
        ydk::YLeaf tx_fault5; //type: string
        ydk::YLeaf tx_fault6; //type: string
        ydk::YLeaf tx_fault7; //type: string
        ydk::YLeaf tx_fault8; //type: string
        ydk::YLeaf tx_fault9; //type: string
        ydk::YLeaf tx_fault10; //type: string
        ydk::YLeaf tx_fault11; //type: string
        ydk::YLeaf tx_bias_cur0; //type: string
        ydk::YLeaf tx_bias_cur1; //type: string
        ydk::YLeaf tx_bias_cur2; //type: string
        ydk::YLeaf tx_bias_cur3; //type: string
        ydk::YLeaf tx_bias_cur4; //type: string
        ydk::YLeaf tx_bias_cur5; //type: string
        ydk::YLeaf tx_bias_cur6; //type: string
        ydk::YLeaf tx_bias_cur7; //type: string
        ydk::YLeaf tx_bias_cur8; //type: string
        ydk::YLeaf tx_bias_cur9; //type: string
        ydk::YLeaf tx_bias_cur10; //type: string
        ydk::YLeaf tx_bias_cur11; //type: string
        ydk::YLeaf tx_los0; //type: string
        ydk::YLeaf tx_los1; //type: string
        ydk::YLeaf tx_los2; //type: string
        ydk::YLeaf tx_los3; //type: string
        ydk::YLeaf tx_los4; //type: string
        ydk::YLeaf tx_los5; //type: string
        ydk::YLeaf tx_los6; //type: string
        ydk::YLeaf tx_los7; //type: string
        ydk::YLeaf tx_los8; //type: string
        ydk::YLeaf tx_los9; //type: string
        ydk::YLeaf tx_los10; //type: string
        ydk::YLeaf tx_los11; //type: string
        ydk::YLeaf tx_opt_pw_alm0; //type: string
        ydk::YLeaf tx_opt_pw_alm1; //type: string
        ydk::YLeaf tx_opt_pw_alm2; //type: string
        ydk::YLeaf tx_opt_pw_alm3; //type: string
        ydk::YLeaf tx_opt_pw_alm4; //type: string
        ydk::YLeaf tx_opt_pw_alm5; //type: string
        ydk::YLeaf tx_opt_pw_alm6; //type: string
        ydk::YLeaf tx_opt_pw_alm7; //type: string
        ydk::YLeaf tx_opt_pw_alm8; //type: string
        ydk::YLeaf tx_opt_pw_alm9; //type: string
        ydk::YLeaf tx_opt_pw_alm10; //type: string
        ydk::YLeaf tx_opt_pw_alm11; //type: string
        ydk::YLeaf tx_opt_bs_alm0; //type: string
        ydk::YLeaf tx_opt_bs_alm1; //type: string
        ydk::YLeaf tx_opt_bs_alm2; //type: string
        ydk::YLeaf tx_opt_bs_alm3; //type: string
        ydk::YLeaf tx_opt_bs_alm4; //type: string
        ydk::YLeaf tx_opt_bs_alm5; //type: string
        ydk::YLeaf tx_opt_bs_alm6; //type: string
        ydk::YLeaf tx_opt_bs_alm7; //type: string
        ydk::YLeaf tx_opt_bs_alm8; //type: string
        ydk::YLeaf tx_opt_bs_alm9; //type: string
        ydk::YLeaf tx_opt_bs_alm10; //type: string
        ydk::YLeaf tx_opt_bs_alm11; //type: string
        ydk::YLeaf tx_light_op_dbm0; //type: string
        ydk::YLeaf tx_light_op_dbm1; //type: string
        ydk::YLeaf tx_light_op_dbm2; //type: string
        ydk::YLeaf tx_light_op_dbm3; //type: string
        ydk::YLeaf tx_light_op_dbm4; //type: string
        ydk::YLeaf tx_light_op_dbm5; //type: string
        ydk::YLeaf tx_light_op_dbm6; //type: string
        ydk::YLeaf tx_light_op_dbm7; //type: string
        ydk::YLeaf tx_light_op_dbm8; //type: string
        ydk::YLeaf tx_light_op_dbm9; //type: string
        ydk::YLeaf tx_light_op_dbm10; //type: string
        ydk::YLeaf tx_light_op_dbm11; //type: string
        ydk::YLeaf rx_temp_rd; //type: string
        ydk::YLeaf rx_temp_sts; //type: string
        ydk::YLeaf rx_volt_sts; //type: string
        ydk::YLeaf rx_volt_rd; //type: string
        ydk::YLeaf rx_chn_sts0; //type: string
        ydk::YLeaf rx_chn_sts1; //type: string
        ydk::YLeaf rx_chn_sts2; //type: string
        ydk::YLeaf rx_chn_sts3; //type: string
        ydk::YLeaf rx_chn_sts4; //type: string
        ydk::YLeaf rx_chn_sts5; //type: string
        ydk::YLeaf rx_chn_sts6; //type: string
        ydk::YLeaf rx_chn_sts7; //type: string
        ydk::YLeaf rx_chn_sts8; //type: string
        ydk::YLeaf rx_chn_sts9; //type: string
        ydk::YLeaf rx_chn_sts10; //type: string
        ydk::YLeaf rx_chn_sts11; //type: string
        ydk::YLeaf rx_los0; //type: string
        ydk::YLeaf rx_los1; //type: string
        ydk::YLeaf rx_los2; //type: string
        ydk::YLeaf rx_los3; //type: string
        ydk::YLeaf rx_los4; //type: string
        ydk::YLeaf rx_los5; //type: string
        ydk::YLeaf rx_los6; //type: string
        ydk::YLeaf rx_los7; //type: string
        ydk::YLeaf rx_los8; //type: string
        ydk::YLeaf rx_los9; //type: string
        ydk::YLeaf rx_los10; //type: string
        ydk::YLeaf rx_los11; //type: string
        ydk::YLeaf rx_opt_pw_alm0; //type: string
        ydk::YLeaf rx_opt_pw_alm1; //type: string
        ydk::YLeaf rx_opt_pw_alm2; //type: string
        ydk::YLeaf rx_opt_pw_alm3; //type: string
        ydk::YLeaf rx_opt_pw_alm4; //type: string
        ydk::YLeaf rx_opt_pw_alm5; //type: string
        ydk::YLeaf rx_opt_pw_alm6; //type: string
        ydk::YLeaf rx_opt_pw_alm7; //type: string
        ydk::YLeaf rx_opt_pw_alm8; //type: string
        ydk::YLeaf rx_opt_pw_alm9; //type: string
        ydk::YLeaf rx_opt_pw_alm10; //type: string
        ydk::YLeaf rx_opt_pw_alm11; //type: string
        ydk::YLeaf rx_light_in_dbm0; //type: string
        ydk::YLeaf rx_light_in_dbm1; //type: string
        ydk::YLeaf rx_light_in_dbm2; //type: string
        ydk::YLeaf rx_light_in_dbm3; //type: string
        ydk::YLeaf rx_light_in_dbm4; //type: string
        ydk::YLeaf rx_light_in_dbm5; //type: string
        ydk::YLeaf rx_light_in_dbm6; //type: string
        ydk::YLeaf rx_light_in_dbm7; //type: string
        ydk::YLeaf rx_light_in_dbm8; //type: string
        ydk::YLeaf rx_light_in_dbm9; //type: string
        ydk::YLeaf rx_light_in_dbm10; //type: string
        ydk::YLeaf rx_light_in_dbm11; //type: string

}; // Controller::Fabric::Oper::Cxp::Dom::Location::Port


class Controller::Fabric::Oper::Cxp::Summary : public ydk::Entity
{
    public:
        Summary();
        ~Summary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Rack; //type: Controller::Fabric::Oper::Cxp::Summary::Rack

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Cxp::Summary::Rack> > rack;
        
}; // Controller::Fabric::Oper::Cxp::Summary


class Controller::Fabric::Oper::Cxp::Summary::Rack : public ydk::Entity
{
    public:
        Rack();
        ~Rack();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack_str; //type: string
        ydk::YLeaf description; //type: string
        class SplitTblFlag; //type: Controller::Fabric::Oper::Cxp::Summary::Rack::SplitTblFlag

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Cxp::Summary::Rack::SplitTblFlag> > split_tbl_flag;
        
}; // Controller::Fabric::Oper::Cxp::Summary::Rack


class Controller::Fabric::Oper::Cxp::Summary::Rack::SplitTblFlag : public ydk::Entity
{
    public:
        SplitTblFlag();
        ~SplitTblFlag();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf tbl_splt; //type: uint32
        class SmryPerSlot; //type: Controller::Fabric::Oper::Cxp::Summary::Rack::SplitTblFlag::SmryPerSlot

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Cxp::Summary::Rack::SplitTblFlag::SmryPerSlot> > smry_per_slot;
        
}; // Controller::Fabric::Oper::Cxp::Summary::Rack::SplitTblFlag


class Controller::Fabric::Oper::Cxp::Summary::Rack::SplitTblFlag::SmryPerSlot : public ydk::Entity
{
    public:
        SmryPerSlot();
        ~SmryPerSlot();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf slot_no; //type: uint32
        ydk::YLeaf func_rack_name; //type: string
        ydk::YLeaf max_cxp; //type: uint32
        ydk::YLeaf row_cxp_1; //type: boolean
        ydk::YLeaf row_cxp_2; //type: boolean
        ydk::YLeaf slot_row; //type: boolean
        ydk::YLeaf tbl_splt_flag; //type: boolean
        ydk::YLeaf cxp_port_no; //type: uint32
        ydk::YLeaf fc_loc_str; //type: string
        ydk::YLeaf cxp_sts_0; //type: string
        ydk::YLeaf cxp_sts_1; //type: string
        ydk::YLeaf cxp_sts_2; //type: string
        ydk::YLeaf cxp_sts_3; //type: string
        ydk::YLeaf cxp_sts_4; //type: string
        ydk::YLeaf cxp_sts_5; //type: string
        ydk::YLeaf cxp_sts_6; //type: string
        ydk::YLeaf cxp_sts_7; //type: string
        ydk::YLeaf cxp_sts_8; //type: string
        ydk::YLeaf cxp_sts_9; //type: string
        ydk::YLeaf cxp_sts_10; //type: string
        ydk::YLeaf cxp_sts_11; //type: string
        ydk::YLeaf cxp_sts_12; //type: string
        ydk::YLeaf cxp_sts_13; //type: string
        ydk::YLeaf cxp_sts_14; //type: string
        ydk::YLeaf cxp_sts_15; //type: string

}; // Controller::Fabric::Oper::Cxp::Summary::Rack::SplitTblFlag::SmryPerSlot


class Controller::Fabric::Oper::Fgid : public ydk::Entity
{
    public:
        Fgid();
        ~Fgid();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Information; //type: Controller::Fabric::Oper::Fgid::Information
        class Resource; //type: Controller::Fabric::Oper::Fgid::Resource
        class Statistics; //type: Controller::Fabric::Oper::Fgid::Statistics
        class FgidMgr; //type: Controller::Fabric::Oper::Fgid::FgidMgr
        class ProgramError; //type: Controller::Fabric::Oper::Fgid::ProgramError

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Information> information;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Resource> resource;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics> statistics;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::FgidMgr> fgid_mgr;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::ProgramError> > program_error;
        
}; // Controller::Fabric::Oper::Fgid


class Controller::Fabric::Oper::Fgid::Information : public ydk::Entity
{
    public:
        Information();
        ~Information();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Id; //type: Controller::Fabric::Oper::Fgid::Information::Id

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Information::Id> > id;
        
}; // Controller::Fabric::Oper::Fgid::Information


class Controller::Fabric::Oper::Fgid::Information::Id : public ydk::Entity
{
    public:
        Id();
        ~Id();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf fgid_id; //type: int32
        ydk::YLeaf total_asso_fabricq_ids; //type: int32
        ydk::YLeaf asso_client_info; //type: string
        class HexBitmaps; //type: Controller::Fabric::Oper::Fgid::Information::Id::HexBitmaps
        class BinaryBitmaps; //type: Controller::Fabric::Oper::Fgid::Information::Id::BinaryBitmaps
        class AssoFabricqIds; //type: Controller::Fabric::Oper::Fgid::Information::Id::AssoFabricqIds
        class Drivers; //type: Controller::Fabric::Oper::Fgid::Information::Id::Drivers

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Information::Id::HexBitmaps> > hex_bitmaps;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Information::Id::BinaryBitmaps> > binary_bitmaps;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Information::Id::AssoFabricqIds> > asso_fabricq_ids;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Information::Id::Drivers> > drivers;
        
}; // Controller::Fabric::Oper::Fgid::Information::Id


class Controller::Fabric::Oper::Fgid::Information::Id::HexBitmaps : public ydk::Entity
{
    public:
        HexBitmaps();
        ~HexBitmaps();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack_number; //type: int32
        ydk::YLeaf bitmap; //type: string

}; // Controller::Fabric::Oper::Fgid::Information::Id::HexBitmaps


class Controller::Fabric::Oper::Fgid::Information::Id::BinaryBitmaps : public ydk::Entity
{
    public:
        BinaryBitmaps();
        ~BinaryBitmaps();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack_number; //type: int32
        ydk::YLeaf bitmap; //type: string

}; // Controller::Fabric::Oper::Fgid::Information::Id::BinaryBitmaps


class Controller::Fabric::Oper::Fgid::Information::Id::AssoFabricqIds : public ydk::Entity
{
    public:
        AssoFabricqIds();
        ~AssoFabricqIds();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fabricq_id; //type: string

}; // Controller::Fabric::Oper::Fgid::Information::Id::AssoFabricqIds


class Controller::Fabric::Oper::Fgid::Information::Id::Drivers : public ydk::Entity
{
    public:
        Drivers();
        ~Drivers();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack_number; //type: int32
        class Clients; //type: Controller::Fabric::Oper::Fgid::Information::Id::Drivers::Clients

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Information::Id::Drivers::Clients> > clients;
        
}; // Controller::Fabric::Oper::Fgid::Information::Id::Drivers


class Controller::Fabric::Oper::Fgid::Information::Id::Drivers::Clients : public ydk::Entity
{
    public:
        Clients();
        ~Clients();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf client_idx; //type: int32
        ydk::YLeaf show_asic_0; //type: boolean
        ydk::YLeaf asic_0_bitmap; //type: string
        ydk::YLeaf show_asic_1; //type: boolean
        ydk::YLeaf asic_1_bitmap; //type: string
        ydk::YLeaf show_asic_2; //type: boolean
        ydk::YLeaf asic_2_bitmap; //type: string
        ydk::YLeaf show_asic_3; //type: boolean
        ydk::YLeaf asic_3_bitmap; //type: string
        ydk::YLeaf show_asic_4; //type: boolean
        ydk::YLeaf asic_4_bitmap; //type: string
        ydk::YLeaf show_asic_5; //type: boolean
        ydk::YLeaf asic_5_bitmap; //type: string
        ydk::YLeaf show_asic_6; //type: boolean
        ydk::YLeaf asic_6_bitmap; //type: string
        ydk::YLeaf show_asic_7; //type: boolean
        ydk::YLeaf asic_7_bitmap; //type: string
        ydk::YLeaf show_asic_8; //type: boolean
        ydk::YLeaf asic_8_bitmap; //type: string
        ydk::YLeaf show_asic_9; //type: boolean
        ydk::YLeaf asic_9_bitmap; //type: string
        ydk::YLeaf show_asic_10; //type: boolean
        ydk::YLeaf asic_10_bitmap; //type: string
        ydk::YLeaf show_asic_11; //type: boolean
        ydk::YLeaf asic_11_bitmap; //type: string
        ydk::YLeaf show_asic_12; //type: boolean
        ydk::YLeaf asic_12_bitmap; //type: string
        ydk::YLeaf show_asic_13; //type: boolean
        ydk::YLeaf asic_13_bitmap; //type: string
        ydk::YLeaf show_asic_14; //type: boolean
        ydk::YLeaf asic_14_bitmap; //type: string
        ydk::YLeaf show_asic_15; //type: boolean
        ydk::YLeaf asic_15_bitmap; //type: string
        ydk::YLeaf show_asic_16; //type: boolean
        ydk::YLeaf asic_16_bitmap; //type: string
        ydk::YLeaf show_asic_17; //type: boolean
        ydk::YLeaf asic_17_bitmap; //type: string
        ydk::YLeaf show_asic_18; //type: boolean
        ydk::YLeaf asic_18_bitmap; //type: string
        ydk::YLeaf show_asic_19; //type: boolean
        ydk::YLeaf asic_19_bitmap; //type: string
        ydk::YLeaf show_asic_20; //type: boolean
        ydk::YLeaf asic_20_bitmap; //type: string
        ydk::YLeaf show_asic_21; //type: boolean
        ydk::YLeaf asic_21_bitmap; //type: string
        ydk::YLeaf show_asic_22; //type: boolean
        ydk::YLeaf asic_22_bitmap; //type: string
        ydk::YLeaf show_asic_23; //type: boolean
        ydk::YLeaf asic_23_bitmap; //type: string
        ydk::YLeaf show_asic_24; //type: boolean
        ydk::YLeaf asic_24_bitmap; //type: string
        ydk::YLeaf show_asic_25; //type: boolean
        ydk::YLeaf asic_25_bitmap; //type: string
        ydk::YLeaf show_asic_26; //type: boolean
        ydk::YLeaf asic_26_bitmap; //type: string
        ydk::YLeaf show_asic_27; //type: boolean
        ydk::YLeaf asic_27_bitmap; //type: string
        ydk::YLeaf show_asic_28; //type: boolean
        ydk::YLeaf asic_28_bitmap; //type: string
        ydk::YLeaf show_asic_29; //type: boolean
        ydk::YLeaf asic_29_bitmap; //type: string
        ydk::YLeaf show_asic_30; //type: boolean
        ydk::YLeaf asic_30_bitmap; //type: string
        ydk::YLeaf show_asic_31; //type: boolean
        ydk::YLeaf asic_31_bitmap; //type: string
        ydk::YLeaf show_asic_32; //type: boolean
        ydk::YLeaf asic_32_bitmap; //type: string
        ydk::YLeaf show_asic_33; //type: boolean
        ydk::YLeaf asic_33_bitmap; //type: string
        ydk::YLeaf show_asic_34; //type: boolean
        ydk::YLeaf asic_34_bitmap; //type: string
        ydk::YLeaf show_asic_35; //type: boolean
        ydk::YLeaf asic_35_bitmap; //type: string

}; // Controller::Fabric::Oper::Fgid::Information::Id::Drivers::Clients


class Controller::Fabric::Oper::Fgid::Resource : public ydk::Entity
{
    public:
        Resource();
        ~Resource();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Sdr; //type: Controller::Fabric::Oper::Fgid::Resource::Sdr

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Resource::Sdr> > sdr;
        
}; // Controller::Fabric::Oper::Fgid::Resource


class Controller::Fabric::Oper::Fgid::Resource::Sdr : public ydk::Entity
{
    public:
        Sdr();
        ~Sdr();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf sdr_name; //type: string
        ydk::YLeaf description; //type: string
        class Application; //type: Controller::Fabric::Oper::Fgid::Resource::Sdr::Application

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Resource::Sdr::Application> > application;
        
}; // Controller::Fabric::Oper::Fgid::Resource::Sdr


class Controller::Fabric::Oper::Fgid::Resource::Sdr::Application : public ydk::Entity
{
    public:
        Application();
        ~Application();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf app_name; //type: string
        ydk::YLeaf description; //type: string
        class IdsRange; //type: Controller::Fabric::Oper::Fgid::Resource::Sdr::Application::IdsRange

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Resource::Sdr::Application::IdsRange> > ids_range;
        
}; // Controller::Fabric::Oper::Fgid::Resource::Sdr::Application


class Controller::Fabric::Oper::Fgid::Resource::Sdr::Application::IdsRange : public ydk::Entity
{
    public:
        IdsRange();
        ~IdsRange();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf id; //type: int32
        ydk::YLeaf elements; //type: int32
        class FgidIds; //type: Controller::Fabric::Oper::Fgid::Resource::Sdr::Application::IdsRange::FgidIds

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Resource::Sdr::Application::IdsRange::FgidIds> > fgid_ids;
        
}; // Controller::Fabric::Oper::Fgid::Resource::Sdr::Application::IdsRange


class Controller::Fabric::Oper::Fgid::Resource::Sdr::Application::IdsRange::FgidIds : public ydk::Entity
{
    public:
        FgidIds();
        ~FgidIds();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fgid_id; //type: string
        ydk::YLeaf line_idx; //type: int32
        ydk::YLeaf sdr_name_h; //type: string
        ydk::YLeaf app_name_h; //type: string

}; // Controller::Fabric::Oper::Fgid::Resource::Sdr::Application::IdsRange::FgidIds


class Controller::Fabric::Oper::Fgid::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class All; //type: Controller::Fabric::Oper::Fgid::Statistics::All
        class Sdr; //type: Controller::Fabric::Oper::Fgid::Statistics::Sdr
        class Pool; //type: Controller::Fabric::Oper::Fgid::Statistics::Pool
        class System; //type: Controller::Fabric::Oper::Fgid::Statistics::System

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::All> all;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::Sdr> sdr;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::Pool> pool;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::System> system;
        
}; // Controller::Fabric::Oper::Fgid::Statistics


class Controller::Fabric::Oper::Fgid::Statistics::All : public ydk::Entity
{
    public:
        All();
        ~All();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class StatsList; //type: Controller::Fabric::Oper::Fgid::Statistics::All::StatsList
        class SdrList; //type: Controller::Fabric::Oper::Fgid::Statistics::All::SdrList
        class PoolList; //type: Controller::Fabric::Oper::Fgid::Statistics::All::PoolList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::All::StatsList> > stats_list;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::All::SdrList> > sdr_list;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::All::PoolList> > pool_list;
        
}; // Controller::Fabric::Oper::Fgid::Statistics::All


class Controller::Fabric::Oper::Fgid::Statistics::All::StatsList : public ydk::Entity
{
    public:
        StatsList();
        ~StatsList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf system_stats; //type: int32
        ydk::YLeaf system_total_fgids; //type: uint32
        ydk::YLeaf system_inuse_fgids; //type: uint32
        ydk::YLeaf system_hwm_fgids; //type: uint32

}; // Controller::Fabric::Oper::Fgid::Statistics::All::StatsList


class Controller::Fabric::Oper::Fgid::Statistics::All::SdrList : public ydk::Entity
{
    public:
        SdrList();
        ~SdrList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf sdr_name; //type: string
        ydk::YLeaf description; //type: string
        ydk::YLeaf sdr_total_fgids; //type: uint32
        ydk::YLeaf sdr_inuse_fgids; //type: uint32
        ydk::YLeaf sdr_hwm_fgids; //type: uint32
        class Application; //type: Controller::Fabric::Oper::Fgid::Statistics::All::SdrList::Application

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::All::SdrList::Application> > application;
        
}; // Controller::Fabric::Oper::Fgid::Statistics::All::SdrList


class Controller::Fabric::Oper::Fgid::Statistics::All::SdrList::Application : public ydk::Entity
{
    public:
        Application();
        ~Application();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf app_name; //type: string
        ydk::YLeaf description; //type: string
        ydk::YLeaf app_id; //type: uint32
        ydk::YLeaf pool_id; //type: uint32
        ydk::YLeaf inuse_fgids; //type: uint32
        ydk::YLeaf hwm_fgids; //type: uint32

}; // Controller::Fabric::Oper::Fgid::Statistics::All::SdrList::Application


class Controller::Fabric::Oper::Fgid::Statistics::All::PoolList : public ydk::Entity
{
    public:
        PoolList();
        ~PoolList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf pool_id; //type: uint32
        ydk::YLeaf pool_name; //type: string
        ydk::YLeaf pool_type; //type: string
        ydk::YLeaf start_fgid; //type: string
        ydk::YLeaf total_fgids; //type: uint32
        ydk::YLeaf current_fgids; //type: uint32
        ydk::YLeaf hwm_fgids; //type: uint32

}; // Controller::Fabric::Oper::Fgid::Statistics::All::PoolList


class Controller::Fabric::Oper::Fgid::Statistics::Sdr : public ydk::Entity
{
    public:
        Sdr();
        ~Sdr();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class SdrList; //type: Controller::Fabric::Oper::Fgid::Statistics::Sdr::SdrList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::Sdr::SdrList> > sdr_list;
        
}; // Controller::Fabric::Oper::Fgid::Statistics::Sdr


class Controller::Fabric::Oper::Fgid::Statistics::Sdr::SdrList : public ydk::Entity
{
    public:
        SdrList();
        ~SdrList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf sdr_name; //type: string
        ydk::YLeaf description; //type: string
        ydk::YLeaf sdr_total_fgids; //type: uint32
        ydk::YLeaf sdr_inuse_fgids; //type: uint32
        ydk::YLeaf sdr_hwm_fgids; //type: uint32
        class Application; //type: Controller::Fabric::Oper::Fgid::Statistics::Sdr::SdrList::Application

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::Sdr::SdrList::Application> > application;
        
}; // Controller::Fabric::Oper::Fgid::Statistics::Sdr::SdrList


class Controller::Fabric::Oper::Fgid::Statistics::Sdr::SdrList::Application : public ydk::Entity
{
    public:
        Application();
        ~Application();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf app_name; //type: string
        ydk::YLeaf description; //type: string
        ydk::YLeaf app_id; //type: uint32
        ydk::YLeaf pool_id; //type: uint32
        ydk::YLeaf inuse_fgids; //type: uint32
        ydk::YLeaf hwm_fgids; //type: uint32

}; // Controller::Fabric::Oper::Fgid::Statistics::Sdr::SdrList::Application


class Controller::Fabric::Oper::Fgid::Statistics::Pool : public ydk::Entity
{
    public:
        Pool();
        ~Pool();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class PoolList; //type: Controller::Fabric::Oper::Fgid::Statistics::Pool::PoolList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::Pool::PoolList> > pool_list;
        
}; // Controller::Fabric::Oper::Fgid::Statistics::Pool


class Controller::Fabric::Oper::Fgid::Statistics::Pool::PoolList : public ydk::Entity
{
    public:
        PoolList();
        ~PoolList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf pool_id; //type: uint32
        ydk::YLeaf pool_name; //type: string
        ydk::YLeaf pool_type; //type: string
        ydk::YLeaf start_fgid; //type: string
        ydk::YLeaf total_fgids; //type: uint32
        ydk::YLeaf current_fgids; //type: uint32
        ydk::YLeaf hwm_fgids; //type: uint32

}; // Controller::Fabric::Oper::Fgid::Statistics::Pool::PoolList


class Controller::Fabric::Oper::Fgid::Statistics::System : public ydk::Entity
{
    public:
        System();
        ~System();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class StatsList; //type: Controller::Fabric::Oper::Fgid::Statistics::System::StatsList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::Statistics::System::StatsList> > stats_list;
        
}; // Controller::Fabric::Oper::Fgid::Statistics::System


class Controller::Fabric::Oper::Fgid::Statistics::System::StatsList : public ydk::Entity
{
    public:
        StatsList();
        ~StatsList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf system_stats; //type: int32
        ydk::YLeaf system_total_fgids; //type: uint32
        ydk::YLeaf system_inuse_fgids; //type: uint32
        ydk::YLeaf system_hwm_fgids; //type: uint32

}; // Controller::Fabric::Oper::Fgid::Statistics::System::StatsList


class Controller::Fabric::Oper::Fgid::FgidMgr : public ydk::Entity
{
    public:
        FgidMgr();
        ~FgidMgr();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Trace; //type: Controller::Fabric::Oper::Fgid::FgidMgr::Trace

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::FgidMgr::Trace> > trace;
        
}; // Controller::Fabric::Oper::Fgid::FgidMgr


class Controller::Fabric::Oper::Fgid::FgidMgr::Trace : public ydk::Entity
{
    public:
        Trace();
        ~Trace();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf buffer; //type: string
        class Location; //type: Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location> > location;
        
}; // Controller::Fabric::Oper::Fgid::FgidMgr::Trace


class Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class AllOptions; //type: Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location::AllOptions

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location::AllOptions> > all_options;
        
}; // Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location


class Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location::AllOptions : public ydk::Entity
{
    public:
        AllOptions();
        ~AllOptions();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf option; //type: string
        class TraceBlocks; //type: Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location::AllOptions::TraceBlocks

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location::AllOptions::TraceBlocks> > trace_blocks;
        
}; // Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location::AllOptions


class Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location::AllOptions::TraceBlocks : public ydk::Entity
{
    public:
        TraceBlocks();
        ~TraceBlocks();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf data; //type: string

}; // Controller::Fabric::Oper::Fgid::FgidMgr::Trace::Location::AllOptions::TraceBlocks


class Controller::Fabric::Oper::Fgid::ProgramError : public ydk::Entity
{
    public:
        ProgramError();
        ~ProgramError();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf start; //type: int32
        ydk::YLeaf end; //type: int32
        class Rack; //type: Controller::Fabric::Oper::Fgid::ProgramError::Rack

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Fgid::ProgramError::Rack> > rack;
        
}; // Controller::Fabric::Oper::Fgid::ProgramError


class Controller::Fabric::Oper::Fgid::ProgramError::Rack : public ydk::Entity
{
    public:
        Rack();
        ~Rack();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack_id; //type: int32
        ydk::YLeaf rack_id_str; //type: string
        ydk::YLeaf fgids_in_error; //type: string
        ydk::YLeaf found_fgids_in_error; //type: boolean
        ydk::YLeaf total_error_fgids; //type: int32
        ydk::YLeaf incorrect_fgids_range; //type: boolean
        ydk::YLeaf cmd_not_supported; //type: boolean

}; // Controller::Fabric::Oper::Fgid::ProgramError::Rack


class Controller::Fabric::Oper::FsdbaggActive : public ydk::Entity
{
    public:
        FsdbaggActive();
        ~FsdbaggActive();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Plane; //type: Controller::Fabric::Oper::FsdbaggActive::Plane
        class Bundle; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle
        class Statistics; //type: Controller::Fabric::Oper::FsdbaggActive::Statistics

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Plane> > plane;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle> bundle;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Statistics> statistics;
        
}; // Controller::Fabric::Oper::FsdbaggActive


class Controller::Fabric::Oper::FsdbaggActive::Plane : public ydk::Entity
{
    public:
        Plane();
        ~Plane();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf planeid; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf ucast_oper_state; //type: string
        ydk::YLeaf mcast_oper_state; //type: string
        ydk::YLeaf plane_mode; //type: string
        ydk::YLeaf ucast_cnt_up; //type: int32
        ydk::YLeaf ucast_cnt_some_up; //type: int32
        ydk::YLeaf ucast_cnt_dn; //type: int32
        ydk::YLeaf mcast_cnt_up; //type: int32
        ydk::YLeaf mcast_cnt_some_up; //type: int32
        ydk::YLeaf mcast_cnt_dn; //type: int32
        ydk::YLeaf total_bundles; //type: int32
        ydk::YLeaf down_bundles; //type: int32
        ydk::YLeaf rx_data_cells; //type: uint64
        ydk::YLeaf tx_data_cells; //type: uint64
        ydk::YLeaf rx_ce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_ce_cells; //type: uint64
        ydk::YLeaf rx_uce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_uce_cells; //type: uint64
        ydk::YLeaf rx_pe_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_pe_cells; //type: uint64
        ydk::YLeaf ucast_lost_cells; //type: uint32
        ydk::YLeaf mcast_lost_cells; //type: uint32
        ydk::YLeaf last_clear_ts; //type: string
        ydk::YLeaf last_clear_reason; //type: string
        ydk::YLeaf last_clear_req_ts; //type: string
        ydk::YLeaf last_clear_status; //type: string
        ydk::YLeaf is_asic_internal_error; //type: boolean
        ydk::YLeaf asic_internal_drops; //type: uint64
        ydk::YLeaf asic_location_drops; //type: string
        ydk::YLeaf ppu_state; //type: string
        class AsicInternalError; //type: Controller::Fabric::Oper::FsdbaggActive::Plane::AsicInternalError

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Plane::AsicInternalError> > asic_internal_error;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Plane


class Controller::Fabric::Oper::FsdbaggActive::Plane::AsicInternalError : public ydk::Entity
{
    public:
        AsicInternalError();
        ~AsicInternalError();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_number; //type: int64
        ydk::YLeaf asic_location; //type: string
        ydk::YLeaf link_crc_error; //type: boolean
        ydk::YLeaf link_size_error; //type: boolean
        ydk::YLeaf link_mis_align_error; //type: boolean
        ydk::YLeaf link_code_group_error; //type: boolean
        ydk::YLeaf link_no_sig_lock_error; //type: boolean
        ydk::YLeaf link_no_sign_accept_error; //type: boolean
        ydk::YLeaf link_token_error; //type: boolean
        ydk::YLeaf error_token_count; //type: boolean
        ydk::YLeaf last_asic_internal_error_ts; //type: string

}; // Controller::Fabric::Oper::FsdbaggActive::Plane::AsicInternalError


class Controller::Fabric::Oper::FsdbaggActive::Bundle : public ydk::Entity
{
    public:
        Bundle();
        ~Bundle();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Summary; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Summary
        class All; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::All
        class Port; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port
        class Location; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Location

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Summary> summary;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::All> all;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port> port;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Location> > location;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Summary : public ydk::Entity
{
    public:
        Summary();
        ~Summary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class BundleSummaryList; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Summary::BundleSummaryList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Summary::BundleSummaryList> > bundle_summary_list;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Summary


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Summary::BundleSummaryList : public ydk::Entity
{
    public:
        BundleSummaryList();
        ~BundleSummaryList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf idx; //type: int32
        ydk::YLeaf total_bundles; //type: uint32
        ydk::YLeaf down_bundles; //type: uint32
        ydk::YLeaf bundles_not_connected; //type: uint32
        ydk::YLeaf total_bports; //type: uint32
        ydk::YLeaf down_bports; //type: uint32
        ydk::YLeaf bports_not_connected; //type: uint32

}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Summary::BundleSummaryList


class Controller::Fabric::Oper::FsdbaggActive::Bundle::All : public ydk::Entity
{
    public:
        All();
        ~All();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class BundleAllList; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::All::BundleAllList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::All::BundleAllList> > bundle_all_list;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::All


class Controller::Fabric::Oper::FsdbaggActive::Bundle::All::BundleAllList : public ydk::Entity
{
    public:
        BundleAllList();
        ~BundleAllList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf idx; //type: int64
        ydk::YLeaf bundle_id; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf plane_id; //type: uint32
        ydk::YLeaf total_links; //type: uint32
        ydk::YLeaf down_links; //type: uint32
        ydk::YLeaf bport1; //type: string
        ydk::YLeaf bport2; //type: string

}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::All::BundleAllList


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port : public ydk::Entity
{
    public:
        Port();
        ~Port();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class All; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All
        class Location; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All> all;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location> > location;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All : public ydk::Entity
{
    public:
        All();
        ~All();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class BportAllList; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::BportAllList
        class Statistics; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::BportAllList> > bport_all_list;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics> statistics;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::BportAllList : public ydk::Entity
{
    public:
        BportAllList();
        ~BportAllList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf idx; //type: int64
        ydk::YLeaf bport_id; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf down_flags; //type: string

}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::BportAllList


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class BportStatsAllRacks; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks> > bport_stats_all_racks;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks : public ydk::Entity
{
    public:
        BportStatsAllRacks();
        ~BportStatsAllRacks();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf idx; //type: int32
        ydk::YLeaf total_racks; //type: uint32
        class BportStatsRack; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks::BportStatsRack

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks::BportStatsRack> > bport_stats_rack;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks::BportStatsRack : public ydk::Entity
{
    public:
        BportStatsRack();
        ~BportStatsRack();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf idx; //type: int32
        ydk::YLeaf rack_num_str; //type: string
        class BportStats; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks::BportStatsRack::BportStats

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks::BportStatsRack::BportStats> > bport_stats;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks::BportStatsRack


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks::BportStatsRack::BportStats : public ydk::Entity
{
    public:
        BportStats();
        ~BportStats();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf idx; //type: int64
        ydk::YLeaf bport_id; //type: string
        ydk::YLeaf rx_data_cells; //type: uint64
        ydk::YLeaf tx_data_cells; //type: uint64
        ydk::YLeaf rx_ce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_ce_cells; //type: uint64
        ydk::YLeaf rx_uce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_uce_cells; //type: uint64
        ydk::YLeaf rx_pe_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_pe_cells; //type: uint64
        ydk::YLeaf last_clear_ts; //type: string

}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::All::Statistics::BportStatsAllRacks::BportStatsRack::BportStats


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc_str; //type: string
        class BportAllList; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::BportAllList
        class Statistics; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::BportAllList> > bport_all_list;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics> statistics;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::BportAllList : public ydk::Entity
{
    public:
        BportAllList();
        ~BportAllList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf idx; //type: int64
        ydk::YLeaf bport_id; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf down_flags; //type: string

}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::BportAllList


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class BportStatsAllRacks; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks> > bport_stats_all_racks;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks : public ydk::Entity
{
    public:
        BportStatsAllRacks();
        ~BportStatsAllRacks();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf idx; //type: int32
        ydk::YLeaf total_racks; //type: uint32
        class BportStatsRack; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks::BportStatsRack

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks::BportStatsRack> > bport_stats_rack;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks::BportStatsRack : public ydk::Entity
{
    public:
        BportStatsRack();
        ~BportStatsRack();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf idx; //type: int32
        ydk::YLeaf rack_num_str; //type: string
        class BportStats; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks::BportStatsRack::BportStats

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks::BportStatsRack::BportStats> > bport_stats;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks::BportStatsRack


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks::BportStatsRack::BportStats : public ydk::Entity
{
    public:
        BportStats();
        ~BportStats();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf idx; //type: int64
        ydk::YLeaf bport_id; //type: string
        ydk::YLeaf rx_data_cells; //type: uint64
        ydk::YLeaf tx_data_cells; //type: uint64
        ydk::YLeaf rx_ce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_ce_cells; //type: uint64
        ydk::YLeaf rx_uce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_uce_cells; //type: uint64
        ydk::YLeaf rx_pe_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_pe_cells; //type: uint64
        ydk::YLeaf last_clear_ts; //type: string

}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Port::Location::Statistics::BportStatsAllRacks::BportStatsRack::BportStats


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc_str; //type: string
        class BundleAllList; //type: Controller::Fabric::Oper::FsdbaggActive::Bundle::Location::BundleAllList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Bundle::Location::BundleAllList> > bundle_all_list;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Location


class Controller::Fabric::Oper::FsdbaggActive::Bundle::Location::BundleAllList : public ydk::Entity
{
    public:
        BundleAllList();
        ~BundleAllList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf idx; //type: int64
        ydk::YLeaf bundle_id; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf plane_id; //type: uint32
        ydk::YLeaf total_links; //type: uint32
        ydk::YLeaf down_links; //type: uint32
        ydk::YLeaf bport1; //type: string
        ydk::YLeaf bport2; //type: string

}; // Controller::Fabric::Oper::FsdbaggActive::Bundle::Location::BundleAllList


class Controller::Fabric::Oper::FsdbaggActive::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Plane; //type: Controller::Fabric::Oper::FsdbaggActive::Statistics::Plane

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Statistics::Plane> > plane;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Statistics


class Controller::Fabric::Oper::FsdbaggActive::Statistics::Plane : public ydk::Entity
{
    public:
        Plane();
        ~Plane();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf planeid; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf ucast_oper_state; //type: string
        ydk::YLeaf mcast_oper_state; //type: string
        ydk::YLeaf plane_mode; //type: string
        ydk::YLeaf ucast_cnt_up; //type: int32
        ydk::YLeaf ucast_cnt_some_up; //type: int32
        ydk::YLeaf ucast_cnt_dn; //type: int32
        ydk::YLeaf mcast_cnt_up; //type: int32
        ydk::YLeaf mcast_cnt_some_up; //type: int32
        ydk::YLeaf mcast_cnt_dn; //type: int32
        ydk::YLeaf total_bundles; //type: int32
        ydk::YLeaf down_bundles; //type: int32
        ydk::YLeaf rx_data_cells; //type: uint64
        ydk::YLeaf tx_data_cells; //type: uint64
        ydk::YLeaf rx_ce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_ce_cells; //type: uint64
        ydk::YLeaf rx_uce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_uce_cells; //type: uint64
        ydk::YLeaf rx_pe_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_pe_cells; //type: uint64
        ydk::YLeaf ucast_lost_cells; //type: uint32
        ydk::YLeaf mcast_lost_cells; //type: uint32
        ydk::YLeaf last_clear_ts; //type: string
        ydk::YLeaf last_clear_reason; //type: string
        ydk::YLeaf last_clear_req_ts; //type: string
        ydk::YLeaf last_clear_status; //type: string
        ydk::YLeaf is_asic_internal_error; //type: boolean
        ydk::YLeaf asic_internal_drops; //type: uint64
        ydk::YLeaf asic_location_drops; //type: string
        ydk::YLeaf ppu_state; //type: string
        class AsicInternalError; //type: Controller::Fabric::Oper::FsdbaggActive::Statistics::Plane::AsicInternalError

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggActive::Statistics::Plane::AsicInternalError> > asic_internal_error;
        
}; // Controller::Fabric::Oper::FsdbaggActive::Statistics::Plane


class Controller::Fabric::Oper::FsdbaggActive::Statistics::Plane::AsicInternalError : public ydk::Entity
{
    public:
        AsicInternalError();
        ~AsicInternalError();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_number; //type: int64
        ydk::YLeaf asic_location; //type: string
        ydk::YLeaf link_crc_error; //type: boolean
        ydk::YLeaf link_size_error; //type: boolean
        ydk::YLeaf link_mis_align_error; //type: boolean
        ydk::YLeaf link_code_group_error; //type: boolean
        ydk::YLeaf link_no_sig_lock_error; //type: boolean
        ydk::YLeaf link_no_sign_accept_error; //type: boolean
        ydk::YLeaf link_token_error; //type: boolean
        ydk::YLeaf error_token_count; //type: boolean
        ydk::YLeaf last_asic_internal_error_ts; //type: string

}; // Controller::Fabric::Oper::FsdbaggActive::Statistics::Plane::AsicInternalError


class Controller::Fabric::Oper::FsdbaggLink : public ydk::Entity
{
    public:
        FsdbaggLink();
        ~FsdbaggLink();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Port; //type: Controller::Fabric::Oper::FsdbaggLink::Port

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggLink::Port> > port;
        
}; // Controller::Fabric::Oper::FsdbaggLink


class Controller::Fabric::Oper::FsdbaggLink::Port : public ydk::Entity
{
    public:
        Port();
        ~Port();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf portname; //type: string
        ydk::YLeaf description; //type: string

}; // Controller::Fabric::Oper::FsdbaggLink::Port


class Controller::Fabric::Oper::FsdbaggSfeAsicType : public ydk::Entity
{
    public:
        FsdbaggSfeAsicType();
        ~FsdbaggSfeAsicType();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class AsicTypes; //type: Controller::Fabric::Oper::FsdbaggSfeAsicType::AsicTypes

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggSfeAsicType::AsicTypes> > asic_types;
        
}; // Controller::Fabric::Oper::FsdbaggSfeAsicType


class Controller::Fabric::Oper::FsdbaggSfeAsicType::AsicTypes : public ydk::Entity
{
    public:
        AsicTypes();
        ~AsicTypes();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf asicname; //type: string
        ydk::YLeaf description; //type: string
        class Block; //type: Controller::Fabric::Oper::FsdbaggSfeAsicType::AsicTypes::Block

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggSfeAsicType::AsicTypes::Block> > block;
        
}; // Controller::Fabric::Oper::FsdbaggSfeAsicType::AsicTypes


class Controller::Fabric::Oper::FsdbaggSfeAsicType::AsicTypes::Block : public ydk::Entity
{
    public:
        Block();
        ~Block();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf blockname; //type: string

}; // Controller::Fabric::Oper::FsdbaggSfeAsicType::AsicTypes::Block


class Controller::Fabric::Oper::FsdbaggStandby : public ydk::Entity
{
    public:
        FsdbaggStandby();
        ~FsdbaggStandby();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Plane; //type: Controller::Fabric::Oper::FsdbaggStandby::Plane
        class Statistics; //type: Controller::Fabric::Oper::FsdbaggStandby::Statistics

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggStandby::Plane> > plane;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggStandby::Statistics> statistics;
        
}; // Controller::Fabric::Oper::FsdbaggStandby


class Controller::Fabric::Oper::FsdbaggStandby::Plane : public ydk::Entity
{
    public:
        Plane();
        ~Plane();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf planeid; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf ucast_oper_state; //type: string
        ydk::YLeaf mcast_oper_state; //type: string
        ydk::YLeaf plane_mode; //type: string
        ydk::YLeaf ucast_cnt_up; //type: int32
        ydk::YLeaf ucast_cnt_some_up; //type: int32
        ydk::YLeaf ucast_cnt_dn; //type: int32
        ydk::YLeaf mcast_cnt_up; //type: int32
        ydk::YLeaf mcast_cnt_some_up; //type: int32
        ydk::YLeaf mcast_cnt_dn; //type: int32
        ydk::YLeaf total_bundles; //type: int32
        ydk::YLeaf down_bundles; //type: int32
        ydk::YLeaf rx_data_cells; //type: uint64
        ydk::YLeaf tx_data_cells; //type: uint64
        ydk::YLeaf rx_ce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_ce_cells; //type: uint64
        ydk::YLeaf rx_uce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_uce_cells; //type: uint64
        ydk::YLeaf rx_pe_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_pe_cells; //type: uint64
        ydk::YLeaf ucast_lost_cells; //type: uint32
        ydk::YLeaf mcast_lost_cells; //type: uint32
        ydk::YLeaf last_clear_ts; //type: string
        ydk::YLeaf last_clear_reason; //type: string
        ydk::YLeaf last_clear_req_ts; //type: string
        ydk::YLeaf last_clear_status; //type: string
        ydk::YLeaf is_asic_internal_error; //type: boolean
        ydk::YLeaf asic_internal_drops; //type: uint64
        ydk::YLeaf asic_location_drops; //type: string
        ydk::YLeaf ppu_state; //type: string
        class AsicInternalError; //type: Controller::Fabric::Oper::FsdbaggStandby::Plane::AsicInternalError

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggStandby::Plane::AsicInternalError> > asic_internal_error;
        
}; // Controller::Fabric::Oper::FsdbaggStandby::Plane


class Controller::Fabric::Oper::FsdbaggStandby::Plane::AsicInternalError : public ydk::Entity
{
    public:
        AsicInternalError();
        ~AsicInternalError();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_number; //type: int64
        ydk::YLeaf asic_location; //type: string
        ydk::YLeaf link_crc_error; //type: boolean
        ydk::YLeaf link_size_error; //type: boolean
        ydk::YLeaf link_mis_align_error; //type: boolean
        ydk::YLeaf link_code_group_error; //type: boolean
        ydk::YLeaf link_no_sig_lock_error; //type: boolean
        ydk::YLeaf link_no_sign_accept_error; //type: boolean
        ydk::YLeaf link_token_error; //type: boolean
        ydk::YLeaf error_token_count; //type: boolean
        ydk::YLeaf last_asic_internal_error_ts; //type: string

}; // Controller::Fabric::Oper::FsdbaggStandby::Plane::AsicInternalError


class Controller::Fabric::Oper::FsdbaggStandby::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Plane; //type: Controller::Fabric::Oper::FsdbaggStandby::Statistics::Plane

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggStandby::Statistics::Plane> > plane;
        
}; // Controller::Fabric::Oper::FsdbaggStandby::Statistics


class Controller::Fabric::Oper::FsdbaggStandby::Statistics::Plane : public ydk::Entity
{
    public:
        Plane();
        ~Plane();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf planeid; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf ucast_oper_state; //type: string
        ydk::YLeaf mcast_oper_state; //type: string
        ydk::YLeaf plane_mode; //type: string
        ydk::YLeaf ucast_cnt_up; //type: int32
        ydk::YLeaf ucast_cnt_some_up; //type: int32
        ydk::YLeaf ucast_cnt_dn; //type: int32
        ydk::YLeaf mcast_cnt_up; //type: int32
        ydk::YLeaf mcast_cnt_some_up; //type: int32
        ydk::YLeaf mcast_cnt_dn; //type: int32
        ydk::YLeaf total_bundles; //type: int32
        ydk::YLeaf down_bundles; //type: int32
        ydk::YLeaf rx_data_cells; //type: uint64
        ydk::YLeaf tx_data_cells; //type: uint64
        ydk::YLeaf rx_ce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_ce_cells; //type: uint64
        ydk::YLeaf rx_uce_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_uce_cells; //type: uint64
        ydk::YLeaf rx_pe_cells_is_overflow; //type: boolean
        ydk::YLeaf rx_pe_cells; //type: uint64
        ydk::YLeaf ucast_lost_cells; //type: uint32
        ydk::YLeaf mcast_lost_cells; //type: uint32
        ydk::YLeaf last_clear_ts; //type: string
        ydk::YLeaf last_clear_reason; //type: string
        ydk::YLeaf last_clear_req_ts; //type: string
        ydk::YLeaf last_clear_status; //type: string
        ydk::YLeaf is_asic_internal_error; //type: boolean
        ydk::YLeaf asic_internal_drops; //type: uint64
        ydk::YLeaf asic_location_drops; //type: string
        ydk::YLeaf ppu_state; //type: string
        class AsicInternalError; //type: Controller::Fabric::Oper::FsdbaggStandby::Statistics::Plane::AsicInternalError

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbaggStandby::Statistics::Plane::AsicInternalError> > asic_internal_error;
        
}; // Controller::Fabric::Oper::FsdbaggStandby::Statistics::Plane


class Controller::Fabric::Oper::FsdbaggStandby::Statistics::Plane::AsicInternalError : public ydk::Entity
{
    public:
        AsicInternalError();
        ~AsicInternalError();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_number; //type: int64
        ydk::YLeaf asic_location; //type: string
        ydk::YLeaf link_crc_error; //type: boolean
        ydk::YLeaf link_size_error; //type: boolean
        ydk::YLeaf link_mis_align_error; //type: boolean
        ydk::YLeaf link_code_group_error; //type: boolean
        ydk::YLeaf link_no_sig_lock_error; //type: boolean
        ydk::YLeaf link_no_sign_accept_error; //type: boolean
        ydk::YLeaf link_token_error; //type: boolean
        ydk::YLeaf error_token_count; //type: boolean
        ydk::YLeaf last_asic_internal_error_ts; //type: string

}; // Controller::Fabric::Oper::FsdbaggStandby::Statistics::Plane::AsicInternalError


class Controller::Fabric::Oper::FabHealth : public ydk::Entity
{
    public:
        FabHealth();
        ~FabHealth();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class SysInfoList; //type: Controller::Fabric::Oper::FabHealth::SysInfoList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FabHealth::SysInfoList> > sys_info_list;
        
}; // Controller::Fabric::Oper::FabHealth


class Controller::Fabric::Oper::FabHealth::SysInfoList : public ydk::Entity
{
    public:
        SysInfoList();
        ~SysInfoList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf index_key; //type: int32
        ydk::YLeaf aggr_status; //type: boolean
        ydk::YLeaf available_rack_ids; //type: string
        ydk::YLeaf rack_id_separator; //type: string
        ydk::YLeaf available_fm_loc; //type: string
        ydk::YLeaf fm_loc_separator; //type: string
        ydk::YLeaf rack_total; //type: uint32
        ydk::YLeaf rack_lcc; //type: uint32
        ydk::YLeaf rack_fcc; //type: uint32
        ydk::YLeaf plane_up; //type: uint32
        ydk::YLeaf plane_dn; //type: uint32
        ydk::YLeaf plane_mcast_dn; //type: uint32
        ydk::YLeaf plane_admin_dn; //type: uint32
        ydk::YLeaf show_sys_plane_detail; //type: boolean
        ydk::YLeaf sfe_asics_total; //type: uint32
        ydk::YLeaf sfe_asics_up; //type: uint32
        ydk::YLeaf sfe_asics_dn; //type: uint32
        ydk::YLeaf fia_asics_total; //type: uint32
        ydk::YLeaf fia_asics_up; //type: uint32
        ydk::YLeaf fia_asics_dn; //type: uint32
        class SysPlaneInfoList; //type: Controller::Fabric::Oper::FabHealth::SysInfoList::SysPlaneInfoList
        class RackInfoList; //type: Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList
        class FsdbStatus; //type: Controller::Fabric::Oper::FabHealth::SysInfoList::FsdbStatus
        class SfeStatus; //type: Controller::Fabric::Oper::FabHealth::SysInfoList::SfeStatus
        class SfeDrvrLoc; //type: Controller::Fabric::Oper::FabHealth::SysInfoList::SfeDrvrLoc
        class SfeFmSep; //type: Controller::Fabric::Oper::FabHealth::SysInfoList::SfeFmSep

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FabHealth::SysInfoList::SysPlaneInfoList> > sys_plane_info_list;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList> > rack_info_list;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FabHealth::SysInfoList::FsdbStatus> > fsdb_status;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FabHealth::SysInfoList::SfeStatus> > sfe_status;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FabHealth::SysInfoList::SfeDrvrLoc> > sfe_drvr_loc;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FabHealth::SysInfoList::SfeFmSep> > sfe_fm_sep;
        
}; // Controller::Fabric::Oper::FabHealth::SysInfoList


class Controller::Fabric::Oper::FabHealth::SysInfoList::SysPlaneInfoList : public ydk::Entity
{
    public:
        SysPlaneInfoList();
        ~SysPlaneInfoList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf plane_id; //type: int32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf plane_state; //type: string
        ydk::YLeaf plane_mode; //type: string
        ydk::YLeaf racks_w_plane_fault; //type: int32
        ydk::YLeaf is_data_drop; //type: boolean

}; // Controller::Fabric::Oper::FabHealth::SysInfoList::SysPlaneInfoList


class Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList : public ydk::Entity
{
    public:
        RackInfoList();
        ~RackInfoList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack_id; //type: int32
        ydk::YLeaf rack_name; //type: string
        ydk::YLeaf rack_type; //type: string
        ydk::YLeaf sfe_asics_total; //type: int32
        ydk::YLeaf sfe_asics_up; //type: int32
        ydk::YLeaf sfe_asics_dn; //type: int32
        ydk::YLeaf fia_asics_total; //type: int32
        ydk::YLeaf fia_asics_up; //type: int32
        ydk::YLeaf fia_asics_dn; //type: int32
        ydk::YLeaf plane_up; //type: uint32
        ydk::YLeaf plane_dn; //type: uint32
        ydk::YLeaf plane_mcast_dn; //type: uint32
        ydk::YLeaf plane_admin_dn; //type: uint32
        ydk::YLeaf show_rack_plane_detail; //type: boolean
        ydk::YLeaf amba_valid; //type: int32
        class RackPlaneInfoList; //type: Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList::RackPlaneInfoList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList::RackPlaneInfoList> > rack_plane_info_list;
        
}; // Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList


class Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList::RackPlaneInfoList : public ydk::Entity
{
    public:
        RackPlaneInfoList();
        ~RackPlaneInfoList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf plane_id; //type: int32
        ydk::YLeaf plane_state; //type: string
        ydk::YLeaf plane_mode; //type: string
        ydk::YLeaf asics_total; //type: int32
        ydk::YLeaf asics_up; //type: int32
        ydk::YLeaf asics_dn; //type: int32
        class ReachableAmba; //type: Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList::RackPlaneInfoList::ReachableAmba

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList::RackPlaneInfoList::ReachableAmba> > reachable_amba;
        
}; // Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList::RackPlaneInfoList


class Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList::RackPlaneInfoList::ReachableAmba : public ydk::Entity
{
    public:
        ReachableAmba();
        ~ReachableAmba();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf idx; //type: int32
        ydk::YLeaf num_reachable; //type: int32

}; // Controller::Fabric::Oper::FabHealth::SysInfoList::RackInfoList::RackPlaneInfoList::ReachableAmba


class Controller::Fabric::Oper::FabHealth::SysInfoList::FsdbStatus : public ydk::Entity
{
    public:
        FsdbStatus();
        ~FsdbStatus();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack_id; //type: int32
        ydk::YLeaf status; //type: boolean

}; // Controller::Fabric::Oper::FabHealth::SysInfoList::FsdbStatus


class Controller::Fabric::Oper::FabHealth::SysInfoList::SfeStatus : public ydk::Entity
{
    public:
        SfeStatus();
        ~SfeStatus();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack_id; //type: int32
        ydk::YLeaf status; //type: boolean

}; // Controller::Fabric::Oper::FabHealth::SysInfoList::SfeStatus


class Controller::Fabric::Oper::FabHealth::SysInfoList::SfeDrvrLoc : public ydk::Entity
{
    public:
        SfeDrvrLoc();
        ~SfeDrvrLoc();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf loc_str; //type: string

}; // Controller::Fabric::Oper::FabHealth::SysInfoList::SfeDrvrLoc


class Controller::Fabric::Oper::FabHealth::SysInfoList::SfeFmSep : public ydk::Entity
{
    public:
        SfeFmSep();
        ~SfeFmSep();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf loc_str; //type: string

}; // Controller::Fabric::Oper::FabHealth::SysInfoList::SfeFmSep


class Controller::Fabric::Oper::FsdbAggregator : public ydk::Entity
{
    public:
        FsdbAggregator();
        ~FsdbAggregator();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Fsdbagg; //type: Controller::Fabric::Oper::FsdbAggregator::Fsdbagg

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbAggregator::Fsdbagg> fsdbagg;
        
}; // Controller::Fabric::Oper::FsdbAggregator


class Controller::Fabric::Oper::FsdbAggregator::Fsdbagg : public ydk::Entity
{
    public:
        Fsdbagg();
        ~Fsdbagg();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Trace; //type: Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace> > trace;
        
}; // Controller::Fabric::Oper::FsdbAggregator::Fsdbagg


class Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace : public ydk::Entity
{
    public:
        Trace();
        ~Trace();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf buffer; //type: string
        class Location; //type: Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location> > location;
        
}; // Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace


class Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class AllOptions; //type: Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location::AllOptions

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location::AllOptions> > all_options;
        
}; // Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location


class Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location::AllOptions : public ydk::Entity
{
    public:
        AllOptions();
        ~AllOptions();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf option; //type: string
        class TraceBlocks; //type: Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location::AllOptions::TraceBlocks

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location::AllOptions::TraceBlocks> > trace_blocks;
        
}; // Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location::AllOptions


class Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location::AllOptions::TraceBlocks : public ydk::Entity
{
    public:
        TraceBlocks();
        ~TraceBlocks();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf data; //type: string

}; // Controller::Fabric::Oper::FsdbAggregator::Fsdbagg::Trace::Location::AllOptions::TraceBlocks


class Controller::Fabric::Oper::Link : public ydk::Entity
{
    public:
        Link();
        ~Link();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Rack; //type: Controller::Fabric::Oper::Link::Rack
        class NodeLocation; //type: Controller::Fabric::Oper::Link::NodeLocation

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack> > rack;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::NodeLocation> > node_location;
        
}; // Controller::Fabric::Oper::Link


class Controller::Fabric::Oper::Link::Rack : public ydk::Entity
{
    public:
        Rack();
        ~Rack();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack_number; //type: int32
        class Port; //type: Controller::Fabric::Oper::Link::Rack::Port

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port> > port;
        
}; // Controller::Fabric::Oper::Link::Rack


class Controller::Fabric::Oper::Link::Rack::Port : public ydk::Entity
{
    public:
        Port();
        ~Port();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf portname; //type: string
        ydk::YLeaf description; //type: string
        class Location; //type: Controller::Fabric::Oper::Link::Rack::Port::Location
        class Rx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx
        class Tx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location> > location;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx> rx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx> tx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port


class Controller::Fabric::Oper::Link::Rack::Port::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf loc_str; //type: string
        class Rx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx
        class Tx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx> rx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx> tx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx : public ydk::Entity
{
    public:
        Rx();
        ~Rx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail
        class State; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State
        class Statistics; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail> detail;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State> state;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics> statistics;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State : public ydk::Entity
{
    public:
        State();
        ~State();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Up; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up
        class Down; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down
        class Er; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er
        class Mismatch; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up> up;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down> down;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er> er;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch> mismatch;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up : public ydk::Entity
{
    public:
        Up();
        ~Up();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Up::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down : public ydk::Entity
{
    public:
        Down();
        ~Down();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Down::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er : public ydk::Entity
{
    public:
        Er();
        ~Er();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Er::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch : public ydk::Entity
{
    public:
        Mismatch();
        ~Mismatch();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::State::Mismatch::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Rx::Statistics::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx : public ydk::Entity
{
    public:
        Tx();
        ~Tx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail
        class State; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State
        class Statistics; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail> detail;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State> state;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics> statistics;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State : public ydk::Entity
{
    public:
        State();
        ~State();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Up; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up
        class Down; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down
        class Er; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er
        class Mismatch; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up> up;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down> down;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er> er;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch> mismatch;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up : public ydk::Entity
{
    public:
        Up();
        ~Up();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Up::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down : public ydk::Entity
{
    public:
        Down();
        ~Down();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Down::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er : public ydk::Entity
{
    public:
        Er();
        ~Er();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Er::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch : public ydk::Entity
{
    public:
        Mismatch();
        ~Mismatch();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::State::Mismatch::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Location::Tx::Statistics::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx : public ydk::Entity
{
    public:
        Rx();
        ~Rx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail
        class State; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State
        class Statistics; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail> detail;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State> state;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics> statistics;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State : public ydk::Entity
{
    public:
        State();
        ~State();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Up; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up
        class Down; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down
        class Er; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er
        class Mismatch; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up> up;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down> down;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er> er;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch> mismatch;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up : public ydk::Entity
{
    public:
        Up();
        ~Up();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Up::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down : public ydk::Entity
{
    public:
        Down();
        ~Down();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Down::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er : public ydk::Entity
{
    public:
        Er();
        ~Er();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Er::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch : public ydk::Entity
{
    public:
        Mismatch();
        ~Mismatch();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::State::Mismatch::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Rx::Statistics::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx : public ydk::Entity
{
    public:
        Tx();
        ~Tx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail
        class State; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State
        class Statistics; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail> detail;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State> state;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics> statistics;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State : public ydk::Entity
{
    public:
        State();
        ~State();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Up; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up
        class Down; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down
        class Er; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er
        class Mismatch; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up> up;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down> down;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er> er;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch> mismatch;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up : public ydk::Entity
{
    public:
        Up();
        ~Up();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Up::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down : public ydk::Entity
{
    public:
        Down();
        ~Down();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Down::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er : public ydk::Entity
{
    public:
        Er();
        ~Er();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Er::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch : public ydk::Entity
{
    public:
        Mismatch();
        ~Mismatch();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Brief::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf near_end_cdr_ln; //type: string
        ydk::YLeaf near_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cxp_ch; //type: string
        ydk::YLeaf far_end_cdr_ln; //type: string
        ydk::YLeaf neighbor_link; //type: string
        class History; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail::DataIdx::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail::DataIdx::History> > history;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail::DataIdx::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::State::Mismatch::Detail::DataIdx::History


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::DataIdx
        class Brief; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Brief
        class Detail; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::DataIdx> > data_idx;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Detail> detail;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Brief::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Brief::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Brief


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Brief::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Brief::DataIdx


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class DataIdx; //type: Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Detail::DataIdx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Detail::DataIdx> > data_idx;
        
}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Detail


class Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Detail::DataIdx : public ydk::Entity
{
    public:
        DataIdx();
        ~DataIdx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_data_idx; //type: int64
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf sfe_port; //type: string
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_8b_10b_disparity_errors; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_8b_10b_code_errors; //type: uint64
        ydk::YLeaf is_link_error; //type: boolean
        ydk::YLeaf link_crc_error; //type: uint32
        ydk::YLeaf link_size_error; //type: uint32
        ydk::YLeaf link_mis_align_error; //type: uint32
        ydk::YLeaf link_code_group_error; //type: uint32
        ydk::YLeaf link_no_sig_lock_error; //type: uint32
        ydk::YLeaf link_no_sig_accept_error; //type: uint32
        ydk::YLeaf link_tokens_error; //type: uint32
        ydk::YLeaf error_token_count; //type: uint32

}; // Controller::Fabric::Oper::Link::Rack::Port::Tx::Statistics::Detail::DataIdx


class Controller::Fabric::Oper::Link::NodeLocation : public ydk::Entity
{
    public:
        NodeLocation();
        ~NodeLocation();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf node_str; //type: string

}; // Controller::Fabric::Oper::Link::NodeLocation


class Controller::Fabric::Oper::Sfe : public ydk::Entity
{
    public:
        Sfe();
        ~Sfe();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Rack; //type: Controller::Fabric::Oper::Sfe::Rack

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack> > rack;
        
}; // Controller::Fabric::Oper::Sfe


class Controller::Fabric::Oper::Sfe::Rack : public ydk::Entity
{
    public:
        Rack();
        ~Rack();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack_number; //type: int32
        class AsicStages; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages> > asic_stages;
        
}; // Controller::Fabric::Oper::Sfe::Rack


class Controller::Fabric::Oper::Sfe::Rack::AsicStages : public ydk::Entity
{
    public:
        AsicStages();
        ~AsicStages();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_stage_name; //type: string
        class Location; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location
        class AsicList; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::AsicList
        class Brief; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief
        class Detail; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location> > location;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::AsicList> > asic_list;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail> detail;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf loc_str; //type: string
        class AsicList; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::AsicList
        class Brief; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief
        class Detail; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::AsicList> > asic_list;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail> detail;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::AsicList : public ydk::Entity
{
    public:
        AsicList();
        ~AsicList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_idx; //type: int64
        ydk::YLeaf asic_loc_str; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf down_flags; //type: string
        ydk::YLeaf fab_group; //type: string
        class History; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::AsicList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::AsicList::History> > history;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::AsicList


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::AsicList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::AsicList::History


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class AsicList; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief::AsicList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief::AsicList> > asic_list;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief::AsicList : public ydk::Entity
{
    public:
        AsicList();
        ~AsicList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_idx; //type: int64
        ydk::YLeaf asic_loc_str; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf down_flags; //type: string
        ydk::YLeaf fab_group; //type: string
        class History; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief::AsicList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief::AsicList::History> > history;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief::AsicList


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief::AsicList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Brief::AsicList::History


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class AsicList; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail::AsicList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail::AsicList> > asic_list;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail::AsicList : public ydk::Entity
{
    public:
        AsicList();
        ~AsicList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_idx; //type: int64
        ydk::YLeaf asic_loc_str; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf down_flags; //type: string
        ydk::YLeaf fab_group; //type: string
        class History; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail::AsicList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail::AsicList::History> > history;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail::AsicList


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail::AsicList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Location::Detail::AsicList::History


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::AsicList : public ydk::Entity
{
    public:
        AsicList();
        ~AsicList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_idx; //type: int64
        ydk::YLeaf asic_loc_str; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf down_flags; //type: string
        ydk::YLeaf fab_group; //type: string
        class History; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::AsicList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::AsicList::History> > history;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::AsicList


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::AsicList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::AsicList::History


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class AsicList; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief::AsicList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief::AsicList> > asic_list;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief::AsicList : public ydk::Entity
{
    public:
        AsicList();
        ~AsicList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_idx; //type: int64
        ydk::YLeaf asic_loc_str; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf down_flags; //type: string
        ydk::YLeaf fab_group; //type: string
        class History; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief::AsicList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief::AsicList::History> > history;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief::AsicList


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief::AsicList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Brief::AsicList::History


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class AsicList; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail::AsicList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail::AsicList> > asic_list;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail::AsicList : public ydk::Entity
{
    public:
        AsicList();
        ~AsicList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_idx; //type: int64
        ydk::YLeaf asic_loc_str; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf down_flags; //type: string
        ydk::YLeaf fab_group; //type: string
        class History; //type: Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail::AsicList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail::AsicList::History> > history;
        
}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail::AsicList


class Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail::AsicList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string

}; // Controller::Fabric::Oper::Sfe::Rack::AsicStages::Detail::AsicList::History


class Controller::Fabric::Oper::FsdbPla : public ydk::Entity
{
    public:
        FsdbPla();
        ~FsdbPla();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Rack; //type: Controller::Fabric::Oper::FsdbPla::Rack

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbPla::Rack> > rack;
        
}; // Controller::Fabric::Oper::FsdbPla


class Controller::Fabric::Oper::FsdbPla::Rack : public ydk::Entity
{
    public:
        Rack();
        ~Rack();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack_number; //type: int32
        class AsicStages; //type: Controller::Fabric::Oper::FsdbPla::Rack::AsicStages

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbPla::Rack::AsicStages> > asic_stages;
        
}; // Controller::Fabric::Oper::FsdbPla::Rack


class Controller::Fabric::Oper::FsdbPla::Rack::AsicStages : public ydk::Entity
{
    public:
        AsicStages();
        ~AsicStages();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_stage_idx; //type: string
        ydk::YLeaf asic_stage_name; //type: string
        ydk::YLeaf rack_number; //type: string
        ydk::YLeaf plane_number; //type: int32
        class Fabids; //type: Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Fabids
        class DownFabids; //type: Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::DownFabids
        class Destination; //type: Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Fabids> > fabids;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::DownFabids> > down_fabids;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination> > destination;
        
}; // Controller::Fabric::Oper::FsdbPla::Rack::AsicStages


class Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Fabids : public ydk::Entity
{
    public:
        Fabids();
        ~Fabids();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf idx; //type: int32
        ydk::YLeaf fabid_address; //type: string
        ydk::YLeaf plane_num; //type: int32
        ydk::YLeaf plane_0_mask; //type: string
        ydk::YLeaf plane_1_mask; //type: string
        ydk::YLeaf plane_2_mask; //type: string
        ydk::YLeaf plane_3_mask; //type: string
        ydk::YLeaf plane_4_mask; //type: string
        ydk::YLeaf plane_5_mask; //type: string
        ydk::YLeaf min_links_per_asic; //type: int32
        ydk::YLeaf max_links_per_asic; //type: int32
        ydk::YLeaf total_links; //type: int32
        ydk::YLeaf min_up_links_per_asic; //type: int32
        ydk::YLeaf max_up_links_per_asic; //type: int32
        ydk::YLeaf total_up_links; //type: int32

}; // Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Fabids


class Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::DownFabids : public ydk::Entity
{
    public:
        DownFabids();
        ~DownFabids();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf idx; //type: int32
        ydk::YLeaf fabid_address; //type: string
        ydk::YLeaf fabid_status; //type: string

}; // Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::DownFabids


class Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination : public ydk::Entity
{
    public:
        Destination();
        ~Destination();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf amba_id; //type: string
        class Planes; //type: Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes> > planes;
        
}; // Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination


class Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes : public ydk::Entity
{
    public:
        Planes();
        ~Planes();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf plane_idx; //type: int32
        ydk::YLeaf plane_num; //type: int32
        ydk::YLeaf fabid_name; //type: string
        ydk::YLeaf show_fabid; //type: boolean
        ydk::YLeaf asic_stage; //type: string
        class Cards; //type: Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes::Cards

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes::Cards> > cards;
        
}; // Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes


class Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes::Cards : public ydk::Entity
{
    public:
        Cards();
        ~Cards();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf card_idx; //type: int32
        class Asics; //type: Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes::Cards::Asics

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes::Cards::Asics> > asics;
        
}; // Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes::Cards


class Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes::Cards::Asics : public ydk::Entity
{
    public:
        Asics();
        ~Asics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_idx; //type: int32
        ydk::YLeaf asic_rsa; //type: string
        ydk::YLeaf reachability_mask; //type: string
        ydk::YLeaf linkup_mask; //type: string
        ydk::YLeaf all_reach_mask; //type: string
        ydk::YLeaf total_links; //type: int32
        ydk::YLeaf total_up_links; //type: int32
        ydk::YLeaf total_all_reach_links; //type: int32
        ydk::YLeaf asic_stage_name; //type: string

}; // Controller::Fabric::Oper::FsdbPla::Rack::AsicStages::Destination::Planes::Cards::Asics


class Controller::Fabric::Oper::FsdbSrvr : public ydk::Entity
{
    public:
        FsdbSrvr();
        ~FsdbSrvr();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class FsdbServer; //type: Controller::Fabric::Oper::FsdbSrvr::FsdbServer

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbSrvr::FsdbServer> fsdb_server;
        
}; // Controller::Fabric::Oper::FsdbSrvr


class Controller::Fabric::Oper::FsdbSrvr::FsdbServer : public ydk::Entity
{
    public:
        FsdbServer();
        ~FsdbServer();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Trace; //type: Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace> > trace;
        
}; // Controller::Fabric::Oper::FsdbSrvr::FsdbServer


class Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace : public ydk::Entity
{
    public:
        Trace();
        ~Trace();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf buffer; //type: string
        class Location; //type: Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location> > location;
        
}; // Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace


class Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class AllOptions; //type: Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location::AllOptions

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location::AllOptions> > all_options;
        
}; // Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location


class Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location::AllOptions : public ydk::Entity
{
    public:
        AllOptions();
        ~AllOptions();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf option; //type: string
        class TraceBlocks; //type: Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location::AllOptions::TraceBlocks

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location::AllOptions::TraceBlocks> > trace_blocks;
        
}; // Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location::AllOptions


class Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location::AllOptions::TraceBlocks : public ydk::Entity
{
    public:
        TraceBlocks();
        ~TraceBlocks();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf data; //type: string

}; // Controller::Fabric::Oper::FsdbSrvr::FsdbServer::Trace::Location::AllOptions::TraceBlocks


class Controller::SfeOper : public ydk::Entity
{
    public:
        SfeOper();
        ~SfeOper();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Sfe; //type: Controller::SfeOper::Sfe
        class SfeTrace; //type: Controller::SfeOper::SfeTrace

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe> sfe;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::SfeTrace> sfe_trace;
        
}; // Controller::SfeOper


class Controller::SfeOper::Sfe : public ydk::Entity
{
    public:
        Sfe();
        ~Sfe();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Driver; //type: Controller::SfeOper::Sfe::Driver
        class Statistics; //type: Controller::SfeOper::Sfe::Statistics
        class LinkInfo; //type: Controller::SfeOper::Sfe::LinkInfo
        class Diagshell; //type: Controller::SfeOper::Sfe::Diagshell
        class Register; //type: Controller::SfeOper::Sfe::Register
        class DumpFile; //type: Controller::SfeOper::Sfe::DumpFile
        class Parse; //type: Controller::SfeOper::Sfe::Parse

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Driver> driver;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics> statistics;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo> link_info;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Diagshell> diagshell;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Register> register_;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::DumpFile> dump_file;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Parse> parse;
        
}; // Controller::SfeOper::Sfe


class Controller::SfeOper::Sfe::Driver : public ydk::Entity
{
    public:
        Driver();
        ~Driver();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Rack; //type: Controller::SfeOper::Sfe::Driver::Rack

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Driver::Rack> > rack;
        
}; // Controller::SfeOper::Sfe::Driver


class Controller::SfeOper::Sfe::Driver::Rack : public ydk::Entity
{
    public:
        Rack();
        ~Rack();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf description; //type: string
        class DrvrInfo; //type: Controller::SfeOper::Sfe::Driver::Rack::DrvrInfo

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Driver::Rack::DrvrInfo> > drvr_info;
        
}; // Controller::SfeOper::Sfe::Driver::Rack


class Controller::SfeOper::Sfe::Driver::Rack::DrvrInfo : public ydk::Entity
{
    public:
        DrvrInfo();
        ~DrvrInfo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf idx; //type: int32
        ydk::YLeaf drv_version; //type: uint32
        ydk::YLeaf coeff_major_rev; //type: uint32
        ydk::YLeaf coeff_minor_rev; //type: uint32
        ydk::YLeaf func_role; //type: string
        ydk::YLeaf issu_role; //type: string
        ydk::YLeaf rack_name; //type: string
        ydk::YLeaf rack_type; //type: string
        ydk::YLeaf rack_num; //type: string
        ydk::YLeaf ip_address; //type: string
        ydk::YLeaf card_avail_mask; //type: uint32
        ydk::YLeaf asic_avail_mask; //type: uint64
        ydk::YLeaf exp_asic_avail_mask; //type: uint64
        ydk::YLeaf ucmc_ratio; //type: uint32
        ydk::YLeaf pm_conn_active; //type: boolean
        ydk::YLeaf platform_local_conn_active; //type: boolean
        ydk::YLeaf fsdb_conn_active; //type: boolean
        ydk::YLeaf fgid_conn_active; //type: boolean
        ydk::YLeaf cm_conn_active; //type: boolean
        ydk::YLeaf ccc_conn_active; //type: boolean
        ydk::YLeaf issu_mgr_conn_active; //type: boolean
        ydk::YLeaf peer_sfe_conn_active; //type: boolean
        ydk::YLeaf cxp_conn_active; //type: boolean
        ydk::YLeaf pm_reg_active; //type: boolean
        ydk::YLeaf platform_local_reg_active; //type: boolean
        ydk::YLeaf fsdb_reg_active; //type: boolean
        ydk::YLeaf fgid_reg_active; //type: boolean
        ydk::YLeaf cm_reg_active; //type: boolean
        ydk::YLeaf issu_mgr_reg_active; //type: boolean
        ydk::YLeaf peer_sfe_reg_active; //type: boolean
        ydk::YLeaf cxp_reg_active; //type: boolean
        ydk::YLeaf num_pm_conn_reqs; //type: uint8
        ydk::YLeaf num_platform_local_conn_reqs; //type: uint8
        ydk::YLeaf num_fsdb_conn_reqs; //type: uint8
        ydk::YLeaf num_fgid_conn_reqs; //type: uint8
        ydk::YLeaf num_fstats_conn_reqs; //type: uint8
        ydk::YLeaf num_cm_conn_reqs; //type: uint8
        ydk::YLeaf num_ccc_conn_reqs; //type: uint8
        ydk::YLeaf num_issu_mgr_conn_reqs; //type: uint8
        ydk::YLeaf num_peer_sfe_conn_reqs; //type: uint8
        ydk::YLeaf num_cxp_conn_reqs; //type: uint8
        ydk::YLeaf is_gaspp_registered; //type: boolean
        ydk::YLeaf is_cih_registered; //type: boolean
        ydk::YLeaf startup_time; //type: string
        class AsicList; //type: Controller::SfeOper::Sfe::Driver::Rack::DrvrInfo::AsicList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Driver::Rack::DrvrInfo::AsicList> > asic_list;
        
}; // Controller::SfeOper::Sfe::Driver::Rack::DrvrInfo


class Controller::SfeOper::Sfe::Driver::Rack::DrvrInfo::AsicList : public ydk::Entity
{
    public:
        AsicList();
        ~AsicList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf asic_idx; //type: uint32
        ydk::YLeaf asic_instance; //type: string
        ydk::YLeaf card_present; //type: string
        ydk::YLeaf card_powered; //type: string
        ydk::YLeaf hotplug_event; //type: uint32
        ydk::YLeaf asic_type; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf fab_plane; //type: string
        ydk::YLeaf fab_group; //type: string
        ydk::YLeaf fgid_download; //type: string
        ydk::YLeaf asic_state; //type: string
        ydk::YLeaf asic_disconnect_signal; //type: string
        ydk::YLeaf last_init_cause; //type: string
        ydk::YLeaf num_pon_resets; //type: uint32
        ydk::YLeaf num_hard_resets; //type: uint32

}; // Controller::SfeOper::Sfe::Driver::Rack::DrvrInfo::AsicList


class Controller::SfeOper::Sfe::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::SfeOper::Sfe::Statistics::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location> > location;
        
}; // Controller::SfeOper::Sfe::Statistics


class Controller::SfeOper::Sfe::Statistics::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc_str; //type: string
        ydk::YLeaf description; //type: string
        class Asic; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic> asic;
        
}; // Controller::SfeOper::Sfe::Statistics::Location


class Controller::SfeOper::Sfe::Statistics::Location::Asic : public ydk::Entity
{
    public:
        Asic();
        ~Asic();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class CCS; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::CCS
        class DCH; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::DCH
        class DCl; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::DCl
        class DCMA; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMA
        class DCMB; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMB
        class ECI; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::ECI
        class FMAC; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::FMAC
        class GCK; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::GCK
        class RTP; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::RTP
        class All; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::All

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::CCS> ccs;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::DCH> dch;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::DCl> dcl;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMA> dcma;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMB> dcmb;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::ECI> eci;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::FMAC> fmac;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::GCK> gck;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::RTP> rtp;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::All> all;
        
}; // Controller::SfeOper::Sfe::Statistics::Location::Asic


class Controller::SfeOper::Sfe::Statistics::Location::Asic::CCS : public ydk::Entity
{
    public:
        CCS();
        ~CCS();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::CCS::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::CCS::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::CCS


class Controller::SfeOper::Sfe::Statistics::Location::Asic::CCS::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf rack_num; //type: uint32
        ydk::YLeaf slot_num; //type: uint32
        ydk::YLeaf asic_instance; //type: uint32
        ydk::YLeaf ccs0_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs1_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs0_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf eci_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs1_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs0_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs1_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs1_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch0_unreachdestcntp; //type: uint64
        ydk::YLeaf dch1_unreachdestcntp; //type: uint64
        ydk::YLeaf dch2_unreachdestcntp; //type: uint64
        ydk::YLeaf dch3_unreachdestcntp; //type: uint64
        ydk::YLeaf dch0_unreachdestcnts; //type: uint64
        ydk::YLeaf dch1_unreachdestcnts; //type: uint64
        ydk::YLeaf dch2_unreachdestcnts; //type: uint64
        ydk::YLeaf dch3_unreachdestcnts; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch0_errorfiltercntap; //type: uint64
        ydk::YLeaf dch1_errorfiltercntap; //type: uint64
        ydk::YLeaf dch2_errorfiltercntap; //type: uint64
        ydk::YLeaf dch3_errorfiltercntap; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch0_errorfiltercntas; //type: uint64
        ydk::YLeaf dch1_errorfiltercntas; //type: uint64
        ydk::YLeaf dch2_errorfiltercntas; //type: uint64
        ydk::YLeaf dch3_errorfiltercntas; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch0_droplowpricntp; //type: uint64
        ydk::YLeaf dch1_droplowpricntp; //type: uint64
        ydk::YLeaf dch2_droplowpricntp; //type: uint64
        ydk::YLeaf dch3_droplowpricntp; //type: uint64
        ydk::YLeaf dch0_droplowpricnts; //type: uint64
        ydk::YLeaf dch1_droplowpricnts; //type: uint64
        ydk::YLeaf dch2_droplowpricnts; //type: uint64
        ydk::YLeaf dch3_droplowpricnts; //type: uint64
        ydk::YLeaf dch0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_parityerrcnt; //type: uint64
        ydk::YLeaf dch1_parityerrcnt; //type: uint64
        ydk::YLeaf dch2_parityerrcnt; //type: uint64
        ydk::YLeaf dch3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl0_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl0_parityerrcnt; //type: uint64
        ydk::YLeaf dcl1_parityerrcnt; //type: uint64
        ydk::YLeaf dcl2_parityerrcnt; //type: uint64
        ydk::YLeaf dcl3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl1_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl2_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl3_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl0_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl1_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl2_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl3_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma0_parityerrcnt; //type: uint64
        ydk::YLeaf dcma1_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb0_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb1_parityerrcnt; //type: uint64
        ydk::YLeaf eci_parityerrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_1berrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_2berrcnt; //type: uint64
        ydk::YLeaf rtp_parityerrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_2berrcnt; //type: uint64
        ydk::YLeaf is_show; //type: boolean
        ydk::YLeaf show_ccs; //type: boolean
        ydk::YLeaf show_dch; //type: boolean
        ydk::YLeaf show_dcl; //type: boolean
        ydk::YLeaf show_dcma; //type: boolean
        ydk::YLeaf show_dcmb; //type: boolean
        ydk::YLeaf show_eci; //type: boolean
        ydk::YLeaf show_fmac; //type: boolean
        ydk::YLeaf show_rtp; //type: boolean

}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::CCS::Instance


class Controller::SfeOper::Sfe::Statistics::Location::Asic::DCH : public ydk::Entity
{
    public:
        DCH();
        ~DCH();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::DCH::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::DCH::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::DCH


class Controller::SfeOper::Sfe::Statistics::Location::Asic::DCH::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf rack_num; //type: uint32
        ydk::YLeaf slot_num; //type: uint32
        ydk::YLeaf asic_instance; //type: uint32
        ydk::YLeaf ccs0_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs1_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs0_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf eci_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs1_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs0_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs1_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs1_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch0_unreachdestcntp; //type: uint64
        ydk::YLeaf dch1_unreachdestcntp; //type: uint64
        ydk::YLeaf dch2_unreachdestcntp; //type: uint64
        ydk::YLeaf dch3_unreachdestcntp; //type: uint64
        ydk::YLeaf dch0_unreachdestcnts; //type: uint64
        ydk::YLeaf dch1_unreachdestcnts; //type: uint64
        ydk::YLeaf dch2_unreachdestcnts; //type: uint64
        ydk::YLeaf dch3_unreachdestcnts; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch0_errorfiltercntap; //type: uint64
        ydk::YLeaf dch1_errorfiltercntap; //type: uint64
        ydk::YLeaf dch2_errorfiltercntap; //type: uint64
        ydk::YLeaf dch3_errorfiltercntap; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch0_errorfiltercntas; //type: uint64
        ydk::YLeaf dch1_errorfiltercntas; //type: uint64
        ydk::YLeaf dch2_errorfiltercntas; //type: uint64
        ydk::YLeaf dch3_errorfiltercntas; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch0_droplowpricntp; //type: uint64
        ydk::YLeaf dch1_droplowpricntp; //type: uint64
        ydk::YLeaf dch2_droplowpricntp; //type: uint64
        ydk::YLeaf dch3_droplowpricntp; //type: uint64
        ydk::YLeaf dch0_droplowpricnts; //type: uint64
        ydk::YLeaf dch1_droplowpricnts; //type: uint64
        ydk::YLeaf dch2_droplowpricnts; //type: uint64
        ydk::YLeaf dch3_droplowpricnts; //type: uint64
        ydk::YLeaf dch0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_parityerrcnt; //type: uint64
        ydk::YLeaf dch1_parityerrcnt; //type: uint64
        ydk::YLeaf dch2_parityerrcnt; //type: uint64
        ydk::YLeaf dch3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl0_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl0_parityerrcnt; //type: uint64
        ydk::YLeaf dcl1_parityerrcnt; //type: uint64
        ydk::YLeaf dcl2_parityerrcnt; //type: uint64
        ydk::YLeaf dcl3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl1_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl2_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl3_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl0_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl1_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl2_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl3_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma0_parityerrcnt; //type: uint64
        ydk::YLeaf dcma1_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb0_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb1_parityerrcnt; //type: uint64
        ydk::YLeaf eci_parityerrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_1berrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_2berrcnt; //type: uint64
        ydk::YLeaf rtp_parityerrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_2berrcnt; //type: uint64
        ydk::YLeaf is_show; //type: boolean
        ydk::YLeaf show_ccs; //type: boolean
        ydk::YLeaf show_dch; //type: boolean
        ydk::YLeaf show_dcl; //type: boolean
        ydk::YLeaf show_dcma; //type: boolean
        ydk::YLeaf show_dcmb; //type: boolean
        ydk::YLeaf show_eci; //type: boolean
        ydk::YLeaf show_fmac; //type: boolean
        ydk::YLeaf show_rtp; //type: boolean

}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::DCH::Instance


class Controller::SfeOper::Sfe::Statistics::Location::Asic::DCl : public ydk::Entity
{
    public:
        DCl();
        ~DCl();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::DCl::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::DCl::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::DCl


class Controller::SfeOper::Sfe::Statistics::Location::Asic::DCl::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf rack_num; //type: uint32
        ydk::YLeaf slot_num; //type: uint32
        ydk::YLeaf asic_instance; //type: uint32
        ydk::YLeaf ccs0_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs1_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs0_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf eci_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs1_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs0_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs1_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs1_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch0_unreachdestcntp; //type: uint64
        ydk::YLeaf dch1_unreachdestcntp; //type: uint64
        ydk::YLeaf dch2_unreachdestcntp; //type: uint64
        ydk::YLeaf dch3_unreachdestcntp; //type: uint64
        ydk::YLeaf dch0_unreachdestcnts; //type: uint64
        ydk::YLeaf dch1_unreachdestcnts; //type: uint64
        ydk::YLeaf dch2_unreachdestcnts; //type: uint64
        ydk::YLeaf dch3_unreachdestcnts; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch0_errorfiltercntap; //type: uint64
        ydk::YLeaf dch1_errorfiltercntap; //type: uint64
        ydk::YLeaf dch2_errorfiltercntap; //type: uint64
        ydk::YLeaf dch3_errorfiltercntap; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch0_errorfiltercntas; //type: uint64
        ydk::YLeaf dch1_errorfiltercntas; //type: uint64
        ydk::YLeaf dch2_errorfiltercntas; //type: uint64
        ydk::YLeaf dch3_errorfiltercntas; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch0_droplowpricntp; //type: uint64
        ydk::YLeaf dch1_droplowpricntp; //type: uint64
        ydk::YLeaf dch2_droplowpricntp; //type: uint64
        ydk::YLeaf dch3_droplowpricntp; //type: uint64
        ydk::YLeaf dch0_droplowpricnts; //type: uint64
        ydk::YLeaf dch1_droplowpricnts; //type: uint64
        ydk::YLeaf dch2_droplowpricnts; //type: uint64
        ydk::YLeaf dch3_droplowpricnts; //type: uint64
        ydk::YLeaf dch0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_parityerrcnt; //type: uint64
        ydk::YLeaf dch1_parityerrcnt; //type: uint64
        ydk::YLeaf dch2_parityerrcnt; //type: uint64
        ydk::YLeaf dch3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl0_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl0_parityerrcnt; //type: uint64
        ydk::YLeaf dcl1_parityerrcnt; //type: uint64
        ydk::YLeaf dcl2_parityerrcnt; //type: uint64
        ydk::YLeaf dcl3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl1_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl2_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl3_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl0_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl1_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl2_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl3_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma0_parityerrcnt; //type: uint64
        ydk::YLeaf dcma1_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb0_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb1_parityerrcnt; //type: uint64
        ydk::YLeaf eci_parityerrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_1berrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_2berrcnt; //type: uint64
        ydk::YLeaf rtp_parityerrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_2berrcnt; //type: uint64
        ydk::YLeaf is_show; //type: boolean
        ydk::YLeaf show_ccs; //type: boolean
        ydk::YLeaf show_dch; //type: boolean
        ydk::YLeaf show_dcl; //type: boolean
        ydk::YLeaf show_dcma; //type: boolean
        ydk::YLeaf show_dcmb; //type: boolean
        ydk::YLeaf show_eci; //type: boolean
        ydk::YLeaf show_fmac; //type: boolean
        ydk::YLeaf show_rtp; //type: boolean

}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::DCl::Instance


class Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMA : public ydk::Entity
{
    public:
        DCMA();
        ~DCMA();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMA::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMA::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMA


class Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMA::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf rack_num; //type: uint32
        ydk::YLeaf slot_num; //type: uint32
        ydk::YLeaf asic_instance; //type: uint32
        ydk::YLeaf ccs0_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs1_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs0_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf eci_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs1_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs0_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs1_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs1_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch0_unreachdestcntp; //type: uint64
        ydk::YLeaf dch1_unreachdestcntp; //type: uint64
        ydk::YLeaf dch2_unreachdestcntp; //type: uint64
        ydk::YLeaf dch3_unreachdestcntp; //type: uint64
        ydk::YLeaf dch0_unreachdestcnts; //type: uint64
        ydk::YLeaf dch1_unreachdestcnts; //type: uint64
        ydk::YLeaf dch2_unreachdestcnts; //type: uint64
        ydk::YLeaf dch3_unreachdestcnts; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch0_errorfiltercntap; //type: uint64
        ydk::YLeaf dch1_errorfiltercntap; //type: uint64
        ydk::YLeaf dch2_errorfiltercntap; //type: uint64
        ydk::YLeaf dch3_errorfiltercntap; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch0_errorfiltercntas; //type: uint64
        ydk::YLeaf dch1_errorfiltercntas; //type: uint64
        ydk::YLeaf dch2_errorfiltercntas; //type: uint64
        ydk::YLeaf dch3_errorfiltercntas; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch0_droplowpricntp; //type: uint64
        ydk::YLeaf dch1_droplowpricntp; //type: uint64
        ydk::YLeaf dch2_droplowpricntp; //type: uint64
        ydk::YLeaf dch3_droplowpricntp; //type: uint64
        ydk::YLeaf dch0_droplowpricnts; //type: uint64
        ydk::YLeaf dch1_droplowpricnts; //type: uint64
        ydk::YLeaf dch2_droplowpricnts; //type: uint64
        ydk::YLeaf dch3_droplowpricnts; //type: uint64
        ydk::YLeaf dch0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_parityerrcnt; //type: uint64
        ydk::YLeaf dch1_parityerrcnt; //type: uint64
        ydk::YLeaf dch2_parityerrcnt; //type: uint64
        ydk::YLeaf dch3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl0_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl0_parityerrcnt; //type: uint64
        ydk::YLeaf dcl1_parityerrcnt; //type: uint64
        ydk::YLeaf dcl2_parityerrcnt; //type: uint64
        ydk::YLeaf dcl3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl1_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl2_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl3_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl0_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl1_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl2_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl3_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma0_parityerrcnt; //type: uint64
        ydk::YLeaf dcma1_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb0_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb1_parityerrcnt; //type: uint64
        ydk::YLeaf eci_parityerrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_1berrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_2berrcnt; //type: uint64
        ydk::YLeaf rtp_parityerrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_2berrcnt; //type: uint64
        ydk::YLeaf is_show; //type: boolean
        ydk::YLeaf show_ccs; //type: boolean
        ydk::YLeaf show_dch; //type: boolean
        ydk::YLeaf show_dcl; //type: boolean
        ydk::YLeaf show_dcma; //type: boolean
        ydk::YLeaf show_dcmb; //type: boolean
        ydk::YLeaf show_eci; //type: boolean
        ydk::YLeaf show_fmac; //type: boolean
        ydk::YLeaf show_rtp; //type: boolean

}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMA::Instance


class Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMB : public ydk::Entity
{
    public:
        DCMB();
        ~DCMB();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMB::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMB::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMB


class Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMB::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf rack_num; //type: uint32
        ydk::YLeaf slot_num; //type: uint32
        ydk::YLeaf asic_instance; //type: uint32
        ydk::YLeaf ccs0_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs1_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs0_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf eci_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs1_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs0_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs1_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs1_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch0_unreachdestcntp; //type: uint64
        ydk::YLeaf dch1_unreachdestcntp; //type: uint64
        ydk::YLeaf dch2_unreachdestcntp; //type: uint64
        ydk::YLeaf dch3_unreachdestcntp; //type: uint64
        ydk::YLeaf dch0_unreachdestcnts; //type: uint64
        ydk::YLeaf dch1_unreachdestcnts; //type: uint64
        ydk::YLeaf dch2_unreachdestcnts; //type: uint64
        ydk::YLeaf dch3_unreachdestcnts; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch0_errorfiltercntap; //type: uint64
        ydk::YLeaf dch1_errorfiltercntap; //type: uint64
        ydk::YLeaf dch2_errorfiltercntap; //type: uint64
        ydk::YLeaf dch3_errorfiltercntap; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch0_errorfiltercntas; //type: uint64
        ydk::YLeaf dch1_errorfiltercntas; //type: uint64
        ydk::YLeaf dch2_errorfiltercntas; //type: uint64
        ydk::YLeaf dch3_errorfiltercntas; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch0_droplowpricntp; //type: uint64
        ydk::YLeaf dch1_droplowpricntp; //type: uint64
        ydk::YLeaf dch2_droplowpricntp; //type: uint64
        ydk::YLeaf dch3_droplowpricntp; //type: uint64
        ydk::YLeaf dch0_droplowpricnts; //type: uint64
        ydk::YLeaf dch1_droplowpricnts; //type: uint64
        ydk::YLeaf dch2_droplowpricnts; //type: uint64
        ydk::YLeaf dch3_droplowpricnts; //type: uint64
        ydk::YLeaf dch0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_parityerrcnt; //type: uint64
        ydk::YLeaf dch1_parityerrcnt; //type: uint64
        ydk::YLeaf dch2_parityerrcnt; //type: uint64
        ydk::YLeaf dch3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl0_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl0_parityerrcnt; //type: uint64
        ydk::YLeaf dcl1_parityerrcnt; //type: uint64
        ydk::YLeaf dcl2_parityerrcnt; //type: uint64
        ydk::YLeaf dcl3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl1_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl2_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl3_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl0_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl1_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl2_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl3_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma0_parityerrcnt; //type: uint64
        ydk::YLeaf dcma1_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb0_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb1_parityerrcnt; //type: uint64
        ydk::YLeaf eci_parityerrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_1berrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_2berrcnt; //type: uint64
        ydk::YLeaf rtp_parityerrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_2berrcnt; //type: uint64
        ydk::YLeaf is_show; //type: boolean
        ydk::YLeaf show_ccs; //type: boolean
        ydk::YLeaf show_dch; //type: boolean
        ydk::YLeaf show_dcl; //type: boolean
        ydk::YLeaf show_dcma; //type: boolean
        ydk::YLeaf show_dcmb; //type: boolean
        ydk::YLeaf show_eci; //type: boolean
        ydk::YLeaf show_fmac; //type: boolean
        ydk::YLeaf show_rtp; //type: boolean

}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::DCMB::Instance


class Controller::SfeOper::Sfe::Statistics::Location::Asic::ECI : public ydk::Entity
{
    public:
        ECI();
        ~ECI();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::ECI::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::ECI::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::ECI


class Controller::SfeOper::Sfe::Statistics::Location::Asic::ECI::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf rack_num; //type: uint32
        ydk::YLeaf slot_num; //type: uint32
        ydk::YLeaf asic_instance; //type: uint32
        ydk::YLeaf ccs0_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs1_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs0_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf eci_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs1_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs0_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs1_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs1_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch0_unreachdestcntp; //type: uint64
        ydk::YLeaf dch1_unreachdestcntp; //type: uint64
        ydk::YLeaf dch2_unreachdestcntp; //type: uint64
        ydk::YLeaf dch3_unreachdestcntp; //type: uint64
        ydk::YLeaf dch0_unreachdestcnts; //type: uint64
        ydk::YLeaf dch1_unreachdestcnts; //type: uint64
        ydk::YLeaf dch2_unreachdestcnts; //type: uint64
        ydk::YLeaf dch3_unreachdestcnts; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch0_errorfiltercntap; //type: uint64
        ydk::YLeaf dch1_errorfiltercntap; //type: uint64
        ydk::YLeaf dch2_errorfiltercntap; //type: uint64
        ydk::YLeaf dch3_errorfiltercntap; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch0_errorfiltercntas; //type: uint64
        ydk::YLeaf dch1_errorfiltercntas; //type: uint64
        ydk::YLeaf dch2_errorfiltercntas; //type: uint64
        ydk::YLeaf dch3_errorfiltercntas; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch0_droplowpricntp; //type: uint64
        ydk::YLeaf dch1_droplowpricntp; //type: uint64
        ydk::YLeaf dch2_droplowpricntp; //type: uint64
        ydk::YLeaf dch3_droplowpricntp; //type: uint64
        ydk::YLeaf dch0_droplowpricnts; //type: uint64
        ydk::YLeaf dch1_droplowpricnts; //type: uint64
        ydk::YLeaf dch2_droplowpricnts; //type: uint64
        ydk::YLeaf dch3_droplowpricnts; //type: uint64
        ydk::YLeaf dch0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_parityerrcnt; //type: uint64
        ydk::YLeaf dch1_parityerrcnt; //type: uint64
        ydk::YLeaf dch2_parityerrcnt; //type: uint64
        ydk::YLeaf dch3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl0_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl0_parityerrcnt; //type: uint64
        ydk::YLeaf dcl1_parityerrcnt; //type: uint64
        ydk::YLeaf dcl2_parityerrcnt; //type: uint64
        ydk::YLeaf dcl3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl1_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl2_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl3_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl0_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl1_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl2_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl3_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma0_parityerrcnt; //type: uint64
        ydk::YLeaf dcma1_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb0_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb1_parityerrcnt; //type: uint64
        ydk::YLeaf eci_parityerrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_1berrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_2berrcnt; //type: uint64
        ydk::YLeaf rtp_parityerrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_2berrcnt; //type: uint64
        ydk::YLeaf is_show; //type: boolean
        ydk::YLeaf show_ccs; //type: boolean
        ydk::YLeaf show_dch; //type: boolean
        ydk::YLeaf show_dcl; //type: boolean
        ydk::YLeaf show_dcma; //type: boolean
        ydk::YLeaf show_dcmb; //type: boolean
        ydk::YLeaf show_eci; //type: boolean
        ydk::YLeaf show_fmac; //type: boolean
        ydk::YLeaf show_rtp; //type: boolean

}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::ECI::Instance


class Controller::SfeOper::Sfe::Statistics::Location::Asic::FMAC : public ydk::Entity
{
    public:
        FMAC();
        ~FMAC();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::FMAC::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::FMAC::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::FMAC


class Controller::SfeOper::Sfe::Statistics::Location::Asic::FMAC::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf rack_num; //type: uint32
        ydk::YLeaf slot_num; //type: uint32
        ydk::YLeaf asic_instance; //type: uint32
        ydk::YLeaf ccs0_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs1_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs0_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf eci_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs1_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs0_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs1_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs1_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch0_unreachdestcntp; //type: uint64
        ydk::YLeaf dch1_unreachdestcntp; //type: uint64
        ydk::YLeaf dch2_unreachdestcntp; //type: uint64
        ydk::YLeaf dch3_unreachdestcntp; //type: uint64
        ydk::YLeaf dch0_unreachdestcnts; //type: uint64
        ydk::YLeaf dch1_unreachdestcnts; //type: uint64
        ydk::YLeaf dch2_unreachdestcnts; //type: uint64
        ydk::YLeaf dch3_unreachdestcnts; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch0_errorfiltercntap; //type: uint64
        ydk::YLeaf dch1_errorfiltercntap; //type: uint64
        ydk::YLeaf dch2_errorfiltercntap; //type: uint64
        ydk::YLeaf dch3_errorfiltercntap; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch0_errorfiltercntas; //type: uint64
        ydk::YLeaf dch1_errorfiltercntas; //type: uint64
        ydk::YLeaf dch2_errorfiltercntas; //type: uint64
        ydk::YLeaf dch3_errorfiltercntas; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch0_droplowpricntp; //type: uint64
        ydk::YLeaf dch1_droplowpricntp; //type: uint64
        ydk::YLeaf dch2_droplowpricntp; //type: uint64
        ydk::YLeaf dch3_droplowpricntp; //type: uint64
        ydk::YLeaf dch0_droplowpricnts; //type: uint64
        ydk::YLeaf dch1_droplowpricnts; //type: uint64
        ydk::YLeaf dch2_droplowpricnts; //type: uint64
        ydk::YLeaf dch3_droplowpricnts; //type: uint64
        ydk::YLeaf dch0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_parityerrcnt; //type: uint64
        ydk::YLeaf dch1_parityerrcnt; //type: uint64
        ydk::YLeaf dch2_parityerrcnt; //type: uint64
        ydk::YLeaf dch3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl0_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl0_parityerrcnt; //type: uint64
        ydk::YLeaf dcl1_parityerrcnt; //type: uint64
        ydk::YLeaf dcl2_parityerrcnt; //type: uint64
        ydk::YLeaf dcl3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl1_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl2_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl3_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl0_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl1_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl2_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl3_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma0_parityerrcnt; //type: uint64
        ydk::YLeaf dcma1_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb0_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb1_parityerrcnt; //type: uint64
        ydk::YLeaf eci_parityerrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_1berrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_2berrcnt; //type: uint64
        ydk::YLeaf rtp_parityerrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_2berrcnt; //type: uint64
        ydk::YLeaf is_show; //type: boolean
        ydk::YLeaf show_ccs; //type: boolean
        ydk::YLeaf show_dch; //type: boolean
        ydk::YLeaf show_dcl; //type: boolean
        ydk::YLeaf show_dcma; //type: boolean
        ydk::YLeaf show_dcmb; //type: boolean
        ydk::YLeaf show_eci; //type: boolean
        ydk::YLeaf show_fmac; //type: boolean
        ydk::YLeaf show_rtp; //type: boolean

}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::FMAC::Instance


class Controller::SfeOper::Sfe::Statistics::Location::Asic::GCK : public ydk::Entity
{
    public:
        GCK();
        ~GCK();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::GCK::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::GCK::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::GCK


class Controller::SfeOper::Sfe::Statistics::Location::Asic::GCK::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf rack_num; //type: uint32
        ydk::YLeaf slot_num; //type: uint32
        ydk::YLeaf asic_instance; //type: uint32
        ydk::YLeaf ccs0_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs1_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs0_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf eci_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs1_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs0_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs1_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs1_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch0_unreachdestcntp; //type: uint64
        ydk::YLeaf dch1_unreachdestcntp; //type: uint64
        ydk::YLeaf dch2_unreachdestcntp; //type: uint64
        ydk::YLeaf dch3_unreachdestcntp; //type: uint64
        ydk::YLeaf dch0_unreachdestcnts; //type: uint64
        ydk::YLeaf dch1_unreachdestcnts; //type: uint64
        ydk::YLeaf dch2_unreachdestcnts; //type: uint64
        ydk::YLeaf dch3_unreachdestcnts; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch0_errorfiltercntap; //type: uint64
        ydk::YLeaf dch1_errorfiltercntap; //type: uint64
        ydk::YLeaf dch2_errorfiltercntap; //type: uint64
        ydk::YLeaf dch3_errorfiltercntap; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch0_errorfiltercntas; //type: uint64
        ydk::YLeaf dch1_errorfiltercntas; //type: uint64
        ydk::YLeaf dch2_errorfiltercntas; //type: uint64
        ydk::YLeaf dch3_errorfiltercntas; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch0_droplowpricntp; //type: uint64
        ydk::YLeaf dch1_droplowpricntp; //type: uint64
        ydk::YLeaf dch2_droplowpricntp; //type: uint64
        ydk::YLeaf dch3_droplowpricntp; //type: uint64
        ydk::YLeaf dch0_droplowpricnts; //type: uint64
        ydk::YLeaf dch1_droplowpricnts; //type: uint64
        ydk::YLeaf dch2_droplowpricnts; //type: uint64
        ydk::YLeaf dch3_droplowpricnts; //type: uint64
        ydk::YLeaf dch0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_parityerrcnt; //type: uint64
        ydk::YLeaf dch1_parityerrcnt; //type: uint64
        ydk::YLeaf dch2_parityerrcnt; //type: uint64
        ydk::YLeaf dch3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl0_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl0_parityerrcnt; //type: uint64
        ydk::YLeaf dcl1_parityerrcnt; //type: uint64
        ydk::YLeaf dcl2_parityerrcnt; //type: uint64
        ydk::YLeaf dcl3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl1_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl2_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl3_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl0_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl1_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl2_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl3_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma0_parityerrcnt; //type: uint64
        ydk::YLeaf dcma1_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb0_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb1_parityerrcnt; //type: uint64
        ydk::YLeaf eci_parityerrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_1berrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_2berrcnt; //type: uint64
        ydk::YLeaf rtp_parityerrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_2berrcnt; //type: uint64
        ydk::YLeaf is_show; //type: boolean
        ydk::YLeaf show_ccs; //type: boolean
        ydk::YLeaf show_dch; //type: boolean
        ydk::YLeaf show_dcl; //type: boolean
        ydk::YLeaf show_dcma; //type: boolean
        ydk::YLeaf show_dcmb; //type: boolean
        ydk::YLeaf show_eci; //type: boolean
        ydk::YLeaf show_fmac; //type: boolean
        ydk::YLeaf show_rtp; //type: boolean

}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::GCK::Instance


class Controller::SfeOper::Sfe::Statistics::Location::Asic::RTP : public ydk::Entity
{
    public:
        RTP();
        ~RTP();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::RTP::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::RTP::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::RTP


class Controller::SfeOper::Sfe::Statistics::Location::Asic::RTP::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf rack_num; //type: uint32
        ydk::YLeaf slot_num; //type: uint32
        ydk::YLeaf asic_instance; //type: uint32
        ydk::YLeaf ccs0_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs1_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs0_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf eci_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs1_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs0_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs1_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs1_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch0_unreachdestcntp; //type: uint64
        ydk::YLeaf dch1_unreachdestcntp; //type: uint64
        ydk::YLeaf dch2_unreachdestcntp; //type: uint64
        ydk::YLeaf dch3_unreachdestcntp; //type: uint64
        ydk::YLeaf dch0_unreachdestcnts; //type: uint64
        ydk::YLeaf dch1_unreachdestcnts; //type: uint64
        ydk::YLeaf dch2_unreachdestcnts; //type: uint64
        ydk::YLeaf dch3_unreachdestcnts; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch0_errorfiltercntap; //type: uint64
        ydk::YLeaf dch1_errorfiltercntap; //type: uint64
        ydk::YLeaf dch2_errorfiltercntap; //type: uint64
        ydk::YLeaf dch3_errorfiltercntap; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch0_errorfiltercntas; //type: uint64
        ydk::YLeaf dch1_errorfiltercntas; //type: uint64
        ydk::YLeaf dch2_errorfiltercntas; //type: uint64
        ydk::YLeaf dch3_errorfiltercntas; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch0_droplowpricntp; //type: uint64
        ydk::YLeaf dch1_droplowpricntp; //type: uint64
        ydk::YLeaf dch2_droplowpricntp; //type: uint64
        ydk::YLeaf dch3_droplowpricntp; //type: uint64
        ydk::YLeaf dch0_droplowpricnts; //type: uint64
        ydk::YLeaf dch1_droplowpricnts; //type: uint64
        ydk::YLeaf dch2_droplowpricnts; //type: uint64
        ydk::YLeaf dch3_droplowpricnts; //type: uint64
        ydk::YLeaf dch0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_parityerrcnt; //type: uint64
        ydk::YLeaf dch1_parityerrcnt; //type: uint64
        ydk::YLeaf dch2_parityerrcnt; //type: uint64
        ydk::YLeaf dch3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl0_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl0_parityerrcnt; //type: uint64
        ydk::YLeaf dcl1_parityerrcnt; //type: uint64
        ydk::YLeaf dcl2_parityerrcnt; //type: uint64
        ydk::YLeaf dcl3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl1_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl2_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl3_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl0_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl1_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl2_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl3_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma0_parityerrcnt; //type: uint64
        ydk::YLeaf dcma1_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb0_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb1_parityerrcnt; //type: uint64
        ydk::YLeaf eci_parityerrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_1berrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_2berrcnt; //type: uint64
        ydk::YLeaf rtp_parityerrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_2berrcnt; //type: uint64
        ydk::YLeaf is_show; //type: boolean
        ydk::YLeaf show_ccs; //type: boolean
        ydk::YLeaf show_dch; //type: boolean
        ydk::YLeaf show_dcl; //type: boolean
        ydk::YLeaf show_dcma; //type: boolean
        ydk::YLeaf show_dcmb; //type: boolean
        ydk::YLeaf show_eci; //type: boolean
        ydk::YLeaf show_fmac; //type: boolean
        ydk::YLeaf show_rtp; //type: boolean

}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::RTP::Instance


class Controller::SfeOper::Sfe::Statistics::Location::Asic::All : public ydk::Entity
{
    public:
        All();
        ~All();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::Statistics::Location::Asic::All::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Statistics::Location::Asic::All::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::All


class Controller::SfeOper::Sfe::Statistics::Location::Asic::All::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf rack_num; //type: uint32
        ydk::YLeaf slot_num; //type: uint32
        ydk::YLeaf asic_instance; //type: uint32
        ydk::YLeaf ccs0_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs1_unreachabledestinationcellscnt_ovf; //type: boolean
        ydk::YLeaf ccs0_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_capturefifodiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_crpparityerrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounterp_ovf; //type: boolean
        ydk::YLeaf dch0_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_fifodiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch1_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch2_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch3_dchreorddiscardcounters_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcntp_ovf; //type: boolean
        ydk::YLeaf dch0_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch1_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch2_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch3_unreachdestcnts_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcntp_ovf; //type: boolean
        ydk::YLeaf dch0_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch1_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch2_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch3_dchdroppedlowmulcnts_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntap_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbp_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntas_ovf; //type: boolean
        ydk::YLeaf dch0_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch1_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch2_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch3_errorfiltercntbs_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricntp_ovf; //type: boolean
        ydk::YLeaf dch0_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch1_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch2_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch3_droplowpricnts_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dch0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dch3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cntp_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp0cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp1cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp2cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl1_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl2_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl3_dcldroppedp3cnts_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp0cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ccp1cifdscrdcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_tagparerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl0_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl1_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl2_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcl3_datacrcerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcma0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcma0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcma1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip0_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip1_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip2_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedip3_ovf; //type: boolean
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb0_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf dcmb1_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf eci_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf rtp_parityerrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_1berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac0_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac1_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac2_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac3_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac4_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac5_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac6_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac7_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac8_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac9_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac10_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac11_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac12_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac13_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac14_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac15_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac16_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac17_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac18_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac19_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac20_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac21_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac22_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac23_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac24_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac25_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac26_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac27_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac28_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac29_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac30_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf fmac31_ecc_2berrcnt_ovf; //type: boolean
        ydk::YLeaf ccs0_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs1_unreachabledestinationcellscnt; //type: uint64
        ydk::YLeaf ccs0_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs1_capturefifodiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmalpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs1_cdmblpcellsdiscardcnt; //type: uint64
        ydk::YLeaf ccs0_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs1_crpparityerrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf ccs0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf ccs1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounterp; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounterp; //type: uint64
        ydk::YLeaf dch0_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch1_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch2_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch3_fifodiscardcounters; //type: uint64
        ydk::YLeaf dch0_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch1_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch2_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch3_dchreorddiscardcounters; //type: uint64
        ydk::YLeaf dch0_unreachdestcntp; //type: uint64
        ydk::YLeaf dch1_unreachdestcntp; //type: uint64
        ydk::YLeaf dch2_unreachdestcntp; //type: uint64
        ydk::YLeaf dch3_unreachdestcntp; //type: uint64
        ydk::YLeaf dch0_unreachdestcnts; //type: uint64
        ydk::YLeaf dch1_unreachdestcnts; //type: uint64
        ydk::YLeaf dch2_unreachdestcnts; //type: uint64
        ydk::YLeaf dch3_unreachdestcnts; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcntp; //type: uint64
        ydk::YLeaf dch0_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch1_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch2_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch3_dchdroppedlowmulcnts; //type: uint64
        ydk::YLeaf dch0_errorfiltercntap; //type: uint64
        ydk::YLeaf dch1_errorfiltercntap; //type: uint64
        ydk::YLeaf dch2_errorfiltercntap; //type: uint64
        ydk::YLeaf dch3_errorfiltercntap; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbp; //type: uint64
        ydk::YLeaf dch0_errorfiltercntas; //type: uint64
        ydk::YLeaf dch1_errorfiltercntas; //type: uint64
        ydk::YLeaf dch2_errorfiltercntas; //type: uint64
        ydk::YLeaf dch3_errorfiltercntas; //type: uint64
        ydk::YLeaf dch0_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch1_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch2_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch3_errorfiltercntbs; //type: uint64
        ydk::YLeaf dch0_droplowpricntp; //type: uint64
        ydk::YLeaf dch1_droplowpricntp; //type: uint64
        ydk::YLeaf dch2_droplowpricntp; //type: uint64
        ydk::YLeaf dch3_droplowpricntp; //type: uint64
        ydk::YLeaf dch0_droplowpricnts; //type: uint64
        ydk::YLeaf dch1_droplowpricnts; //type: uint64
        ydk::YLeaf dch2_droplowpricnts; //type: uint64
        ydk::YLeaf dch3_droplowpricnts; //type: uint64
        ydk::YLeaf dch0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dch0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dch0_parityerrcnt; //type: uint64
        ydk::YLeaf dch1_parityerrcnt; //type: uint64
        ydk::YLeaf dch2_parityerrcnt; //type: uint64
        ydk::YLeaf dch3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cntp; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp0cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp1cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp2cnts; //type: uint64
        ydk::YLeaf dcl0_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl1_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl2_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl3_dcldroppedp3cnts; //type: uint64
        ydk::YLeaf dcl0_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp0cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl1_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl2_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl3_ccp1cifdscrdcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcl0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcl0_parityerrcnt; //type: uint64
        ydk::YLeaf dcl1_parityerrcnt; //type: uint64
        ydk::YLeaf dcl2_parityerrcnt; //type: uint64
        ydk::YLeaf dcl3_parityerrcnt; //type: uint64
        ydk::YLeaf dcl0_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl1_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl2_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl3_tagparerrcnt; //type: uint64
        ydk::YLeaf dcl0_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl1_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl2_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcl3_datacrcerrcnt; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcma0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcma0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcma0_parityerrcnt; //type: uint64
        ydk::YLeaf dcma1_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmmdroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip0; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip1; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip2; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedip3; //type: uint64
        ydk::YLeaf dcmb0_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb1_dcmudroppedtotalcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf dcmb0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf dcmb0_parityerrcnt; //type: uint64
        ydk::YLeaf dcmb1_parityerrcnt; //type: uint64
        ydk::YLeaf eci_parityerrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_1berrcnt; //type: uint64
        ydk::YLeaf rtp_ecc_2berrcnt; //type: uint64
        ydk::YLeaf rtp_parityerrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_1berrcnt; //type: uint64
        ydk::YLeaf fmac0_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac1_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac2_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac3_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac4_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac5_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac6_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac7_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac8_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac9_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac10_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac11_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac12_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac13_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac14_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac15_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac16_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac17_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac18_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac19_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac20_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac21_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac22_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac23_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac24_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac25_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac26_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac27_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac28_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac29_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac30_ecc_2berrcnt; //type: uint64
        ydk::YLeaf fmac31_ecc_2berrcnt; //type: uint64
        ydk::YLeaf is_show; //type: boolean
        ydk::YLeaf show_ccs; //type: boolean
        ydk::YLeaf show_dch; //type: boolean
        ydk::YLeaf show_dcl; //type: boolean
        ydk::YLeaf show_dcma; //type: boolean
        ydk::YLeaf show_dcmb; //type: boolean
        ydk::YLeaf show_eci; //type: boolean
        ydk::YLeaf show_fmac; //type: boolean
        ydk::YLeaf show_rtp; //type: boolean

}; // Controller::SfeOper::Sfe::Statistics::Location::Asic::All::Instance


class Controller::SfeOper::Sfe::LinkInfo : public ydk::Entity
{
    public:
        LinkInfo();
        ~LinkInfo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::SfeOper::Sfe::LinkInfo::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location> > location;
        
}; // Controller::SfeOper::Sfe::LinkInfo


class Controller::SfeOper::Sfe::LinkInfo::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc_str; //type: string
        ydk::YLeaf description; //type: string
        class Rx; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx
        class Tx; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx> > rx;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx> > tx;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx : public ydk::Entity
{
    public:
        Rx();
        ~Rx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf start; //type: int32
        ydk::YLeaf end; //type: int32
        class Detail; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail
        class Topo; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo
        class Flap; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap
        class Stats; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail> detail;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo> topo;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap> flap;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats> stats;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Topo; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo
        class Flap; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo> topo;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap> flap;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo : public ydk::Entity
{
    public:
        Topo();
        ~Topo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Topo::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap : public ydk::Entity
{
    public:
        Flap();
        ~Flap();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Detail::Flap::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo : public ydk::Entity
{
    public:
        Topo();
        ~Topo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Topo::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap : public ydk::Entity
{
    public:
        Flap();
        ~Flap();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Flap::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats : public ydk::Entity
{
    public:
        Stats();
        ~Stats();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Data; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data
        class Ctrl; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl
        class All; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data> data;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl> ctrl;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All> all;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data : public ydk::Entity
{
    public:
        Data();
        ~Data();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Data::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl : public ydk::Entity
{
    public:
        Ctrl();
        ~Ctrl();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::Ctrl::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All : public ydk::Entity
{
    public:
        All();
        ~All();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Rx::Stats::All::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx : public ydk::Entity
{
    public:
        Tx();
        ~Tx();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf start; //type: int32
        ydk::YLeaf end; //type: int32
        class Detail; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail
        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance
        class Stats; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail> detail;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance> > instance;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats> stats;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Detail::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats : public ydk::Entity
{
    public:
        Stats();
        ~Stats();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Data; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data
        class Ctrl; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl
        class All; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data> data;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl> ctrl;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All> all;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data : public ydk::Entity
{
    public:
        Data();
        ~Data();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Data::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl : public ydk::Entity
{
    public:
        Ctrl();
        ~Ctrl();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::Ctrl::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All : public ydk::Entity
{
    public:
        All();
        ~All();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Instance; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf nodeid_str; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf link_id_str; //type: string
        ydk::YLeaf speed; //type: string
        ydk::YLeaf stage; //type: string
        ydk::YLeaf fab_plane; //type: uint32
        ydk::YLeaf fab_group; //type: uint32
        ydk::YLeaf flap_cnt; //type: uint32
        ydk::YLeaf num_admin_shuts; //type: uint32
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf flags; //type: string
        ydk::YLeaf far_end_link_fsdb; //type: string
        ydk::YLeaf far_end_link_hw; //type: string
        ydk::YLeaf coeff1; //type: uint32
        ydk::YLeaf coeff2; //type: uint32
        ydk::YLeaf tx_control_cells_counter; //type: uint64
        ydk::YLeaf tx_data_cell_counter; //type: uint64
        ydk::YLeaf tx_data_byte_counter; //type: uint64
        ydk::YLeaf tx_bec_retransmit; //type: uint64
        ydk::YLeaf tx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_control_cells_counter; //type: uint64
        ydk::YLeaf rx_data_cell_counter; //type: uint64
        ydk::YLeaf rx_data_byte_counter; //type: uint64
        ydk::YLeaf rx_bec_retransmit; //type: uint64
        ydk::YLeaf rx_asyn_fifo_rate; //type: uint64
        ydk::YLeaf rx_crc_errors_counter; //type: uint64
        ydk::YLeaf rx_lfec_fec_correctable_error; //type: uint64
        ydk::YLeaf rx_lfec_fec_uncorrectable_errors; //type: uint64
        ydk::YLeaf rx_dropped_retransmitted_control; //type: uint64
        ydk::YLeaf fsm_state; //type: string
        class History; //type: Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance::LinkIdxList::History

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance::LinkIdxList::History> > history;
        
}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance::LinkIdxList


class Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance::LinkIdxList::History : public ydk::Entity
{
    public:
        History();
        ~History();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf history_idx; //type: int32
        ydk::YLeaf time_stamp; //type: string
        ydk::YLeaf admin_state; //type: string
        ydk::YLeaf oper_state; //type: string
        ydk::YLeaf error_state; //type: string
        ydk::YLeaf down_reasons; //type: string

}; // Controller::SfeOper::Sfe::LinkInfo::Location::Tx::Stats::All::Instance::LinkIdxList::History


class Controller::SfeOper::Sfe::Diagshell : public ydk::Entity
{
    public:
        Diagshell();
        ~Diagshell();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::SfeOper::Sfe::Diagshell::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Diagshell::Location> > location;
        
}; // Controller::SfeOper::Sfe::Diagshell


class Controller::SfeOper::Sfe::Diagshell::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc_str; //type: string
        ydk::YLeaf description; //type: string
        class Instance; //type: Controller::SfeOper::Sfe::Diagshell::Location::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Diagshell::Location::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Diagshell::Location


class Controller::SfeOper::Sfe::Diagshell::Location::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_num; //type: int32
        class DiagCmd; //type: Controller::SfeOper::Sfe::Diagshell::Location::Instance::DiagCmd

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Diagshell::Location::Instance::DiagCmd> > diag_cmd;
        
}; // Controller::SfeOper::Sfe::Diagshell::Location::Instance


class Controller::SfeOper::Sfe::Diagshell::Location::Instance::DiagCmd : public ydk::Entity
{
    public:
        DiagCmd();
        ~DiagCmd();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf cmd_str; //type: string
        class Bytes; //type: Controller::SfeOper::Sfe::Diagshell::Location::Instance::DiagCmd::Bytes

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Diagshell::Location::Instance::DiagCmd::Bytes> > bytes;
        
}; // Controller::SfeOper::Sfe::Diagshell::Location::Instance::DiagCmd


class Controller::SfeOper::Sfe::Diagshell::Location::Instance::DiagCmd::Bytes : public ydk::Entity
{
    public:
        Bytes();
        ~Bytes();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf byte_idx; //type: int64
        ydk::YLeaf data; //type: string

}; // Controller::SfeOper::Sfe::Diagshell::Location::Instance::DiagCmd::Bytes


class Controller::SfeOper::Sfe::Register : public ydk::Entity
{
    public:
        Register();
        ~Register();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::SfeOper::Sfe::Register::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Register::Location> > location;
        
}; // Controller::SfeOper::Sfe::Register


class Controller::SfeOper::Sfe::Register::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc_str; //type: string
        ydk::YLeaf description; //type: string
        class Instance; //type: Controller::SfeOper::Sfe::Register::Location::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Register::Location::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Register::Location


class Controller::SfeOper::Sfe::Register::Location::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_num; //type: int32
        class Bytes; //type: Controller::SfeOper::Sfe::Register::Location::Instance::Bytes

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Register::Location::Instance::Bytes> > bytes;
        
}; // Controller::SfeOper::Sfe::Register::Location::Instance


class Controller::SfeOper::Sfe::Register::Location::Instance::Bytes : public ydk::Entity
{
    public:
        Bytes();
        ~Bytes();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf byte_idx; //type: int64
        ydk::YLeaf data; //type: string

}; // Controller::SfeOper::Sfe::Register::Location::Instance::Bytes


class Controller::SfeOper::Sfe::DumpFile : public ydk::Entity
{
    public:
        DumpFile();
        ~DumpFile();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::SfeOper::Sfe::DumpFile::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::DumpFile::Location> > location;
        
}; // Controller::SfeOper::Sfe::DumpFile


class Controller::SfeOper::Sfe::DumpFile::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc_str; //type: string
        ydk::YLeaf description; //type: string
        class File; //type: Controller::SfeOper::Sfe::DumpFile::Location::File

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::DumpFile::Location::File> > file;
        
}; // Controller::SfeOper::Sfe::DumpFile::Location


class Controller::SfeOper::Sfe::DumpFile::Location::File : public ydk::Entity
{
    public:
        File();
        ~File();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf file_name; //type: string
        class Bytes; //type: Controller::SfeOper::Sfe::DumpFile::Location::File::Bytes

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::DumpFile::Location::File::Bytes> > bytes;
        
}; // Controller::SfeOper::Sfe::DumpFile::Location::File


class Controller::SfeOper::Sfe::DumpFile::Location::File::Bytes : public ydk::Entity
{
    public:
        Bytes();
        ~Bytes();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf byte_idx; //type: int64
        ydk::YLeaf data; //type: string

}; // Controller::SfeOper::Sfe::DumpFile::Location::File::Bytes


class Controller::SfeOper::Sfe::Parse : public ydk::Entity
{
    public:
        Parse();
        ~Parse();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::SfeOper::Sfe::Parse::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Parse::Location> > location;
        
}; // Controller::SfeOper::Sfe::Parse


class Controller::SfeOper::Sfe::Parse::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc_str; //type: string
        ydk::YLeaf description; //type: string
        class Link; //type: Controller::SfeOper::Sfe::Parse::Location::Link

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Parse::Location::Link> > link;
        
}; // Controller::SfeOper::Sfe::Parse::Location


class Controller::SfeOper::Sfe::Parse::Location::Link : public ydk::Entity
{
    public:
        Link();
        ~Link();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf start; //type: int32
        ydk::YLeaf end; //type: int32
        class Instance; //type: Controller::SfeOper::Sfe::Parse::Location::Link::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Parse::Location::Link::Instance> > instance;
        
}; // Controller::SfeOper::Sfe::Parse::Location::Link


class Controller::SfeOper::Sfe::Parse::Location::Link::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: string
        ydk::YLeaf is_show; //type: boolean
        class LinkIdxList; //type: Controller::SfeOper::Sfe::Parse::Location::Link::Instance::LinkIdxList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::Sfe::Parse::Location::Link::Instance::LinkIdxList> > link_idx_list;
        
}; // Controller::SfeOper::Sfe::Parse::Location::Link::Instance


class Controller::SfeOper::Sfe::Parse::Location::Link::Instance::LinkIdxList : public ydk::Entity
{
    public:
        LinkIdxList();
        ~LinkIdxList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf link_idx; //type: int64
        ydk::YLeaf rack_id_str; //type: string
        ydk::YLeaf slot_id_str; //type: string
        ydk::YLeaf asic_inst_id; //type: uint32
        ydk::YLeaf link_num_id; //type: uint32
        ydk::YLeaf log_slot; //type: uint32
        ydk::YLeaf phy_slot; //type: uint32
        ydk::YLeaf fap_id; //type: uint32
        ydk::YLeaf unit; //type: uint32
        ydk::YLeaf sfi_id; //type: uint32
        ydk::YLeaf ip_addr; //type: string
        ydk::YLeaf driver_run; //type: string

}; // Controller::SfeOper::Sfe::Parse::Location::Link::Instance::LinkIdxList


class Controller::SfeOper::SfeTrace : public ydk::Entity
{
    public:
        SfeTrace();
        ~SfeTrace();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class SfeDriver; //type: Controller::SfeOper::SfeTrace::SfeDriver

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::SfeTrace::SfeDriver> sfe_driver;
        
}; // Controller::SfeOper::SfeTrace


class Controller::SfeOper::SfeTrace::SfeDriver : public ydk::Entity
{
    public:
        SfeDriver();
        ~SfeDriver();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Trace; //type: Controller::SfeOper::SfeTrace::SfeDriver::Trace

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::SfeTrace::SfeDriver::Trace> > trace;
        
}; // Controller::SfeOper::SfeTrace::SfeDriver


class Controller::SfeOper::SfeTrace::SfeDriver::Trace : public ydk::Entity
{
    public:
        Trace();
        ~Trace();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf buffer; //type: string
        class Location; //type: Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location> > location;
        
}; // Controller::SfeOper::SfeTrace::SfeDriver::Trace


class Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class AllOptions; //type: Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location::AllOptions

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location::AllOptions> > all_options;
        
}; // Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location


class Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location::AllOptions : public ydk::Entity
{
    public:
        AllOptions();
        ~AllOptions();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf option; //type: string
        class TraceBlocks; //type: Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location::AllOptions::TraceBlocks

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location::AllOptions::TraceBlocks> > trace_blocks;
        
}; // Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location::AllOptions


class Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location::AllOptions::TraceBlocks : public ydk::Entity
{
    public:
        TraceBlocks();
        ~TraceBlocks();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf data; //type: string

}; // Controller::SfeOper::SfeTrace::SfeDriver::Trace::Location::AllOptions::TraceBlocks


class Controller::Asic : public ydk::Entity
{
    public:
        Asic();
        ~Asic();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf asic_name; //type: string
        class Instance; //type: Controller::Asic::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance> > instance;
        
}; // Controller::Asic


class Controller::Asic::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf instance_id; //type: uint32
        ydk::YLeaf instance_name; //type: string
        class Address; //type: Controller::Asic::Instance::Address
        class BlockName; //type: Controller::Asic::Instance::BlockName
        class BlockNumber; //type: Controller::Asic::Instance::BlockNumber

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::Address> > address;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::BlockName> > block_name;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::BlockNumber> > block_number;
        
}; // Controller::Asic::Instance


class Controller::Asic::Instance::Address : public ydk::Entity
{
    public:
        Address();
        ~Address();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf addr; //type: string
        ydk::YLeaf size; //type: uint32
        ydk::YLeaf entries; //type: uint32
        ydk::YLeaf width; //type: uint32
        class Location; //type: Controller::Asic::Instance::Address::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::Address::Location> > location;
        
}; // Controller::Asic::Instance::Address


class Controller::Asic::Instance::Address::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class DirectData; //type: Controller::Asic::Instance::Address::Location::DirectData

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::Address::Location::DirectData> > direct_data;
        
}; // Controller::Asic::Instance::Address::Location


class Controller::Asic::Instance::Address::Location::DirectData : public ydk::Entity
{
    public:
        DirectData();
        ~DirectData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf address; //type: uint64
        ydk::YLeaf name; //type: string
        ydk::YLeaf value_; //type: string
        ydk::YLeaf size; //type: uint32

}; // Controller::Asic::Instance::Address::Location::DirectData


class Controller::Asic::Instance::BlockName : public ydk::Entity
{
    public:
        BlockName();
        ~BlockName();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf block_nm; //type: string
        ydk::YLeaf block_num; //type: uint32
        class RegisterName; //type: Controller::Asic::Instance::BlockName::RegisterName

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::BlockName::RegisterName> > register_name;
        
}; // Controller::Asic::Instance::BlockName


class Controller::Asic::Instance::BlockName::RegisterName : public ydk::Entity
{
    public:
        RegisterName();
        ~RegisterName();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf name; //type: string
        ydk::YLeaf register_; //type: uint32
        class Data; //type: Controller::Asic::Instance::BlockName::RegisterName::Data

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::BlockName::RegisterName::Data> > data;
        
}; // Controller::Asic::Instance::BlockName::RegisterName


class Controller::Asic::Instance::BlockName::RegisterName::Data : public ydk::Entity
{
    public:
        Data();
        ~Data();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf address; //type: uint64
        ydk::YLeaf name; //type: string
        ydk::YLeaf value_; //type: string
        ydk::YLeaf size; //type: uint32

}; // Controller::Asic::Instance::BlockName::RegisterName::Data


class Controller::Asic::Instance::BlockNumber : public ydk::Entity
{
    public:
        BlockNumber();
        ~BlockNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf block_num; //type: uint32
        ydk::YLeaf block_nm; //type: string
        class RegisterNumber; //type: Controller::Asic::Instance::BlockNumber::RegisterNumber

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::BlockNumber::RegisterNumber> > register_number;
        
}; // Controller::Asic::Instance::BlockNumber


class Controller::Asic::Instance::BlockNumber::RegisterNumber : public ydk::Entity
{
    public:
        RegisterNumber();
        ~RegisterNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf register_; //type: uint32
        ydk::YLeaf register_name; //type: string
        class RegisterOffsets; //type: Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets
        class Location; //type: Controller::Asic::Instance::BlockNumber::RegisterNumber::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets> > register_offsets;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::BlockNumber::RegisterNumber::Location> > location;
        
}; // Controller::Asic::Instance::BlockNumber::RegisterNumber


class Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets : public ydk::Entity
{
    public:
        RegisterOffsets();
        ~RegisterOffsets();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf reg_start; //type: uint32
        ydk::YLeaf num_entries; //type: uint32
        class Location; //type: Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location> > location;
        
}; // Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets


class Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class Data; //type: Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location::Data

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location::Data> > data;
        
}; // Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location


class Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location::Data : public ydk::Entity
{
    public:
        Data();
        ~Data();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf address; //type: uint64
        ydk::YLeaf name; //type: string
        ydk::YLeaf value_; //type: string
        ydk::YLeaf size; //type: uint32

}; // Controller::Asic::Instance::BlockNumber::RegisterNumber::RegisterOffsets::Location::Data


class Controller::Asic::Instance::BlockNumber::RegisterNumber::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class Data; //type: Controller::Asic::Instance::BlockNumber::RegisterNumber::Location::Data

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Asic::Instance::BlockNumber::RegisterNumber::Location::Data> > data;
        
}; // Controller::Asic::Instance::BlockNumber::RegisterNumber::Location


class Controller::Asic::Instance::BlockNumber::RegisterNumber::Location::Data : public ydk::Entity
{
    public:
        Data();
        ~Data();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf address; //type: uint64
        ydk::YLeaf name; //type: string
        ydk::YLeaf value_; //type: string
        ydk::YLeaf size; //type: uint32

}; // Controller::Asic::Instance::BlockNumber::RegisterNumber::Location::Data


class Controller::Oper : public ydk::Entity
{
    public:
        Oper();
        ~Oper();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class SliceControl; //type: Controller::Oper::SliceControl

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl> slice_control;
        
}; // Controller::Oper


class Controller::Oper::SliceControl : public ydk::Entity
{
    public:
        SliceControl();
        ~SliceControl();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class LocationList; //type: Controller::Oper::SliceControl::LocationList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList> > location_list;
        
}; // Controller::Oper::SliceControl


class Controller::Oper::SliceControl::LocationList : public ydk::Entity
{
    public:
        LocationList();
        ~LocationList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc_str; //type: string
        ydk::YLeaf description; //type: string
        class ManagerContextInfo; //type: Controller::Oper::SliceControl::LocationList::ManagerContextInfo
        class FPGA; //type: Controller::Oper::SliceControl::LocationList::FPGA

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::ManagerContextInfo> > manager_context_info;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA> > fpga;
        
}; // Controller::Oper::SliceControl::LocationList


class Controller::Oper::SliceControl::LocationList::ManagerContextInfo : public ydk::Entity
{
    public:
        ManagerContextInfo();
        ~ManagerContextInfo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf id; //type: string
        ydk::YLeaf num_controllers; //type: uint8
        ydk::YLeaf levm; //type: string
        ydk::YLeaf ccc_hdl; //type: string
        ydk::YLeaf trace; //type: string
        ydk::YLeaf xm_hdl; //type: string
        ydk::YLeaf fm_hdl; //type: string
        ydk::YLeaf sim; //type: boolean
        ydk::YLeaf debug; //type: boolean
        ydk::YLeaf card_type; //type: uint32
        ydk::YLeaf slot_num; //type: uint32

}; // Controller::Oper::SliceControl::LocationList::ManagerContextInfo


class Controller::Oper::SliceControl::LocationList::FPGA : public ydk::Entity
{
    public:
        FPGA();
        ~FPGA();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf slice_controller_id; //type: string
        class SliceContextInfo; //type: Controller::Oper::SliceControl::LocationList::FPGA::SliceContextInfo
        class ClockingDevices; //type: Controller::Oper::SliceControl::LocationList::FPGA::ClockingDevices
        class Slice; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::SliceContextInfo> > slice_context_info;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::ClockingDevices> > clocking_devices;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice> > slice;
        
}; // Controller::Oper::SliceControl::LocationList::FPGA


class Controller::Oper::SliceControl::LocationList::FPGA::SliceContextInfo : public ydk::Entity
{
    public:
        SliceContextInfo();
        ~SliceContextInfo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf id; //type: string
        ydk::YLeaf slice_controller_id; //type: string
        ydk::YLeaf slices; //type: uint8
        ydk::YLeaf oper_state; //type: int32
        ydk::YLeaf pci_status; //type: int32
        ydk::YLeaf bao_desc; //type: string
        ydk::YLeaf handle; //type: string
        ydk::YLeaf irq; //type: string
        ydk::YLeaf msi; //type: int32
        ydk::YLeaf regs; //type: string
        ydk::YLeaf num_pll; //type: uint8
        ydk::YLeaf c_hd; //type: string
        ydk::YLeaf d_hd; //type: string
        ydk::YLeaf i_hd; //type: string
        ydk::YLeaf fm_hdl; //type: string
        ydk::YLeaf trace; //type: string
        ydk::YLeaf levm; //type: string
        ydk::YLeaf hw_ver; //type: string
        ydk::YLeaf pca_ver; //type: string
        ydk::YLeaf tcam_vendor; //type: string
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::SliceContextInfo


class Controller::Oper::SliceControl::LocationList::FPGA::ClockingDevices : public ydk::Entity
{
    public:
        ClockingDevices();
        ~ClockingDevices();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf pll_device_id; //type: string
        ydk::YLeaf is_data_available; //type: boolean
        class Pll; //type: Controller::Oper::SliceControl::LocationList::FPGA::ClockingDevices::Pll

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::ClockingDevices::Pll> > pll;
        
}; // Controller::Oper::SliceControl::LocationList::FPGA::ClockingDevices


class Controller::Oper::SliceControl::LocationList::FPGA::ClockingDevices::Pll : public ydk::Entity
{
    public:
        Pll();
        ~Pll();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf pll_id; //type: string
        ydk::YLeaf clocking_bus; //type: string
        ydk::YLeaf clocking_mode; //type: string
        ydk::YLeaf clocking_dev_addr; //type: string
        ydk::YLeaf clocking_i2c_regs; //type: string

}; // Controller::Oper::SliceControl::LocationList::FPGA::ClockingDevices::Pll


class Controller::Oper::SliceControl::LocationList::FPGA::Slice : public ydk::Entity
{
    public:
        Slice();
        ~Slice();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf slice_id; //type: string
        class Summary; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Summary
        class CurrSensor; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::CurrSensor
        class Eeprom; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Eeprom
        class OpticsSummary; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::OpticsSummary
        class Optics; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics
        class Phy; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Phy
        class TempSensor; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::TempSensor
        class VoltSensor; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::VoltSensor
        class GearboxSummary; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::GearboxSummary
        class Gearbox2Summary; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2Summary
        class DualGearboxSummary; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearboxSummary
        class Gearbox; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox
        class Gearbox2; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2
        class DualGearbox; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearbox
        class Cpak; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Cpak
        class ModenaSummary; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::ModenaSummary
        class Modena; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Modena

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Summary> summary;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::CurrSensor> > curr_sensor;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Eeprom> > eeprom;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::OpticsSummary> > optics_summary;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics> > optics;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Phy> > phy;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::TempSensor> > temp_sensor;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::VoltSensor> > volt_sensor;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::GearboxSummary> > gearbox_summary;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2Summary> > gearbox2_summary;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearboxSummary> > dual_gearbox_summary;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox> > gearbox;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2> > gearbox2;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearbox> > dual_gearbox;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Cpak> > cpak;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::ModenaSummary> > modena_summary;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Modena> > modena;
        
}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Summary : public ydk::Entity
{
    public:
        Summary();
        ~Summary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class SliceSummary; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Summary::SliceSummary

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Summary::SliceSummary> > slice_summary;
        
}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Summary


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Summary::SliceSummary : public ydk::Entity
{
    public:
        SliceSummary();
        ~SliceSummary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf slice_summ_id; //type: string
        ydk::YLeaf slice_id; //type: string
        ydk::YLeaf num_phy; //type: uint8
        ydk::YLeaf num_optics; //type: uint8
        ydk::YLeaf num_eeprom; //type: uint8
        ydk::YLeaf num_temp_sensors; //type: uint8
        ydk::YLeaf num_volt_sensors; //type: uint8
        ydk::YLeaf num_curr_sensors; //type: uint8
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Summary::SliceSummary


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::CurrSensor : public ydk::Entity
{
    public:
        CurrSensor();
        ~CurrSensor();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sensor_id; //type: string
        ydk::YLeaf curr_sensor_id; //type: string
        ydk::YLeaf curr_dev_addr; //type: uint32
        ydk::YLeaf curr_poll_intvl; //type: uint32
        ydk::YLeaf curr_delta; //type: uint32
        ydk::YLeaf curr_raw_data; //type: uint32
        ydk::YLeaf curr_sensor_value; //type: int32
        ydk::YLeaf curr_unit; //type: int32
        ydk::YLeaf curr_last_value; //type: uint32
        ydk::YLeaf curr_send_update; //type: boolean
        ydk::YLeaf curr_num_1sec_intervals; //type: int32
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::CurrSensor


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Eeprom : public ydk::Entity
{
    public:
        Eeprom();
        ~Eeprom();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf eeprom_id; //type: string
        ydk::YLeaf eeprom_type; //type: string
        ydk::YLeaf eeprom_bus; //type: string
        ydk::YLeaf eeprom_i2c_regs; //type: string
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Eeprom


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::OpticsSummary : public ydk::Entity
{
    public:
        OpticsSummary();
        ~OpticsSummary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf optics_id; //type: string
        ydk::YLeaf optics_type; //type: string
        ydk::YLeaf optics_bus; //type: string
        ydk::YLeaf optics_i2c_regs; //type: string
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::OpticsSummary


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics : public ydk::Entity
{
    public:
        Optics();
        ~Optics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf optics_id; //type: string
        class Cxp; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::Cxp
        class TxInfo; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::TxInfo
        class RxInfo; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::RxInfo
        class TxCoefficients; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::TxCoefficients
        class RxCoefficients; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::RxCoefficients

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::Cxp> > cxp;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::TxInfo> > tx_info;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::RxInfo> > rx_info;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::TxCoefficients> > tx_coefficients;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::RxCoefficients> > rx_coefficients;
        
}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::Cxp : public ydk::Entity
{
    public:
        Cxp();
        ~Cxp();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf cxp_id; //type: string
        ydk::YLeaf signature; //type: string
        ydk::YLeaf cxp_port_ready; //type: boolean
        ydk::YLeaf opaque; //type: string
        ydk::YLeaf nodeid; //type: string
        ydk::YLeaf slice; //type: uint32
        ydk::YLeaf capabilities; //type: string
        ydk::YLeaf vendor_name; //type: string
        ydk::YLeaf vendor_part_num; //type: string
        ydk::YLeaf vendor_rev_num; //type: string
        ydk::YLeaf vendor_serial_num; //type: string
        ydk::YLeaf passive; //type: boolean
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::Cxp


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::TxInfo : public ydk::Entity
{
    public:
        TxInfo();
        ~TxInfo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf tx_channel_id; //type: string
        ydk::YLeaf tx_status_flag; //type: string
        ydk::YLeaf tx_error_flag; //type: string
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::TxInfo


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::RxInfo : public ydk::Entity
{
    public:
        RxInfo();
        ~RxInfo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rx_channel_id; //type: string
        ydk::YLeaf rx_status_flag; //type: string
        ydk::YLeaf rx_error_flag; //type: string
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::RxInfo


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::TxCoefficients : public ydk::Entity
{
    public:
        TxCoefficients();
        ~TxCoefficients();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf tx_channel_id; //type: string
        ydk::YLeaf equalization; //type: string
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::TxCoefficients


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::RxCoefficients : public ydk::Entity
{
    public:
        RxCoefficients();
        ~RxCoefficients();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rx_channel_id; //type: string
        ydk::YLeaf amplitude; //type: string
        ydk::YLeaf de_emphasis; //type: string
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Optics::RxCoefficients


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Phy : public ydk::Entity
{
    public:
        Phy();
        ~Phy();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf phy_id; //type: string
        ydk::YLeaf phy_type; //type: string
        ydk::YLeaf phy_bus; //type: string
        ydk::YLeaf phy_i2c_regs; //type: string
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Phy


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::TempSensor : public ydk::Entity
{
    public:
        TempSensor();
        ~TempSensor();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sensor_id; //type: string
        ydk::YLeaf temp_sensor_id; //type: string
        ydk::YLeaf temp_dev_addr; //type: uint32
        ydk::YLeaf temp_poll_intvl; //type: uint32
        ydk::YLeaf temp_delta; //type: uint32
        ydk::YLeaf temp_raw_data; //type: uint32
        ydk::YLeaf temp_sensor_value; //type: int32
        ydk::YLeaf temp_unit; //type: int32
        ydk::YLeaf temp_last_value; //type: uint32
        ydk::YLeaf temp_send_update; //type: boolean
        ydk::YLeaf temp_num_1sec_intervals; //type: int32
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::TempSensor


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::VoltSensor : public ydk::Entity
{
    public:
        VoltSensor();
        ~VoltSensor();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sensor_id; //type: string
        ydk::YLeaf volt_sensor_id; //type: string
        ydk::YLeaf volt_dev_addr; //type: uint32
        ydk::YLeaf volt_poll_intvl; //type: uint32
        ydk::YLeaf volt_delta; //type: uint32
        ydk::YLeaf volt_raw_data; //type: uint32
        ydk::YLeaf volt_sensor_value; //type: int32
        ydk::YLeaf volt_unit; //type: int32
        ydk::YLeaf volt_last_value; //type: uint32
        ydk::YLeaf volt_send_update; //type: boolean
        ydk::YLeaf volt_num_1sec_intervals; //type: int32
        ydk::YLeaf is_data_available; //type: boolean

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::VoltSensor


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::GearboxSummary : public ydk::Entity
{
    public:
        GearboxSummary();
        ~GearboxSummary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf gearbox_id; //type: string
        ydk::YLeaf is_data_available; //type: boolean
        ydk::YLeaf inited; //type: boolean
        ydk::YLeaf gopaque; //type: string
        ydk::YLeaf gnodeid; //type: string
        ydk::YLeaf gslice; //type: uint32
        ydk::YLeaf gport; //type: uint32
        ydk::YLeaf gdev_addr; //type: uint8
        ydk::YLeaf gdev_type; //type: uint8
        ydk::YLeaf gctrace_err_hdl; //type: string
        ydk::YLeaf gctrace_evt_hdl; //type: string
        ydk::YLeaf gctrace_intr_hdl; //type: string
        ydk::YLeaf gnext; //type: string
        ydk::YLeaf gparent; //type: string
        ydk::YLeaf syslanelosmask; //type: string
        ydk::YLeaf linelanelosmask; //type: string
        ydk::YLeaf syslaneenablemask; //type: string
        ydk::YLeaf linelaneenablemask; //type: string
        ydk::YLeaf line_lane_cnt; //type: string
        ydk::YLeaf sys_lane_cnt; //type: string
        ydk::YLeaf verbose; //type: boolean
        ydk::YLeaf dwnld_done; //type: boolean
        ydk::YLeaf chip_version; //type: string
        ydk::YLeaf reversion; //type: string
        ydk::YLeaf firmware_version; //type: string
        ydk::YLeaf ucode_checksum; //type: string
        ydk::YLeaf chip_modesel; //type: string
        ydk::YLeaf chip_ref_clocksel; //type: string
        ydk::YLeaf line_side_tx_pll; //type: string
        ydk::YLeaf line_tx_vco; //type: string
        ydk::YLeaf line_tx_vco_state; //type: string
        ydk::YLeaf line_side_rx_pll; //type: string
        ydk::YLeaf line_rx_vco; //type: string
        ydk::YLeaf line_rx_vco_state; //type: string

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::GearboxSummary


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2Summary : public ydk::Entity
{
    public:
        Gearbox2Summary();
        ~Gearbox2Summary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf gearbox2_id; //type: string
        ydk::YLeaf is_data_available; //type: boolean
        ydk::YLeaf inited; //type: boolean
        ydk::YLeaf gopaque; //type: string
        ydk::YLeaf gnodeid; //type: string
        ydk::YLeaf gslice; //type: uint32
        ydk::YLeaf gport; //type: uint32
        ydk::YLeaf gdev_addr; //type: uint8
        ydk::YLeaf gdev_type; //type: uint8
        ydk::YLeaf gctrace_err_hdl; //type: string
        ydk::YLeaf gctrace_evt_hdl; //type: string
        ydk::YLeaf gctrace_intr_hdl; //type: string
        ydk::YLeaf gparent; //type: string
        ydk::YLeaf line_lane_cnt; //type: string
        ydk::YLeaf sys_lane_cnt; //type: string
        ydk::YLeaf verbose; //type: boolean
        ydk::YLeaf dwnld_done; //type: boolean
        ydk::YLeaf chip_version; //type: string
        ydk::YLeaf reversion; //type: string
        ydk::YLeaf firmware_version; //type: string
        ydk::YLeaf ucode_checksum; //type: string
        ydk::YLeaf chip_modesel; //type: string
        ydk::YLeaf chip_ref_clocksel; //type: string

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2Summary


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearboxSummary : public ydk::Entity
{
    public:
        DualGearboxSummary();
        ~DualGearboxSummary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf dual_gearbox_id; //type: string
        ydk::YLeaf is_data_available; //type: boolean
        ydk::YLeaf inited; //type: boolean
        ydk::YLeaf gopaque; //type: string
        ydk::YLeaf gnodeid; //type: string
        ydk::YLeaf gslice; //type: uint32
        ydk::YLeaf gport; //type: uint32
        ydk::YLeaf gdev_addr; //type: uint8
        ydk::YLeaf gdev_type; //type: uint8
        ydk::YLeaf gctrace_err_hdl; //type: string
        ydk::YLeaf gctrace_evt_hdl; //type: string
        ydk::YLeaf gctrace_intr_hdl; //type: string
        ydk::YLeaf gnext; //type: string
        ydk::YLeaf gparent; //type: string
        ydk::YLeaf syslanelosmask; //type: string
        ydk::YLeaf linelanelosmask; //type: string
        ydk::YLeaf syslaneenablemask; //type: string
        ydk::YLeaf linelaneenablemask; //type: string
        ydk::YLeaf line_lane_cnt; //type: string
        ydk::YLeaf sys_lane_cnt; //type: string
        ydk::YLeaf verbose; //type: boolean
        ydk::YLeaf dwnld_done; //type: boolean
        ydk::YLeaf chip_version; //type: string
        ydk::YLeaf reversion; //type: string
        ydk::YLeaf firmware_version; //type: string
        ydk::YLeaf ucode_checksum; //type: string
        ydk::YLeaf chip_modesel; //type: string
        ydk::YLeaf chip_ref_clocksel; //type: string
        ydk::YLeaf line_side_tx_pll; //type: string
        ydk::YLeaf line_tx_vco; //type: string
        ydk::YLeaf line_tx_vco_state; //type: string
        ydk::YLeaf line_side_rx_pll; //type: string
        ydk::YLeaf line_rx_vco; //type: string
        ydk::YLeaf line_rx_vco_state; //type: string

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearboxSummary


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox : public ydk::Entity
{
    public:
        Gearbox();
        ~Gearbox();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf gearbox_id; //type: string
        class GearboxLane; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox::GearboxLane

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox::GearboxLane> > gearbox_lane;
        
}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox::GearboxLane : public ydk::Entity
{
    public:
        GearboxLane();
        ~GearboxLane();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf gearbox_lane_id; //type: string
        ydk::YLeaf is_data_available; //type: boolean
        ydk::YLeaf system_side_lanes; //type: string
        ydk::YLeaf cdr_lock_status_caui; //type: string
        ydk::YLeaf line_side_lanes; //type: string
        ydk::YLeaf lane_status_cdr; //type: string
        ydk::YLeaf lane_status_sig; //type: string
        ydk::YLeaf los_status; //type: string
        ydk::YLeaf system_side_loopback; //type: string
        ydk::YLeaf lane_side_loopback; //type: string

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox::GearboxLane


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2 : public ydk::Entity
{
    public:
        Gearbox2();
        ~Gearbox2();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf gearbox2_id; //type: string
        class Gearbox2Lane; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2::Gearbox2Lane

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2::Gearbox2Lane> > gearbox2_lane;
        
}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2::Gearbox2Lane : public ydk::Entity
{
    public:
        Gearbox2Lane();
        ~Gearbox2Lane();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf gearbox2_lane_id; //type: string
        ydk::YLeaf is_data_available; //type: boolean
        ydk::YLeaf system_side_lanes; //type: string
        ydk::YLeaf cdr_lock_status_caui; //type: string
        ydk::YLeaf line_side_lanes; //type: string
        ydk::YLeaf lane_status_cdr; //type: string
        ydk::YLeaf lane_status_sig; //type: string
        ydk::YLeaf los_status; //type: string
        ydk::YLeaf system_side_loopback; //type: string
        ydk::YLeaf lane_side_loopback; //type: string

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Gearbox2::Gearbox2Lane


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearbox : public ydk::Entity
{
    public:
        DualGearbox();
        ~DualGearbox();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf dual_gearbox_id; //type: string
        class DualGearboxLane; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearbox::DualGearboxLane

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearbox::DualGearboxLane> > dual_gearbox_lane;
        
}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearbox


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearbox::DualGearboxLane : public ydk::Entity
{
    public:
        DualGearboxLane();
        ~DualGearboxLane();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf dual_gearbox_lane_id; //type: string
        ydk::YLeaf is_data_available; //type: boolean
        ydk::YLeaf system_side_lanes; //type: string
        ydk::YLeaf cdr_lock_status_caui; //type: string
        ydk::YLeaf line_side_lanes; //type: string
        ydk::YLeaf lane_status_cdr; //type: string
        ydk::YLeaf lane_status_sig; //type: string
        ydk::YLeaf los_status; //type: string
        ydk::YLeaf system_side_loopback; //type: string
        ydk::YLeaf lane_side_loopback; //type: string

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::DualGearbox::DualGearboxLane


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Cpak : public ydk::Entity
{
    public:
        Cpak();
        ~Cpak();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf cpak_id; //type: string
        ydk::YLeaf is_data_available; //type: boolean
        ydk::YLeaf csignature; //type: string
        ydk::YLeaf cready; //type: boolean
        ydk::YLeaf cpassive; //type: boolean
        ydk::YLeaf chw_ver_major; //type: uint8
        ydk::YLeaf chw_ver_minor; //type: uint8
        ydk::YLeaf copaque; //type: string
        ydk::YLeaf cnodeid; //type: string
        ydk::YLeaf cslice; //type: uint32
        ydk::YLeaf cport; //type: uint32
        ydk::YLeaf cprt_addr; //type: uint8
        ydk::YLeaf cdev_addr; //type: uint8
        ydk::YLeaf cdev_sel; //type: uint8
        ydk::YLeaf cupgrade_inprogress; //type: uint8
        ydk::YLeaf coptics_type; //type: string
        ydk::YLeaf cctrace_err_hdl; //type: string
        ydk::YLeaf cctrace_evt_hdl; //type: string
        ydk::YLeaf cnext; //type: string
        ydk::YLeaf cparent; //type: string
        ydk::YLeaf crunning_image; //type: string
        ydk::YLeaf ccommitted_image; //type: string

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Cpak


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::ModenaSummary : public ydk::Entity
{
    public:
        ModenaSummary();
        ~ModenaSummary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf modena_id; //type: string
        ydk::YLeaf is_data_available; //type: boolean
        ydk::YLeaf mready; //type: boolean
        ydk::YLeaf mport_ctx_p; //type: string
        ydk::YLeaf mlevm; //type: string
        ydk::YLeaf mctrace_err_hdl; //type: string
        ydk::YLeaf mctrace_evt_hdl; //type: string
        ydk::YLeaf msignature; //type: string
        ydk::YLeaf mlpc_ready; //type: boolean
        ydk::YLeaf mopaque; //type: string
        ydk::YLeaf mnodeid; //type: string
        ydk::YLeaf mslice; //type: uint32
        ydk::YLeaf mport; //type: uint32
        ydk::YLeaf mdev_addr; //type: uint8
        ydk::YLeaf mrd_func; //type: string
        ydk::YLeaf mwr_func; //type: string
        ydk::YLeaf mnext; //type: string

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::ModenaSummary


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Modena : public ydk::Entity
{
    public:
        Modena();
        ~Modena();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf modena_id; //type: string
        class ModenaLane; //type: Controller::Oper::SliceControl::LocationList::FPGA::Slice::Modena::ModenaLane

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Oper::SliceControl::LocationList::FPGA::Slice::Modena::ModenaLane> > modena_lane;
        
}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Modena


class Controller::Oper::SliceControl::LocationList::FPGA::Slice::Modena::ModenaLane : public ydk::Entity
{
    public:
        ModenaLane();
        ~ModenaLane();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf modena_lane_id; //type: string
        ydk::YLeaf is_data_available; //type: boolean
        ydk::YLeaf oper_mode; //type: string

}; // Controller::Oper::SliceControl::LocationList::FPGA::Slice::Modena::ModenaLane


class Controller::Zen : public ydk::Entity
{
    public:
        Zen();
        ~Zen();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class ZenOper; //type: Controller::Zen::ZenOper
        class Trace; //type: Controller::Zen::Trace

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::ZenOper> zen_oper;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::Trace> > trace;
        
}; // Controller::Zen


class Controller::Zen::ZenOper : public ydk::Entity
{
    public:
        ZenOper();
        ~ZenOper();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class ZenLocation; //type: Controller::Zen::ZenOper::ZenLocation

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::ZenOper::ZenLocation> > zen_location;
        
}; // Controller::Zen::ZenOper


class Controller::Zen::ZenOper::ZenLocation : public ydk::Entity
{
    public:
        ZenLocation();
        ~ZenLocation();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf zen_location; //type: string
        ydk::YLeaf zen_pci_base_address; //type: string
        ydk::YLeaf zen_pci_dev_vendor_id; //type: string
        ydk::YLeaf zen_pci_dev_device_id; //type: string
        ydk::YLeaf zen_hp_desc; //type: string
        ydk::YLeaf zen_handle; //type: string
        ydk::YLeaf zen_msi; //type: uint32
        ydk::YLeaf zen_irq; //type: string
        ydk::YLeaf zen_regs; //type: string
        ydk::YLeaf zen_trace; //type: string
        ydk::YLeaf zen_levm; //type: string
        ydk::YLeaf zen_sensor_poll_timer_tree; //type: string
        ydk::YLeaf zen_sensor_poll_timer; //type: string
        ydk::YLeaf zen_sensor_data; //type: string
        ydk::YLeaf zen_sim; //type: boolean
        ydk::YLeaf zen_debug; //type: boolean
        ydk::YLeaf zen_card_type; //type: uint32
        ydk::YLeaf zen_slot_num; //type: uint32
        ydk::YLeaf zen_pm_hdl; //type: string
        ydk::YLeaf zen_hdl; //type: string
        ydk::YLeaf zen_ccc_hdl; //type: string
        ydk::YLeaf zen_platform_local_hdl; //type: string
        ydk::YLeaf zen_cdui_srvr_hdl; //type: string
        class ZenTempSensorDefault; //type: Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault
        class ZenVoltSensorDefault; //type: Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault
        class ZenCurrSensorDefault; //type: Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault> zen_temp_sensor_default;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault> zen_volt_sensor_default;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault> zen_curr_sensor_default;
        
}; // Controller::Zen::ZenOper::ZenLocation


class Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault : public ydk::Entity
{
    public:
        ZenTempSensorDefault();
        ~ZenTempSensorDefault();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ZenTempSensorData; //type: Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault::ZenTempSensorData

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault::ZenTempSensorData> zen_temp_sensor_data;
        
}; // Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault


class Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault::ZenTempSensorData : public ydk::Entity
{
    public:
        ZenTempSensorData();
        ~ZenTempSensorData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ZenTempSensor; //type: Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault::ZenTempSensorData::ZenTempSensor

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault::ZenTempSensorData::ZenTempSensor> > zen_temp_sensor;
        
}; // Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault::ZenTempSensorData


class Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault::ZenTempSensorData::ZenTempSensor : public ydk::Entity
{
    public:
        ZenTempSensor();
        ~ZenTempSensor();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf zen_temp_sensor; //type: string
        ydk::YLeaf zen_temp_sensor_id; //type: string
        ydk::YLeaf zen_temp_dev_addr; //type: uint32
        ydk::YLeaf zen_temp_poll_intvl; //type: uint32
        ydk::YLeaf zen_temp_delta; //type: uint32
        ydk::YLeaf zen_temp_raw_data; //type: uint32
        ydk::YLeaf zen_temp_sensor_value; //type: int32
        ydk::YLeaf zen_temp_unit; //type: int32
        ydk::YLeaf zen_temp_last_value; //type: uint32
        ydk::YLeaf zen_temp_send_update; //type: boolean
        ydk::YLeaf zen_temp_num_1sec_intervals; //type: int32

}; // Controller::Zen::ZenOper::ZenLocation::ZenTempSensorDefault::ZenTempSensorData::ZenTempSensor


class Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault : public ydk::Entity
{
    public:
        ZenVoltSensorDefault();
        ~ZenVoltSensorDefault();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ZenVoltSensorData; //type: Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault::ZenVoltSensorData

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault::ZenVoltSensorData> zen_volt_sensor_data;
        
}; // Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault


class Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault::ZenVoltSensorData : public ydk::Entity
{
    public:
        ZenVoltSensorData();
        ~ZenVoltSensorData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ZenVoltSensor; //type: Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault::ZenVoltSensorData::ZenVoltSensor

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault::ZenVoltSensorData::ZenVoltSensor> > zen_volt_sensor;
        
}; // Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault::ZenVoltSensorData


class Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault::ZenVoltSensorData::ZenVoltSensor : public ydk::Entity
{
    public:
        ZenVoltSensor();
        ~ZenVoltSensor();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf zen_volt_sensor; //type: int32
        ydk::YLeaf zen_volt_sensor_id; //type: string
        ydk::YLeaf zen_volt_dev_addr; //type: uint32
        ydk::YLeaf zen_volt_poll_intvl; //type: uint32
        ydk::YLeaf zen_volt_delta; //type: uint32
        ydk::YLeaf zen_volt_raw_data; //type: uint32
        ydk::YLeaf zen_volt_sensor_value; //type: int32
        ydk::YLeaf zen_volt_unit; //type: int32
        ydk::YLeaf zen_volt_last_value; //type: uint32
        ydk::YLeaf zen_volt_send_update; //type: boolean
        ydk::YLeaf zen_volt_num_1sec_intervals; //type: int32

}; // Controller::Zen::ZenOper::ZenLocation::ZenVoltSensorDefault::ZenVoltSensorData::ZenVoltSensor


class Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault : public ydk::Entity
{
    public:
        ZenCurrSensorDefault();
        ~ZenCurrSensorDefault();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ZenCurrSensorData; //type: Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault::ZenCurrSensorData

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault::ZenCurrSensorData> zen_curr_sensor_data;
        
}; // Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault


class Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault::ZenCurrSensorData : public ydk::Entity
{
    public:
        ZenCurrSensorData();
        ~ZenCurrSensorData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class ZenCurrSensor; //type: Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault::ZenCurrSensorData::ZenCurrSensor

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault::ZenCurrSensorData::ZenCurrSensor> > zen_curr_sensor;
        
}; // Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault::ZenCurrSensorData


class Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault::ZenCurrSensorData::ZenCurrSensor : public ydk::Entity
{
    public:
        ZenCurrSensor();
        ~ZenCurrSensor();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf zen_curr_sensor; //type: string
        ydk::YLeaf zen_curr_sensor_id; //type: string
        ydk::YLeaf zen_curr_dev_addr; //type: uint32
        ydk::YLeaf zen_curr_poll_intvl; //type: uint32
        ydk::YLeaf zen_curr_delta; //type: uint32
        ydk::YLeaf zen_curr_raw_data; //type: uint32
        ydk::YLeaf zen_curr_sensor_value; //type: int32
        ydk::YLeaf zen_curr_unit; //type: int32
        ydk::YLeaf zen_curr_last_value; //type: uint32
        ydk::YLeaf zen_curr_send_update; //type: boolean
        ydk::YLeaf zen_curr_num_1sec_intervals; //type: int32

}; // Controller::Zen::ZenOper::ZenLocation::ZenCurrSensorDefault::ZenCurrSensorData::ZenCurrSensor


class Controller::Zen::Trace : public ydk::Entity
{
    public:
        Trace();
        ~Trace();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf buffer; //type: string
        class Location; //type: Controller::Zen::Trace::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::Trace::Location> > location;
        
}; // Controller::Zen::Trace


class Controller::Zen::Trace::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class AllOptions; //type: Controller::Zen::Trace::Location::AllOptions

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::Trace::Location::AllOptions> > all_options;
        
}; // Controller::Zen::Trace::Location


class Controller::Zen::Trace::Location::AllOptions : public ydk::Entity
{
    public:
        AllOptions();
        ~AllOptions();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf option; //type: string
        class TraceBlocks; //type: Controller::Zen::Trace::Location::AllOptions::TraceBlocks

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Zen::Trace::Location::AllOptions::TraceBlocks> > trace_blocks;
        
}; // Controller::Zen::Trace::Location::AllOptions


class Controller::Zen::Trace::Location::AllOptions::TraceBlocks : public ydk::Entity
{
    public:
        TraceBlocks();
        ~TraceBlocks();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf data; //type: string

}; // Controller::Zen::Trace::Location::AllOptions::TraceBlocks


class Controller::CccDriver : public ydk::Entity
{
    public:
        CccDriver();
        ~CccDriver();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Trace; //type: Controller::CccDriver::Trace
        class Bootflash; //type: Controller::CccDriver::Bootflash
        class Inventory; //type: Controller::CccDriver::Inventory
        class Power; //type: Controller::CccDriver::Power
        class ResetHistory; //type: Controller::CccDriver::ResetHistory
        class Register; //type: Controller::CccDriver::Register
        class Ejector; //type: Controller::CccDriver::Ejector
        class I2CDev; //type: Controller::CccDriver::I2CDev
        class Ethernet; //type: Controller::CccDriver::Ethernet
        class EventHistory; //type: Controller::CccDriver::EventHistory
        class OirHistory; //type: Controller::CccDriver::OirHistory
        class NotifHistory; //type: Controller::CccDriver::NotifHistory
        class Slave; //type: Controller::CccDriver::Slave
        class Action; //type: Controller::CccDriver::Action

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Trace> > trace;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Bootflash> bootflash;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Inventory> inventory;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Power> power;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::ResetHistory> reset_history;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Register> register_;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Ejector> ejector;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::I2CDev> i2c_dev;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Ethernet> ethernet;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::EventHistory> event_history;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::OirHistory> oir_history;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::NotifHistory> notif_history;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave> slave;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Action> action;
        
}; // Controller::CccDriver


class Controller::CccDriver::Trace : public ydk::Entity
{
    public:
        Trace();
        ~Trace();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf buffer; //type: string
        class Location; //type: Controller::CccDriver::Trace::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Trace::Location> > location;
        
}; // Controller::CccDriver::Trace


class Controller::CccDriver::Trace::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class AllOptions; //type: Controller::CccDriver::Trace::Location::AllOptions

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Trace::Location::AllOptions> > all_options;
        
}; // Controller::CccDriver::Trace::Location


class Controller::CccDriver::Trace::Location::AllOptions : public ydk::Entity
{
    public:
        AllOptions();
        ~AllOptions();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf option; //type: string
        class TraceBlocks; //type: Controller::CccDriver::Trace::Location::AllOptions::TraceBlocks

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Trace::Location::AllOptions::TraceBlocks> > trace_blocks;
        
}; // Controller::CccDriver::Trace::Location::AllOptions


class Controller::CccDriver::Trace::Location::AllOptions::TraceBlocks : public ydk::Entity
{
    public:
        TraceBlocks();
        ~TraceBlocks();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf data; //type: string

}; // Controller::CccDriver::Trace::Location::AllOptions::TraceBlocks


class Controller::CccDriver::Bootflash : public ydk::Entity
{
    public:
        Bootflash();
        ~Bootflash();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Info; //type: Controller::CccDriver::Bootflash::Info
        class Status; //type: Controller::CccDriver::Bootflash::Status
        class CreStatus; //type: Controller::CccDriver::Bootflash::CreStatus

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Bootflash::Info> info;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Bootflash::Status> status;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Bootflash::CreStatus> cre_status;
        
}; // Controller::CccDriver::Bootflash


class Controller::CccDriver::Bootflash::Info : public ydk::Entity
{
    public:
        Info();
        ~Info();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::Bootflash::Info::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Bootflash::Info::Location> > location;
        
}; // Controller::CccDriver::Bootflash::Info


class Controller::CccDriver::Bootflash::Info::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class BfInfo; //type: Controller::CccDriver::Bootflash::Info::Location::BfInfo

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Bootflash::Info::Location::BfInfo> bf_info;
        
}; // Controller::CccDriver::Bootflash::Info::Location


class Controller::CccDriver::Bootflash::Info::Location::BfInfo : public ydk::Entity
{
    public:
        BfInfo();
        ~BfInfo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList bf_info_values; //type: list of  string

}; // Controller::CccDriver::Bootflash::Info::Location::BfInfo


class Controller::CccDriver::Bootflash::Status : public ydk::Entity
{
    public:
        Status();
        ~Status();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::Bootflash::Status::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Bootflash::Status::Location> > location;
        
}; // Controller::CccDriver::Bootflash::Status


class Controller::CccDriver::Bootflash::Status::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class BfStatus; //type: Controller::CccDriver::Bootflash::Status::Location::BfStatus

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Bootflash::Status::Location::BfStatus> bf_status;
        
}; // Controller::CccDriver::Bootflash::Status::Location


class Controller::CccDriver::Bootflash::Status::Location::BfStatus : public ydk::Entity
{
    public:
        BfStatus();
        ~BfStatus();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList bf_status_values; //type: list of  string

}; // Controller::CccDriver::Bootflash::Status::Location::BfStatus


class Controller::CccDriver::Bootflash::CreStatus : public ydk::Entity
{
    public:
        CreStatus();
        ~CreStatus();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::Bootflash::CreStatus::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Bootflash::CreStatus::Location> > location;
        
}; // Controller::CccDriver::Bootflash::CreStatus


class Controller::CccDriver::Bootflash::CreStatus::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class BfStatus; //type: Controller::CccDriver::Bootflash::CreStatus::Location::BfStatus

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Bootflash::CreStatus::Location::BfStatus> bf_status;
        
}; // Controller::CccDriver::Bootflash::CreStatus::Location


class Controller::CccDriver::Bootflash::CreStatus::Location::BfStatus : public ydk::Entity
{
    public:
        BfStatus();
        ~BfStatus();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList bf_status_values; //type: list of  string

}; // Controller::CccDriver::Bootflash::CreStatus::Location::BfStatus


class Controller::CccDriver::Inventory : public ydk::Entity
{
    public:
        Inventory();
        ~Inventory();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Summary; //type: Controller::CccDriver::Inventory::Summary
        class Version; //type: Controller::CccDriver::Inventory::Version
        class Status; //type: Controller::CccDriver::Inventory::Status
        class Detail; //type: Controller::CccDriver::Inventory::Detail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Inventory::Summary> summary;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Inventory::Version> version;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Inventory::Status> status;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Inventory::Detail> detail;
        
}; // Controller::CccDriver::Inventory


class Controller::CccDriver::Inventory::Summary : public ydk::Entity
{
    public:
        Summary();
        ~Summary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class CccInvSummary; //type: Controller::CccDriver::Inventory::Summary::CccInvSummary

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Inventory::Summary::CccInvSummary> > ccc_inv_summary;
        
}; // Controller::CccDriver::Inventory::Summary


class Controller::CccDriver::Inventory::Summary::CccInvSummary : public ydk::Entity
{
    public:
        CccInvSummary();
        ~CccInvSummary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        ydk::YLeaf ccc_inv_pid_string; //type: string
        ydk::YLeaf ccc_inv_slot_number; //type: uint32
        ydk::YLeaf ccc_inv_serial_number; //type: string
        ydk::YLeaf ccc_inv_hw_version; //type: string
        ydk::YLeaf ccc_inv_card_state; //type: string

}; // Controller::CccDriver::Inventory::Summary::CccInvSummary


class Controller::CccDriver::Inventory::Version : public ydk::Entity
{
    public:
        Version();
        ~Version();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class CccInvVersion; //type: Controller::CccDriver::Inventory::Version::CccInvVersion

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Inventory::Version::CccInvVersion> > ccc_inv_version;
        
}; // Controller::CccDriver::Inventory::Version


class Controller::CccDriver::Inventory::Version::CccInvVersion : public ydk::Entity
{
    public:
        CccInvVersion();
        ~CccInvVersion();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        ydk::YLeaf ccc_inv_pid_string; //type: string
        ydk::YLeaf ccc_inv_ccc_version; //type: string
        ydk::YLeaf ccc_inv_fpga_version; //type: string
        ydk::YLeaf ccc_inv_pon_version; //type: string
        ydk::YLeaf ccc_inv_switch_version; //type: string

}; // Controller::CccDriver::Inventory::Version::CccInvVersion


class Controller::CccDriver::Inventory::Status : public ydk::Entity
{
    public:
        Status();
        ~Status();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class CccInvStatus; //type: Controller::CccDriver::Inventory::Status::CccInvStatus

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Inventory::Status::CccInvStatus> > ccc_inv_status;
        
}; // Controller::CccDriver::Inventory::Status


class Controller::CccDriver::Inventory::Status::CccInvStatus : public ydk::Entity
{
    public:
        CccInvStatus();
        ~CccInvStatus();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class CccInvStatusList; //type: Controller::CccDriver::Inventory::Status::CccInvStatus::CccInvStatusList

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Inventory::Status::CccInvStatus::CccInvStatusList> ccc_inv_status_list;
        
}; // Controller::CccDriver::Inventory::Status::CccInvStatus


class Controller::CccDriver::Inventory::Status::CccInvStatus::CccInvStatusList : public ydk::Entity
{
    public:
        CccInvStatusList();
        ~CccInvStatusList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList ccc_inv_status_values; //type: list of  string

}; // Controller::CccDriver::Inventory::Status::CccInvStatus::CccInvStatusList


class Controller::CccDriver::Inventory::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class CccInvDetail; //type: Controller::CccDriver::Inventory::Detail::CccInvDetail

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Inventory::Detail::CccInvDetail> > ccc_inv_detail;
        
}; // Controller::CccDriver::Inventory::Detail


class Controller::CccDriver::Inventory::Detail::CccInvDetail : public ydk::Entity
{
    public:
        CccInvDetail();
        ~CccInvDetail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class CccInvDetailList; //type: Controller::CccDriver::Inventory::Detail::CccInvDetail::CccInvDetailList

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Inventory::Detail::CccInvDetail::CccInvDetailList> ccc_inv_detail_list;
        
}; // Controller::CccDriver::Inventory::Detail::CccInvDetail


class Controller::CccDriver::Inventory::Detail::CccInvDetail::CccInvDetailList : public ydk::Entity
{
    public:
        CccInvDetailList();
        ~CccInvDetailList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList ccc_inv_detail_values; //type: list of  string

}; // Controller::CccDriver::Inventory::Detail::CccInvDetail::CccInvDetailList


class Controller::CccDriver::Power : public ydk::Entity
{
    public:
        Power();
        ~Power();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class MasterAccess; //type: Controller::CccDriver::Power::MasterAccess

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Power::MasterAccess> master_access;
        
}; // Controller::CccDriver::Power


class Controller::CccDriver::Power::MasterAccess : public ydk::Entity
{
    public:
        MasterAccess();
        ~MasterAccess();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Summary; //type: Controller::CccDriver::Power::MasterAccess::Summary
        class Detail; //type: Controller::CccDriver::Power::MasterAccess::Detail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Power::MasterAccess::Summary> summary;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Power::MasterAccess::Detail> detail;
        
}; // Controller::CccDriver::Power::MasterAccess


class Controller::CccDriver::Power::MasterAccess::Summary : public ydk::Entity
{
    public:
        Summary();
        ~Summary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class PowerSummary; //type: Controller::CccDriver::Power::MasterAccess::Summary::PowerSummary

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Power::MasterAccess::Summary::PowerSummary> > power_summary;
        
}; // Controller::CccDriver::Power::MasterAccess::Summary


class Controller::CccDriver::Power::MasterAccess::Summary::PowerSummary : public ydk::Entity
{
    public:
        PowerSummary();
        ~PowerSummary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf ccc_power_location; //type: string
        ydk::YLeaf card_type; //type: string
        ydk::YLeaf power_state; //type: string

}; // Controller::CccDriver::Power::MasterAccess::Summary::PowerSummary


class Controller::CccDriver::Power::MasterAccess::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::Power::MasterAccess::Detail::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Power::MasterAccess::Detail::Location> > location;
        
}; // Controller::CccDriver::Power::MasterAccess::Detail


class Controller::CccDriver::Power::MasterAccess::Detail::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class PowerDetails; //type: Controller::CccDriver::Power::MasterAccess::Detail::Location::PowerDetails

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Power::MasterAccess::Detail::Location::PowerDetails> power_details;
        
}; // Controller::CccDriver::Power::MasterAccess::Detail::Location


class Controller::CccDriver::Power::MasterAccess::Detail::Location::PowerDetails : public ydk::Entity
{
    public:
        PowerDetails();
        ~PowerDetails();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList power_details_values; //type: list of  string

}; // Controller::CccDriver::Power::MasterAccess::Detail::Location::PowerDetails


class Controller::CccDriver::ResetHistory : public ydk::Entity
{
    public:
        ResetHistory();
        ~ResetHistory();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Onchip; //type: Controller::CccDriver::ResetHistory::Onchip
        class Onboard; //type: Controller::CccDriver::ResetHistory::Onboard

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::ResetHistory::Onchip> onchip;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::ResetHistory::Onboard> onboard;
        
}; // Controller::CccDriver::ResetHistory


class Controller::CccDriver::ResetHistory::Onchip : public ydk::Entity
{
    public:
        Onchip();
        ~Onchip();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::ResetHistory::Onchip::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::ResetHistory::Onchip::Location> > location;
        
}; // Controller::CccDriver::ResetHistory::Onchip


class Controller::CccDriver::ResetHistory::Onchip::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc; //type: string
        ydk::YLeaf ccc_reset_timeofday; //type: string
        ydk::YLeaf ccc_reset_uptime; //type: string
        ydk::YLeaf ccc_hw_reset_count; //type: uint32
        class CccResetEntry; //type: Controller::CccDriver::ResetHistory::Onchip::Location::CccResetEntry

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::ResetHistory::Onchip::Location::CccResetEntry> > ccc_reset_entry;
        
}; // Controller::CccDriver::ResetHistory::Onchip::Location


class Controller::CccDriver::ResetHistory::Onchip::Location::CccResetEntry : public ydk::Entity
{
    public:
        CccResetEntry();
        ~CccResetEntry();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf ccc_reset_entry; //type: int32
        ydk::YLeaf ccc_reset_pos; //type: uint32
        ydk::YLeaf ccc_reset_idx; //type: uint32
        ydk::YLeaf ccc_reset_word0; //type: uint32
        ydk::YLeaf ccc_reset_pidx; //type: uint32
        ydk::YLeaf ccc_reset_sor; //type: uint32
        ydk::YLeaf ccc_reset_sor_string; //type: string
        ydk::YLeaf ccc_reset_cmd; //type: uint32
        ydk::YLeaf ccc_reset_cmd_string; //type: string
        ydk::YLeaf ccc_reset_hrm; //type: uint32
        ydk::YLeaf ccc_reset_srm; //type: uint32
        ydk::YLeaf ccc_reset_hr; //type: uint32
        ydk::YLeaf ccc_reset_sr; //type: uint32
        ydk::YLeaf ccc_reset_word1; //type: uint32
        ydk::YLeaf ccc_reset_date; //type: string

}; // Controller::CccDriver::ResetHistory::Onchip::Location::CccResetEntry


class Controller::CccDriver::ResetHistory::Onboard : public ydk::Entity
{
    public:
        Onboard();
        ~Onboard();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::ResetHistory::Onboard::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::ResetHistory::Onboard::Location> > location;
        
}; // Controller::CccDriver::ResetHistory::Onboard


class Controller::CccDriver::ResetHistory::Onboard::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf loc; //type: string
        ydk::YLeaf ccc_reset_scratch_sig; //type: string
        ydk::YLeaf ccc_reset_scratch_version; //type: uint32
        ydk::YLeaf ccc_reset_history_sig; //type: string
        ydk::YLeaf ccc_reset_history_count; //type: uint32
        class CccResetOnboardEntry; //type: Controller::CccDriver::ResetHistory::Onboard::Location::CccResetOnboardEntry

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::ResetHistory::Onboard::Location::CccResetOnboardEntry> > ccc_reset_onboard_entry;
        
}; // Controller::CccDriver::ResetHistory::Onboard::Location


class Controller::CccDriver::ResetHistory::Onboard::Location::CccResetOnboardEntry : public ydk::Entity
{
    public:
        CccResetOnboardEntry();
        ~CccResetOnboardEntry();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf ccc_reset_onboard_entry; //type: int32
        ydk::YLeaf ccc_reset_pos; //type: uint32
        ydk::YLeaf ccc_reset_idx; //type: uint32
        ydk::YLeaf ccc_reset_word0; //type: uint32
        ydk::YLeaf ccc_reset_pidx; //type: uint32
        ydk::YLeaf ccc_reset_sor; //type: uint32
        ydk::YLeaf ccc_reset_sor_string; //type: string
        ydk::YLeaf ccc_reset_cmd; //type: uint32
        ydk::YLeaf ccc_reset_cmd_string; //type: string
        ydk::YLeaf ccc_reset_hrm; //type: uint32
        ydk::YLeaf ccc_reset_srm; //type: uint32
        ydk::YLeaf ccc_reset_hr; //type: uint32
        ydk::YLeaf ccc_reset_sr; //type: uint32
        ydk::YLeaf ccc_reset_word1; //type: uint32
        ydk::YLeaf ccc_reset_date; //type: string

}; // Controller::CccDriver::ResetHistory::Onboard::Location::CccResetOnboardEntry


class Controller::CccDriver::Register : public ydk::Entity
{
    public:
        Register();
        ~Register();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class RegisterLocation; //type: Controller::CccDriver::Register::RegisterLocation

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Register::RegisterLocation> > register_location;
        
}; // Controller::CccDriver::Register


class Controller::CccDriver::Register::RegisterLocation : public ydk::Entity
{
    public:
        RegisterLocation();
        ~RegisterLocation();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf register_location; //type: string
        class CccBlockNumber; //type: Controller::CccDriver::Register::RegisterLocation::CccBlockNumber
        class CccOffset; //type: Controller::CccDriver::Register::RegisterLocation::CccOffset
        class CccAddress; //type: Controller::CccDriver::Register::RegisterLocation::CccAddress

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Register::RegisterLocation::CccBlockNumber> > ccc_block_number;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Register::RegisterLocation::CccOffset> > ccc_offset;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Register::RegisterLocation::CccAddress> > ccc_address;
        
}; // Controller::CccDriver::Register::RegisterLocation


class Controller::CccDriver::Register::RegisterLocation::CccBlockNumber : public ydk::Entity
{
    public:
        CccBlockNumber();
        ~CccBlockNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf ccc_block_num; //type: uint32
        ydk::YLeaf block_location; //type: string
        ydk::YLeaf ccc_block_nm; //type: string
        class CccRegisterNumber; //type: Controller::CccDriver::Register::RegisterLocation::CccBlockNumber::CccRegisterNumber

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Register::RegisterLocation::CccBlockNumber::CccRegisterNumber> > ccc_register_number;
        
}; // Controller::CccDriver::Register::RegisterLocation::CccBlockNumber


class Controller::CccDriver::Register::RegisterLocation::CccBlockNumber::CccRegisterNumber : public ydk::Entity
{
    public:
        CccRegisterNumber();
        ~CccRegisterNumber();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf index_; //type: uint32
        ydk::YLeaf ccc_register_name; //type: string
        class CccData; //type: Controller::CccDriver::Register::RegisterLocation::CccBlockNumber::CccRegisterNumber::CccData

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Register::RegisterLocation::CccBlockNumber::CccRegisterNumber::CccData> > ccc_data;
        
}; // Controller::CccDriver::Register::RegisterLocation::CccBlockNumber::CccRegisterNumber


class Controller::CccDriver::Register::RegisterLocation::CccBlockNumber::CccRegisterNumber::CccData : public ydk::Entity
{
    public:
        CccData();
        ~CccData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf name; //type: string
        ydk::YLeaf offset; //type: uint32
        ydk::YLeaf value_; //type: uint32

}; // Controller::CccDriver::Register::RegisterLocation::CccBlockNumber::CccRegisterNumber::CccData


class Controller::CccDriver::Register::RegisterLocation::CccOffset : public ydk::Entity
{
    public:
        CccOffset();
        ~CccOffset();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf hex_offset; //type: string
        class CccRegOffsetData; //type: Controller::CccDriver::Register::RegisterLocation::CccOffset::CccRegOffsetData

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Register::RegisterLocation::CccOffset::CccRegOffsetData> > ccc_reg_offset_data;
        
}; // Controller::CccDriver::Register::RegisterLocation::CccOffset


class Controller::CccDriver::Register::RegisterLocation::CccOffset::CccRegOffsetData : public ydk::Entity
{
    public:
        CccRegOffsetData();
        ~CccRegOffsetData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf ccc_reg_off_addr; //type: uint32
        ydk::YLeaf reg_off_value; //type: string

}; // Controller::CccDriver::Register::RegisterLocation::CccOffset::CccRegOffsetData


class Controller::CccDriver::Register::RegisterLocation::CccAddress : public ydk::Entity
{
    public:
        CccAddress();
        ~CccAddress();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf start_hex_addr; //type: string
        ydk::YLeaf end_hex_addr; //type: string
        class CccRegRangeAddrList; //type: Controller::CccDriver::Register::RegisterLocation::CccAddress::CccRegRangeAddrList

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Register::RegisterLocation::CccAddress::CccRegRangeAddrList> > ccc_reg_range_addr_list;
        
}; // Controller::CccDriver::Register::RegisterLocation::CccAddress


class Controller::CccDriver::Register::RegisterLocation::CccAddress::CccRegRangeAddrList : public ydk::Entity
{
    public:
        CccRegRangeAddrList();
        ~CccRegRangeAddrList();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf ccc_reg_range_addr; //type: uint32
        class CccRegData; //type: Controller::CccDriver::Register::RegisterLocation::CccAddress::CccRegRangeAddrList::CccRegData

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Register::RegisterLocation::CccAddress::CccRegRangeAddrList::CccRegData> > ccc_reg_data;
        
}; // Controller::CccDriver::Register::RegisterLocation::CccAddress::CccRegRangeAddrList


class Controller::CccDriver::Register::RegisterLocation::CccAddress::CccRegRangeAddrList::CccRegData : public ydk::Entity
{
    public:
        CccRegData();
        ~CccRegData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf ccc_reg_addr; //type: uint32
        ydk::YLeaf reg_value; //type: string

}; // Controller::CccDriver::Register::RegisterLocation::CccAddress::CccRegRangeAddrList::CccRegData


class Controller::CccDriver::Ejector : public ydk::Entity
{
    public:
        Ejector();
        ~Ejector();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Status; //type: Controller::CccDriver::Ejector::Status

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Ejector::Status> status;
        
}; // Controller::CccDriver::Ejector


class Controller::CccDriver::Ejector::Status : public ydk::Entity
{
    public:
        Status();
        ~Status();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class CccEjectorStatus; //type: Controller::CccDriver::Ejector::Status::CccEjectorStatus

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Ejector::Status::CccEjectorStatus> > ccc_ejector_status;
        
}; // Controller::CccDriver::Ejector::Status


class Controller::CccDriver::Ejector::Status::CccEjectorStatus : public ydk::Entity
{
    public:
        CccEjectorStatus();
        ~CccEjectorStatus();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        ydk::YLeaf ccc_is_fc_card_type; //type: boolean
        ydk::YLeaf ccc_is_lc_card_type; //type: boolean
        ydk::YLeaf ccc_is_rp_sc_card_type; //type: boolean
        ydk::YLeaf ccc_ejc_card_type; //type: uint32
        ydk::YLeaf ccc_ejc_platform; //type: uint32
        ydk::YLeaf ccc_ejc_board_type; //type: string
        ydk::YLeaf ccc_ejc_card_slot; //type: uint32
        ydk::YLeaf ccc_ejc_card_version; //type: string
        ydk::YLeaf ccc_ejc_board_version; //type: string
        ydk::YLeaf ccc_ejc_hw_version; //type: string
        ydk::YLeaf ccc_ejc_core_version; //type: string
        ydk::YLeaf ccc_ejc_pon_version; //type: string
        ydk::YLeaf ccc_ejc_rp_supported; //type: string
        ydk::YLeaf ccc_ejc_enable; //type: string
        ydk::YLeaf ccc_ejc_status; //type: string
        ydk::YLeaf ccc_ejc_rp_pex_csr; //type: string
        ydk::YLeaf ccc_ejc_gp_live; //type: string
        ydk::YLeaf ccc_ejc_gp_status; //type: string
        ydk::YLeaf ccc_ejc_fc_pex_csr; //type: string
        ydk::YLeaf ccc_ejc_fc_ejector_support; //type: string
        ydk::YLeaf ccc_ejc_lc_pex_csr; //type: string
        ydk::YLeaf ccc_ejc_lc_ejector_support; //type: string

}; // Controller::CccDriver::Ejector::Status::CccEjectorStatus


class Controller::CccDriver::I2CDev : public ydk::Entity
{
    public:
        I2CDev();
        ~I2CDev();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class CpuComplex; //type: Controller::CccDriver::I2CDev::CpuComplex
        class Ioexpander; //type: Controller::CccDriver::I2CDev::Ioexpander

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::I2CDev::CpuComplex> cpu_complex;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::I2CDev::Ioexpander> ioexpander;
        
}; // Controller::CccDriver::I2CDev


class Controller::CccDriver::I2CDev::CpuComplex : public ydk::Entity
{
    public:
        CpuComplex();
        ~CpuComplex();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::I2CDev::CpuComplex::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::I2CDev::CpuComplex::Location> > location;
        
}; // Controller::CccDriver::I2CDev::CpuComplex


class Controller::CccDriver::I2CDev::CpuComplex::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class CpuComplexDetail; //type: Controller::CccDriver::I2CDev::CpuComplex::Location::CpuComplexDetail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::I2CDev::CpuComplex::Location::CpuComplexDetail> cpu_complex_detail;
        
}; // Controller::CccDriver::I2CDev::CpuComplex::Location


class Controller::CccDriver::I2CDev::CpuComplex::Location::CpuComplexDetail : public ydk::Entity
{
    public:
        CpuComplexDetail();
        ~CpuComplexDetail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList cpu_complex_values; //type: list of  string

}; // Controller::CccDriver::I2CDev::CpuComplex::Location::CpuComplexDetail


class Controller::CccDriver::I2CDev::Ioexpander : public ydk::Entity
{
    public:
        Ioexpander();
        ~Ioexpander();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::I2CDev::Ioexpander::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::I2CDev::Ioexpander::Location> > location;
        
}; // Controller::CccDriver::I2CDev::Ioexpander


class Controller::CccDriver::I2CDev::Ioexpander::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class IoExpVal; //type: Controller::CccDriver::I2CDev::Ioexpander::Location::IoExpVal

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::I2CDev::Ioexpander::Location::IoExpVal> io_exp_val;
        
}; // Controller::CccDriver::I2CDev::Ioexpander::Location


class Controller::CccDriver::I2CDev::Ioexpander::Location::IoExpVal : public ydk::Entity
{
    public:
        IoExpVal();
        ~IoExpVal();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList io_exp_details; //type: list of  string

}; // Controller::CccDriver::I2CDev::Ioexpander::Location::IoExpVal


class Controller::CccDriver::Ethernet : public ydk::Entity
{
    public:
        Ethernet();
        ~Ethernet();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class EthernetStatus; //type: Controller::CccDriver::Ethernet::EthernetStatus
        class EthernetCounters; //type: Controller::CccDriver::Ethernet::EthernetCounters

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Ethernet::EthernetStatus> ethernet_status;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Ethernet::EthernetCounters> ethernet_counters;
        
}; // Controller::CccDriver::Ethernet


class Controller::CccDriver::Ethernet::EthernetStatus : public ydk::Entity
{
    public:
        EthernetStatus();
        ~EthernetStatus();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::Ethernet::EthernetStatus::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Ethernet::EthernetStatus::Location> > location;
        
}; // Controller::CccDriver::Ethernet::EthernetStatus


class Controller::CccDriver::Ethernet::EthernetStatus::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class EthernetStatus_; //type: Controller::CccDriver::Ethernet::EthernetStatus::Location::EthernetStatus_

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Ethernet::EthernetStatus::Location::EthernetStatus_> ethernet_status;
        
}; // Controller::CccDriver::Ethernet::EthernetStatus::Location


class Controller::CccDriver::Ethernet::EthernetStatus::Location::EthernetStatus_ : public ydk::Entity
{
    public:
        EthernetStatus_();
        ~EthernetStatus_();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList ethernet_status_values; //type: list of  string

}; // Controller::CccDriver::Ethernet::EthernetStatus::Location::EthernetStatus_


class Controller::CccDriver::Ethernet::EthernetCounters : public ydk::Entity
{
    public:
        EthernetCounters();
        ~EthernetCounters();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::Ethernet::EthernetCounters::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Ethernet::EthernetCounters::Location> > location;
        
}; // Controller::CccDriver::Ethernet::EthernetCounters


class Controller::CccDriver::Ethernet::EthernetCounters::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class EthernetCounters_; //type: Controller::CccDriver::Ethernet::EthernetCounters::Location::EthernetCounters_

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Ethernet::EthernetCounters::Location::EthernetCounters_> ethernet_counters;
        
}; // Controller::CccDriver::Ethernet::EthernetCounters::Location


class Controller::CccDriver::Ethernet::EthernetCounters::Location::EthernetCounters_ : public ydk::Entity
{
    public:
        EthernetCounters_();
        ~EthernetCounters_();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList ethernet_counter_values; //type: list of  string

}; // Controller::CccDriver::Ethernet::EthernetCounters::Location::EthernetCounters_


class Controller::CccDriver::EventHistory : public ydk::Entity
{
    public:
        EventHistory();
        ~EventHistory();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Brief; //type: Controller::CccDriver::EventHistory::Brief
        class Detail; //type: Controller::CccDriver::EventHistory::Detail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::EventHistory::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::EventHistory::Detail> detail;
        
}; // Controller::CccDriver::EventHistory


class Controller::CccDriver::EventHistory::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::EventHistory::Brief::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::EventHistory::Brief::Location> > location;
        
}; // Controller::CccDriver::EventHistory::Brief


class Controller::CccDriver::EventHistory::Brief::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class CardEventHistBrief; //type: Controller::CccDriver::EventHistory::Brief::Location::CardEventHistBrief

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::EventHistory::Brief::Location::CardEventHistBrief> card_event_hist_brief;
        
}; // Controller::CccDriver::EventHistory::Brief::Location


class Controller::CccDriver::EventHistory::Brief::Location::CardEventHistBrief : public ydk::Entity
{
    public:
        CardEventHistBrief();
        ~CardEventHistBrief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList card_event_hist_brief_values; //type: list of  string

}; // Controller::CccDriver::EventHistory::Brief::Location::CardEventHistBrief


class Controller::CccDriver::EventHistory::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::EventHistory::Detail::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::EventHistory::Detail::Location> > location;
        
}; // Controller::CccDriver::EventHistory::Detail


class Controller::CccDriver::EventHistory::Detail::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class CardEventHistDetail; //type: Controller::CccDriver::EventHistory::Detail::Location::CardEventHistDetail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::EventHistory::Detail::Location::CardEventHistDetail> card_event_hist_detail;
        
}; // Controller::CccDriver::EventHistory::Detail::Location


class Controller::CccDriver::EventHistory::Detail::Location::CardEventHistDetail : public ydk::Entity
{
    public:
        CardEventHistDetail();
        ~CardEventHistDetail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList card_event_hist_detail_values; //type: list of  string

}; // Controller::CccDriver::EventHistory::Detail::Location::CardEventHistDetail


class Controller::CccDriver::OirHistory : public ydk::Entity
{
    public:
        OirHistory();
        ~OirHistory();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Rack; //type: Controller::CccDriver::OirHistory::Rack

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::OirHistory::Rack> > rack;
        
}; // Controller::CccDriver::OirHistory


class Controller::CccDriver::OirHistory::Rack : public ydk::Entity
{
    public:
        Rack();
        ~Rack();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: string
        class CardOirHist; //type: Controller::CccDriver::OirHistory::Rack::CardOirHist

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::OirHistory::Rack::CardOirHist> card_oir_hist;
        
}; // Controller::CccDriver::OirHistory::Rack


class Controller::CccDriver::OirHistory::Rack::CardOirHist : public ydk::Entity
{
    public:
        CardOirHist();
        ~CardOirHist();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList card_oir_events; //type: list of  string

}; // Controller::CccDriver::OirHistory::Rack::CardOirHist


class Controller::CccDriver::NotifHistory : public ydk::Entity
{
    public:
        NotifHistory();
        ~NotifHistory();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Brief; //type: Controller::CccDriver::NotifHistory::Brief
        class Detail; //type: Controller::CccDriver::NotifHistory::Detail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::NotifHistory::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::NotifHistory::Detail> detail;
        
}; // Controller::CccDriver::NotifHistory


class Controller::CccDriver::NotifHistory::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::NotifHistory::Brief::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::NotifHistory::Brief::Location> > location;
        
}; // Controller::CccDriver::NotifHistory::Brief


class Controller::CccDriver::NotifHistory::Brief::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class CardNotifHistBrief; //type: Controller::CccDriver::NotifHistory::Brief::Location::CardNotifHistBrief

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::NotifHistory::Brief::Location::CardNotifHistBrief> card_notif_hist_brief;
        
}; // Controller::CccDriver::NotifHistory::Brief::Location


class Controller::CccDriver::NotifHistory::Brief::Location::CardNotifHistBrief : public ydk::Entity
{
    public:
        CardNotifHistBrief();
        ~CardNotifHistBrief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList card_notif_hist_brief_values; //type: list of  string

}; // Controller::CccDriver::NotifHistory::Brief::Location::CardNotifHistBrief


class Controller::CccDriver::NotifHistory::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::NotifHistory::Detail::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::NotifHistory::Detail::Location> > location;
        
}; // Controller::CccDriver::NotifHistory::Detail


class Controller::CccDriver::NotifHistory::Detail::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class CardNotifHistDetail; //type: Controller::CccDriver::NotifHistory::Detail::Location::CardNotifHistDetail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::NotifHistory::Detail::Location::CardNotifHistDetail> card_notif_hist_detail;
        
}; // Controller::CccDriver::NotifHistory::Detail::Location


class Controller::CccDriver::NotifHistory::Detail::Location::CardNotifHistDetail : public ydk::Entity
{
    public:
        CardNotifHistDetail();
        ~CardNotifHistDetail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList card_notif_hist_detail_values; //type: list of  string

}; // Controller::CccDriver::NotifHistory::Detail::Location::CardNotifHistDetail


class Controller::CccDriver::Slave : public ydk::Entity
{
    public:
        Slave();
        ~Slave();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class EventHistory; //type: Controller::CccDriver::Slave::EventHistory
        class NotifHistory; //type: Controller::CccDriver::Slave::NotifHistory
        class OirHistory; //type: Controller::CccDriver::Slave::OirHistory

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::EventHistory> event_history;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::NotifHistory> notif_history;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::OirHistory> oir_history;
        
}; // Controller::CccDriver::Slave


class Controller::CccDriver::Slave::EventHistory : public ydk::Entity
{
    public:
        EventHistory();
        ~EventHistory();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Brief; //type: Controller::CccDriver::Slave::EventHistory::Brief
        class Detail; //type: Controller::CccDriver::Slave::EventHistory::Detail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::EventHistory::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::EventHistory::Detail> detail;
        
}; // Controller::CccDriver::Slave::EventHistory


class Controller::CccDriver::Slave::EventHistory::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::Slave::EventHistory::Brief::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::EventHistory::Brief::Location> > location;
        
}; // Controller::CccDriver::Slave::EventHistory::Brief


class Controller::CccDriver::Slave::EventHistory::Brief::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class CardEventHistBrief; //type: Controller::CccDriver::Slave::EventHistory::Brief::Location::CardEventHistBrief

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::EventHistory::Brief::Location::CardEventHistBrief> card_event_hist_brief;
        
}; // Controller::CccDriver::Slave::EventHistory::Brief::Location


class Controller::CccDriver::Slave::EventHistory::Brief::Location::CardEventHistBrief : public ydk::Entity
{
    public:
        CardEventHistBrief();
        ~CardEventHistBrief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList card_event_hist_brief_values; //type: list of  string

}; // Controller::CccDriver::Slave::EventHistory::Brief::Location::CardEventHistBrief


class Controller::CccDriver::Slave::EventHistory::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::Slave::EventHistory::Detail::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::EventHistory::Detail::Location> > location;
        
}; // Controller::CccDriver::Slave::EventHistory::Detail


class Controller::CccDriver::Slave::EventHistory::Detail::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class CardEventHistDetail; //type: Controller::CccDriver::Slave::EventHistory::Detail::Location::CardEventHistDetail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::EventHistory::Detail::Location::CardEventHistDetail> card_event_hist_detail;
        
}; // Controller::CccDriver::Slave::EventHistory::Detail::Location


class Controller::CccDriver::Slave::EventHistory::Detail::Location::CardEventHistDetail : public ydk::Entity
{
    public:
        CardEventHistDetail();
        ~CardEventHistDetail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList card_event_hist_detail_values; //type: list of  string

}; // Controller::CccDriver::Slave::EventHistory::Detail::Location::CardEventHistDetail


class Controller::CccDriver::Slave::NotifHistory : public ydk::Entity
{
    public:
        NotifHistory();
        ~NotifHistory();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Brief; //type: Controller::CccDriver::Slave::NotifHistory::Brief
        class Detail; //type: Controller::CccDriver::Slave::NotifHistory::Detail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::NotifHistory::Brief> brief;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::NotifHistory::Detail> detail;
        
}; // Controller::CccDriver::Slave::NotifHistory


class Controller::CccDriver::Slave::NotifHistory::Brief : public ydk::Entity
{
    public:
        Brief();
        ~Brief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::Slave::NotifHistory::Brief::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::NotifHistory::Brief::Location> > location;
        
}; // Controller::CccDriver::Slave::NotifHistory::Brief


class Controller::CccDriver::Slave::NotifHistory::Brief::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class CardNotifHistBrief; //type: Controller::CccDriver::Slave::NotifHistory::Brief::Location::CardNotifHistBrief

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::NotifHistory::Brief::Location::CardNotifHistBrief> card_notif_hist_brief;
        
}; // Controller::CccDriver::Slave::NotifHistory::Brief::Location


class Controller::CccDriver::Slave::NotifHistory::Brief::Location::CardNotifHistBrief : public ydk::Entity
{
    public:
        CardNotifHistBrief();
        ~CardNotifHistBrief();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList card_notif_hist_brief_values; //type: list of  string

}; // Controller::CccDriver::Slave::NotifHistory::Brief::Location::CardNotifHistBrief


class Controller::CccDriver::Slave::NotifHistory::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::Slave::NotifHistory::Detail::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::NotifHistory::Detail::Location> > location;
        
}; // Controller::CccDriver::Slave::NotifHistory::Detail


class Controller::CccDriver::Slave::NotifHistory::Detail::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string
        class CardNotifHistDetail; //type: Controller::CccDriver::Slave::NotifHistory::Detail::Location::CardNotifHistDetail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::NotifHistory::Detail::Location::CardNotifHistDetail> card_notif_hist_detail;
        
}; // Controller::CccDriver::Slave::NotifHistory::Detail::Location


class Controller::CccDriver::Slave::NotifHistory::Detail::Location::CardNotifHistDetail : public ydk::Entity
{
    public:
        CardNotifHistDetail();
        ~CardNotifHistDetail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList card_notif_hist_detail_values; //type: list of  string

}; // Controller::CccDriver::Slave::NotifHistory::Detail::Location::CardNotifHistDetail


class Controller::CccDriver::Slave::OirHistory : public ydk::Entity
{
    public:
        OirHistory();
        ~OirHistory();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Rack; //type: Controller::CccDriver::Slave::OirHistory::Rack

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::OirHistory::Rack> > rack;
        
}; // Controller::CccDriver::Slave::OirHistory


class Controller::CccDriver::Slave::OirHistory::Rack : public ydk::Entity
{
    public:
        Rack();
        ~Rack();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: string
        class CardOirHist; //type: Controller::CccDriver::Slave::OirHistory::Rack::CardOirHist

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Slave::OirHistory::Rack::CardOirHist> card_oir_hist;
        
}; // Controller::CccDriver::Slave::OirHistory::Rack


class Controller::CccDriver::Slave::OirHistory::Rack::CardOirHist : public ydk::Entity
{
    public:
        CardOirHist();
        ~CardOirHist();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeafList card_oir_events; //type: list of  string

}; // Controller::CccDriver::Slave::OirHistory::Rack::CardOirHist


class Controller::CccDriver::Action : public ydk::Entity
{
    public:
        Action();
        ~Action();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Register; //type: Controller::CccDriver::Action::Register

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Action::Register> register_;
        
}; // Controller::CccDriver::Action


class Controller::CccDriver::Action::Register : public ydk::Entity
{
    public:
        Register();
        ~Register();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::CccDriver::Action::Register::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::CccDriver::Action::Register::Location> > location;
        
}; // Controller::CccDriver::Action::Register


class Controller::CccDriver::Action::Register::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf location; //type: string

}; // Controller::CccDriver::Action::Register::Location


class Controller::Switch : public ydk::Entity
{
    public:
        Switch();
        ~Switch();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Oper; //type: Controller::Switch::Oper

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper> oper;
        
}; // Controller::Switch


class Controller::Switch::Oper : public ydk::Entity
{
    public:
        Oper();
        ~Oper();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Reachable; //type: Controller::Switch::Oper::Reachable
        class Summary; //type: Controller::Switch::Oper::Summary
        class Statistics; //type: Controller::Switch::Oper::Statistics
        class Serdes; //type: Controller::Switch::Oper::Serdes
        class Mac; //type: Controller::Switch::Oper::Mac
        class Bridge; //type: Controller::Switch::Oper::Bridge
        class Fdb; //type: Controller::Switch::Oper::Fdb
        class Vlan; //type: Controller::Switch::Oper::Vlan
        class Sdr; //type: Controller::Switch::Oper::Sdr
        class Sfp; //type: Controller::Switch::Oper::Sfp
        class Mlap; //type: Controller::Switch::Oper::Mlap
        class SwitchDebugCont; //type: Controller::Switch::Oper::SwitchDebugCont
        class Esd; //type: Controller::Switch::Oper::Esd
        class MgmtAgent; //type: Controller::Switch::Oper::MgmtAgent
        class PortState; //type: Controller::Switch::Oper::PortState
        class Trunk; //type: Controller::Switch::Oper::Trunk

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Reachable> reachable;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Summary> summary;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Statistics> statistics;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Serdes> serdes;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mac> mac;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Bridge> bridge;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb> fdb;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan> vlan;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr> sdr;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp> sfp;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap> mlap;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::SwitchDebugCont> switch_debug_cont;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Esd> esd;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::MgmtAgent> mgmt_agent;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::PortState> port_state;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Trunk> trunk;
        
}; // Controller::Switch::Oper


class Controller::Switch::Oper::Reachable : public ydk::Entity
{
    public:
        Reachable();
        ~Reachable();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Reachable::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Reachable::Location> > location;
        
}; // Controller::Switch::Oper::Reachable


class Controller::Switch::Oper::Reachable::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum

}; // Controller::Switch::Oper::Reachable::Location


class Controller::Switch::Oper::Summary : public ydk::Entity
{
    public:
        Summary();
        ~Summary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Summary::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Summary::Location> > location;
        
}; // Controller::Switch::Oper::Summary


class Controller::Switch::Oper::Summary::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf serial_num; //type: string
        class PortIter; //type: Controller::Switch::Oper::Summary::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Summary::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Summary::Location


class Controller::Switch::Oper::Summary::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        ydk::YLeaf phys_state; //type: EsdmaSwitchPortState
        ydk::YLeaf admin_state; //type: EsdmaSwitchPortState
        ydk::YLeaf port_speed; //type: string
        ydk::YLeaf protocol_state; //type: MlapStateEnum
        ydk::YLeaf forwarding; //type: SwitchForwardingState
        ydk::YLeaf connects_to; //type: string

}; // Controller::Switch::Oper::Summary::Location::PortIter


class Controller::Switch::Oper::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class SummaryStatistics; //type: Controller::Switch::Oper::Statistics::SummaryStatistics
        class Detail; //type: Controller::Switch::Oper::Statistics::Detail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Statistics::SummaryStatistics> summary_statistics;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Statistics::Detail> detail;
        
}; // Controller::Switch::Oper::Statistics


class Controller::Switch::Oper::Statistics::SummaryStatistics : public ydk::Entity
{
    public:
        SummaryStatistics();
        ~SummaryStatistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Statistics::SummaryStatistics::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Statistics::SummaryStatistics::Location> > location;
        
}; // Controller::Switch::Oper::Statistics::SummaryStatistics


class Controller::Switch::Oper::Statistics::SummaryStatistics::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf serial_num; //type: string
        class PortIter; //type: Controller::Switch::Oper::Statistics::SummaryStatistics::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Statistics::SummaryStatistics::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Statistics::SummaryStatistics::Location


class Controller::Switch::Oper::Statistics::SummaryStatistics::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        ydk::YLeaf phys_state; //type: EsdmaSwitchPortState
        ydk::YLeaf state_changes; //type: uint32
        ydk::YLeaf sw_sum_tx_packets; //type: uint64
        ydk::YLeaf sw_sum_rx_packets; //type: uint64
        ydk::YLeaf sw_sum_tx_drops_errors; //type: uint64
        ydk::YLeaf sw_sum_rx_drops_errors; //type: uint64
        ydk::YLeaf connects_to; //type: string

}; // Controller::Switch::Oper::Statistics::SummaryStatistics::Location::PortIter


class Controller::Switch::Oper::Statistics::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Statistics::Detail::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Statistics::Detail::Location> > location;
        
}; // Controller::Switch::Oper::Statistics::Detail


class Controller::Switch::Oper::Statistics::Detail::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class PortIter; //type: Controller::Switch::Oper::Statistics::Detail::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Statistics::Detail::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Statistics::Detail::Location


class Controller::Switch::Oper::Statistics::Detail::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        ydk::YLeaf phys_state; //type: EsdmaSwitchPortState
        ydk::YLeaf port_speed; //type: string
        ydk::YLeaf connects_to; //type: string
        class Counters; //type: Controller::Switch::Oper::Statistics::Detail::Location::PortIter::Counters

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Statistics::Detail::Location::PortIter::Counters> counters;
        
}; // Controller::Switch::Oper::Statistics::Detail::Location::PortIter


class Controller::Switch::Oper::Statistics::Detail::Location::PortIter::Counters : public ydk::Entity
{
    public:
        Counters();
        ~Counters();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sw_det_rx_ucast_packets; //type: uint64
        ydk::YLeaf sw_det_rx_mcast_packets; //type: uint64
        ydk::YLeaf sw_det_rx_bcast_packets; //type: uint64
        ydk::YLeaf sw_det_rx_flow_control; //type: uint64
        ydk::YLeaf sw_det_rx_good_octets; //type: uint64
        ydk::YLeaf sw_det_rx_bad_octets; //type: uint64
        ydk::YLeaf sw_det_rx_fifo_overrun; //type: uint64
        ydk::YLeaf sw_det_rx_undersize; //type: uint64
        ydk::YLeaf sw_det_rx_fragments; //type: uint64
        ydk::YLeaf sw_det_rx_oversize; //type: uint64
        ydk::YLeaf sw_det_rx_jabber; //type: uint64
        ydk::YLeaf sw_det_rx_errors; //type: uint64
        ydk::YLeaf sw_det_rx_bad_crc; //type: uint64
        ydk::YLeaf sw_det_rx_collisions; //type: uint64
        ydk::YLeaf sw_det_rx_policing_drops; //type: uint64
        ydk::YLeaf sw_det_tx_ucast_packets; //type: uint64
        ydk::YLeaf sw_det_tx_mcast_packets; //type: uint64
        ydk::YLeaf sw_det_tx_bcast_packets; //type: uint64
        ydk::YLeaf sw_det_tx_flow_control; //type: uint64
        ydk::YLeaf sw_det_tx_good_octets; //type: uint64
        ydk::YLeaf sw_det_tx_deferred; //type: uint64
        ydk::YLeaf sw_det_tx_fifo_unrun; //type: uint64
        ydk::YLeaf sw_det_tx_mult_collision; //type: uint64
        ydk::YLeaf sw_det_tx_excess_collision; //type: uint64
        ydk::YLeaf sw_det_tx_late_collisions; //type: uint64
        ydk::YLeaf sw_det_tx_policing_drops; //type: uint64
        ydk::YLeaf sw_det_txq_drops; //type: uint64
        ydk::YLeaf sw_det_rxtx_packets_64; //type: uint64
        ydk::YLeaf sw_det_rxtx_packets_65_127; //type: uint64
        ydk::YLeaf sw_det_rxtx_packets_128_255; //type: uint64
        ydk::YLeaf sw_det_rxtx_packets_256_511; //type: uint64
        ydk::YLeaf sw_det_rxtx_packets_512_1023; //type: uint64
        ydk::YLeaf sw_det_rxtx_packets_1024_max; //type: uint64

}; // Controller::Switch::Oper::Statistics::Detail::Location::PortIter::Counters


class Controller::Switch::Oper::Serdes : public ydk::Entity
{
    public:
        Serdes();
        ~Serdes();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class SerdesStatistics; //type: Controller::Switch::Oper::Serdes::SerdesStatistics

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Serdes::SerdesStatistics> serdes_statistics;
        
}; // Controller::Switch::Oper::Serdes


class Controller::Switch::Oper::Serdes::SerdesStatistics : public ydk::Entity
{
    public:
        SerdesStatistics();
        ~SerdesStatistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Serdes::SerdesStatistics::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Serdes::SerdesStatistics::Location> > location;
        
}; // Controller::Switch::Oper::Serdes::SerdesStatistics


class Controller::Switch::Oper::Serdes::SerdesStatistics::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class PortIter; //type: Controller::Switch::Oper::Serdes::SerdesStatistics::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Serdes::SerdesStatistics::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Serdes::SerdesStatistics::Location


class Controller::Switch::Oper::Serdes::SerdesStatistics::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        class SerdesEntry; //type: Controller::Switch::Oper::Serdes::SerdesStatistics::Location::PortIter::SerdesEntry

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Serdes::SerdesStatistics::Location::PortIter::SerdesEntry> > serdes_entry;
        
}; // Controller::Switch::Oper::Serdes::SerdesStatistics::Location::PortIter


class Controller::Switch::Oper::Serdes::SerdesStatistics::Location::PortIter::SerdesEntry : public ydk::Entity
{
    public:
        SerdesEntry();
        ~SerdesEntry();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf id; //type: uint32
        ydk::YLeaf base_reg; //type: string
        ydk::YLeaf desc; //type: string
        ydk::YLeaf lane_0; //type: string
        ydk::YLeaf lane_1; //type: string
        ydk::YLeaf lane_2; //type: string
        ydk::YLeaf lane_3; //type: string

}; // Controller::Switch::Oper::Serdes::SerdesStatistics::Location::PortIter::SerdesEntry


class Controller::Switch::Oper::Mac : public ydk::Entity
{
    public:
        Mac();
        ~Mac();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class MacStatistics; //type: Controller::Switch::Oper::Mac::MacStatistics

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mac::MacStatistics> mac_statistics;
        
}; // Controller::Switch::Oper::Mac


class Controller::Switch::Oper::Mac::MacStatistics : public ydk::Entity
{
    public:
        MacStatistics();
        ~MacStatistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Mac::MacStatistics::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mac::MacStatistics::Location> > location;
        
}; // Controller::Switch::Oper::Mac::MacStatistics


class Controller::Switch::Oper::Mac::MacStatistics::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class PortIter; //type: Controller::Switch::Oper::Mac::MacStatistics::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mac::MacStatistics::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Mac::MacStatistics::Location


class Controller::Switch::Oper::Mac::MacStatistics::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        class MacEntry; //type: Controller::Switch::Oper::Mac::MacStatistics::Location::PortIter::MacEntry

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mac::MacStatistics::Location::PortIter::MacEntry> > mac_entry;
        
}; // Controller::Switch::Oper::Mac::MacStatistics::Location::PortIter


class Controller::Switch::Oper::Mac::MacStatistics::Location::PortIter::MacEntry : public ydk::Entity
{
    public:
        MacEntry();
        ~MacEntry();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf id; //type: uint32
        ydk::YLeaf base_reg; //type: string
        ydk::YLeaf desc; //type: string
        ydk::YLeaf value_; //type: string

}; // Controller::Switch::Oper::Mac::MacStatistics::Location::PortIter::MacEntry


class Controller::Switch::Oper::Bridge : public ydk::Entity
{
    public:
        Bridge();
        ~Bridge();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Statistics; //type: Controller::Switch::Oper::Bridge::Statistics

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Bridge::Statistics> statistics;
        
}; // Controller::Switch::Oper::Bridge


class Controller::Switch::Oper::Bridge::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Bridge::Statistics::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Bridge::Statistics::Location> > location;
        
}; // Controller::Switch::Oper::Bridge::Statistics


class Controller::Switch::Oper::Bridge::Statistics::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class IngressSetId; //type: Controller::Switch::Oper::Bridge::Statistics::Location::IngressSetId
        class EgressSetId; //type: Controller::Switch::Oper::Bridge::Statistics::Location::EgressSetId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Bridge::Statistics::Location::IngressSetId> > ingress_set_id;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Bridge::Statistics::Location::EgressSetId> > egress_set_id;
        
}; // Controller::Switch::Oper::Bridge::Statistics::Location


class Controller::Switch::Oper::Bridge::Statistics::Location::IngressSetId : public ydk::Entity
{
    public:
        IngressSetId();
        ~IngressSetId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf ingress_set; //type: uint32
        ydk::YLeaf ingress_set_name; //type: string
        ydk::YLeaf ingress_frames; //type: uint64
        ydk::YLeaf ingress_vlan_discards; //type: uint64
        ydk::YLeaf ingress_security_discards; //type: uint64
        ydk::YLeaf ingress_other_discards; //type: uint64

}; // Controller::Switch::Oper::Bridge::Statistics::Location::IngressSetId


class Controller::Switch::Oper::Bridge::Statistics::Location::EgressSetId : public ydk::Entity
{
    public:
        EgressSetId();
        ~EgressSetId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf egress_set; //type: uint32
        ydk::YLeaf egress_set_name; //type: string
        ydk::YLeaf egress_ucast_frames; //type: uint64
        ydk::YLeaf egress_mcast_frames; //type: uint64
        ydk::YLeaf egress_bcast_frames; //type: uint64
        ydk::YLeaf egress_discarded_frames; //type: uint64
        ydk::YLeaf egress_txq_congestion; //type: uint64
        ydk::YLeaf egress_ctrl_packets; //type: uint64
        ydk::YLeaf egress_other_drops; //type: uint64

}; // Controller::Switch::Oper::Bridge::Statistics::Location::EgressSetId


class Controller::Switch::Oper::Fdb : public ydk::Entity
{
    public:
        Fdb();
        ~Fdb();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Vlan; //type: Controller::Switch::Oper::Fdb::Vlan
        class Mac; //type: Controller::Switch::Oper::Fdb::Mac
        class Port; //type: Controller::Switch::Oper::Fdb::Port
        class Statistics; //type: Controller::Switch::Oper::Fdb::Statistics
        class SwitchFdbCommon; //type: Controller::Switch::Oper::Fdb::SwitchFdbCommon

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Vlan> vlan;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Mac> mac;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Port> port;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Statistics> statistics;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::SwitchFdbCommon> switch_fdb_common;
        
}; // Controller::Switch::Oper::Fdb


class Controller::Switch::Oper::Fdb::Vlan : public ydk::Entity
{
    public:
        Vlan();
        ~Vlan();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class VlanIter; //type: Controller::Switch::Oper::Fdb::Vlan::VlanIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Vlan::VlanIter> > vlan_iter;
        
}; // Controller::Switch::Oper::Fdb::Vlan


class Controller::Switch::Oper::Fdb::Vlan::VlanIter : public ydk::Entity
{
    public:
        VlanIter();
        ~VlanIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf vlan; //type: uint16
        class SwitchFdbCommon; //type: Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon> switch_fdb_common;
        
}; // Controller::Switch::Oper::Fdb::Vlan::VlanIter


class Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon : public ydk::Entity
{
    public:
        SwitchFdbCommon();
        ~SwitchFdbCommon();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Location; //type: Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location> > location;
        
}; // Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon


class Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf num_entries; //type: uint32
        ydk::YLeaf has_trunk_entry; //type: uint8
        ydk::YLeaf trunk_entry_message; //type: string
        class FdbBlock; //type: Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location::FdbBlock

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location::FdbBlock> fdb_block;
        
}; // Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location


class Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location::FdbBlock : public ydk::Entity
{
    public:
        FdbBlock();
        ~FdbBlock();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class FdbEntry; //type: Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry> > fdb_entry;
        
}; // Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location::FdbBlock


class Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry : public ydk::Entity
{
    public:
        FdbEntry();
        ~FdbEntry();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fdb_index; //type: uint32
        ydk::YLeaf fdb_mac_addr; //type: string
        ydk::YLeaf fdb_vlan; //type: uint16
        //type: uint16 (refers to cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry::fdb_vlan)
        ydk::YLeaf fdb_vlan_hex;
        ydk::YLeaf fdb_port; //type: int32
        ydk::YLeaf fdb_trap_entry; //type: EsdmaSwitchYesNoEnum
        ydk::YLeaf fdb_static_entry; //type: EsdmaSwitchYesNoEnum
        ydk::YLeafList fdb_synced_cores; //type: list of  uint8

}; // Controller::Switch::Oper::Fdb::Vlan::VlanIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry


class Controller::Switch::Oper::Fdb::Mac : public ydk::Entity
{
    public:
        Mac();
        ~Mac();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class MacIter; //type: Controller::Switch::Oper::Fdb::Mac::MacIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Mac::MacIter> > mac_iter;
        
}; // Controller::Switch::Oper::Fdb::Mac


class Controller::Switch::Oper::Fdb::Mac::MacIter : public ydk::Entity
{
    public:
        MacIter();
        ~MacIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf mac; //type: string
        class SwitchFdbCommon; //type: Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon> switch_fdb_common;
        
}; // Controller::Switch::Oper::Fdb::Mac::MacIter


class Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon : public ydk::Entity
{
    public:
        SwitchFdbCommon();
        ~SwitchFdbCommon();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Location; //type: Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location> > location;
        
}; // Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon


class Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf num_entries; //type: uint32
        ydk::YLeaf has_trunk_entry; //type: uint8
        ydk::YLeaf trunk_entry_message; //type: string
        class FdbBlock; //type: Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location::FdbBlock

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location::FdbBlock> fdb_block;
        
}; // Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location


class Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location::FdbBlock : public ydk::Entity
{
    public:
        FdbBlock();
        ~FdbBlock();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class FdbEntry; //type: Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry> > fdb_entry;
        
}; // Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location::FdbBlock


class Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry : public ydk::Entity
{
    public:
        FdbEntry();
        ~FdbEntry();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fdb_index; //type: uint32
        ydk::YLeaf fdb_mac_addr; //type: string
        ydk::YLeaf fdb_vlan; //type: uint16
        //type: uint16 (refers to cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry::fdb_vlan)
        ydk::YLeaf fdb_vlan_hex;
        ydk::YLeaf fdb_port; //type: int32
        ydk::YLeaf fdb_trap_entry; //type: EsdmaSwitchYesNoEnum
        ydk::YLeaf fdb_static_entry; //type: EsdmaSwitchYesNoEnum
        ydk::YLeafList fdb_synced_cores; //type: list of  uint8

}; // Controller::Switch::Oper::Fdb::Mac::MacIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry


class Controller::Switch::Oper::Fdb::Port : public ydk::Entity
{
    public:
        Port();
        ~Port();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class PortIter; //type: Controller::Switch::Oper::Fdb::Port::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Port::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Fdb::Port


class Controller::Switch::Oper::Fdb::Port::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf port; //type: int32
        class SwitchFdbCommon; //type: Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon> switch_fdb_common;
        
}; // Controller::Switch::Oper::Fdb::Port::PortIter


class Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon : public ydk::Entity
{
    public:
        SwitchFdbCommon();
        ~SwitchFdbCommon();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Location; //type: Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location> > location;
        
}; // Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon


class Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf num_entries; //type: uint32
        ydk::YLeaf has_trunk_entry; //type: uint8
        ydk::YLeaf trunk_entry_message; //type: string
        class FdbBlock; //type: Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location::FdbBlock

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location::FdbBlock> fdb_block;
        
}; // Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location


class Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location::FdbBlock : public ydk::Entity
{
    public:
        FdbBlock();
        ~FdbBlock();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class FdbEntry; //type: Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry> > fdb_entry;
        
}; // Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location::FdbBlock


class Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry : public ydk::Entity
{
    public:
        FdbEntry();
        ~FdbEntry();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fdb_index; //type: uint32
        ydk::YLeaf fdb_mac_addr; //type: string
        ydk::YLeaf fdb_vlan; //type: uint16
        //type: uint16 (refers to cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry::fdb_vlan)
        ydk::YLeaf fdb_vlan_hex;
        ydk::YLeaf fdb_port; //type: int32
        ydk::YLeaf fdb_trap_entry; //type: EsdmaSwitchYesNoEnum
        ydk::YLeaf fdb_static_entry; //type: EsdmaSwitchYesNoEnum
        ydk::YLeafList fdb_synced_cores; //type: list of  uint8

}; // Controller::Switch::Oper::Fdb::Port::PortIter::SwitchFdbCommon::Location::FdbBlock::FdbEntry


class Controller::Switch::Oper::Fdb::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Fdb::Statistics::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Statistics::Location> > location;
        
}; // Controller::Switch::Oper::Fdb::Statistics


class Controller::Switch::Oper::Fdb::Statistics::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class CounterInfo; //type: Controller::Switch::Oper::Fdb::Statistics::Location::CounterInfo
        class CoreId; //type: Controller::Switch::Oper::Fdb::Statistics::Location::CoreId

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Statistics::Location::CounterInfo> counter_info;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::Statistics::Location::CoreId> > core_id;
        
}; // Controller::Switch::Oper::Fdb::Statistics::Location


class Controller::Switch::Oper::Fdb::Statistics::Location::CounterInfo : public ydk::Entity
{
    public:
        CounterInfo();
        ~CounterInfo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fdb_shadow_entries; //type: uint32
        ydk::YLeaf fdb_max_shadow_entries; //type: uint32
        ydk::YLeaf fdb_max_hash_chain; //type: uint32
        ydk::YLeaf fdb_entries_added; //type: uint32
        ydk::YLeaf fdb_entries_deleted; //type: uint32
        ydk::YLeaf fdb_entries_updated; //type: uint32
        ydk::YLeaf fdb_flushes; //type: uint32
        ydk::YLeaf fdb_address_updates; //type: uint32
        ydk::YLeaf fdb_new_addresses; //type: uint32
        ydk::YLeaf fdb_aged_updates; //type: uint32
        ydk::YLeaf fdb_transplant_updates; //type: uint32
        ydk::YLeaf fdb_forwarding_updates; //type: uint32
        ydk::YLeaf fdb_address_insert_errors; //type: uint32
        ydk::YLeaf fdb_address_update_errors; //type: uint32
        ydk::YLeaf fdb_memory_errors; //type: uint32
        ydk::YLeaf fdb_allocation_errors; //type: uint32
        ydk::YLeaf fdb_address_updates_queued; //type: uint32
        ydk::YLeaf fdb_address_queue_full; //type: EsdmaSwitchYesNoEnum
        ydk::YLeaf fdb_forwarding_updates_queued; //type: uint32
        ydk::YLeaf fdb_forwarding_queue_full; //type: EsdmaSwitchYesNoEnum

}; // Controller::Switch::Oper::Fdb::Statistics::Location::CounterInfo


class Controller::Switch::Oper::Fdb::Statistics::Location::CoreId : public ydk::Entity
{
    public:
        CoreId();
        ~CoreId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf core; //type: int32
        ydk::YLeaf core_entries; //type: uint32
        ydk::YLeaf core_static_entries; //type: uint32

}; // Controller::Switch::Oper::Fdb::Statistics::Location::CoreId


class Controller::Switch::Oper::Fdb::SwitchFdbCommon : public ydk::Entity
{
    public:
        SwitchFdbCommon();
        ~SwitchFdbCommon();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location> > location;
        
}; // Controller::Switch::Oper::Fdb::SwitchFdbCommon


class Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf num_entries; //type: uint32
        ydk::YLeaf has_trunk_entry; //type: uint8
        ydk::YLeaf trunk_entry_message; //type: string
        class FdbBlock; //type: Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location::FdbBlock

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location::FdbBlock> fdb_block;
        
}; // Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location


class Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location::FdbBlock : public ydk::Entity
{
    public:
        FdbBlock();
        ~FdbBlock();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class FdbEntry; //type: Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location::FdbBlock::FdbEntry

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location::FdbBlock::FdbEntry> > fdb_entry;
        
}; // Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location::FdbBlock


class Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location::FdbBlock::FdbEntry : public ydk::Entity
{
    public:
        FdbEntry();
        ~FdbEntry();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf fdb_index; //type: uint32
        ydk::YLeaf fdb_mac_addr; //type: string
        ydk::YLeaf fdb_vlan; //type: uint16
        //type: uint16 (refers to cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location::FdbBlock::FdbEntry::fdb_vlan)
        ydk::YLeaf fdb_vlan_hex;
        ydk::YLeaf fdb_port; //type: int32
        ydk::YLeaf fdb_trap_entry; //type: EsdmaSwitchYesNoEnum
        ydk::YLeaf fdb_static_entry; //type: EsdmaSwitchYesNoEnum
        ydk::YLeafList fdb_synced_cores; //type: list of  uint8

}; // Controller::Switch::Oper::Fdb::SwitchFdbCommon::Location::FdbBlock::FdbEntry


class Controller::Switch::Oper::Vlan : public ydk::Entity
{
    public:
        Vlan();
        ~Vlan();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Rules; //type: Controller::Switch::Oper::Vlan::Rules
        class Information; //type: Controller::Switch::Oper::Vlan::Information
        class VlanDetail; //type: Controller::Switch::Oper::Vlan::VlanDetail
        class Membership; //type: Controller::Switch::Oper::Vlan::Membership

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Rules> rules;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Information> information;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::VlanDetail> vlan_detail;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Membership> membership;
        
}; // Controller::Switch::Oper::Vlan


class Controller::Switch::Oper::Vlan::Rules : public ydk::Entity
{
    public:
        Rules();
        ~Rules();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Vlan::Rules::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Rules::Location> > location;
        
}; // Controller::Switch::Oper::Vlan::Rules


class Controller::Switch::Oper::Vlan::Rules::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class PortIter; //type: Controller::Switch::Oper::Vlan::Rules::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Rules::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Vlan::Rules::Location


class Controller::Switch::Oper::Vlan::Rules::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        class VlanId; //type: Controller::Switch::Oper::Vlan::Rules::Location::PortIter::VlanId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Rules::Location::PortIter::VlanId> > vlan_id;
        
}; // Controller::Switch::Oper::Vlan::Rules::Location::PortIter


class Controller::Switch::Oper::Vlan::Rules::Location::PortIter::VlanId : public ydk::Entity
{
    public:
        VlanId();
        ~VlanId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf vlan; //type: uint16
        class RuleId; //type: Controller::Switch::Oper::Vlan::Rules::Location::PortIter::VlanId::RuleId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Rules::Location::PortIter::VlanId::RuleId> > rule_id;
        
}; // Controller::Switch::Oper::Vlan::Rules::Location::PortIter::VlanId


class Controller::Switch::Oper::Vlan::Rules::Location::PortIter::VlanId::RuleId : public ydk::Entity
{
    public:
        RuleId();
        ~RuleId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf direction; //type: SwitchDataDirectionEnum
        ydk::YLeaf match_table; //type: SwitchTableTypeEnum
        ydk::YLeaf match_type; //type: SwitchMatchTypeEnum
        ydk::YLeaf match_vlan_id; //type: uint16
        ydk::YLeaf action; //type: SwitchActionTypeEnum
        ydk::YLeaf action_vlan_id; //type: uint16

}; // Controller::Switch::Oper::Vlan::Rules::Location::PortIter::VlanId::RuleId


class Controller::Switch::Oper::Vlan::Information : public ydk::Entity
{
    public:
        Information();
        ~Information();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Vlan::Information::Location
        class Summary; //type: Controller::Switch::Oper::Vlan::Information::Summary

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Information::Location> > location;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Information::Summary> summary;
        
}; // Controller::Switch::Oper::Vlan::Information


class Controller::Switch::Oper::Vlan::Information::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf serial_num; //type: string
        class SdrId; //type: Controller::Switch::Oper::Vlan::Information::Location::SdrId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Information::Location::SdrId> > sdr_id;
        
}; // Controller::Switch::Oper::Vlan::Information::Location


class Controller::Switch::Oper::Vlan::Information::Location::SdrId : public ydk::Entity
{
    public:
        SdrId();
        ~SdrId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sdr; //type: uint8
        ydk::YLeaf esd_sdr_name; //type: string
        class VlanId; //type: Controller::Switch::Oper::Vlan::Information::Location::SdrId::VlanId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Information::Location::SdrId::VlanId> > vlan_id;
        
}; // Controller::Switch::Oper::Vlan::Information::Location::SdrId


class Controller::Switch::Oper::Vlan::Information::Location::SdrId::VlanId : public ydk::Entity
{
    public:
        VlanId();
        ~VlanId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf vlan; //type: uint16
        //type: uint16 (refers to cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Information::Location::SdrId::VlanId::vlan)
        ydk::YLeaf vlan_hex;
        ydk::YLeaf vlan_use; //type: string

}; // Controller::Switch::Oper::Vlan::Information::Location::SdrId::VlanId


class Controller::Switch::Oper::Vlan::Information::Summary : public ydk::Entity
{
    public:
        Summary();
        ~Summary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class SdrId; //type: Controller::Switch::Oper::Vlan::Information::Summary::SdrId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Information::Summary::SdrId> > sdr_id;
        
}; // Controller::Switch::Oper::Vlan::Information::Summary


class Controller::Switch::Oper::Vlan::Information::Summary::SdrId : public ydk::Entity
{
    public:
        SdrId();
        ~SdrId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf sdr; //type: uint8
        ydk::YLeaf esd_sdr_name; //type: string
        class VlanId; //type: Controller::Switch::Oper::Vlan::Information::Summary::SdrId::VlanId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Information::Summary::SdrId::VlanId> > vlan_id;
        
}; // Controller::Switch::Oper::Vlan::Information::Summary::SdrId


class Controller::Switch::Oper::Vlan::Information::Summary::SdrId::VlanId : public ydk::Entity
{
    public:
        VlanId();
        ~VlanId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf vlan; //type: uint16
        //type: uint16 (refers to cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Information::Summary::SdrId::VlanId::vlan)
        ydk::YLeaf vlan_hex;
        ydk::YLeaf vlan_use; //type: string

}; // Controller::Switch::Oper::Vlan::Information::Summary::SdrId::VlanId


class Controller::Switch::Oper::Vlan::VlanDetail : public ydk::Entity
{
    public:
        VlanDetail();
        ~VlanDetail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class VlanId; //type: Controller::Switch::Oper::Vlan::VlanDetail::VlanId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::VlanDetail::VlanId> > vlan_id;
        
}; // Controller::Switch::Oper::Vlan::VlanDetail


class Controller::Switch::Oper::Vlan::VlanDetail::VlanId : public ydk::Entity
{
    public:
        VlanId();
        ~VlanId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf vlan; //type: uint16
        class Rules; //type: Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules> rules;
        
}; // Controller::Switch::Oper::Vlan::VlanDetail::VlanId


class Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules : public ydk::Entity
{
    public:
        Rules();
        ~Rules();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Location; //type: Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location> > location;
        
}; // Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules


class Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class PortIter; //type: Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location


class Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        class RuleId; //type: Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location::PortIter::RuleId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location::PortIter::RuleId> > rule_id;
        
}; // Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location::PortIter


class Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location::PortIter::RuleId : public ydk::Entity
{
    public:
        RuleId();
        ~RuleId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf direction; //type: SwitchDataDirectionEnum
        ydk::YLeaf match_table; //type: SwitchTableTypeEnum
        ydk::YLeaf match_type; //type: SwitchMatchTypeEnum
        ydk::YLeaf match_vlan_id; //type: uint16
        ydk::YLeaf action; //type: SwitchActionTypeEnum
        ydk::YLeaf action_vlan_id; //type: uint16

}; // Controller::Switch::Oper::Vlan::VlanDetail::VlanId::Rules::Location::PortIter::RuleId


class Controller::Switch::Oper::Vlan::Membership : public ydk::Entity
{
    public:
        Membership();
        ~Membership();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Vlan::Membership::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Membership::Location> > location;
        
}; // Controller::Switch::Oper::Vlan::Membership


class Controller::Switch::Oper::Vlan::Membership::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class VlanId; //type: Controller::Switch::Oper::Vlan::Membership::Location::VlanId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Membership::Location::VlanId> > vlan_id;
        
}; // Controller::Switch::Oper::Vlan::Membership::Location


class Controller::Switch::Oper::Vlan::Membership::Location::VlanId : public ydk::Entity
{
    public:
        VlanId();
        ~VlanId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf vlan; //type: uint16
        //type: uint16 (refers to cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Vlan::Membership::Location::VlanId::vlan)
        ydk::YLeaf vlan_hex;
        ydk::YLeafList port; //type: list of  uint8

}; // Controller::Switch::Oper::Vlan::Membership::Location::VlanId


class Controller::Switch::Oper::Sdr : public ydk::Entity
{
    public:
        Sdr();
        ~Sdr();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class PortStatistics; //type: Controller::Switch::Oper::Sdr::PortStatistics
        class GlobalStatistics; //type: Controller::Switch::Oper::Sdr::GlobalStatistics
        class Policers; //type: Controller::Switch::Oper::Sdr::Policers
        class SdrDetail; //type: Controller::Switch::Oper::Sdr::SdrDetail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::PortStatistics> port_statistics;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::GlobalStatistics> global_statistics;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::Policers> policers;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::SdrDetail> sdr_detail;
        
}; // Controller::Switch::Oper::Sdr


class Controller::Switch::Oper::Sdr::PortStatistics : public ydk::Entity
{
    public:
        PortStatistics();
        ~PortStatistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Sdr::PortStatistics::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::PortStatistics::Location> > location;
        
}; // Controller::Switch::Oper::Sdr::PortStatistics


class Controller::Switch::Oper::Sdr::PortStatistics::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class PortIter; //type: Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Sdr::PortStatistics::Location


class Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        class SdrId; //type: Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId> > sdr_id;
        
}; // Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter


class Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId : public ydk::Entity
{
    public:
        SdrId();
        ~SdrId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sdr; //type: uint8
        ydk::YLeaf esd_sdr_name; //type: string
        class TrafficTypeId; //type: Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId::TrafficTypeId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId::TrafficTypeId> > traffic_type_id;
        
}; // Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId


class Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId::TrafficTypeId : public ydk::Entity
{
    public:
        TrafficTypeId();
        ~TrafficTypeId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf traffic_type; //type: EsdmaSdrTrafficType
        class DirectionId; //type: Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId::TrafficTypeId::DirectionId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId::TrafficTypeId::DirectionId> > direction_id;
        
}; // Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId::TrafficTypeId


class Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId::TrafficTypeId::DirectionId : public ydk::Entity
{
    public:
        DirectionId();
        ~DirectionId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf direction; //type: SwitchDataDirectionEnum
        ydk::YLeaf green_packets; //type: uint64
        ydk::YLeaf yellow_packets; //type: uint64
        ydk::YLeaf red_packets; //type: uint64

}; // Controller::Switch::Oper::Sdr::PortStatistics::Location::PortIter::SdrId::TrafficTypeId::DirectionId


class Controller::Switch::Oper::Sdr::GlobalStatistics : public ydk::Entity
{
    public:
        GlobalStatistics();
        ~GlobalStatistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Sdr::GlobalStatistics::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::GlobalStatistics::Location> > location;
        
}; // Controller::Switch::Oper::Sdr::GlobalStatistics


class Controller::Switch::Oper::Sdr::GlobalStatistics::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class SdrId; //type: Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId> > sdr_id;
        
}; // Controller::Switch::Oper::Sdr::GlobalStatistics::Location


class Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId : public ydk::Entity
{
    public:
        SdrId();
        ~SdrId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sdr; //type: uint8
        ydk::YLeaf esd_sdr_name; //type: string
        class TrafficTypeId; //type: Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId::TrafficTypeId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId::TrafficTypeId> > traffic_type_id;
        
}; // Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId


class Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId::TrafficTypeId : public ydk::Entity
{
    public:
        TrafficTypeId();
        ~TrafficTypeId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf traffic_type; //type: EsdmaSdrTrafficType
        class TrafficClassId; //type: Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId::TrafficTypeId::TrafficClassId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId::TrafficTypeId::TrafficClassId> > traffic_class_id;
        
}; // Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId::TrafficTypeId


class Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId::TrafficTypeId::TrafficClassId : public ydk::Entity
{
    public:
        TrafficClassId();
        ~TrafficClassId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf tc; //type: int8
        ydk::YLeaf green_packets; //type: uint64
        ydk::YLeaf yellow_packets; //type: uint64
        ydk::YLeaf red_packets; //type: uint64

}; // Controller::Switch::Oper::Sdr::GlobalStatistics::Location::SdrId::TrafficTypeId::TrafficClassId


class Controller::Switch::Oper::Sdr::Policers : public ydk::Entity
{
    public:
        Policers();
        ~Policers();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Sdr::Policers::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::Policers::Location> > location;
        
}; // Controller::Switch::Oper::Sdr::Policers


class Controller::Switch::Oper::Sdr::Policers::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class EsdPolicerStatus; //type: Controller::Switch::Oper::Sdr::Policers::Location::EsdPolicerStatus
        class SdrId; //type: Controller::Switch::Oper::Sdr::Policers::Location::SdrId

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::Policers::Location::EsdPolicerStatus> esd_policer_status;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::Policers::Location::SdrId> > sdr_id;
        
}; // Controller::Switch::Oper::Sdr::Policers::Location


class Controller::Switch::Oper::Sdr::Policers::Location::EsdPolicerStatus : public ydk::Entity
{
    public:
        EsdPolicerStatus();
        ~EsdPolicerStatus();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class IndentGroup; //type: Controller::Switch::Oper::Sdr::Policers::Location::EsdPolicerStatus::IndentGroup

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::Policers::Location::EsdPolicerStatus::IndentGroup> indent_group;
        
}; // Controller::Switch::Oper::Sdr::Policers::Location::EsdPolicerStatus


class Controller::Switch::Oper::Sdr::Policers::Location::EsdPolicerStatus::IndentGroup : public ydk::Entity
{
    public:
        IndentGroup();
        ~IndentGroup();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf esd_port_policing_enabled; //type: EsdmaSwitchYesNoEnum
        ydk::YLeaf esd_port_committed_burst_size; //type: uint32
        ydk::YLeaf esd_port_peak_burst_size; //type: uint32
        ydk::YLeaf esd_port_policer_mru; //type: uint32
        ydk::YLeaf esd_global_policing_enabled; //type: EsdmaSwitchYesNoEnum
        ydk::YLeaf esd_global_committed_burst_size; //type: uint32
        ydk::YLeaf esd_global_peak_burst_size; //type: uint32
        ydk::YLeaf esd_global_policer_mru; //type: uint32

}; // Controller::Switch::Oper::Sdr::Policers::Location::EsdPolicerStatus::IndentGroup


class Controller::Switch::Oper::Sdr::Policers::Location::SdrId : public ydk::Entity
{
    public:
        SdrId();
        ~SdrId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sdr; //type: uint8
        ydk::YLeaf esd_sdr_name; //type: string
        ydk::YLeaf esd_sdr_cir; //type: uint8
        ydk::YLeaf esd_sdr_pir; //type: uint8
        class EsdSdrCosTypeIter; //type: Controller::Switch::Oper::Sdr::Policers::Location::SdrId::EsdSdrCosTypeIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::Policers::Location::SdrId::EsdSdrCosTypeIter> > esd_sdr_cos_type_iter;
        
}; // Controller::Switch::Oper::Sdr::Policers::Location::SdrId


class Controller::Switch::Oper::Sdr::Policers::Location::SdrId::EsdSdrCosTypeIter : public ydk::Entity
{
    public:
        EsdSdrCosTypeIter();
        ~EsdSdrCosTypeIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf esd_sdr_cos_type; //type: EsdCirEirType
        ydk::YLeaf esd_sdr_cos_0; //type: uint8
        ydk::YLeaf esd_sdr_cos_1; //type: uint8
        ydk::YLeaf esd_sdr_cos_2; //type: uint8
        ydk::YLeaf esd_sdr_cos_3; //type: uint8
        ydk::YLeaf esd_sdr_cos_4; //type: uint8
        ydk::YLeaf esd_sdr_cos_5; //type: uint8
        ydk::YLeaf esd_sdr_cos_6; //type: uint8
        ydk::YLeaf esd_sdr_cos_7; //type: uint8

}; // Controller::Switch::Oper::Sdr::Policers::Location::SdrId::EsdSdrCosTypeIter


class Controller::Switch::Oper::Sdr::SdrDetail : public ydk::Entity
{
    public:
        SdrDetail();
        ~SdrDetail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class SdrId; //type: Controller::Switch::Oper::Sdr::SdrDetail::SdrId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::SdrDetail::SdrId> > sdr_id;
        
}; // Controller::Switch::Oper::Sdr::SdrDetail


class Controller::Switch::Oper::Sdr::SdrDetail::SdrId : public ydk::Entity
{
    public:
        SdrId();
        ~SdrId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf sdr; //type: uint8
        class PortStatistics; //type: Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics> port_statistics;
        
}; // Controller::Switch::Oper::Sdr::SdrDetail::SdrId


class Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics : public ydk::Entity
{
    public:
        PortStatistics();
        ~PortStatistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Location; //type: Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location> > location;
        
}; // Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics


class Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class PortIter; //type: Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location


class Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        class TrafficTypeId; //type: Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId> > traffic_type_id;
        
}; // Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter


class Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId : public ydk::Entity
{
    public:
        TrafficTypeId();
        ~TrafficTypeId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf traffic_type; //type: EsdmaSdrTrafficType
        class DirectionId; //type: Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId::DirectionId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId::DirectionId> > direction_id;
        
}; // Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId


class Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId::DirectionId : public ydk::Entity
{
    public:
        DirectionId();
        ~DirectionId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf direction; //type: SwitchDataDirectionEnum
        class TrafficClassId; //type: Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId::DirectionId::TrafficClassId

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId::DirectionId::TrafficClassId> > traffic_class_id;
        
}; // Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId::DirectionId


class Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId::DirectionId::TrafficClassId : public ydk::Entity
{
    public:
        TrafficClassId();
        ~TrafficClassId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf tc; //type: int8
        ydk::YLeaf green_packets; //type: uint64
        ydk::YLeaf yellow_packets; //type: uint64
        ydk::YLeaf red_packets; //type: uint64

}; // Controller::Switch::Oper::Sdr::SdrDetail::SdrId::PortStatistics::Location::PortIter::TrafficTypeId::DirectionId::TrafficClassId


class Controller::Switch::Oper::Sfp : public ydk::Entity
{
    public:
        Sfp();
        ~Sfp();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Summary; //type: Controller::Switch::Oper::Sfp::Summary
        class Detail; //type: Controller::Switch::Oper::Sfp::Detail

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Summary> summary;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail> detail;
        
}; // Controller::Switch::Oper::Sfp


class Controller::Switch::Oper::Sfp::Summary : public ydk::Entity
{
    public:
        Summary();
        ~Summary();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Sfp::Summary::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Summary::Location> > location;
        
}; // Controller::Switch::Oper::Sfp::Summary


class Controller::Switch::Oper::Sfp::Summary::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class SfpPortIter; //type: Controller::Switch::Oper::Sfp::Summary::Location::SfpPortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Summary::Location::SfpPortIter> > sfp_port_iter;
        
}; // Controller::Switch::Oper::Sfp::Summary::Location


class Controller::Switch::Oper::Sfp::Summary::Location::SfpPortIter : public ydk::Entity
{
    public:
        SfpPortIter();
        ~SfpPortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sfp_port; //type: int32
        ydk::YLeaf sfp_inserted; //type: EsdmaSwitchSfpInsertedEnum
        ydk::YLeaf sfp_controller; //type: EsdmaSwitchSfpControllerEnum
        ydk::YLeaf sfp_type; //type: EsdmaSwitchSfpTypeEnum
        ydk::YLeaf connects_to; //type: string

}; // Controller::Switch::Oper::Sfp::Summary::Location::SfpPortIter


class Controller::Switch::Oper::Sfp::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Sfp::Detail::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location> > location;
        
}; // Controller::Switch::Oper::Sfp::Detail


class Controller::Switch::Oper::Sfp::Detail::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class SfpPortIter; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter> > sfp_port_iter;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter : public ydk::Entity
{
    public:
        SfpPortIter();
        ~SfpPortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sfp_port; //type: int32
        ydk::YLeaf sfp_inserted; //type: EsdmaSwitchSfpInsertedEnum
        ydk::YLeaf sfp_type; //type: EsdmaSwitchSfpTypeEnum
        class SfpDetails; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails
        class QsfpDetails; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails> sfp_details;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails> qsfp_details;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails : public ydk::Entity
{
    public:
        SfpDetails();
        ~SfpDetails();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class SfpPortDetail; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpPortDetail
        class SfpMsaData; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpMsaData
        class SfpDiagAnalogInfo; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo
        class SfpDiagData1; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData1
        class SfpDiagUserInfo; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagUserInfo
        class SfpDiagData2; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData2

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpPortDetail> sfp_port_detail;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpMsaData> sfp_msa_data;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo> sfp_diag_analog_info;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData1> sfp_diag_data1;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagUserInfo> sfp_diag_user_info;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData2> sfp_diag_data2;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpPortDetail : public ydk::Entity
{
    public:
        SfpPortDetail();
        ~SfpPortDetail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sfp_tranceiver_type; //type: EsdmaSwitchSfpTranceiverTypeEnum
        ydk::YLeaf sfp_tranceiver_code; //type: EsdmaSwitchSfpTypeEnum
        ydk::YLeaf sfp_encoding; //type: EsdmaSfpEncodingEnum
        ydk::YLeaf sfp_bit_rate; //type: uint32
        ydk::YLeaf sfp_link_reach_9u_fiber_km; //type: uint32
        ydk::YLeaf sfp_link_reach_9u_fiber_m; //type: uint32
        ydk::YLeaf sfp_link_reach_50u_fiber_m; //type: uint32
        ydk::YLeaf sfp_link_reach_62_5u_fiber_m; //type: uint32
        ydk::YLeaf sfp_link_reach_copper_m; //type: uint32
        ydk::YLeaf sfp_vendor_name; //type: string
        ydk::YLeaf sfp_vendor_oui; //type: string
        ydk::YLeaf sfp_vendor_part_num; //type: string
        ydk::YLeaf sfp_laser_wavelength; //type: uint32
        ydk::YLeaf sfp_options; //type: SfpOptions
        ydk::YLeaf sfp_vendor_serial_num; //type: string
        ydk::YLeaf sfp_data_code; //type: string
        ydk::YLeaf sfp_diag_monitoring; //type: SfpDiagMonitoring
        ydk::YLeaf sfp_enhanced_options; //type: SfpEnhancedOptions

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpPortDetail


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpMsaData : public ydk::Entity
{
    public:
        SfpMsaData();
        ~SfpMsaData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sfp_msa_0x00; //type: string
        ydk::YLeaf sfp_msa_0x10; //type: string
        ydk::YLeaf sfp_msa_0x20; //type: string
        ydk::YLeaf sfp_msa_0x30; //type: string
        ydk::YLeaf sfp_msa_0x40; //type: string
        ydk::YLeaf sfp_msa_0x50; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpMsaData


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo : public ydk::Entity
{
    public:
        SfpDiagAnalogInfo();
        ~SfpDiagAnalogInfo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Thresholds; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds
        class RealTimeData; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::RealTimeData

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds> thresholds;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::RealTimeData> real_time_data;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds : public ydk::Entity
{
    public:
        Thresholds();
        ~Thresholds();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Temperature; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Temperature
        class Voltage; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Voltage
        class Bias; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Bias
        class TxPower; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::TxPower
        class RxPower; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::RxPower

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Temperature> temperature;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Voltage> voltage;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Bias> bias;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::TxPower> tx_power;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::RxPower> rx_power;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Temperature : public ydk::Entity
{
    public:
        Temperature();
        ~Temperature();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf temp_alarm_high; //type: string
        ydk::YLeaf temp_warning_high; //type: string
        ydk::YLeaf temp_warning_low; //type: string
        ydk::YLeaf temp_alarm_low; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Temperature


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Voltage : public ydk::Entity
{
    public:
        Voltage();
        ~Voltage();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf volt_alarm_high; //type: string
        ydk::YLeaf volt_warning_high; //type: string
        ydk::YLeaf volt_warning_low; //type: string
        ydk::YLeaf volt_alarm_low; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Voltage


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Bias : public ydk::Entity
{
    public:
        Bias();
        ~Bias();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf bias_alarm_high; //type: string
        ydk::YLeaf bias_warning_high; //type: string
        ydk::YLeaf bias_warning_low; //type: string
        ydk::YLeaf bias_alarm_low; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::Bias


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::TxPower : public ydk::Entity
{
    public:
        TxPower();
        ~TxPower();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf tx_power_alarm_high; //type: string
        ydk::YLeaf tx_power_warning_high; //type: string
        ydk::YLeaf tx_power_warning_low; //type: string
        ydk::YLeaf tx_power_alarm_low; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::TxPower


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::RxPower : public ydk::Entity
{
    public:
        RxPower();
        ~RxPower();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf rx_power_alarm_high; //type: string
        ydk::YLeaf rx_power_warning_high; //type: string
        ydk::YLeaf rx_power_warning_low; //type: string
        ydk::YLeaf rx_power_alarm_low; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::Thresholds::RxPower


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::RealTimeData : public ydk::Entity
{
    public:
        RealTimeData();
        ~RealTimeData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Current; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::RealTimeData::Current

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::RealTimeData::Current> current;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::RealTimeData


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::RealTimeData::Current : public ydk::Entity
{
    public:
        Current();
        ~Current();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf cur_temperature; //type: string
        ydk::YLeaf cur_voltage; //type: string
        ydk::YLeaf cur_bias; //type: string
        ydk::YLeaf cur_tx_power; //type: string
        ydk::YLeaf cur_rx_power; //type: string
        ydk::YLeaf optional_status_control; //type: OptionalStatusControl

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagAnalogInfo::RealTimeData::Current


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData1 : public ydk::Entity
{
    public:
        SfpDiagData1();
        ~SfpDiagData1();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class OpticalSfpDiag; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData1::OpticalSfpDiag

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData1::OpticalSfpDiag> optical_sfp_diag;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData1


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData1::OpticalSfpDiag : public ydk::Entity
{
    public:
        OpticalSfpDiag();
        ~OpticalSfpDiag();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sfp_diag_0x00; //type: string
        ydk::YLeaf sfp_diag_0x10; //type: string
        ydk::YLeaf sfp_diag_0x20; //type: string
        ydk::YLeaf sfp_diag_0x30; //type: string
        ydk::YLeaf sfp_diag_0x40; //type: string
        ydk::YLeaf sfp_diag_0x50; //type: string
        ydk::YLeaf sfp_diag_0x60; //type: string
        ydk::YLeaf sfp_diag_0x70; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData1::OpticalSfpDiag


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagUserInfo : public ydk::Entity
{
    public:
        SfpDiagUserInfo();
        ~SfpDiagUserInfo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class CiscoData; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagUserInfo::CiscoData

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagUserInfo::CiscoData> cisco_data;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagUserInfo


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagUserInfo::CiscoData : public ydk::Entity
{
    public:
        CiscoData();
        ~CiscoData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf cisco_clei_code; //type: string
        ydk::YLeaf cisco_part_number; //type: string
        ydk::YLeaf cisco_min_temperature; //type: int8
        ydk::YLeaf cisco_max_temperature; //type: int8
        ydk::YLeaf cisco_product_id; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagUserInfo::CiscoData


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData2 : public ydk::Entity
{
    public:
        SfpDiagData2();
        ~SfpDiagData2();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class OpticalSfpDiag; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData2::OpticalSfpDiag

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData2::OpticalSfpDiag> optical_sfp_diag;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData2


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData2::OpticalSfpDiag : public ydk::Entity
{
    public:
        OpticalSfpDiag();
        ~OpticalSfpDiag();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf sfp_diag_0x80; //type: string
        ydk::YLeaf sfp_diag_0x90; //type: string
        ydk::YLeaf sfp_diag_0xa0; //type: string
        ydk::YLeaf sfp_diag_0xb0; //type: string
        ydk::YLeaf sfp_diag_0xc0; //type: string
        ydk::YLeaf sfp_diag_0xd0; //type: string
        ydk::YLeaf sfp_diag_0xe0; //type: string
        ydk::YLeaf sfp_diag_0xf0; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::SfpDetails::SfpDiagData2::OpticalSfpDiag


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails : public ydk::Entity
{
    public:
        QsfpDetails();
        ~QsfpDetails();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class QsfpPageA0Data; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data
        class QsfpPageA00Data; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA00Data
        class QsfpPageA03Data; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data> qsfp_page_a0_data;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA00Data> qsfp_page_a0_0_data;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data> qsfp_page_a0_3_data;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data : public ydk::Entity
{
    public:
        QsfpPageA0Data();
        ~QsfpPageA0Data();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class QsfpRealTimeData; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData
        class QsfpRealTimeStatusFlags; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData> qsfp_real_time_data;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags> qsfp_real_time_status_flags;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData : public ydk::Entity
{
    public:
        QsfpRealTimeData();
        ~QsfpRealTimeData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class QsfpTempVolt; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTempVolt
        class QsfpTxChannelBias; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTxChannelBias
        class QsfpTxOutputPower; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTxOutputPower
        class QsfpRxInputPower; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpRxInputPower

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTempVolt> qsfp_temp_volt;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTxChannelBias> qsfp_tx_channel_bias;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTxOutputPower> qsfp_tx_output_power;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpRxInputPower> qsfp_rx_input_power;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTempVolt : public ydk::Entity
{
    public:
        QsfpTempVolt();
        ~QsfpTempVolt();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf module_monitor_temperature; //type: string
        ydk::YLeaf module_monitor_voltage; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTempVolt


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTxChannelBias : public ydk::Entity
{
    public:
        QsfpTxChannelBias();
        ~QsfpTxChannelBias();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf channel_monitor_tx1_bias; //type: string
        ydk::YLeaf channel_monitor_tx2_bias; //type: string
        ydk::YLeaf channel_monitor_tx3_bias; //type: string
        ydk::YLeaf channel_monitor_tx4_bias; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTxChannelBias


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTxOutputPower : public ydk::Entity
{
    public:
        QsfpTxOutputPower();
        ~QsfpTxOutputPower();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf channel_monitor_tx1_power; //type: string
        ydk::YLeaf channel_monitor_tx2_power; //type: string
        ydk::YLeaf channel_monitor_tx3_power; //type: string
        ydk::YLeaf channel_monitor_tx4_power; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpTxOutputPower


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpRxInputPower : public ydk::Entity
{
    public:
        QsfpRxInputPower();
        ~QsfpRxInputPower();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf channel_monitor_rx1_power; //type: string
        ydk::YLeaf channel_monitor_rx2_power; //type: string
        ydk::YLeaf channel_monitor_rx3_power; //type: string
        ydk::YLeaf channel_monitor_rx4_power; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeData::QsfpRxInputPower


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags : public ydk::Entity
{
    public:
        QsfpRealTimeStatusFlags();
        ~QsfpRealTimeStatusFlags();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class QsfpRealTimeStatus; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags::QsfpRealTimeStatus
        class QsfpRealTimeInterruptFlags; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags::QsfpRealTimeInterruptFlags

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags::QsfpRealTimeStatus> qsfp_real_time_status;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags::QsfpRealTimeInterruptFlags> qsfp_real_time_interrupt_flags;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags::QsfpRealTimeStatus : public ydk::Entity
{
    public:
        QsfpRealTimeStatus();
        ~QsfpRealTimeStatus();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf qsfp_page_select; //type: string
        ydk::YLeaf qsfp_status; //type: QsfpStatus

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags::QsfpRealTimeStatus


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags::QsfpRealTimeInterruptFlags : public ydk::Entity
{
    public:
        QsfpRealTimeInterruptFlags();
        ~QsfpRealTimeInterruptFlags();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf qsfp_int_flags_los_indicator; //type: QsfpIntFlagsLOSIndicator
        ydk::YLeaf qsfp_int_flags_fault_indicator; //type: QsfpIntFlagsFaultIndicator
        ydk::YLeaf qsfp_int_flags_temperature_indicator; //type: QsfpIntFlagsTemperatureIndicator
        ydk::YLeaf qsfp_int_flags_supply_voltage_indicator; //type: QsfpIntFlagsSupplyVoltageIndicator
        ydk::YLeaf qsfp_int_flags_rx_power_indicator; //type: QsfpIntFlagsRxPowerIndicator
        ydk::YLeaf qsfp_int_flags_tx_bias_indicator; //type: QsfpIntFlagsTxBiasIndicator

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA0Data::QsfpRealTimeStatusFlags::QsfpRealTimeInterruptFlags


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA00Data : public ydk::Entity
{
    public:
        QsfpPageA00Data();
        ~QsfpPageA00Data();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf qsfp_identifier; //type: EsdmaSwitchSfpTranceiverTypeEnum
        ydk::YLeaf qsfp_transceiver; //type: EsdmaQsfpTransceiverEnum
        ydk::YLeaf qsfp_extended_transceiver; //type: string
        ydk::YLeaf qsfp_encoding; //type: EsdmaSfpEncodingEnum
        ydk::YLeaf qsfp_bit_rate; //type: uint32
        ydk::YLeaf qsfp_link_length_standard_sm_fiber_km; //type: uint32
        ydk::YLeaf qsfp_link_length_om3_50u_fiber_m; //type: uint32
        ydk::YLeaf qsfp_link_length_om2_50u_fiber_m; //type: uint32
        ydk::YLeaf qsfp_link_length_om1_62_5u_fiber_m; //type: uint32
        ydk::YLeaf qsfp_link_length_copper_cable_assembly_fiber_m; //type: uint32
        ydk::YLeaf qsfp_device_tech; //type: string
        ydk::YLeaf qsfp_vendor_name; //type: string
        ydk::YLeaf qsfp_vendor_oui; //type: string
        ydk::YLeaf qsfp_vendor_part_num; //type: string
        ydk::YLeaf qsfp_laser_wavelength; //type: uint32
        ydk::YLeaf qsfp_wavelength_tolerance; //type: uint32
        ydk::YLeaf qsfp_max_case_temperature; //type: string
        ydk::YLeaf qsfp_option_value_rx_amplitude; //type: QsfpOptionValueRxAmplitude
        ydk::YLeaf qsfp_option_values_indicator; //type: QsfpOptionValuesIndicator
        ydk::YLeaf qsfp_vendor_serial_num; //type: string
        ydk::YLeaf qsfp_date_code; //type: string
        ydk::YLeaf qsfp_diag_monitoring_type; //type: QsfpDiagMonitoringType

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA00Data


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data : public ydk::Entity
{
    public:
        QsfpPageA03Data();
        ~QsfpPageA03Data();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class QsfpTemperature; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTemperature
        class QsfpVoltage; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpVoltage
        class QsfpTxBias; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTxBias
        class QsfpTxPower; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTxPower
        class QsfpRxPower; //type: Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpRxPower

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTemperature> qsfp_temperature;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpVoltage> qsfp_voltage;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTxBias> qsfp_tx_bias;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTxPower> qsfp_tx_power;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpRxPower> qsfp_rx_power;
        
}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTemperature : public ydk::Entity
{
    public:
        QsfpTemperature();
        ~QsfpTemperature();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf qsfp_temp_alarm_high; //type: string
        ydk::YLeaf qsfp_temp_warning_high; //type: string
        ydk::YLeaf qsfp_temp_warning_low; //type: string
        ydk::YLeaf qsfp_temp_alarm_low; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTemperature


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpVoltage : public ydk::Entity
{
    public:
        QsfpVoltage();
        ~QsfpVoltage();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf qsfp_volt_alarm_high; //type: string
        ydk::YLeaf qsfp_volt_warning_high; //type: string
        ydk::YLeaf qsfp_volt_warning_low; //type: string
        ydk::YLeaf qsfp_volt_alarm_low; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpVoltage


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTxBias : public ydk::Entity
{
    public:
        QsfpTxBias();
        ~QsfpTxBias();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf qsfp_tx_bias_alarm_high; //type: string
        ydk::YLeaf qsfp_tx_bias_warning_high; //type: string
        ydk::YLeaf qsfp_tx_bias_warning_low; //type: string
        ydk::YLeaf qsfp_tx_bias_alarm_low; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTxBias


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTxPower : public ydk::Entity
{
    public:
        QsfpTxPower();
        ~QsfpTxPower();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf qsfp_tx_power_alarm_high; //type: string
        ydk::YLeaf qsfp_tx_power_warning_high; //type: string
        ydk::YLeaf qsfp_tx_power_warning_low; //type: string
        ydk::YLeaf qsfp_tx_power_alarm_low; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpTxPower


class Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpRxPower : public ydk::Entity
{
    public:
        QsfpRxPower();
        ~QsfpRxPower();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf qsfp_rx_power_alarm_high; //type: string
        ydk::YLeaf qsfp_rx_power_warning_high; //type: string
        ydk::YLeaf qsfp_rx_power_warning_low; //type: string
        ydk::YLeaf qsfp_rx_power_alarm_low; //type: string

}; // Controller::Switch::Oper::Sfp::Detail::Location::SfpPortIter::QsfpDetails::QsfpPageA03Data::QsfpRxPower


class Controller::Switch::Oper::Mlap : public ydk::Entity
{
    public:
        Mlap();
        ~Mlap();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Reachable; //type: Controller::Switch::Oper::Mlap::Reachable
        class Detail; //type: Controller::Switch::Oper::Mlap::Detail
        class Statistics; //type: Controller::Switch::Oper::Mlap::Statistics
        class SummaryData; //type: Controller::Switch::Oper::Mlap::SummaryData
        class Debug; //type: Controller::Switch::Oper::Mlap::Debug
        class Trace; //type: Controller::Switch::Oper::Mlap::Trace

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Reachable> reachable;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Detail> detail;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Statistics> statistics;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::SummaryData> summary_data;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Debug> debug;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Trace> > trace;
        
}; // Controller::Switch::Oper::Mlap


class Controller::Switch::Oper::Mlap::Reachable : public ydk::Entity
{
    public:
        Reachable();
        ~Reachable();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Mlap::Reachable::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Reachable::Location> > location;
        
}; // Controller::Switch::Oper::Mlap::Reachable


class Controller::Switch::Oper::Mlap::Reachable::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum

}; // Controller::Switch::Oper::Mlap::Reachable::Location


class Controller::Switch::Oper::Mlap::Detail : public ydk::Entity
{
    public:
        Detail();
        ~Detail();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Mlap::Detail::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Detail::Location> > location;
        
}; // Controller::Switch::Oper::Mlap::Detail


class Controller::Switch::Oper::Mlap::Detail::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class PortIter; //type: Controller::Switch::Oper::Mlap::Detail::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Detail::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Mlap::Detail::Location


class Controller::Switch::Oper::Mlap::Detail::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        class GenData; //type: Controller::Switch::Oper::Mlap::Detail::Location::PortIter::GenData
        class MlapInternalDetails; //type: Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapInternalDetails
        class MlapExternalDetails; //type: Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Detail::Location::PortIter::GenData> gen_data;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapInternalDetails> mlap_internal_details;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails> mlap_external_details;
        
}; // Controller::Switch::Oper::Mlap::Detail::Location::PortIter


class Controller::Switch::Oper::Mlap::Detail::Location::PortIter::GenData : public ydk::Entity
{
    public:
        GenData();
        ~GenData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf serial_num; //type: string
        ydk::YLeaf connects_to; //type: string
        ydk::YLeaf phys_state; //type: EsdmaSwitchPortState
        ydk::YLeaf admin_state; //type: EsdmaSwitchPortState
        ydk::YLeaf protocol_state; //type: MlapStateEnum
        ydk::YLeaf forwarding; //type: SwitchForwardingState
        ydk::YLeaf mlap_protocol; //type: MlapProtocolEnum
        ydk::YLeaf protocol_pkt_sent; //type: uint64
        ydk::YLeaf protocol_pkt_recv; //type: uint64
        ydk::YLeaf protocol_set_color_pkts_sent; //type: uint64
        ydk::YLeaf protocol_set_color_pkts_recv; //type: uint64
        ydk::YLeaf protocol_send_error; //type: uint64
        ydk::YLeaf protocol_recv_error; //type: uint64
        ydk::YLeaf protocol_state_changes; //type: uint32

}; // Controller::Switch::Oper::Mlap::Detail::Location::PortIter::GenData


class Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapInternalDetails : public ydk::Entity
{
    public:
        MlapInternalDetails();
        ~MlapInternalDetails();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class Info; //type: Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapInternalDetails::Info

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapInternalDetails::Info> info;
        
}; // Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapInternalDetails


class Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapInternalDetails::Info : public ydk::Entity
{
    public:
        Info();
        ~Info();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port_owner; //type: EsdmaCpu
        ydk::YLeaf current_active_owner; //type: EsdmaCpu
        ydk::YLeaf mlap_peer_flags; //type: MlapPeerFlags
        ydk::YLeaf mlap_peer_idle_count; //type: uint32
        ydk::YLeaf my_connection_active_mask; //type: uint64
        ydk::YLeaf peer_connection_active_mask; //type: uint64
        ydk::YLeaf endpoint_card_type; //type: MlapEpType
        ydk::YLeaf endpoint_mac_address; //type: string

}; // Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapInternalDetails::Info


class Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails : public ydk::Entity
{
    public:
        MlapExternalDetails();
        ~MlapExternalDetails();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        class LocalStateInformation; //type: Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::LocalStateInformation
        class PeerStateInformation; //type: Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::PeerStateInformation
        class PeerOtherLinkStateInformation; //type: Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::PeerOtherLinkStateInformation

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::LocalStateInformation> local_state_information;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::PeerStateInformation> peer_state_information;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::PeerOtherLinkStateInformation> peer_other_link_state_information;
        
}; // Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails


class Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::LocalStateInformation : public ydk::Entity
{
    public:
        LocalStateInformation();
        ~LocalStateInformation();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf valid; //type: boolean
        ydk::YLeaf chassis_type; //type: EsdmaRackTypeEnum
        ydk::YLeaf endpoint_type; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf endpoint_slot_number; //type: uint32
        ydk::YLeaf endpoint_switch_number; //type: uint32
        ydk::YLeaf endpoint_switch_port_number; //type: uint32
        ydk::YLeaf endpoint_chassis_serial_number; //type: string
        ydk::YLeaf mlap_state; //type: MlapStateEnum
        ydk::YLeaf inter_fcc_sw_port; //type: boolean
        ydk::YLeaf fcc_sw_indirectly_reachable; //type: boolean

}; // Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::LocalStateInformation


class Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::PeerStateInformation : public ydk::Entity
{
    public:
        PeerStateInformation();
        ~PeerStateInformation();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf valid; //type: boolean
        ydk::YLeaf chassis_type; //type: EsdmaRackTypeEnum
        ydk::YLeaf endpoint_type; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf endpoint_slot_number; //type: uint32
        ydk::YLeaf endpoint_switch_number; //type: uint32
        ydk::YLeaf endpoint_switch_port_number; //type: uint32
        ydk::YLeaf endpoint_chassis_serial_number; //type: string
        ydk::YLeaf mlap_state; //type: MlapStateEnum
        ydk::YLeaf inter_fcc_sw_port; //type: boolean
        ydk::YLeaf fcc_sw_indirectly_reachable; //type: boolean

}; // Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::PeerStateInformation


class Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::PeerOtherLinkStateInformation : public ydk::Entity
{
    public:
        PeerOtherLinkStateInformation();
        ~PeerOtherLinkStateInformation();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf valid; //type: boolean
        ydk::YLeaf chassis_type; //type: EsdmaRackTypeEnum
        ydk::YLeaf endpoint_type; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf endpoint_slot_number; //type: uint32
        ydk::YLeaf endpoint_switch_number; //type: uint32
        ydk::YLeaf endpoint_switch_port_number; //type: uint32
        ydk::YLeaf endpoint_chassis_serial_number; //type: string
        ydk::YLeaf mlap_state; //type: MlapStateEnum
        ydk::YLeaf inter_fcc_sw_port; //type: boolean
        ydk::YLeaf fcc_sw_indirectly_reachable; //type: boolean

}; // Controller::Switch::Oper::Mlap::Detail::Location::PortIter::MlapExternalDetails::PeerOtherLinkStateInformation


class Controller::Switch::Oper::Mlap::Statistics : public ydk::Entity
{
    public:
        Statistics();
        ~Statistics();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Mlap::Statistics::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Statistics::Location> > location;
        
}; // Controller::Switch::Oper::Mlap::Statistics


class Controller::Switch::Oper::Mlap::Statistics::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf serial_num; //type: string
        class PortIter; //type: Controller::Switch::Oper::Mlap::Statistics::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Statistics::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Mlap::Statistics::Location


class Controller::Switch::Oper::Mlap::Statistics::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        ydk::YLeaf protocol_state; //type: MlapStateEnum
        ydk::YLeaf protocol_state_changes; //type: uint32
        ydk::YLeaf protocol_pkt_sent; //type: uint64
        ydk::YLeaf protocol_pkt_recv; //type: uint64
        ydk::YLeaf protocol_set_color_pkts_sent; //type: uint64
        ydk::YLeaf protocol_set_color_pkts_recv; //type: uint64
        ydk::YLeaf protocol_send_error; //type: uint64
        ydk::YLeaf protocol_recv_error; //type: uint64
        ydk::YLeaf connects_to; //type: string

}; // Controller::Switch::Oper::Mlap::Statistics::Location::PortIter


class Controller::Switch::Oper::Mlap::SummaryData : public ydk::Entity
{
    public:
        SummaryData();
        ~SummaryData();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Mlap::SummaryData::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::SummaryData::Location> > location;
        
}; // Controller::Switch::Oper::Mlap::SummaryData


class Controller::Switch::Oper::Mlap::SummaryData::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf serial_num; //type: string
        class PortIter; //type: Controller::Switch::Oper::Mlap::SummaryData::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::SummaryData::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::Mlap::SummaryData::Location


class Controller::Switch::Oper::Mlap::SummaryData::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32
        ydk::YLeaf phys_state; //type: EsdmaSwitchPortState
        ydk::YLeaf admin_state; //type: EsdmaSwitchPortState
        ydk::YLeaf protocol_state; //type: MlapStateEnum
        ydk::YLeaf forwarding; //type: SwitchForwardingState
        ydk::YLeaf mlap_protocol; //type: MlapProtocolEnum
        ydk::YLeaf connects_to; //type: string

}; // Controller::Switch::Oper::Mlap::SummaryData::Location::PortIter


class Controller::Switch::Oper::Mlap::Debug : public ydk::Entity
{
    public:
        Debug();
        ~Debug();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Counters; //type: Controller::Switch::Oper::Mlap::Debug::Counters

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Debug::Counters> counters;
        
}; // Controller::Switch::Oper::Mlap::Debug


class Controller::Switch::Oper::Mlap::Debug::Counters : public ydk::Entity
{
    public:
        Counters();
        ~Counters();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Mlap::Debug::Counters::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Debug::Counters::Location> > location;
        
}; // Controller::Switch::Oper::Mlap::Debug::Counters


class Controller::Switch::Oper::Mlap::Debug::Counters::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class Counters_; //type: Controller::Switch::Oper::Mlap::Debug::Counters::Location::Counters_

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Debug::Counters::Location::Counters_> counters;
        
}; // Controller::Switch::Oper::Mlap::Debug::Counters::Location


class Controller::Switch::Oper::Mlap::Debug::Counters::Location::Counters_ : public ydk::Entity
{
    public:
        Counters_();
        ~Counters_();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf eval_all_links_called; //type: uint64
        ydk::YLeaf timer_event_queued; //type: uint64
        ydk::YLeaf rx_packet_event_queued; //type: uint64
        ydk::YLeaf eval_all_links_queued; //type: uint64
        ydk::YLeaf link_status_queued; //type: uint64
        ydk::YLeaf admin_status_queued; //type: uint64
        ydk::YLeaf fwd_status_queued; //type: uint64
        ydk::YLeaf current_fifo_depth; //type: uint64
        ydk::YLeaf max_fifo_depth; //type: uint64
        ydk::YLeaf vlan_color_changes; //type: uint32
        ydk::YLeaf current_mlap_timeout_ms_interval; //type: uint32
        ydk::YLeaf aging_debug_enabled; //type: boolean
        ydk::YLeaf trace_verbosity; //type: MlapTraceVerbosity

}; // Controller::Switch::Oper::Mlap::Debug::Counters::Location::Counters_


class Controller::Switch::Oper::Mlap::Trace : public ydk::Entity
{
    public:
        Trace();
        ~Trace();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf buffer; //type: string
        class Location; //type: Controller::Switch::Oper::Mlap::Trace::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Trace::Location> > location;
        
}; // Controller::Switch::Oper::Mlap::Trace


class Controller::Switch::Oper::Mlap::Trace::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class AllOptions; //type: Controller::Switch::Oper::Mlap::Trace::Location::AllOptions

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Trace::Location::AllOptions> > all_options;
        
}; // Controller::Switch::Oper::Mlap::Trace::Location


class Controller::Switch::Oper::Mlap::Trace::Location::AllOptions : public ydk::Entity
{
    public:
        AllOptions();
        ~AllOptions();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf option; //type: string
        class TraceBlocks; //type: Controller::Switch::Oper::Mlap::Trace::Location::AllOptions::TraceBlocks

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Mlap::Trace::Location::AllOptions::TraceBlocks> > trace_blocks;
        
}; // Controller::Switch::Oper::Mlap::Trace::Location::AllOptions


class Controller::Switch::Oper::Mlap::Trace::Location::AllOptions::TraceBlocks : public ydk::Entity
{
    public:
        TraceBlocks();
        ~TraceBlocks();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf data; //type: string

}; // Controller::Switch::Oper::Mlap::Trace::Location::AllOptions::TraceBlocks


class Controller::Switch::Oper::SwitchDebugCont : public ydk::Entity
{
    public:
        SwitchDebugCont();
        ~SwitchDebugCont();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Debug; //type: Controller::Switch::Oper::SwitchDebugCont::Debug

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::SwitchDebugCont::Debug> debug;
        
}; // Controller::Switch::Oper::SwitchDebugCont


class Controller::Switch::Oper::SwitchDebugCont::Debug : public ydk::Entity
{
    public:
        Debug();
        ~Debug();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Counters; //type: Controller::Switch::Oper::SwitchDebugCont::Debug::Counters

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::SwitchDebugCont::Debug::Counters> counters;
        
}; // Controller::Switch::Oper::SwitchDebugCont::Debug


class Controller::Switch::Oper::SwitchDebugCont::Debug::Counters : public ydk::Entity
{
    public:
        Counters();
        ~Counters();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location> > location;
        
}; // Controller::Switch::Oper::SwitchDebugCont::Debug::Counters


class Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class Counters_; //type: Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location::Counters_

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location::Counters_> counters;
        
}; // Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location


class Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location::Counters_ : public ydk::Entity
{
    public:
        Counters_();
        ~Counters_();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf phy_polling_enabled; //type: boolean
        ydk::YLeaf tx_thread_wdog_cnt; //type: uint64
        ydk::YLeaf rx_thread_wdog_cnt; //type: uint64
        ydk::YLeaf task_lock_longest_wait_time; //type: uint64
        ydk::YLeaf task_lock_longest_wait_event; //type: uint32
        ydk::YLeaf task_lock_longest_held_time; //type: uint64
        ydk::YLeaf task_lock_longest_held_event; //type: uint32
        ydk::YLeaf task_unlock_longest_wait_time; //type: uint64
        ydk::YLeaf task_unlock_longest_wait_event; //type: uint32
        ydk::YLeaf dma_max_rx_dequeued_per_int; //type: uint64
        ydk::YLeaf dma_rx_packets_dequeued; //type: uint64
        ydk::YLeaf dma_rx_packet_dequeue_errors; //type: uint64
        ydk::YLeaf dma_tx_packets_queued; //type: uint64
        ydk::YLeaf dma_tx_packets_completed; //type: uint64
        ydk::YLeaf dma_tx_packet_no_msg_errors; //type: uint64
        ydk::YLeaf dma_tx_packet_msg_too_big_errors; //type: uint64
        ydk::YLeaf dma_tx_packet_no_buffer_errors; //type: uint64
        ydk::YLeaf dma_tx_packet_queue_errors; //type: uint64
        ydk::YLeaf dma_tx_packet_completion_errors; //type: uint64
        ydk::YLeaf dma_max_tx_freed_per_int; //type: uint64
        ydk::YLeaf dma_tx_buf_alloc_count; //type: uint64
        ydk::YLeaf dma_tx_buf_free_count; //type: uint64
        class SwitchCore; //type: Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location::Counters_::SwitchCore

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location::Counters_::SwitchCore> > switch_core;
        
}; // Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location::Counters_


class Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location::Counters_::SwitchCore : public ydk::Entity
{
    public:
        SwitchCore();
        ~SwitchCore();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf core; //type: uint8
        ydk::YLeaf msi_count; //type: uint64
        ydk::YLeaf aer_count; //type: uint64
        ydk::YLeaf hp_count; //type: uint64
        ydk::YLeaf wdog_count; //type: uint64
        ydk::YLeaf core_task_lock_longest_wait_time; //type: uint64
        ydk::YLeaf core_task_lock_longest_held_time; //type: uint64
        ydk::YLeaf core_task_unlock_longest_wait_time; //type: uint64

}; // Controller::Switch::Oper::SwitchDebugCont::Debug::Counters::Location::Counters_::SwitchCore


class Controller::Switch::Oper::Esd : public ydk::Entity
{
    public:
        Esd();
        ~Esd();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Instance; //type: Controller::Switch::Oper::Esd::Instance

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Esd::Instance> > instance;
        
}; // Controller::Switch::Oper::Esd


class Controller::Switch::Oper::Esd::Instance : public ydk::Entity
{
    public:
        Instance();
        ~Instance();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf process_name; //type: string
        class Trace; //type: Controller::Switch::Oper::Esd::Instance::Trace

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Esd::Instance::Trace> > trace;
        
}; // Controller::Switch::Oper::Esd::Instance


class Controller::Switch::Oper::Esd::Instance::Trace : public ydk::Entity
{
    public:
        Trace();
        ~Trace();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf buffer; //type: string
        class Location; //type: Controller::Switch::Oper::Esd::Instance::Trace::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Esd::Instance::Trace::Location> > location;
        
}; // Controller::Switch::Oper::Esd::Instance::Trace


class Controller::Switch::Oper::Esd::Instance::Trace::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class AllOptions; //type: Controller::Switch::Oper::Esd::Instance::Trace::Location::AllOptions

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Esd::Instance::Trace::Location::AllOptions> > all_options;
        
}; // Controller::Switch::Oper::Esd::Instance::Trace::Location


class Controller::Switch::Oper::Esd::Instance::Trace::Location::AllOptions : public ydk::Entity
{
    public:
        AllOptions();
        ~AllOptions();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf option; //type: string
        class TraceBlocks; //type: Controller::Switch::Oper::Esd::Instance::Trace::Location::AllOptions::TraceBlocks

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Esd::Instance::Trace::Location::AllOptions::TraceBlocks> > trace_blocks;
        
}; // Controller::Switch::Oper::Esd::Instance::Trace::Location::AllOptions


class Controller::Switch::Oper::Esd::Instance::Trace::Location::AllOptions::TraceBlocks : public ydk::Entity
{
    public:
        TraceBlocks();
        ~TraceBlocks();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf data; //type: string

}; // Controller::Switch::Oper::Esd::Instance::Trace::Location::AllOptions::TraceBlocks


class Controller::Switch::Oper::MgmtAgent : public ydk::Entity
{
    public:
        MgmtAgent();
        ~MgmtAgent();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Esdma; //type: Controller::Switch::Oper::MgmtAgent::Esdma
        class Connections; //type: Controller::Switch::Oper::MgmtAgent::Connections

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::MgmtAgent::Esdma> esdma;
        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::MgmtAgent::Connections> connections;
        
}; // Controller::Switch::Oper::MgmtAgent


class Controller::Switch::Oper::MgmtAgent::Esdma : public ydk::Entity
{
    public:
        Esdma();
        ~Esdma();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Trace; //type: Controller::Switch::Oper::MgmtAgent::Esdma::Trace

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::MgmtAgent::Esdma::Trace> > trace;
        
}; // Controller::Switch::Oper::MgmtAgent::Esdma


class Controller::Switch::Oper::MgmtAgent::Esdma::Trace : public ydk::Entity
{
    public:
        Trace();
        ~Trace();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf buffer; //type: string
        class Location; //type: Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location> > location;
        
}; // Controller::Switch::Oper::MgmtAgent::Esdma::Trace


class Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf location_name; //type: string
        class AllOptions; //type: Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location::AllOptions

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location::AllOptions> > all_options;
        
}; // Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location


class Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location::AllOptions : public ydk::Entity
{
    public:
        AllOptions();
        ~AllOptions();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf option; //type: string
        class TraceBlocks; //type: Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location::AllOptions::TraceBlocks

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location::AllOptions::TraceBlocks> > trace_blocks;
        
}; // Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location::AllOptions


class Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location::AllOptions::TraceBlocks : public ydk::Entity
{
    public:
        TraceBlocks();
        ~TraceBlocks();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf data; //type: string

}; // Controller::Switch::Oper::MgmtAgent::Esdma::Trace::Location::AllOptions::TraceBlocks


class Controller::Switch::Oper::MgmtAgent::Connections : public ydk::Entity
{
    public:
        Connections();
        ~Connections();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf sdr_nm_num_clients; //type: uint32
        ydk::YLeaf esd_client_num_clients; //type: uint32
        ydk::YLeaf mlap_client_num_clients; //type: uint32
        class EsdmaInfo; //type: Controller::Switch::Oper::MgmtAgent::Connections::EsdmaInfo
        class SdrNmClientId; //type: Controller::Switch::Oper::MgmtAgent::Connections::SdrNmClientId
        class EsdClientId; //type: Controller::Switch::Oper::MgmtAgent::Connections::EsdClientId
        class MlapClientId; //type: Controller::Switch::Oper::MgmtAgent::Connections::MlapClientId

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::MgmtAgent::Connections::EsdmaInfo> esdma_info;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::MgmtAgent::Connections::SdrNmClientId> > sdr_nm_client_id;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::MgmtAgent::Connections::EsdClientId> > esd_client_id;
        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::MgmtAgent::Connections::MlapClientId> > mlap_client_id;
        
}; // Controller::Switch::Oper::MgmtAgent::Connections


class Controller::Switch::Oper::MgmtAgent::Connections::EsdmaInfo : public ydk::Entity
{
    public:
        EsdmaInfo();
        ~EsdmaInfo();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf active_esdma_address; //type: string

}; // Controller::Switch::Oper::MgmtAgent::Connections::EsdmaInfo


class Controller::Switch::Oper::MgmtAgent::Connections::SdrNmClientId : public ydk::Entity
{
    public:
        SdrNmClientId();
        ~SdrNmClientId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf sdr_nm_ip_address; //type: string
        ydk::YLeaf sdr_nm_port_num; //type: uint16

}; // Controller::Switch::Oper::MgmtAgent::Connections::SdrNmClientId


class Controller::Switch::Oper::MgmtAgent::Connections::EsdClientId : public ydk::Entity
{
    public:
        EsdClientId();
        ~EsdClientId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf esd_client_ip_address; //type: string
        ydk::YLeaf esd_client_port_num; //type: uint16
        ydk::YLeaf esd_client_location; //type: string
        ydk::YLeaf esd_client_switch_info_cached; //type: EsdmaSwitchYesNoEnum
        ydk::YLeaf esd_client_sdr_info_cached; //type: EsdmaSwitchYesNoEnum

}; // Controller::Switch::Oper::MgmtAgent::Connections::EsdClientId


class Controller::Switch::Oper::MgmtAgent::Connections::MlapClientId : public ydk::Entity
{
    public:
        MlapClientId();
        ~MlapClientId();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf mlap_client_ip_address; //type: string
        ydk::YLeaf mlap_client_port_num; //type: uint16
        ydk::YLeaf mlap_client_location; //type: string
        ydk::YLeaf mlap_client_switch_info_cached; //type: EsdmaSwitchYesNoEnum

}; // Controller::Switch::Oper::MgmtAgent::Connections::MlapClientId


class Controller::Switch::Oper::PortState : public ydk::Entity
{
    public:
        PortState();
        ~PortState();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::PortState::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::PortState::Location> > location;
        
}; // Controller::Switch::Oper::PortState


class Controller::Switch::Oper::PortState::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        class PortIter; //type: Controller::Switch::Oper::PortState::Location::PortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::PortState::Location::PortIter> > port_iter;
        
}; // Controller::Switch::Oper::PortState::Location


class Controller::Switch::Oper::PortState::Location::PortIter : public ydk::Entity
{
    public:
        PortIter();
        ~PortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf port; //type: int32

}; // Controller::Switch::Oper::PortState::Location::PortIter


class Controller::Switch::Oper::Trunk : public ydk::Entity
{
    public:
        Trunk();
        ~Trunk();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Location; //type: Controller::Switch::Oper::Trunk::Location

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Trunk::Location> > location;
        
}; // Controller::Switch::Oper::Trunk


class Controller::Switch::Oper::Trunk::Location : public ydk::Entity
{
    public:
        Location();
        ~Location();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        ydk::YLeaf rack; //type: EsdmaRackNumEnum
        ydk::YLeaf card; //type: EsdmaCpu
        ydk::YLeaf switch_id; //type: EsdmaSwitchTypeEnum
        ydk::YLeaf trunk_member_count; //type: uint32
        ydk::YLeaf trunk_name; //type: string
        class TrunkMemberPortIter; //type: Controller::Switch::Oper::Trunk::Location::TrunkMemberPortIter

        std::vector<std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::Switch::Oper::Trunk::Location::TrunkMemberPortIter> > trunk_member_port_iter;
        
}; // Controller::Switch::Oper::Trunk::Location


class Controller::Switch::Oper::Trunk::Location::TrunkMemberPortIter : public ydk::Entity
{
    public:
        TrunkMemberPortIter();
        ~TrunkMemberPortIter();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;

        ydk::YLeaf trunk_member_port; //type: uint32
        ydk::YLeaf trunk_member_status; //type: EsdmaTrunkMemberStatus

}; // Controller::Switch::Oper::Trunk::Location::TrunkMemberPortIter


class Controller::FabricAction : public ydk::Entity
{
    public:
        FabricAction();
        ~FabricAction();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Fabric; //type: Controller::FabricAction::Fabric

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::FabricAction::Fabric> fabric;
        
}; // Controller::FabricAction


class Controller::FabricAction::Fabric : public ydk::Entity
{
    public:
        Fabric();
        ~Fabric();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;

        class Ppu; //type: Controller::FabricAction::Fabric::Ppu

        std::shared_ptr<cisco_ios_xr::Cisco_IOS_XR_sysadmin_controllers::Controller::FabricAction::Fabric::Ppu> ppu;
        
}; // Controller::FabricAction::Fabric


class Controller::FabricAction::Fabric::Ppu : public ydk::Entity
{
    public:
        Ppu();
        ~Ppu();

        bool has_data() const override;
        bool has_operation() const override;
        std::vector<std::pair<std::string, ydk::LeafData> > get_name_leaf_data() const override;
        std::string get_segment_path() const override;
        std::shared_ptr<ydk::Entity> get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, const std::string & value, const std::string & name_space, const std::string & name_space_prefix) override;
        void set_filter(const std::string & value_path, ydk::YFilter yfliter) override;
        std::map<std::string, std::shared_ptr<ydk::Entity>> get_children() const override;
        bool has_leaf_or_child_of_name(const std::string & name) const override;
        std::string get_absolute_path() const override;


}; // Controller::FabricAction::Fabric::Ppu


}
}

#endif /* _CISCO_IOS_XR_SYSADMIN_CONTROLLERS_ */

